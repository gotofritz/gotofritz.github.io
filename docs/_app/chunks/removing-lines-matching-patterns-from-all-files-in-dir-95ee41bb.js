import{S as Ra,i as Ca,s as Fa,e as l,t as i,k as m,c as o,a as r,h as s,d as a,m as c,b as n,g as f,I as t,E as $t}from"./index-e78f36eb.js";function Ba(La){let E,qe,N,Ne,Ue,ke,b,y,W,$e,Te,O,Aa=`<code class="language-sh">find /PTH/TO/FILES/*.txt -type f | \\
  xargs sed -i.bak -f /PTH/TO/SED_RULES.sed</code>`,De,U,je,Se,k,T,Y,We,ge,h,Z,Ye,G,Ze,J,Ge,K,Je,Q,Ke,V,Qe,X,Ve,ee,Xe,te,et,ae,tt,le,at,oe,lt,re,ot,ie,rt,Le,w,D,se,it,ne,st,nt,Ae,x,R,dt,ft,de,ht,mt,fe,ct,pt,Pe,S,g,he,ut,ze,$,vt,Ie,C,Pa=`<code class="language-sh">$ sed &#39;s/[[:blank:]]*$//&#39; some-text-file.txt
1st line of some-text-file.txt
2nd line
....</code>`,He,L,A,me,xt,Oe,u,Et,ce,wt,_t,pe,bt,yt,ue,kt,Tt,ve,Dt,St,Re,F,za=`<code class="language-sh"># illegal-pizza-toppings.sed
/pineapple/d
/ketchup/d

# pizzas.txt
margherita: tomato, mozzarella
hawai: tomato, mozzarella, ham pineapple
fiorentina:  tomato, mozzarella, spinach, egg

$ sed -f illegal-pizza-toppings.sed pizzas.txt
margherita: tomato, mozzarella
fiorentina: tomato, mozzarella, spinach, egg</code>`,Ce,P,z,xe,gt,Fe,v,Lt,j,At,Pt,Ee,zt,It,we,Ht,Ot,Be,I,_e,B,Rt,Ct,be,M,Ft;return{c(){E=l("p"),qe=i("A typical use case was when "),N=l("a"),Ne=i("rebuilding this site with Sveltekit"),Ue=i(". I had a bunch of markdown files who had a been through a lot of migrations from tool to tool. The frontmatter had gotten messy, it was interfering with Sveltekit."),ke=m(),b=l("h2"),y=l("a"),W=l("span"),$e=i("TL;DR: the command"),Te=m(),O=l("pre"),De=m(),U=l("p"),je=i("Read further for more explanations"),Se=m(),k=l("h3"),T=l("a"),Y=l("span"),We=i("Breaking down the command"),ge=m(),h=l("dl"),Z=l("dt"),Ye=i("find /PTH/TO/FILES/*.txt"),G=l("dd"),Ze=i("use the `find` command on all files that match `/PTH/TO/FILES/*.txt`"),J=l("dt"),Ge=i("-type f"),K=l("dd"),Je=i("ignore directories - an extra precaution which you may not need"),Q=l("dt"),Ke=i("|"),V=l("dd"),Qe=i("every filename you find will be passed to..."),X=l("dt"),Ve=i("xargs"),ee=l("dd"),Xe=i("transform what it receives (i.e., the filename) into a CLI argument for ..."),te=l("dt"),et=i("sed"),ae=l("dd"),tt=i("So that will be equivalent to `sed filename1`, `sed filename2`, ..."),le=l("dt"),at=i("-i.bak"),oe=l("dd"),lt=i("`-i` will make the changes in place. Macs force you to create a backup file, for your own protection. In this case they will be called `filename1.bak` `filename2.bak` ..."),re=l("dt"),ot=i("-f /PTH/TO/SED_RULES.sed"),ie=l("dd"),rt=i("Loads a list of scripts to apply from SED_RULES.sed. The file can be named everything, doesn't have to end with .sed"),Le=m(),w=l("h2"),D=l("a"),se=l("span"),it=i("What exactly "),ne=l("em"),st=i("is"),nt=i(" sed?"),Ae=m(),x=l("p"),R=l("a"),dt=i("Sed"),ft=i(" is a stream editor. A stream editor goes through a text file once, from top to bottom one line at the time. As it goes through it applies a sequence of "),de=l("em"),ht=i("scripts"),mt=i(", and then the text comes out at the other end. The scripts can be very short, and look pretty much like regular expressions. For example "),fe=l("code"),ct=i("s/he/they/g"),pt=i(". They can rearrange the line of text, delete it or apply other transforms. And also caputre some of the text and accumulate it until the end."),Pe=m(),S=l("h2"),g=l("a"),he=l("span"),ut=i("Example: remove all blanks from end of each line"),ze=m(),$=l("p"),vt=i("For small jobs you pass those scripts as command line arguments. For example the one liner below will remove all blanks at the end of each line, and spit out the output to the CLI."),Ie=m(),C=l("pre"),He=m(),L=l("h2"),A=l("a"),me=l("span"),xt=i("Example: load a list of delete commands from a file"),Oe=m(),u=l("p"),Et=i("But if you want to reuse the patterns you can put them in a text file, one per line, and tell sed to load them from there. That can also be useufl if there are too many patterns for the CLI and writing them all gets awkward. You can pass the file containing the patters with the "),ce=l("code"),wt=i("-f"),_t=i(" flag. The example below will apply "),pe=l("code"),bt=i("illegal-pizza-toppings.sed"),yt=i(" to the text stream. "),ue=l("code"),kt=i("/something/d"),Tt=i(" is the sed command which will delete the whole line if "),ve=l("code"),Dt=i("something"),St=i(" is in it."),Re=m(),F=l("pre"),Ce=m(),P=l("h2"),z=l("a"),xe=l("span"),gt=i("Prior art"),Fe=m(),v=l("p"),Lt=i("As always there is more on "),j=l("abbr"),At=i("SO"),Pt=i(". For example you could achieve the same with "),Ee=l("code"),zt=i("grep -v xxx"),It=i(", which passes the lines who "),we=l("em"),Ht=i("do not"),Ot=i(" match xxx. But the command above is my favourite"),Be=m(),I=l("ul"),_e=l("li"),B=l("a"),Rt=i("sed - delete lines taking patterns from external file"),Ct=m(),be=l("li"),M=l("a"),Ft=i("Remove line of text from multiple files in Linux"),this.h()},l(e){E=o(e,"P",{});var d=r(E);qe=s(d,"A typical use case was when "),N=o(d,"A",{href:!0});var jt=r(N);Ne=s(jt,"rebuilding this site with Sveltekit"),jt.forEach(a),Ue=s(d,". I had a bunch of markdown files who had a been through a lot of migrations from tool to tool. The frontmatter had gotten messy, it was interfering with Sveltekit."),d.forEach(a),ke=c(e),b=o(e,"H2",{id:!0});var Bt=r(b);y=o(Bt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wt=r(y);W=o(Wt,"SPAN",{class:!0}),r(W).forEach(a),Wt.forEach(a),$e=s(Bt,"TL;DR: the command"),Bt.forEach(a),Te=c(e),O=o(e,"PRE",{class:!0});var Ia=r(O);Ia.forEach(a),De=c(e),U=o(e,"P",{});var Yt=r(U);je=s(Yt,"Read further for more explanations"),Yt.forEach(a),Se=c(e),k=o(e,"H3",{id:!0});var Mt=r(k);T=o(Mt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Zt=r(T);Y=o(Zt,"SPAN",{class:!0}),r(Y).forEach(a),Zt.forEach(a),We=s(Mt,"Breaking down the command"),Mt.forEach(a),ge=c(e),h=o(e,"DL",{class:!0});var p=r(h);Z=o(p,"DT",{});var Gt=r(Z);Ye=s(Gt,"find /PTH/TO/FILES/*.txt"),Gt.forEach(a),G=o(p,"DD",{});var Jt=r(G);Ze=s(Jt,"use the `find` command on all files that match `/PTH/TO/FILES/*.txt`"),Jt.forEach(a),J=o(p,"DT",{});var Kt=r(J);Ge=s(Kt,"-type f"),Kt.forEach(a),K=o(p,"DD",{});var Qt=r(K);Je=s(Qt,"ignore directories - an extra precaution which you may not need"),Qt.forEach(a),Q=o(p,"DT",{});var Vt=r(Q);Ke=s(Vt,"|"),Vt.forEach(a),V=o(p,"DD",{});var Xt=r(V);Qe=s(Xt,"every filename you find will be passed to..."),Xt.forEach(a),X=o(p,"DT",{});var ea=r(X);Ve=s(ea,"xargs"),ea.forEach(a),ee=o(p,"DD",{});var ta=r(ee);Xe=s(ta,"transform what it receives (i.e., the filename) into a CLI argument for ..."),ta.forEach(a),te=o(p,"DT",{});var aa=r(te);et=s(aa,"sed"),aa.forEach(a),ae=o(p,"DD",{});var la=r(ae);tt=s(la,"So that will be equivalent to `sed filename1`, `sed filename2`, ..."),la.forEach(a),le=o(p,"DT",{});var oa=r(le);at=s(oa,"-i.bak"),oa.forEach(a),oe=o(p,"DD",{});var ra=r(oe);lt=s(ra,"`-i` will make the changes in place. Macs force you to create a backup file, for your own protection. In this case they will be called `filename1.bak` `filename2.bak` ..."),ra.forEach(a),re=o(p,"DT",{});var ia=r(re);ot=s(ia,"-f /PTH/TO/SED_RULES.sed"),ia.forEach(a),ie=o(p,"DD",{});var sa=r(ie);rt=s(sa,"Loads a list of scripts to apply from SED_RULES.sed. The file can be named everything, doesn't have to end with .sed"),sa.forEach(a),p.forEach(a),Le=c(e),w=o(e,"H2",{id:!0});var ye=r(w);D=o(ye,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var na=r(D);se=o(na,"SPAN",{class:!0}),r(se).forEach(a),na.forEach(a),it=s(ye,"What exactly "),ne=o(ye,"EM",{});var da=r(ne);st=s(da,"is"),da.forEach(a),nt=s(ye," sed?"),ye.forEach(a),Ae=c(e),x=o(e,"P",{});var q=r(x);R=o(q,"A",{href:!0,rel:!0});var fa=r(R);dt=s(fa,"Sed"),fa.forEach(a),ft=s(q," is a stream editor. A stream editor goes through a text file once, from top to bottom one line at the time. As it goes through it applies a sequence of "),de=o(q,"EM",{});var ha=r(de);ht=s(ha,"scripts"),ha.forEach(a),mt=s(q,", and then the text comes out at the other end. The scripts can be very short, and look pretty much like regular expressions. For example "),fe=o(q,"CODE",{});var ma=r(fe);ct=s(ma,"s/he/they/g"),ma.forEach(a),pt=s(q,". They can rearrange the line of text, delete it or apply other transforms. And also caputre some of the text and accumulate it until the end."),q.forEach(a),Pe=c(e),S=o(e,"H2",{id:!0});var qt=r(S);g=o(qt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ca=r(g);he=o(ca,"SPAN",{class:!0}),r(he).forEach(a),ca.forEach(a),ut=s(qt,"Example: remove all blanks from end of each line"),qt.forEach(a),ze=c(e),$=o(e,"P",{});var pa=r($);vt=s(pa,"For small jobs you pass those scripts as command line arguments. For example the one liner below will remove all blanks at the end of each line, and spit out the output to the CLI."),pa.forEach(a),Ie=c(e),C=o(e,"PRE",{class:!0});var Ha=r(C);Ha.forEach(a),He=c(e),L=o(e,"H2",{id:!0});var Nt=r(L);A=o(Nt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ua=r(A);me=o(ua,"SPAN",{class:!0}),r(me).forEach(a),ua.forEach(a),xt=s(Nt,"Example: load a list of delete commands from a file"),Nt.forEach(a),Oe=c(e),u=o(e,"P",{});var _=r(u);Et=s(_,"But if you want to reuse the patterns you can put them in a text file, one per line, and tell sed to load them from there. That can also be useufl if there are too many patterns for the CLI and writing them all gets awkward. You can pass the file containing the patters with the "),ce=o(_,"CODE",{});var va=r(ce);wt=s(va,"-f"),va.forEach(a),_t=s(_," flag. The example below will apply "),pe=o(_,"CODE",{});var xa=r(pe);bt=s(xa,"illegal-pizza-toppings.sed"),xa.forEach(a),yt=s(_," to the text stream. "),ue=o(_,"CODE",{});var Ea=r(ue);kt=s(Ea,"/something/d"),Ea.forEach(a),Tt=s(_," is the sed command which will delete the whole line if "),ve=o(_,"CODE",{});var wa=r(ve);Dt=s(wa,"something"),wa.forEach(a),St=s(_," is in it."),_.forEach(a),Re=c(e),F=o(e,"PRE",{class:!0});var Oa=r(F);Oa.forEach(a),Ce=c(e),P=o(e,"H2",{id:!0});var Ut=r(P);z=o(Ut,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _a=r(z);xe=o(_a,"SPAN",{class:!0}),r(xe).forEach(a),_a.forEach(a),gt=s(Ut,"Prior art"),Ut.forEach(a),Fe=c(e),v=o(e,"P",{});var H=r(v);Lt=s(H,"As always there is more on "),j=o(H,"ABBR",{title:!0});var ba=r(j);At=s(ba,"SO"),ba.forEach(a),Pt=s(H,". For example you could achieve the same with "),Ee=o(H,"CODE",{});var ya=r(Ee);zt=s(ya,"grep -v xxx"),ya.forEach(a),It=s(H,", which passes the lines who "),we=o(H,"EM",{});var ka=r(we);Ht=s(ka,"do not"),ka.forEach(a),Ot=s(H," match xxx. But the command above is my favourite"),H.forEach(a),Be=c(e),I=o(e,"UL",{});var Me=r(I);_e=o(Me,"LI",{});var Ta=r(_e);B=o(Ta,"A",{href:!0,rel:!0});var Da=r(B);Rt=s(Da,"sed - delete lines taking patterns from external file"),Da.forEach(a),Ta.forEach(a),Ct=c(Me),be=o(Me,"LI",{});var Sa=r(be);M=o(Sa,"A",{href:!0,rel:!0});var ga=r(M);Ft=s(ga,"Remove line of text from multiple files in Linux"),ga.forEach(a),Sa.forEach(a),Me.forEach(a),this.h()},h(){n(N,"href","./blog-with-sveltekit-and-markdown"),n(W,"class","icon icon-link"),n(y,"aria-hidden","true"),n(y,"tabindex","-1"),n(y,"href","#tldr-the-command"),n(b,"id","tldr-the-command"),n(O,"class","language-sh"),n(Y,"class","icon icon-link"),n(T,"aria-hidden","true"),n(T,"tabindex","-1"),n(T,"href","#breaking-down-the-command"),n(k,"id","breaking-down-the-command"),n(h,"class","code-breakdown"),n(se,"class","icon icon-link"),n(D,"aria-hidden","true"),n(D,"tabindex","-1"),n(D,"href","#what-exactly-is-sed"),n(w,"id","what-exactly-is-sed"),n(R,"href","https://www.gnu.org/software/sed/manual/html_node/index.html"),n(R,"rel","nofollow"),n(he,"class","icon icon-link"),n(g,"aria-hidden","true"),n(g,"tabindex","-1"),n(g,"href","#example-remove-all-blanks-from-end-of-each-line"),n(S,"id","example-remove-all-blanks-from-end-of-each-line"),n(C,"class","language-sh"),n(me,"class","icon icon-link"),n(A,"aria-hidden","true"),n(A,"tabindex","-1"),n(A,"href","#example-load-a-list-of-delete-commands-from-a-file"),n(L,"id","example-load-a-list-of-delete-commands-from-a-file"),n(F,"class","language-sh"),n(xe,"class","icon icon-link"),n(z,"aria-hidden","true"),n(z,"tabindex","-1"),n(z,"href","#prior-art"),n(P,"id","prior-art"),n(j,"title","Stack Overflow"),n(B,"href","https://superuser.com/questions/1376305/sed-delete-lines-taking-patterns-from-external-file"),n(B,"rel","nofollow"),n(M,"href","https://stackoverflow.com/questions/1182756/remove-line-of-text-from-multiple-files-in-linux"),n(M,"rel","nofollow")},m(e,d){f(e,E,d),t(E,qe),t(E,N),t(N,Ne),t(E,Ue),f(e,ke,d),f(e,b,d),t(b,y),t(y,W),t(b,$e),f(e,Te,d),f(e,O,d),O.innerHTML=Aa,f(e,De,d),f(e,U,d),t(U,je),f(e,Se,d),f(e,k,d),t(k,T),t(T,Y),t(k,We),f(e,ge,d),f(e,h,d),t(h,Z),t(Z,Ye),t(h,G),t(G,Ze),t(h,J),t(J,Ge),t(h,K),t(K,Je),t(h,Q),t(Q,Ke),t(h,V),t(V,Qe),t(h,X),t(X,Ve),t(h,ee),t(ee,Xe),t(h,te),t(te,et),t(h,ae),t(ae,tt),t(h,le),t(le,at),t(h,oe),t(oe,lt),t(h,re),t(re,ot),t(h,ie),t(ie,rt),f(e,Le,d),f(e,w,d),t(w,D),t(D,se),t(w,it),t(w,ne),t(ne,st),t(w,nt),f(e,Ae,d),f(e,x,d),t(x,R),t(R,dt),t(x,ft),t(x,de),t(de,ht),t(x,mt),t(x,fe),t(fe,ct),t(x,pt),f(e,Pe,d),f(e,S,d),t(S,g),t(g,he),t(S,ut),f(e,ze,d),f(e,$,d),t($,vt),f(e,Ie,d),f(e,C,d),C.innerHTML=Pa,f(e,He,d),f(e,L,d),t(L,A),t(A,me),t(L,xt),f(e,Oe,d),f(e,u,d),t(u,Et),t(u,ce),t(ce,wt),t(u,_t),t(u,pe),t(pe,bt),t(u,yt),t(u,ue),t(ue,kt),t(u,Tt),t(u,ve),t(ve,Dt),t(u,St),f(e,Re,d),f(e,F,d),F.innerHTML=za,f(e,Ce,d),f(e,P,d),t(P,z),t(z,xe),t(P,gt),f(e,Fe,d),f(e,v,d),t(v,Lt),t(v,j),t(j,At),t(v,Pt),t(v,Ee),t(Ee,zt),t(v,It),t(v,we),t(we,Ht),t(v,Ot),f(e,Be,d),f(e,I,d),t(I,_e),t(_e,B),t(B,Rt),t(I,Ct),t(I,be),t(be,M),t(M,Ft)},p:$t,i:$t,o:$t,d(e){e&&a(E),e&&a(ke),e&&a(b),e&&a(Te),e&&a(O),e&&a(De),e&&a(U),e&&a(Se),e&&a(k),e&&a(ge),e&&a(h),e&&a(Le),e&&a(w),e&&a(Ae),e&&a(x),e&&a(Pe),e&&a(S),e&&a(ze),e&&a($),e&&a(Ie),e&&a(C),e&&a(He),e&&a(L),e&&a(Oe),e&&a(u),e&&a(Re),e&&a(F),e&&a(Ce),e&&a(P),e&&a(Fe),e&&a(v),e&&a(Be),e&&a(I)}}}const qa={date:"2022-05-22T13:10:12.382Z",title:"Remove lines matching some patterns from all files in a dir",tags:["bash","sed"],excerpt:"A CLI task I find myself doing often with sed",is_empty:!1};class Na extends Ra{constructor(E){super(),Ca(this,E,null,Ba,Fa,{})}}export{Na as default,qa as metadata};
