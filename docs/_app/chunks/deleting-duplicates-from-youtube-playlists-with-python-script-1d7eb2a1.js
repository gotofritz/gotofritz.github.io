import{S as Tt,i as At,s as Pt,e as a,t as l,k as u,c as n,a as o,d as s,h as i,m as f,b as p,g as c,I as t,E as Ms}from"./index-6e518972.js";function St(vt){let k,v,$,Be,ye,y,Ge,N,Ue,We,H,Fe,Me,me,V,Ve,_e,w,b,ee,Qe,ve,g,Xe,Q,ze,Ke,we,E,x,se,Ze,be,X,Je,ge,Y,wt=`<code class="language-python"><span class="token comment"># delete_duplicates.py</span>

<span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
<span class="token keyword">from</span> googleapiclient<span class="token punctuation">.</span>discovery <span class="token keyword">import</span> build
<span class="token keyword">from</span> googleapiclient<span class="token punctuation">.</span>errors <span class="token keyword">import</span> HttpError
<span class="token keyword">from</span> google_auth_oauthlib<span class="token punctuation">.</span>flow <span class="token keyword">import</span> InstalledAppFlow

MAX_RESULTS <span class="token operator">=</span> <span class="token number">50</span>
LABEL_QUOTA_EXCEEDED <span class="token operator">=</span> <span class="token string">"quotaExceeded"</span>

<span class="token comment"># This scope allows for full read/write</span>
<span class="token comment"># access to the authenticated user's account</span>
<span class="token comment"># and requires requests to use an SSL connection.</span>
SCOPES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://www.googleapis.com/auth/youtube.force-ssl"</span><span class="token punctuation">]</span>
API_SERVICE_NAME <span class="token operator">=</span> <span class="token string">"youtube"</span>
API_VERSION <span class="token operator">=</span> <span class="token string">"v3"</span>
CLIENT_SECRETS_FILE <span class="token operator">=</span> <span class="token string">"client_secret.json"</span>

<span class="token comment"># exit if at least one playlist id wasn't passed</span>

<span class="token keyword">def</span> <span class="token function">get_authenticated_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""straight from the YouTube API documentation"""</span>
    flow <span class="token operator">=</span> InstalledAppFlow<span class="token punctuation">.</span>from_client_secrets_file<span class="token punctuation">(</span>CLIENT_SECRETS_FILE<span class="token punctuation">,</span> SCOPES<span class="token punctuation">)</span>
    credentials <span class="token operator">=</span> flow<span class="token punctuation">.</span>run_console<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> build<span class="token punctuation">(</span>API_SERVICE_NAME<span class="token punctuation">,</span> API_VERSION<span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete_video_and_maybe_stop</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> playlist_item_id<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""return true if it should stop, false otherwise"""</span>

<span class="token keyword">def</span> <span class="token function">get_videos_to_delete_for_playlist_and_maybe_stop</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> playlist_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""return a tuple: true if it should stop, false otherwise; and a list of video ids"""</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> playlist_id <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        should_stop<span class="token punctuation">,</span> videos_to_delete <span class="token operator">=</span> get_videos_to_delete_for_playlist_and_maybe_stop<span class="token punctuation">(</span>
            client<span class="token punctuation">,</span> playlist_id
        <span class="token punctuation">)</span>
        <span class="token keyword">if</span> should_stop<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        deleted <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> playlist_item_id <span class="token keyword">in</span> videos_to_delete<span class="token punctuation">:</span>
            should_break <span class="token operator">=</span> delete_video_and_maybe_stop<span class="token punctuation">(</span>client<span class="token punctuation">,</span> playlist_item_id<span class="token punctuation">)</span>
            <span class="token keyword">if</span> should_break<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            deleted <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>
            <span class="token string-interpolation"><span class="token string">f"deleted </span><span class="token interpolation"><span class="token punctuation">&#123;</span>deleted<span class="token punctuation">&#125;</span></span><span class="token string"> videos out of </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>videos_to_delete<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> for playlist </span><span class="token interpolation"><span class="token punctuation">&#123;</span>playlist_id<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
        <span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment"># When running locally, disable OAuthlib's</span>
    <span class="token comment"># HTTPs verification. When running in production</span>
    <span class="token comment"># * do not * leave this option enabled.</span>
    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"OAUTHLIB_INSECURE_TRANSPORT"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span>
    client <span class="token operator">=</span> get_authenticated_service<span class="token punctuation">(</span><span class="token punctuation">)</span>
    main<span class="token punctuation">(</span>client<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"DONE"</span><span class="token punctuation">)</span></code>`,Ee,I,T,te,$e,xe,z,es,Ie,d,ss,ae,ts,as,ne,ns,os,oe,ls,is,le,ps,rs,ie,cs,ds,pe,us,fs,re,hs,ks,Te,m,ys,j,ms,_s,ce,vs,ws,Ae,q,bt=`<code class="language-diff">def get_vides_to_delete_for_playlist_and_maybe_stop(client, playlist_id):
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   """return a tuple: true if it should stop, false otherwise; and a list of video ids"""
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    videos_already_done = []
</span><span class="token prefix inserted">+</span><span class="token line">    videos_to_delete = []
</span><span class="token prefix inserted">+</span><span class="token line">    page_token = ""
</span><span class="token prefix inserted">+</span><span class="token line">    should_stop = False
</span><span class="token prefix inserted">+</span><span class="token line">    try:
</span><span class="token prefix inserted">+</span><span class="token line">        while True:
</span><span class="token prefix inserted">+</span><span class="token line">            response = (
</span><span class="token prefix inserted">+</span><span class="token line">                client.playlistItems()
</span><span class="token prefix inserted">+</span><span class="token line">                .list(
</span><span class="token prefix inserted">+</span><span class="token line">                    part="snippet,contentDetails",
</span><span class="token prefix inserted">+</span><span class="token line">                    playlistId=playlist_id,
</span><span class="token prefix inserted">+</span><span class="token line">                    pageToken=page_token,
</span><span class="token prefix inserted">+</span><span class="token line">                    maxResults=MAX_RESULTS,
</span><span class="token prefix inserted">+</span><span class="token line">                )
</span><span class="token prefix inserted">+</span><span class="token line">                .execute()
</span><span class="token prefix inserted">+</span><span class="token line">            )
</span><span class="token prefix inserted">+</span><span class="token line">            for item in response["items"]:
</span><span class="token prefix inserted">+</span><span class="token line">                if item["contentDetails"]["videoId"] in videos_already_done:
</span><span class="token prefix inserted">+</span><span class="token line">                    videos_to_delete.append(item["id"])
</span><span class="token prefix inserted">+</span><span class="token line">                    print(f"found a duplicate: &#123;item['snippet']['title']&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">                else:
</span><span class="token prefix inserted">+</span><span class="token line">                    videos_already_done.append(item["contentDetails"]["videoId"])
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">            if not "nextPageToken" in response:
</span><span class="token prefix inserted">+</span><span class="token line">                print("that was the last page")
</span><span class="token prefix inserted">+</span><span class="token line">                break
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">            page_token = response["nextPageToken"]
</span><span class="token prefix inserted">+</span><span class="token line">    except HttpError as e:
</span><span class="token prefix inserted">+</span><span class="token line">        if e.error_details[0]["reason"] == LABEL_QUOTA_EXCEEDED:  # type: ignore
</span><span class="token prefix inserted">+</span><span class="token line">            print(f">>>> Quota exceeded that was it for today, tray again tomorrow!")
</span><span class="token prefix inserted">+</span><span class="token line">            should_stop = True
</span><span class="token prefix inserted">+</span><span class="token line">        else:
</span><span class="token prefix inserted">+</span><span class="token line">            print(f">>>> ERROR &#123;e.error_details[0]['message']&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">    return (should_stop, videos_to_delete)</span></span></code>`,Pe,A,P,de,bs,Se,_,gs,ue,Es,xs,fe,Is,Ts,Re,B,gt=`<code class="language-diff">def delete_video_and_maybe_stop(client, playlist_item_id) -> bool:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   """return true if it should stop, false otherwise"""
</span><span class="token prefix unchanged"> </span><span class="token line">   try:
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        print(f"-> Deleting &#123;playlist_item_id&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">        (client.playlistItems().delete(id=playlist_item_id)).execute()
</span><span class="token prefix inserted">+</span><span class="token line">        return False
</span><span class="token prefix inserted">+</span><span class="token line">    except HttpError as e:
</span><span class="token prefix inserted">+</span><span class="token line">        if e.error_details[0]["reason"] == LABEL_QUOTA_EXCEEDED:  # type: ignore
</span><span class="token prefix inserted">+</span><span class="token line">            print(f">>>> Quota exceeded - that was it for today, tray again tomorrow!")
</span><span class="token prefix inserted">+</span><span class="token line">            return True
</span><span class="token prefix inserted">+</span><span class="token line">        else:
</span><span class="token prefix inserted">+</span><span class="token line">            print(f">>>> ERROR &#123;e.error_details[0]['message']&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">            return False</span></span></code>`,Ce,S,R,he,As,Oe,C,Ps,G,Ss,Rs,De,O,D,ke,Cs,Le,L,U,Os,W,Ds,Ls,Ns,F,Hs,M,Ys,js;return{c(){k=a("h2"),v=a("a"),$=a("span"),Be=l("Google deprecated the button that allowed you to remove duplicate videos from your playlist"),ye=u(),y=a("p"),Ge=l("A long time ago (about a year ago), the Youtube interface included "),N=a("a"),Ue=l("a useful button"),We=l(". You clicked on it, and all duplicates videos from the playlist would be removed! That would have been just I needed. But then "),H=a("a"),Fe=l("they deprecated it"),Me=l(". That made a lot of people very angry, as you can read from the comments in that post. But working in software development myself I understand why they did. They have a lot of products, and during their lifetime features grow exponentially. And old feature don\u2019t just go away - you still need to test them whenever new ones are added. Even if they seem small, the cumulative effort in having to maintain them can make a team unable to work on new features. Regularly pruning away rarely used functionality is a smart move. Although yes, it does upset some users"),me=u(),V=a("p"),Ve=l("Luckily for me, I was able to reproduce the functionality I was after with a Python script"),_e=u(),w=a("h2"),b=a("a"),ee=a("span"),Qe=l("Step 0: set up the python project"),ve=u(),g=a("p"),Xe=l("I re-used the same setup from the "),Q=a("a"),ze=l("Adding videos to a youtube playlists via a terminal python script"),Ke=l(" post. I simply added a new script to it"),we=u(),E=a("h2"),x=a("a"),se=a("span"),Ze=l("Step 1: Read and manage csv files with list of video ids to add to playlist"),be=u(),X=a("p"),Je=l("The general structure of the script is the same as that of the duplicating playlist one. The main difference is that there is no reading from / writing to CSV files here. The script will be passed one or more playlist_ids, and from them on it will only send calls to the YouTube API. Of course the API call limits still hold, so I will have to set it up in such a way that tomorrow I can pick it up again from where I left off"),ge=u(),Y=a("pre"),Ee=u(),I=a("h2"),T=a("a"),te=a("span"),$e=l("Step 2: Getting a list of videos from a playlist"),xe=u(),z=a("p"),es=l("Results are paginated, so you need to fetch all the pages to get the complete list. The maximum page size you can request is 50 items, so that can take a few calls. While doing that, the function keeps track of the videos already seen, and adds any duplicates to a list, which will be returned."),Ie=u(),d=a("p"),ss=l("Note that there are two different IDs at play. One is the "),ae=a("code"),ts=l("video_id"),as=l(", which represents the original video file someone uploaded to YouTube. This is the id that appears in the browser\u2019s address bar when viewing the video. The other is the "),ne=a("code"),ns=l("id"),os=l(" of the "),oe=a("code"),ls=l("playlistItem"),is=l(". A playlistItem holds information about which video is in position x of a playlist. When you remove the clip by "),le=a("code"),ps=l("video_id"),rs=l(", the clip will disappear from everywhere within YouTube. When you remove a playlistItem by "),ie=a("code"),cs=l("id"),ds=l(", you are removing a video from a playlist. But the video might still be in other playlists. So duplicate videos will share the same "),pe=a("code"),us=l("video_id"),fs=l(", but each instance in the playlist will have its own "),re=a("code"),hs=l("id"),ks=l("."),Te=u(),m=a("p"),ys=l("To fetch the playlist, use the "),j=a("a"),ms=l("playlistItems().list"),_s=l(" call. The "),ce=a("code"),vs=l("nextPageToken"),ws=l(" attribute allows you to fetch the next page. Keep doing that until nextPageToken is no longer in the response"),Ae=u(),q=a("pre"),Pe=u(),A=a("h2"),P=a("a"),de=a("span"),bs=l("Step 3: Deleting a video from a playlist"),Se=u(),_=a("p"),gs=l("This is even simpler: it\u2019s a single API call to "),ue=a("code"),Es=l("playlistItems.delete"),xs=l(", with a single argument, the "),fe=a("code"),Is=l("id"),Ts=l("."),Re=u(),B=a("pre"),Ce=u(),S=a("h3"),R=a("a"),he=a("span"),As=l("Conclusion"),Oe=u(),C=a("p"),Ps=l("Given the the project was already set up this was fairly straight forward. The code is "),G=a("a"),Ss=l("available on GitHub"),Rs=l(" if you need it - at your own risk, of course."),De=u(),O=a("h3"),D=a("a"),ke=a("span"),Cs=l("References"),Le=u(),L=a("ul"),U=a("li"),Os=l("YouTube API "),W=a("a"),Ds=l("playlistItem.list"),Ls=l(" reference"),Ns=u(),F=a("li"),Hs=l("YouTube API "),M=a("a"),Ys=l("playlistItem.delete"),js=l(" reference"),this.h()},l(e){k=n(e,"H2",{id:!0});var r=o(k);v=n(r,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vs=o(v);$=n(Vs,"SPAN",{class:!0}),o($).forEach(s),Vs.forEach(s),Be=i(r,"Google deprecated the button that allowed you to remove duplicate videos from your playlist"),r.forEach(s),ye=f(e),y=n(e,"P",{});var K=o(y);Ge=i(K,"A long time ago (about a year ago), the Youtube interface included "),N=n(K,"A",{href:!0,rel:!0});var Qs=o(N);Ue=i(Qs,"a useful button"),Qs.forEach(s),We=i(K,". You clicked on it, and all duplicates videos from the playlist would be removed! That would have been just I needed. But then "),H=n(K,"A",{href:!0,rel:!0});var Xs=o(H);Fe=i(Xs,"they deprecated it"),Xs.forEach(s),Me=i(K,". That made a lot of people very angry, as you can read from the comments in that post. But working in software development myself I understand why they did. They have a lot of products, and during their lifetime features grow exponentially. And old feature don\u2019t just go away - you still need to test them whenever new ones are added. Even if they seem small, the cumulative effort in having to maintain them can make a team unable to work on new features. Regularly pruning away rarely used functionality is a smart move. Although yes, it does upset some users"),K.forEach(s),me=f(e),V=n(e,"P",{});var zs=o(V);Ve=i(zs,"Luckily for me, I was able to reproduce the functionality I was after with a Python script"),zs.forEach(s),_e=f(e),w=n(e,"H2",{id:!0});var qs=o(w);b=n(qs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ks=o(b);ee=n(Ks,"SPAN",{class:!0}),o(ee).forEach(s),Ks.forEach(s),Qe=i(qs,"Step 0: set up the python project"),qs.forEach(s),ve=f(e),g=n(e,"P",{});var Ne=o(g);Xe=i(Ne,"I re-used the same setup from the "),Q=n(Ne,"A",{href:!0});var Zs=o(Q);ze=i(Zs,"Adding videos to a youtube playlists via a terminal python script"),Zs.forEach(s),Ke=i(Ne," post. I simply added a new script to it"),Ne.forEach(s),we=f(e),E=n(e,"H2",{id:!0});var Bs=o(E);x=n(Bs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Js=o(x);se=n(Js,"SPAN",{class:!0}),o(se).forEach(s),Js.forEach(s),Ze=i(Bs,"Step 1: Read and manage csv files with list of video ids to add to playlist"),Bs.forEach(s),be=f(e),X=n(e,"P",{});var $s=o(X);Je=i($s,"The general structure of the script is the same as that of the duplicating playlist one. The main difference is that there is no reading from / writing to CSV files here. The script will be passed one or more playlist_ids, and from them on it will only send calls to the YouTube API. Of course the API call limits still hold, so I will have to set it up in such a way that tomorrow I can pick it up again from where I left off"),$s.forEach(s),ge=f(e),Y=n(e,"PRE",{class:!0});var Et=o(Y);Et.forEach(s),Ee=f(e),I=n(e,"H2",{id:!0});var Gs=o(I);T=n(Gs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var et=o(T);te=n(et,"SPAN",{class:!0}),o(te).forEach(s),et.forEach(s),$e=i(Gs,"Step 2: Getting a list of videos from a playlist"),Gs.forEach(s),xe=f(e),z=n(e,"P",{});var st=o(z);es=i(st,"Results are paginated, so you need to fetch all the pages to get the complete list. The maximum page size you can request is 50 items, so that can take a few calls. While doing that, the function keeps track of the videos already seen, and adds any duplicates to a list, which will be returned."),st.forEach(s),Ie=f(e),d=n(e,"P",{});var h=o(d);ss=i(h,"Note that there are two different IDs at play. One is the "),ae=n(h,"CODE",{});var tt=o(ae);ts=i(tt,"video_id"),tt.forEach(s),as=i(h,", which represents the original video file someone uploaded to YouTube. This is the id that appears in the browser\u2019s address bar when viewing the video. The other is the "),ne=n(h,"CODE",{});var at=o(ne);ns=i(at,"id"),at.forEach(s),os=i(h," of the "),oe=n(h,"CODE",{});var nt=o(oe);ls=i(nt,"playlistItem"),nt.forEach(s),is=i(h,". A playlistItem holds information about which video is in position x of a playlist. When you remove the clip by "),le=n(h,"CODE",{});var ot=o(le);ps=i(ot,"video_id"),ot.forEach(s),rs=i(h,", the clip will disappear from everywhere within YouTube. When you remove a playlistItem by "),ie=n(h,"CODE",{});var lt=o(ie);cs=i(lt,"id"),lt.forEach(s),ds=i(h,", you are removing a video from a playlist. But the video might still be in other playlists. So duplicate videos will share the same "),pe=n(h,"CODE",{});var it=o(pe);us=i(it,"video_id"),it.forEach(s),fs=i(h,", but each instance in the playlist will have its own "),re=n(h,"CODE",{});var pt=o(re);hs=i(pt,"id"),pt.forEach(s),ks=i(h,"."),h.forEach(s),Te=f(e),m=n(e,"P",{});var Z=o(m);ys=i(Z,"To fetch the playlist, use the "),j=n(Z,"A",{href:!0,rel:!0});var rt=o(j);ms=i(rt,"playlistItems().list"),rt.forEach(s),_s=i(Z," call. The "),ce=n(Z,"CODE",{});var ct=o(ce);vs=i(ct,"nextPageToken"),ct.forEach(s),ws=i(Z," attribute allows you to fetch the next page. Keep doing that until nextPageToken is no longer in the response"),Z.forEach(s),Ae=f(e),q=n(e,"PRE",{class:!0});var xt=o(q);xt.forEach(s),Pe=f(e),A=n(e,"H2",{id:!0});var Us=o(A);P=n(Us,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dt=o(P);de=n(dt,"SPAN",{class:!0}),o(de).forEach(s),dt.forEach(s),bs=i(Us,"Step 3: Deleting a video from a playlist"),Us.forEach(s),Se=f(e),_=n(e,"P",{});var J=o(_);gs=i(J,"This is even simpler: it\u2019s a single API call to "),ue=n(J,"CODE",{});var ut=o(ue);Es=i(ut,"playlistItems.delete"),ut.forEach(s),xs=i(J,", with a single argument, the "),fe=n(J,"CODE",{});var ft=o(fe);Is=i(ft,"id"),ft.forEach(s),Ts=i(J,"."),J.forEach(s),Re=f(e),B=n(e,"PRE",{class:!0});var It=o(B);It.forEach(s),Ce=f(e),S=n(e,"H3",{id:!0});var Ws=o(S);R=n(Ws,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ht=o(R);he=n(ht,"SPAN",{class:!0}),o(he).forEach(s),ht.forEach(s),As=i(Ws,"Conclusion"),Ws.forEach(s),Oe=f(e),C=n(e,"P",{});var He=o(C);Ps=i(He,"Given the the project was already set up this was fairly straight forward. The code is "),G=n(He,"A",{href:!0,rel:!0});var kt=o(G);Ss=i(kt,"available on GitHub"),kt.forEach(s),Rs=i(He," if you need it - at your own risk, of course."),He.forEach(s),De=f(e),O=n(e,"H3",{id:!0});var Fs=o(O);D=n(Fs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yt=o(D);ke=n(yt,"SPAN",{class:!0}),o(ke).forEach(s),yt.forEach(s),Cs=i(Fs,"References"),Fs.forEach(s),Le=f(e),L=n(e,"UL",{});var Ye=o(L);U=n(Ye,"LI",{});var je=o(U);Os=i(je,"YouTube API "),W=n(je,"A",{href:!0,rel:!0});var mt=o(W);Ds=i(mt,"playlistItem.list"),mt.forEach(s),Ls=i(je," reference"),je.forEach(s),Ns=f(Ye),F=n(Ye,"LI",{});var qe=o(F);Hs=i(qe,"YouTube API "),M=n(qe,"A",{href:!0,rel:!0});var _t=o(M);Ys=i(_t,"playlistItem.delete"),_t.forEach(s),js=i(qe," reference"),qe.forEach(s),Ye.forEach(s),this.h()},h(){p($,"class","icon icon-link"),p(v,"aria-hidden","true"),p(v,"tabindex","-1"),p(v,"href","#google-deprecated-the-button-that-allowed-you-to-remove-duplicate-videos-from-your-playlist"),p(k,"id","google-deprecated-the-button-that-allowed-you-to-remove-duplicate-videos-from-your-playlist"),p(N,"href","https://webapps.stackexchange.com/questions/130496/how-to-remove-duplicates-from-youtube-playlist"),p(N,"rel","nofollow"),p(H,"href","https://www.androidpolice.com/2020/09/17/youtube-is-removing-the-button-that-deleted-duplicate-videos-from-playlists/"),p(H,"rel","nofollow"),p(ee,"class","icon icon-link"),p(b,"aria-hidden","true"),p(b,"tabindex","-1"),p(b,"href","#step-0-set-up-the-python-project"),p(w,"id","step-0-set-up-the-python-project"),p(Q,"href","/blog/migrating-youtube-playlists-by-adding-videos-via-cli"),p(se,"class","icon icon-link"),p(x,"aria-hidden","true"),p(x,"tabindex","-1"),p(x,"href","#step-1-read-and-manage-csv-files-with-list-of-video-ids-to-add-to-playlist"),p(E,"id","step-1-read-and-manage-csv-files-with-list-of-video-ids-to-add-to-playlist"),p(Y,"class","language-python"),p(te,"class","icon icon-link"),p(T,"aria-hidden","true"),p(T,"tabindex","-1"),p(T,"href","#step-2-getting-a-list-of-videos-from-a-playlist"),p(I,"id","step-2-getting-a-list-of-videos-from-a-playlist"),p(j,"href","https://developers.google.com/youtube/v3/docs/playlistItems/list"),p(j,"rel","nofollow"),p(q,"class","language-diff"),p(de,"class","icon icon-link"),p(P,"aria-hidden","true"),p(P,"tabindex","-1"),p(P,"href","#step-3-deleting-a-video-from-a-playlist"),p(A,"id","step-3-deleting-a-video-from-a-playlist"),p(B,"class","language-diff"),p(he,"class","icon icon-link"),p(R,"aria-hidden","true"),p(R,"tabindex","-1"),p(R,"href","#conclusion"),p(S,"id","conclusion"),p(G,"href","https://github.com/gotofritz/quick_and_dirty/tree/master/youtube_migration"),p(G,"rel","nofollow"),p(ke,"class","icon icon-link"),p(D,"aria-hidden","true"),p(D,"tabindex","-1"),p(D,"href","#references"),p(O,"id","references"),p(W,"href","https://developers.google.com/youtube/v3/docs/playlistItems/list"),p(W,"rel","nofollow"),p(M,"href","https://developers.google.com/youtube/v3/docs/playlistItems/delete"),p(M,"rel","nofollow")},m(e,r){c(e,k,r),t(k,v),t(v,$),t(k,Be),c(e,ye,r),c(e,y,r),t(y,Ge),t(y,N),t(N,Ue),t(y,We),t(y,H),t(H,Fe),t(y,Me),c(e,me,r),c(e,V,r),t(V,Ve),c(e,_e,r),c(e,w,r),t(w,b),t(b,ee),t(w,Qe),c(e,ve,r),c(e,g,r),t(g,Xe),t(g,Q),t(Q,ze),t(g,Ke),c(e,we,r),c(e,E,r),t(E,x),t(x,se),t(E,Ze),c(e,be,r),c(e,X,r),t(X,Je),c(e,ge,r),c(e,Y,r),Y.innerHTML=wt,c(e,Ee,r),c(e,I,r),t(I,T),t(T,te),t(I,$e),c(e,xe,r),c(e,z,r),t(z,es),c(e,Ie,r),c(e,d,r),t(d,ss),t(d,ae),t(ae,ts),t(d,as),t(d,ne),t(ne,ns),t(d,os),t(d,oe),t(oe,ls),t(d,is),t(d,le),t(le,ps),t(d,rs),t(d,ie),t(ie,cs),t(d,ds),t(d,pe),t(pe,us),t(d,fs),t(d,re),t(re,hs),t(d,ks),c(e,Te,r),c(e,m,r),t(m,ys),t(m,j),t(j,ms),t(m,_s),t(m,ce),t(ce,vs),t(m,ws),c(e,Ae,r),c(e,q,r),q.innerHTML=bt,c(e,Pe,r),c(e,A,r),t(A,P),t(P,de),t(A,bs),c(e,Se,r),c(e,_,r),t(_,gs),t(_,ue),t(ue,Es),t(_,xs),t(_,fe),t(fe,Is),t(_,Ts),c(e,Re,r),c(e,B,r),B.innerHTML=gt,c(e,Ce,r),c(e,S,r),t(S,R),t(R,he),t(S,As),c(e,Oe,r),c(e,C,r),t(C,Ps),t(C,G),t(G,Ss),t(C,Rs),c(e,De,r),c(e,O,r),t(O,D),t(D,ke),t(O,Cs),c(e,Le,r),c(e,L,r),t(L,U),t(U,Os),t(U,W),t(W,Ds),t(U,Ls),t(L,Ns),t(L,F),t(F,Hs),t(F,M),t(M,Ys),t(F,js)},p:Ms,i:Ms,o:Ms,d(e){e&&s(k),e&&s(ye),e&&s(y),e&&s(me),e&&s(V),e&&s(_e),e&&s(w),e&&s(ve),e&&s(g),e&&s(we),e&&s(E),e&&s(be),e&&s(X),e&&s(ge),e&&s(Y),e&&s(Ee),e&&s(I),e&&s(xe),e&&s(z),e&&s(Ie),e&&s(d),e&&s(Te),e&&s(m),e&&s(Ae),e&&s(q),e&&s(Pe),e&&s(A),e&&s(Se),e&&s(_),e&&s(Re),e&&s(B),e&&s(Ce),e&&s(S),e&&s(Oe),e&&s(C),e&&s(De),e&&s(O),e&&s(Le),e&&s(L)}}}const Ct={title:"Removing duplicates from youtube playlists with a Python script",date:"2022-09-01T00:00:00.000Z",excerpt:`Thanks to a bug while <a href="/blog/migrating-youtube-playlists-by-adding-videos-via-cli">copying a youtube playlist with a Python script</a>, I ended up with a lot of duplicates videos in the playlist. Surprisingly, the YouTube interface doesn't let you remove them. So I put together another small Python script`,draft:!1,tags:["google","youtube api","python"]};class Ot extends Tt{constructor(k){super(),At(this,k,null,St,Pt,{})}}export{Ot as default,Ct as metadata};
