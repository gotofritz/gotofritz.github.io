import{S as xD,i as SD,s as _D,e as t,t as i,k as u,c as e,a as p,d as n,h as c,m as k,b as r,Z as E,g as l,I as a,E as W_}from"./index-6e518972.js";var TD="/_app/assets/scripts-f3824c42.png",ID="/_app/assets/states-0b97f1cb.png",OD="/_app/assets/stage-2d0e4f28.png",AD="/_app/assets/opportunity-19bbdd25.png",PD="/_app/assets/pool-e2a1bffb.png",DD="/_app/assets/blank-slate-8ce157f3.png",CD="/_app/assets/menu-c4f7bc99.png",RD="/_app/assets/sidebar-d0117bff.png",LD="/_app/assets/select-row-bfbe8722.png",MD="/_app/assets/states-row-56adbf0f.png",HD="/_app/assets/rgb-colours-cb09e018.png",BD="/_app/assets/all-states-a1040ae8.png",FD="/_app/assets/state-pulldown-a6a0aae5.png",jD="/_app/assets/form-0f3aa912.mp4",ND="/_app/assets/load-from-cell-af09e135.mp4",UD="/_app/assets/add-comment-fc18a449.mp4",qD="/_app/assets/step-editing-with-states-43e6a5dd.mp4";function GD(C6){let as,Ss,Wo,Ey,Tu,vs,Yo,by,xy,qa,Sy,_y,Iu,Ga,zo,Ty,Iy,Ou,_s,Ts,Jo,Oy,Au,Oe,Ay,Pu,Is,Os,$o,Py,Du,Ae,Dy,Cu,As,Ps,Ko,Cy,Ru,Ds,Ry,Pe,Ly,My,Lu,Cs,Hy,Xo,By,Fy,Mu,g,Zo,jy,Ny,Qo,Uy,qy,sl,Gy,Vy,nl,Wy,Yy,al,zy,Jy,tl,$y,Ky,el,Xy,Hu,Rs,Ls,pl,Zy,Bu,Ms,Hs,ol,Qy,Fu,ts,sg,ll,ng,ag,Va,tg,eg,ju,Bs,Fs,il,pg,Nu,De,og,Uu,js,lg,Ce,ig,cg,qu,Re,rg,Gu,Ns,Us,cl,ug,Vu,es,kg,rl,dg,fg,ul,hg,mg,Wu,qs,yg,kl,gg,wg,Yu,Gs,Vs,dl,vg,zu,Le,Eg,Ju,Ws,Ys,fl,bg,$u,Me,xg,Ku,zs,Js,hl,Sg,Xu,He,Wa,_g,Zu,$s,Ks,ml,Tg,Qu,Be,Ig,sk,Xs,Zs,yl,Og,nk,Fe,je,Y_,ak,Ne,Ag,tk,b,gl,Pg,A,Dg,wl,Cg,Rg,vl,Lg,Mg,El,Hg,Bg,bl,Fg,jg,Ue,z_,xl,Ng,Qs,Ug,Sl,qg,Gg,_l,Vg,Tl,Wg,Ya,Yg,Il,zg,Jg,Ol,$g,Al,Kg,Pl,Xg,Dl,Zg,ek,sn,nn,Cl,Qg,pk,an,tn,Rl,sw,ok,qe,nw,lk,en,M,aw,Ll,tw,ew,Ml,pw,ow,Hl,lw,iw,Bl,cw,rw,uw,Fl,kw,ik,f,dw,jl,fw,hw,Nl,mw,yw,Ul,gw,ww,ql,vw,Ew,Gl,bw,xw,Vl,Sw,_w,Wl,Tw,Iw,ck,Ge,Ow,rk,Ve,Aw,uk,pn,on,Yl,Pw,kk,We,Ye,J_,dk,ze,Dw,fk,ln,cn,zl,Cw,hk,Je,$e,$_,mk,Ke,Rw,yk,Xe,Lw,gk,ps,Jl,Mw,Hw,$l,Bw,Fw,Kl,jw,wk,rn,un,Xl,Nw,vk,Ze,Qe,K_,Ek,sp,Uw,bk,np,qw,xk,ap,Gw,Sk,H,Zl,Vw,Ww,Ql,Yw,zw,si,Jw,$w,ni,Kw,_k,kn,dn,ai,Xw,Tk,tp,ep,X_,Ik,pp,Zw,Ok,op,Qw,Ak,B,ti,s1,n1,ei,a1,t1,pi,e1,p1,oi,o1,Pk,fn,hn,li,l1,Dk,lp,i1,Ck,P,za,c1,ii,r1,u1,k1,ci,d1,f1,ri,h1,m1,ui,y1,g1,ki,w1,Rk,ip,v1,Lk,F,di,E1,b1,fi,x1,S1,hi,_1,T1,mi,I1,Mk,mn,yn,yi,O1,Hk,cp,A1,Bk,rp,up,Z_,Fk,gn,wn,gi,P1,jk,kp,z,D1,wi,C1,R1,vi,L1,M1,Ei,H1,B1,Nk,Ja,R6=`<code class="language-js"><span class="token comment">//const.gs</span>
<span class="token keyword">const</span> <span class="token constant">SS</span> <span class="token operator">=</span> SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getActiveSpreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> noop <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></code>`,Uk,Es,bi,F1,j1,xi,N1,U1,qk,$a,L6=`<code class="language-js"><span class="token comment">// Code.js</span>
<span class="token keyword">function</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getActiveSpreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSpreadsheetTimeZone</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> menuEntries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  menuEntries<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"APP"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"POOL"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"OPPORTUNITY"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"STAGE"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"STATES"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"CRM 4.0"</span><span class="token punctuation">,</span> menuEntries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Gk,dp,fp,Q_,Vk,vn,En,Si,q1,Wk,hp,G1,Yk,Ka,M6=`<code class="language-diff">// main.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "POOL", functionName: "noop" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &#123; name: "> New opportunity", functionName: "createOpportunity" &#125;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   null,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "OPPORTUNITY", functionName: "noop" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   ...</span></span></code>`,zk,mp,V1,Jk,yp,W1,$k,Xa,H6=`<code class="language-js"><span class="token comment">// main.gs</span>
<span class="token keyword">function</span> <span class="token function">createOpportunity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool<span class="token punctuation">.</span><span class="token function">createOpportunity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Kk,gp,Y1,Xk,Za,B6=`<code class="language-js"><span class="token comment">// pool.gs</span>
<span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> sh <span class="token operator">=</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sh <span class="token operator">=</span> sh<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadStateFromSheet_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">loadStateFromSheet_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token function">createOpportunity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Opportunity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sh</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sh <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Zk,wp,z1,Qk,Qa,F6=`<code class="language-js"><span class="token comment">// opportunity.gs</span>
<span class="token keyword">class</span> <span class="token class-name">Opportunity</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> sh <span class="token operator">=</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token constant">DATA_ROW_START</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sh <span class="token operator">=</span> sh<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>row <span class="token operator">=</span> row<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>stages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadStateFromSheet_</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">sh</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sh<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>row <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">loadStateFromSheet_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,sd,os,J1,_i,$1,K1,Ti,X1,Z1,nd,vp,Q1,ad,st,j6=`<code class="language-diff">//globals.gs
const SS = SpreadsheetApp.getActiveSpreadsheet();
const noop = Function.prototype;

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const DATA_ROW_START = 2;
</span><span class="token prefix inserted">+</span><span class="token line">
</span><span class="token prefix inserted">+</span><span class="token line"> const DATA_COL_META1 = 1;
</span><span class="token prefix inserted">+</span><span class="token line"> const DATA_COL_META2 = 2;</span></span></code>`,td,bn,sv,Ii,nv,av,ed,nt,N6=`<code class="language-diff">// pool.js
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> updateUI() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   // make sure the Opportunities know where they are
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.reindex_();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // make room for the new Opportunities
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh.insertRowsBefore(DATA_ROW_START, this.opportunities.length);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // tell the Opportunities to render themselves
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   for (let opportunity of this.opportunities) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     opportunity.updateUI();
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // remove the old Opportunities from the UI
</span><span class="token prefix unchanged"> </span><span class="token line">   const startRow = DATA_ROW_START + this.opportunities.length;
</span><span class="token prefix unchanged"> </span><span class="token line">   const nRows = this.sh.getMaxRows() - DATA_ROW_START + this.opportunities.length - 1;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh.deleteRows(startRow, nRows)
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> reindex_(sh = SS.getActiveSheet()) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   for (let i = 0; i &lt; this.opportunities.length; i += 1) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     this.opportunities[i].reset(&#123; sh: sh, row: i &#125;);
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,pd,xn,tv,Oi,ev,pv,od,at,U6=`<code class="language-diff">// opportunity.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> updateUI() &#123;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const startRow = this.row;
</span><span class="token prefix inserted">+</span><span class="token line">   const startCol = DATA_COL_META1;
</span><span class="token prefix inserted">+</span><span class="token line">   const nRows = 1;
</span><span class="token prefix inserted">+</span><span class="token line">   const nCols = 2;
</span><span class="token prefix inserted">+</span><span class="token line">   this.sh.getRange(startRow, startCol, nRows, nCols).setValues([
</span><span class="token prefix inserted">+</span><span class="token line">     ['NEW DATA', Math.random()]
</span><span class="token prefix inserted">+</span><span class="token line">   ]);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> reset(&#123;
</span><span class="token prefix inserted">+</span><span class="token line">   sh = die('reset needs a sheet argument'),
</span><span class="token prefix inserted">+</span><span class="token line">   row = die('reset needs a row argument') &#125; = &#123;&#125;
</span><span class="token prefix inserted">+</span><span class="token line"> ) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   this.sh = sh;
</span><span class="token prefix inserted">+</span><span class="token line">   this.row = row;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,ld,tt,ov,et,lv,id,pt,q6=`<code class="language-js"><span class="token comment">// genericGotofritzUtils.gs</span>
<span class="token keyword">function</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token parameter">prompt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,cd,Sn,_n,Ai,iv,rd,Ep,J,sT,ud,Tn,cv,Pi,rv,uv,kd,bp,xp,nT,dd,ls,kv,ot,dv,fv,lt,hv,mv,fd,it,G6=`<code class="language-html">// formOpportunity.html

<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_top<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
      function prefill() &#123;
        const now = new Date();
        const yyyy = now.getFullYear();
        const mm = String(now.getMonth() + 1).padStart(2, "0");
        const dd = String(now.getDate() + 1).padStart(2, "0");
        document.getElementById("yyyy").value = yyyy;
        document.getElementById("mm").value = mm;
        document.getElementById("dd").value = dd;
        // ------ placeholders for testing
        document.getElementById("company").value = "Beatles";
        document.getElementById("position").value = "drummer";
        document.getElementById("source").value = "Melody Maker";
        document.getElementById("contact").value = "Brian Epstein";
        document.getElementById("comments").value =
          "The old drummer was too simple minded&#92;nAlso ugly";
      &#125;

      function handleFormSubmit(formObj) &#123;
        google.script.run
          .withFailureHandler(onFailure)
          .withSuccessHandler(onSuccess)
          .handleCreateOpportunity(formObj);
        return false;
      &#125;

      function onFailure(err) &#123;
        document.getElementById("err").innerHTML = &#96;ERROR: $&#123;err&#125;&#96;;
      &#125;

      function onSuccess() &#123;
        google.script.host.close();
      &#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>
      label &#123;
        display: block;
      &#125;
      div &#123;
        margin-bottom: 1rem;
      &#125;
      input[type="text"]:not([size]),
      textarea &#123;
        width: 100%;
      &#125;
      .err &#123;
        display: block;
        background-color: red;
        color: white;
        padding: 4px;
      &#125;
      .err:empty &#123;
        display: none;
      &#125;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefill()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>err<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleFormSubmit(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Company<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>position<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Position<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>position<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>position<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy<span class="token punctuation">"</span></span>
          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy<span class="token punctuation">"</span></span>
          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy<span class="token punctuation">"</span></span>
          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>
          <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>
        <span class="token punctuation">/></span></span>-
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>
          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>
          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span>
          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>
          <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>
          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>
        <span class="token punctuation">/></span></span>-
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dd<span class="token punctuation">"</span></span>
          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dd<span class="token punctuation">"</span></span>
          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dd<span class="token punctuation">"</span></span>
          <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>
          <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>
        <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Source (Linkedin, Email, etc)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Main Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>More info (&#92;n separated, no need for '-')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>`,hd,j,yv,Di,gv,wv,Ci,vv,Ev,Ri,bv,xv,md,bs,Li,Sv,_v,Mi,Tv,Iv,yd,ct,V6=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function handleFormSubmit(formObj) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("date").value = [
</span><span class="token prefix inserted">+</span><span class="token line">     document.getElementById("yyyy").value,
</span><span class="token prefix inserted">+</span><span class="token line">     document.getElementById("mm").value,
</span><span class="token prefix inserted">+</span><span class="token line">     document.getElementById("dd").value
</span><span class="token prefix inserted">+</span><span class="token line">   ].join('-')
</span><span class="token prefix inserted">+</span><span class="token line">   google.script.run
</span><span class="token prefix inserted">+</span><span class="token line">     .withFailureHandler(onFailure)
</span><span class="token prefix inserted">+</span><span class="token line">     .withSuccessHandler(onSuccess)
</span><span class="token prefix inserted">+</span><span class="token line">     .handleCreateOpportunity(formObj);
</span><span class="token prefix inserted">+</span><span class="token line">   return false;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function onFailure(err) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   // shows the error message at the top of the sidebar
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("err").innerHTML = &#96;ERROR: $&#123;err&#125;&#96;;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function onSuccess() &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   // closes the sidebar
</span><span class="token prefix inserted">+</span><span class="token line">   google.script.host.close();
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,gd,Sp,Ov,wd,rt,W6=`<code class="language-diff">// main.gs
function createOpportunity() &#123;
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const pool = new Pool();
</span><span class="token prefix deleted">-</span><span class="token line"> pool.createOpportunity();
</span><span class="token prefix deleted">-</span><span class="token line"> pool.updateUI();
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const html = HtmlService
</span><span class="token prefix inserted">+</span><span class="token line">     .createHtmlOutputFromFile('formOpportunity')
</span><span class="token prefix inserted">+</span><span class="token line">     .setTitle('New Opportunity...');
</span><span class="token prefix inserted">+</span><span class="token line"> SpreadsheetApp.getUi().showSidebar(html);
</span></span>&#125;</code>`,vd,is,Av,Hi,Pv,Dv,Bi,Cv,Rv,Ed,ut,Y6=`<code class="language-js"><span class="token comment">// formHandlers.gs</span>
<span class="token keyword">function</span> <span class="token function">handleCreateOpportunity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool<span class="token punctuation">.</span><span class="token function">createOpportunity</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  pool<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,bd,kt,z6=`<code class="language-diff">// Pool.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> createOpportunity(data) &#123;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   this.opportunities.unshift(new Opportunity(&#123; sh: this.sh &#125;));
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const newOpportunity = new Opportunity(&#123; sh: this.sh, metadata: data &#125;);
</span><span class="token prefix inserted">+</span><span class="token line">   this.opportunities.unshift(
</span><span class="token prefix inserted">+</span><span class="token line">     newOpportunity
</span><span class="token prefix inserted">+</span><span class="token line">   );
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,xd,In,Lv,Fi,Mv,Hv,Sd,On,Bv,dt,Fv,jv,_d,_p,Nv,Td,ft,J6=`<code class="language-js"><span class="token comment">// StructToUIBridge.gs</span>

<span class="token keyword">class</span> <span class="token class-name">Field</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    name <span class="token operator">=</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"A field without a name makes no sense"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    separator <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>
    defaultValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>
    value <span class="token operator">=</span> defaultValue<span class="token punctuation">,</span>
    style <span class="token operator">=</span> normal<span class="token punctuation">,</span>
    <span class="token comment">// TODO: we could pass a validation function here</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>separator <span class="token operator">=</span> separator<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> defaultValue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// globals.js</span>
<span class="token keyword">const</span> normal <span class="token operator">=</span> SpreadsheetApp<span class="token punctuation">.</span><span class="token function">newTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setItalic</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Id,cs,Uv,ji,qv,Gv,Ni,Vv,Wv,Od,ht,$6=`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">StructToUIBridge</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>
    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    colBg <span class="token operator">=</span> <span class="token constant">COL_BG_DEFAULT</span><span class="token punctuation">,</span>
    colFg <span class="token operator">=</span> <span class="token constant">COL_FG_DEFAULT</span><span class="token punctuation">,</span>
    vAlign <span class="token operator">=</span> <span class="token constant">DEFAULT_VALIGN</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fields <span class="token operator">=</span> fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rawField</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span>rawField<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>colBg <span class="token operator">=</span> colBg<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>colFg <span class="token operator">=</span> colFg<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vAlign <span class="token operator">=</span> vAlign<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">updateAllValues</span><span class="token punctuation">(</span><span class="token parameter">fieldsData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> field <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> defaultValue <span class="token punctuation">&#125;</span> <span class="token operator">=</span> field<span class="token punctuation">;</span>
      field<span class="token punctuation">.</span>value <span class="token operator">=</span> name <span class="token keyword">in</span> fieldsData <span class="token operator">?</span> fieldsData<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">updateSomeValues</span><span class="token punctuation">(</span><span class="token parameter">fieldsData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> field <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span> <span class="token operator">=</span> field<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> fieldsData<span class="token punctuation">)</span> field<span class="token punctuation">.</span>value <span class="token operator">=</span> fieldsData<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">asPlainText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> separator <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator <span class="token operator">+</span> value <span class="token operator">+</span> separator<span class="token punctuation">,</span>
      <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">updateCell</span><span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ad,An,Yv,Ui,zv,Jv,Pd,mt,K6=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> updateCell(cell) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   // get the whole text as one long string
</span><span class="token prefix inserted">+</span><span class="token line">   let wholeText = this.asPlainText();
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // create a RichText builder
</span><span class="token prefix inserted">+</span><span class="token line">   let richTextContent = SpreadsheetApp.newRichTextValue().setText(wholeText);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // add markers at start end end of each field
</span><span class="token prefix inserted">+</span><span class="token line">   let startOffset = 0;
</span><span class="token prefix inserted">+</span><span class="token line">   for (let field of this.fields) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     const &#123; value, style, separator &#125; = field;
</span><span class="token prefix inserted">+</span><span class="token line">     let endOffset = Math.min(
</span><span class="token prefix inserted">+</span><span class="token line">       wholeText.length,
</span><span class="token prefix inserted">+</span><span class="token line">       startOffset + value.length + separator.length,
</span><span class="token prefix inserted">+</span><span class="token line">     );
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // sometimes we get weird combinations which are hard to debug
</span><span class="token prefix inserted">+</span><span class="token line">     if (startOffset !== endOffset) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">       richTextContent.setTextStyle(startOffset, endOffset, style);
</span><span class="token prefix inserted">+</span><span class="token line">     &#125;
</span><span class="token prefix inserted">+</span><span class="token line">     startOffset = endOffset;
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   cell
</span><span class="token prefix inserted">+</span><span class="token line">     .setRichTextValue(richTextContent.build())
</span><span class="token prefix inserted">+</span><span class="token line">     .setVerticalAlignment(this.vAlign)
</span><span class="token prefix inserted">+</span><span class="token line">     .setBackground(this.colBg)
</span><span class="token prefix inserted">+</span><span class="token line">     .setFontColor(this.colFg)
</span><span class="token prefix inserted">+</span><span class="token line">     .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   return this;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#125;</span></span></code>`,Dd,N,$v,qi,Kv,Xv,Gi,Zv,Qv,Vi,s2,n2,Cd,yt,X6=`<code class="language-diff">// Opportunity.gs

class Opportunity &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   sh = SS.getActiveSheet(),
</span><span class="token prefix unchanged"> </span><span class="token line">   row=DATA_ROW_START,
</span><span class="token prefix unchanged"> </span><span class="token line">   metadata=&#123;&#125;
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125; = &#123;&#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh = sh;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.row = row;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.stages = [];
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.metadata1 = new StructToUIBridge(&#123;
</span><span class="token prefix inserted">+</span><span class="token line">     fields: [
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "company", separator: " / ", defaultValue: "????", style: bold &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "position", separator: "&#92;n&#92;n", defaultValue: "[TBC]", style: bold &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "comments", style: smaller &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">     ],
</span><span class="token prefix inserted">+</span><span class="token line">     colBg: COL_BG_META,
</span><span class="token prefix inserted">+</span><span class="token line">     colFg: COL_FG_META
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.metadata2 = new StructToUIBridge(&#123;
</span><span class="token prefix inserted">+</span><span class="token line">     fields: [
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "date", separator: "&#92;n&#92;n", defaultValue: asString(new Date()), style: bold &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "source", separator: "&#92;n", defaultValue: "LINKEDIN", style: bold &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">       &#123; name: "contact", defaultValue: '???', style: normal &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">     ],
</span><span class="token prefix inserted">+</span><span class="token line">     colBg: COL_BG_META,
</span><span class="token prefix inserted">+</span><span class="token line">     colFg: COL_FG_META
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.loadStateFromSheet_();
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   if (metadata) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     this.updateMetadata_(metadata);
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,Rd,U,a2,Wi,t2,e2,Yi,p2,o2,zi,l2,i2,Ld,gt,Z6=`<code class="language-diff">// globals.gs
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const bold = SpreadsheetApp.newTextStyle().setBold(true).build();
</span><span class="token prefix inserted">+</span><span class="token line"> const italic = SpreadsheetApp.newTextStyle().setItalic(true).build();
</span><span class="token prefix inserted">+</span><span class="token line"> const smaller = SpreadsheetApp.newTextStyle()
</span><span class="token prefix inserted">+</span><span class="token line">   .setBold(false)
</span><span class="token prefix inserted">+</span><span class="token line">   .setFontSize(9)
</span><span class="token prefix inserted">+</span><span class="token line">   .build();</span></span></code>`,Md,Tp,c2,Hd,wt,Q6=`<code class="language-diff">// Opportunity.gs

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> updateMetadata_(metadata) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   if (!metadata) return;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.validateMetadata_(metadata);
</span><span class="token prefix inserted">+</span><span class="token line">   this.metadata1.updateAllValues(metadata);
</span><span class="token prefix inserted">+</span><span class="token line">   this.metadata2.updateAllValues(metadata);
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> validateMetadata_(metadata) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   validDate(metadata.date, 'Date');
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> updateUI() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   const startRow = this.row;
</span><span class="token prefix unchanged"> </span><span class="token line">   const startCol = DATA_COL_META1;
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   const nRows = 1;
</span><span class="token prefix deleted">-</span><span class="token line">   const nCols = 2;
</span><span class="token prefix deleted">-</span><span class="token line">   this.sh.getRange(startRow, startCol, nRows, nCols).setValues([
</span><span class="token prefix deleted">-</span><span class="token line">     ['NEW DATA', Math.random()]
</span><span class="token prefix deleted">-</span><span class="token line">   ]);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   let metadataCell = this.sh.getRange(startRow, startCol);
</span><span class="token prefix inserted">+</span><span class="token line">   this.metadata1.updateCell(metadataCell);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   metadataCell = this.sh.getRange(startRow, startCol + 1)
</span><span class="token prefix inserted">+</span><span class="token line">   this.metadata2.updateCell(metadataCell);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,Bd,vt,Ji,r2,u2,Fd,Et,sP=`<code class="language-js"><span class="token comment">/**
 * @param &#123;string|date|number&#125; maybeDate the date we are testing
 * @param &#123;string&#125; name the name of the field, for the error meage
 * @throws if date is not valid
 * @return &#123;string|date&#125;
 */</span>
<span class="token keyword">function</span> <span class="token function">validDate</span><span class="token punctuation">(</span><span class="token parameter">maybeDate<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> maybeDateUnderTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>maybeDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>maybeDateUnderTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> should be a valid date, but is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>maybeDate<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> maybeDate<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,jd,Pn,Dn,$i,k2,Nd,Cn,d2,Ki,f2,h2,Ud,bt,nP=`<code class="language-js"><span class="token comment">//Opportunity.gs</span>
  <span class="token function">loadStateFromSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>metadata1<span class="token punctuation">.</span><span class="token function">loadDataFromSheet</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sh<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>row<span class="token punctuation">,</span> <span class="token constant">DATA_COL_META1</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>metadata2<span class="token punctuation">.</span><span class="token function">loadDataFromSheet</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sh<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>row<span class="token punctuation">,</span> <span class="token constant">DATA_COL_META2</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,qd,Ip,m2,Gd,Op,y2,Vd,xt,aP=`<code class="language-diff">// StructToUIBridge.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.fields = fields.map((rawField) => new Field(rawField));
</span><span class="token prefix unchanged"> </span><span class="token line">   // forcing a separator - except on the last field
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.fields.slice(0, -1).forEach(field => &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     if (!field.separator) throw Error("Error: fields must have a separator")
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.colBg = colBg;</span></span></code>`,Wd,q,g2,Xi,w2,v2,Zi,E2,b2,Qi,x2,S2,Yd,St,tP=`<code class="language-js"><span class="token comment">// StructToUIBridge.gs</span>
  <span class="token function">generateParsingRegexp_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
        <span class="token comment">// accumulator -> the string so far</span>
        <span class="token comment">// &#123;separator&#125; -> the Field we are dealing with now,</span>
        <span class="token comment">//                but only take the separator property</span>
        <span class="token comment">// i -> the current index, to see whether it's the last</span>
        <span class="token comment">// arr -> the whole array, so that we can compare the length to i</span>
        <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>separator<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span>
          i <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>accumulator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(.*)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>separator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
            <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>accumulator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(.*?)</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>separator<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>
        <span class="token string">"^"</span>
      <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$"</span><span class="token punctuation">,</span>
      <span class="token string">"sm"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,zd,Rn,_2,sc,T2,I2,Jd,_t,eP=`<code class="language-js">  <span class="token function">loadDataFromSheet</span><span class="token punctuation">(</span>cell <span class="token operator">=</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"loadDataFromSheet called without a cell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> dataToParse <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// GAS always tries to be helpful and convert strings to something else \u{1F644}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataToParse <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      dataToParse <span class="token operator">=</span> <span class="token function">asString</span><span class="token punctuation">(</span>dataToParse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">const</span> matches <span class="token operator">=</span> dataToParse<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matches<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> matches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> matches<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,$d,Ap,O2,Kd,Pp,$,aT,Xd,Ln,Mn,nc,A2,Zd,G,P2,ac,D2,C2,tc,R2,L2,ec,M2,H2,Qd,Hn,Bn,pc,B2,sf,Fn,F2,oc,j2,N2,nf,jn,U2,lc,q2,G2,af,Tt,pP=`<code class="language-diff">// main.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "POOL", functionName: "noop" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "> New opportunity", functionName: "createOpportunity" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   null,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "OPPORTUNITY", functionName: "noop" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &#123; name: "> Edit opportunity", functionName: "editOpportunity" &#125;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function editOpportunity() &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   const html = HtmlService
</span><span class="token prefix inserted">+</span><span class="token line">       .createHtmlOutputFromFile('formOpportunity')
</span><span class="token prefix inserted">+</span><span class="token line">       .setTitle('New Opportunity...');
</span><span class="token prefix inserted">+</span><span class="token line">   SpreadsheetApp.getUi().showSidebar(html);
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,tf,rs,V2,ic,W2,Y2,cc,z2,J2,ef,It,oP=`<code class="language-js"><span class="token comment">// genericGotofritzUtils.gs</span>
<span class="token keyword">function</span> <span class="token function">indexOfSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// hardcoding SS - because the ActiveRange can only be in the ActiveSheet</span>
  <span class="token keyword">return</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActiveRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">dieUnlessSelection</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token string">"You need to select a cell"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">msgAndDie</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token parameter">prompt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Browser<span class="token punctuation">.</span><span class="token function">msgBox</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,pf,Dp,$2,of,Ot,lP=`<code class="language-diff">// globals.gs
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const HTML_ID_EXTRA_FORM_DATA = 'fromSheet';
</span></span>
// main.gs

function editOpportunity() &#123;
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  dieUnlessSelection();
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const opportunityRow = indexOfSelectedRow();
</span><span class="token prefix inserted">+</span><span class="token line">  const htmlFragment = &#96;
</span><span class="token prefix inserted">+</span><span class="token line">    &lt;div style="display: block; background: pink" id="$&#123;HTML_ID_EXTRA_FORM_DATA&#125;">
</span><span class="token prefix inserted">+</span><span class="token line">   &#123; "selectedRow": $&#123;opportunityRow&#125; &#125;
</span><span class="token prefix inserted">+</span><span class="token line">   &lt;/div>
</span><span class="token prefix inserted">+</span><span class="token line">   &#96;;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const html = HtmlService
</span><span class="token prefix unchanged"> </span><span class="token line">     .createHtmlOutputFromFile('formOpportunity')
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     .setTitle('New Opportunity...');
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     .setTitle('Edit Opportunity...')
</span><span class="token prefix inserted">+</span><span class="token line">     .append(htmlFragment)
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> SpreadsheetApp.getUi().showSidebar(html);
</span></span>&#125;</code>`,lf,Cp,K2,cf,Rp,Lp,tT,rf,Mp,X2,uf,At,iP=`<code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function prefill() &#123;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const htmlId = "fromSheet";
</span><span class="token prefix inserted">+</span><span class="token line">   initData = JSON.parse(document.getElementById(htmlId)?.innerHTML || "&#123;&#125;");
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    // NOTE: in the form you can debug with &#96;debugger&#96; and console.logs
</span><span class="token prefix inserted">+</span><span class="token line">   console.log('------ initData ------')
</span><span class="token prefix inserted">+</span><span class="token line">   console.table(initData)
</span></span></code>`,kf,Hp,Z2,df,Pt,cP=`<code class="language-js"><span class="token comment">// genericGotofritzUtils.gs</span>
<span class="token keyword">function</span> <span class="token function">asHTMLfragment</span><span class="token punctuation">(</span><span class="token parameter">jsonData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> htmlId <span class="token operator">=</span> <span class="token constant">HTML_ID_EXTRA_FORM_DATA</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
    &lt;div style="display: block; background: pink" id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>htmlId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">
      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">
    &lt;/div>
  </span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ff,Nn,Q2,rc,sE,nE,hf,Dt,rP=`<code class="language-js"><span class="token comment">// StructToUIBridge/gs</span>
<span class="token keyword">class</span> <span class="token class-name">StructToUIBridge</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>

  <span class="token function">asJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> jsonRepresentation <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> value<span class="token punctuation">&#125;</span> <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      jsonRepresentation<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> jsonRepresentation<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>


<span class="token comment">// Opportunity.gs</span>
<span class="token keyword">class</span> <span class="token class-name">Opportunity</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>

  <span class="token function">asJson</span><span class="token punctuation">(</span><span class="token parameter">additionalData<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata1<span class="token punctuation">.</span><span class="token function">asJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata2<span class="token punctuation">.</span><span class="token function">asJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>additionalData
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">...</span></code>`,mf,Bp,aE,yf,Ct,uP=`<code class="language-js"><span class="token comment">// Pool.gs</span>
<span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>

  <span class="token keyword">static</span> <span class="token function">asOpportunityIndex</span><span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"No row passed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> row <span class="token operator">-</span> <span class="token constant">DATA_ROW_START</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">static</span> <span class="token function">asRowIndex</span><span class="token punctuation">(</span>opportunityIndex<span class="token operator">=</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"No opportunityIndex passed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> opportunityIndex <span class="token operator">+</span> <span class="token constant">DATA_ROW_START</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,gf,Rt,kP=`<code class="language-diff">function editOpportunity() &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> dieUnlessSelection();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const opportunityRow = indexOfSelectedRow();
</span><span class="token prefix unchanged"> </span><span class="token line"> if (opportunityRow &lt; DATA_ROW_START) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   msgAndDie('You need to select one of the opportunities, not there');
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const opportunityIndex = Pool.asOpportunityIndex(opportunityRow);
</span><span class="token prefix inserted">+</span><span class="token line"> const pool = new Pool();
</span><span class="token prefix inserted">+</span><span class="token line"> const opportunityToEdit = pool.opportunities[opportunityIndex];
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const htmlFragment = &#96;
</span><span class="token prefix deleted">-</span><span class="token line">   &lt;div style="display: block; background: pink" id="$&#123;HTML_ID_EXTRA_FORM_DATA&#125;">
</span><span class="token prefix deleted">-</span><span class="token line">  &#123; "selectedRow": $&#123;opportunityRow&#125; &#125;
</span><span class="token prefix deleted">-</span><span class="token line">  &lt;/div>
</span><span class="token prefix deleted">-</span><span class="token line">  &#96;;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const htmlFragment = asHTMLfragment(
</span><span class="token prefix inserted">+</span><span class="token line">   opportunityToEdit.asJson(&#123;
</span><span class="token prefix inserted">+</span><span class="token line">     id: opportunityIndex
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;)
</span><span class="token prefix inserted">+</span><span class="token line"> );
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const html = HtmlService
</span><span class="token prefix unchanged"> </span><span class="token line">     .createHtmlOutputFromFile('formOpportunity')
</span><span class="token prefix unchanged"> </span><span class="token line"> ...</span></span></code>`,wf,Fp,tE,vf,Lt,dP=`<code class="language-diff">// formOpportunity.html

<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function prefill() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   const htmlId = "fromSheet";
</span><span class="token prefix unchanged"> </span><span class="token line">  initData = JSON.parse(document.getElementById(htmlId)?.innerHTML || "&#123;&#125;");
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const idEl = document.getElementById("id");
</span><span class="token prefix inserted">+</span><span class="token line">   if ('id' in initData) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     idEl.value = initData.row;
</span><span class="token prefix inserted">+</span><span class="token line">   &#125; else &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     idEl.parentNode.removeChild(idEl)
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    // this could be slicker... but no much benefit
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("yyyy").value = initData.yyyy ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("mm").value = initData.mm ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("dd").value = initData.dd ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("company").value = initData.company ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("position").value = initData.position ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("source").value = initData.source ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("contact").value = initData.contact ?? "";
</span><span class="token prefix inserted">+</span><span class="token line">   document.getElementById("comments").value = initData.comments ?? "";
</span></span>...

<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &lt;form onsubmit="handleFormSubmit(this)">
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &lt;input type="hidden" name="id" id="id" />
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &lt;input type="hidden" name="date" id="date" /></span></span></code>`,Ef,jp,eE,bf,Mt,fP=`<code class="language-diff">// formHandlers.gs
function handleCreateOpportunity(data) &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const pool = new Pool();
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (data.id) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   pool.updateOpportunity(data, data.id);
</span><span class="token prefix inserted">+</span><span class="token line"> &#125; else &#123;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   pool.createOpportunity(data);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> pool.updateUI();
</span></span>&#125;</code>`,xf,Np,pE,Sf,Ht,hP=`<code class="language-js">  <span class="token function">updateOpportunity</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>id <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">There isn't an opportunity </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Opportunity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">sh</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sh<span class="token punctuation">,</span>
      <span class="token literal-property property">metadata</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
      <span class="token literal-property property">row</span><span class="token operator">:</span> Pool<span class="token punctuation">.</span><span class="token function">asRowIndex</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,_f,Un,qn,uc,oE,Tf,us,lE,kc,iE,cE,dc,rE,uE,If,Bt,mP=`<code class="language-js"><span class="token comment">// main.gs</span>
  <span class="token operator">...</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"POOL"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"> New opportunity"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"createOpportunity"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"OPPORTUNITY"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"> Edit Opportunity"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"editOpportunity"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"> Delete Opportunity"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"deleteOpportunity"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"STAGE"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> <span class="token string">"noop"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>

<span class="token keyword">function</span> <span class="token function">deleteOpportunity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">dieUnlessSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> opportunityRow <span class="token operator">=</span> <span class="token function">indexOfSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opportunityRow <span class="token operator">&lt;</span> <span class="token constant">DATA_ROW_START</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token string">'You need to select one of the opportunities, not there'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> ui <span class="token operator">=</span> SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getUi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  response <span class="token operator">=</span> ui<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>
    <span class="token string">'Are you sure you want to delete this opportunity?'</span><span class="token punctuation">,</span>
    ui<span class="token punctuation">.</span>ButtonSet<span class="token punctuation">.</span><span class="token constant">OK_CANCEL</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">===</span> ui<span class="token punctuation">.</span>Button<span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> opportunityIndex <span class="token operator">=</span> Pool<span class="token punctuation">.</span><span class="token function">asOpportunityIndex</span><span class="token punctuation">(</span>opportunityRow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">deleteOpportunity</span><span class="token punctuation">(</span>opportunityIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Of,Ft,fc,kE,dE,Af,jt,yP=`<code class="language-js"><span class="token comment">// Pool.gs</span>
  <span class="token function">deleteOpportunity</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>id <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">There isn't an opportunity </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,Pf,Gn,Vn,hc,fE,Df,Wn,hE,mc,mE,yE,Cf,Up,gE,Rf,Yn,Nt,yc,wE,vE,gc,EE,bE,Ut,wc,qp,gP=`<code class="language-diff">class Opportunity &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   sh = SS.getActiveSheet(),
</span><span class="token prefix unchanged"> </span><span class="token line">   row=DATA_ROW_START,
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   metadata
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125; = &#123;&#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh = sh;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.row = row;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.stages = [];
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.metadata1 = new StructToUIBridge(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     fields: [
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "company",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: " / ",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: "????",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "position",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: "[TBC]",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "comments",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: smaller
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">     ],
</span><span class="token prefix unchanged"> </span><span class="token line">     colBg: COL_BG_META,
</span><span class="token prefix unchanged"> </span><span class="token line">     colFg: COL_FG_META
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.metadata2 = new StructToUIBridge(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     fields: [
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "date",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: asString(new Date()),
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "source",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: "LINKEDIN",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "contact",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: '???',
</span><span class="token prefix unchanged"> </span><span class="token line">         style: normal
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">     ],
</span><span class="token prefix unchanged"> </span><span class="token line">     colBg: COL_BG_META,
</span><span class="token prefix unchanged"> </span><span class="token line">     colFg: COL_FG_META
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.loadStateFromSheet();
</span><span class="token prefix unchanged"> </span><span class="token line">   if (metadata) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     this.updateMetadata_(metadata);
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>...</code>`,xE,vc,Gp,wP=`<code class="language-diff">class Step &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   sh = SS.getActiveSheet(),
</span><span class="token prefix unchanged"> </span><span class="token line">   row,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   col = DATA_COL_LATEST,
</span><span class="token prefix inserted">+</span><span class="token line">   stepData
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125; = &#123;&#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh = sh;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.row = row;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.col = col;
</span></span>

<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.data = new StructToUIBridge(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     fields: [
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "date", separator: " __ ",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: asString(new Date()),
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "time",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: '',
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "title",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: "INTERVIEW",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: bold &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "contact",
</span><span class="token prefix unchanged"> </span><span class="token line">         separator: "&#92;n&#92;n",
</span><span class="token prefix unchanged"> </span><span class="token line">         defaultValue: '???',
</span><span class="token prefix unchanged"> </span><span class="token line">         style: normal
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">         name: "comments",
</span><span class="token prefix unchanged"> </span><span class="token line">         style: smaller
</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">     ],
</span><span class="token prefix unchanged"> </span><span class="token line">     colBg: '#00ffff',
</span><span class="token prefix unchanged"> </span><span class="token line">     colFg: COL_FG_META
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;);
</span></span>














<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.loadStateFromSheet();
</span><span class="token prefix unchanged"> </span><span class="token line">   if (stepData) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     this.updateStepdata_(stepData);
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>...</code>`,Lf,Vp,SE,Mf,qt,vP=`<code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "POOL", functionName: "noop" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "> New opportunity", functionName: "createOpportunity" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> null,
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "OPPORTUNITY", functionName: "noop" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "> Edit Opportunity", functionName: "editOpportunity" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "> Delete Opportunity", functionName: "deleteOpportunity" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#123; name: "> New Step", functionName: "createStep" &#125;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> null,
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123; name: "STAGE", functionName: "noop" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#123; name: "> Edit Step", functionName: "editStep" &#125;,
</span><span class="token prefix inserted">+</span><span class="token line"> &#123; name: "> Delete Step", functionName: "deleteStep" &#125;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...</span></span></code>`,Hf,zn,Jn,Ec,_E,Bf,Wp,TE,Ff,K,IE,bc,OE,AE,xc,PE,DE,Sc,CE,jf,Gt,EP=`<code class="language-diff">// StructToUIBridge.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   ...
</span><span class="token prefix unchanged"> </span><span class="token line"> this.fields = fields.map((rawField) => new Field(rawField));
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> this.fieldNames = this.fields.reduce(
</span><span class="token prefix inserted">+</span><span class="token line">   (accumulator, &#123;name&#125;, i) => &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     accumulator[name] = i;
</span><span class="token prefix inserted">+</span><span class="token line">     return accumulator;
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">   &#123;&#125;
</span><span class="token prefix inserted">+</span><span class="token line"> )
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> this.fields.slice(0, -1).forEach(field => &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   ...</span></span></code>`,Nf,Yp,RE,Uf,Vt,bP=`<code class="language-js"><span class="token comment">// StructToUIBridge.gs</span>
  <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>fieldNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,qf,zp,LE,Gf,Wt,xP=`<code class="language-html">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
  function prefill() &#123;
    const htmlId = "fromSheet";

    initData = JSON.parse(document.getElementById(htmlId)?.innerHTML || "&#123;&#125;");
    if (!("id" in initData)) &#123;
      throw Error("Missing 'id' property");
    &#125;

    const rowEl = document.getElementById("row");
    if ("row" in initData) &#123;
      rowEl.value = initData.row;
    &#125; else &#123;
      rowEl.parentNode.removeChild(rowEl);
    &#125;
    document.getElementById("id").value = initData.id;
    document.getElementById("comments").value = initData.comments ?? "";
  &#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleFormSubmit(this)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>More info (free form for comments)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code>`,Vf,$n,ME,_c,HE,BE,Wf,Yt,SP=`<code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "> Delete Opportunity", functionName: "deleteOpportunity" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &#123; name: "> Edit Opportunity Comments", functionName: "editCommentsOpportunity" &#125;,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "> New Step", functionName: "createStep" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   null,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "STAGE", functionName: "noop" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "> Edit Step", functionName: "editStep" &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; name: "> Delete Step", functionName: "deleteStep" &#125;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &#123; name: "> Edit Step Comments", functionName: "editCommentsStep" &#125;,</span></span></code>`,Yf,Jp,FE,zf,Kn,zt,Tc,jE,NE,Ic,UE,qE,Jt,Oc,$p,_P=`<code class="language-diff">function editCommentsOpportunity() &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> dieUnlessSelection();
</span><span class="token prefix unchanged"> </span><span class="token line"> const opportunityRow = indexOfSelectedRow();
</span><span class="token prefix unchanged"> </span><span class="token line"> if (opportunityRow &lt; DATA_ROW_START) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   msgAndDie('You need to select one of ' +
</span><span class="token prefix unchanged"> </span><span class="token line">     'the opportunities, not there');
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const opportunityIndex = Pool
</span><span class="token prefix inserted">+</span><span class="token line">   .asOpportunityIndex(opportunityRow);
</span></span>








<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const pool = new Pool();
</span></span>

<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const opportunityToEdit = pool.opportunities[
</span><span class="token prefix unchanged"> </span><span class="token line">   opportunityIndex
</span><span class="token prefix unchanged"> </span><span class="token line"> ];
</span><span class="token prefix unchanged"> </span><span class="token line"> const htmlFragment = asHTMLfragment(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   id: opportunityIndex,
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   comments: opportunityToEdit.getFieldValue(
</span><span class="token prefix unchanged"> </span><span class="token line">     'comments'
</span><span class="token prefix unchanged"> </span><span class="token line">   )
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const html = HtmlService
</span><span class="token prefix unchanged"> </span><span class="token line">     .createHtmlOutputFromFile(
</span><span class="token prefix unchanged"> </span><span class="token line">       'editCommentForm'
</span><span class="token prefix unchanged"> </span><span class="token line">     )
</span><span class="token prefix unchanged"> </span><span class="token line">     .append(htmlFragment)
</span><span class="token prefix unchanged"> </span><span class="token line">     .setWidth(DIALOG_WIDTH)
</span><span class="token prefix unchanged"> </span><span class="token line">     .setHeight(DIALOG_HEIGHT);
</span><span class="token prefix unchanged"> </span><span class="token line"> SpreadsheetApp
</span><span class="token prefix unchanged"> </span><span class="token line">   .getUi()
</span><span class="token prefix unchanged"> </span><span class="token line">   .showModalDialog(
</span><span class="token prefix unchanged"> </span><span class="token line">     html,
</span><span class="token prefix unchanged"> </span><span class="token line">     'Edit Comment...'
</span><span class="token prefix unchanged"> </span><span class="token line">   );
</span></span>&#125;</code>`,GE,Ac,Kp,TP=`<code class="language-diff">function editCommentsStep() &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> dieUnlessSelection();
</span><span class="token prefix unchanged"> </span><span class="token line"> const opportunityRow = indexOfSelectedRow();
</span><span class="token prefix unchanged"> </span><span class="token line"> if (opportunityRow &lt; DATA_ROW_START) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   msgAndDie('You need to select one of ' +
</span><span class="token prefix unchanged"> </span><span class="token line">     'the opportunities, not there');
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>


<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const stageCol = indexOfSelectedCol();
</span><span class="token prefix inserted">+</span><span class="token line"> if (cellIsEmpty(opportunityRow, stageCol)) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   msgAndDie('Nothing to edit');
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span><span class="token prefix inserted">+</span><span class="token line"> const stageIndex = Opportunity.asStepIndex(
</span><span class="token prefix inserted">+</span><span class="token line">   stageCol
</span><span class="token prefix inserted">+</span><span class="token line"> );
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const opportunity = new Opportunity(
</span><span class="token prefix unchanged"> </span><span class="token line">   &#123; row: opportunityRow &#125;
</span><span class="token prefix unchanged"> </span><span class="token line"> );
</span><span class="token prefix unchanged"> </span><span class="token line"> const stageToEdit = opportunity.stages[
</span><span class="token prefix unchanged"> </span><span class="token line">   stageIndex
</span><span class="token prefix unchanged"> </span><span class="token line"> ];
</span><span class="token prefix unchanged"> </span><span class="token line"> const htmlFragment = asHTMLfragment(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   id: stageIndex,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   row: opportunityRow,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   comments: stageToEdit.getFieldValue(
</span><span class="token prefix unchanged"> </span><span class="token line">     'comments'
</span><span class="token prefix unchanged"> </span><span class="token line">   )
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const html = HtmlService
</span><span class="token prefix unchanged"> </span><span class="token line">     .createHtmlOutputFromFile(
</span><span class="token prefix unchanged"> </span><span class="token line">       'editCommentForm'
</span><span class="token prefix unchanged"> </span><span class="token line">     )
</span><span class="token prefix unchanged"> </span><span class="token line">     .append(htmlFragment)
</span><span class="token prefix unchanged"> </span><span class="token line">     .setWidth(DIALOG_WIDTH)
</span><span class="token prefix unchanged"> </span><span class="token line">     .setHeight(DIALOG_HEIGHT);
</span><span class="token prefix unchanged"> </span><span class="token line"> SpreadsheetApp
</span><span class="token prefix unchanged"> </span><span class="token line">   .getUi()
</span><span class="token prefix unchanged"> </span><span class="token line">   .showModalDialog(
</span><span class="token prefix unchanged"> </span><span class="token line">     html,
</span><span class="token prefix unchanged"> </span><span class="token line">     'Edit Comment...'
</span><span class="token prefix unchanged"> </span><span class="token line">   );
</span></span>&#125;
</code>`,Jf,ks,VE,Pc,WE,YE,Dc,zE,JE,$f,$t,IP=`<code class="language-js"><span class="token comment">// Step.gs</span>
  <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,Kf,Kt,$E,Cc,KE,Xf,Xt,OP=`<code class="language-js"><span class="token keyword">const</span> html <span class="token operator">=</span> HtmlService<span class="token punctuation">.</span><span class="token function">createHtmlOutputFromFile</span><span class="token punctuation">(</span><span class="token string">"editCommentForm"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>htmlFragment<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token constant">DIALOG_WIDTH</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token constant">DIALOG_HEIGHT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getUi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showModalDialog</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"Edit Comment..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Zf,Xp,XE,Qf,Zt,AP=`<code class="language-js"><span class="token comment">// formHandlers.gs</span>
<span class="token keyword">function</span> <span class="token function">handleEditComment</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> weAreEditingAStep <span class="token operator">=</span> <span class="token string">"row"</span> <span class="token keyword">in</span> data<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>weAreEditingAStep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> opportunity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Opportunity</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">row</span><span class="token operator">:</span> data<span class="token punctuation">.</span>row <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    opportunity<span class="token punctuation">.</span><span class="token function">updateFieldInStep</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">comments</span><span class="token operator">:</span> data<span class="token punctuation">.</span>comments <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// in this case the id represents the Step, i.e. a col</span>
      data<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    opportunity<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">updateFieldsInOpportunity</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">comments</span><span class="token operator">:</span> data<span class="token punctuation">.</span>comments <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// in this case the id represents the Opp., i.e. a row</span>
      data<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,sh,X,Rc,ZE,QE,Lc,sb,nb,Mc,ab,tb,nh,Qt,PP=`<code class="language-js"><span class="token comment">//Pool.gs</span>
  <span class="token function">updateFieldsInOpportunity</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>id <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">There isn't an opportunity </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>opportunities<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">updateFields</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code>`,ah,Zp,eb,th,Qp,Z,eT,eh,Xn,Zn,Hc,pb,ph,so,ob,oh,Qn,sa,Bc,lb,lh,no,ib,ih,ao,cb,ch,na,rb,Fc,ub,kb,rh,aa,ta,jc,db,uh,to,eo,pT,kh,ea,fb,Nc,hb,mb,dh,se,DP=`<code class="language-js"><span class="token comment">// State.gs</span>
<span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> order<span class="token punctuation">,</span> bg<span class="token punctuation">,</span> fg<span class="token punctuation">,</span> name<span class="token punctuation">,</span> group <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bg <span class="token operator">=</span> bg<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fg <span class="token operator">=</span> fg<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,fh,pa,yb,Uc,gb,wb,hh,ne,CP=`<code class="language-js"><span class="token comment">// State.gs</span>
<span class="token keyword">class</span> <span class="token class-name">StatesMgr</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">loadStates</span><span class="token punctuation">(</span><span class="token parameter">range</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> max <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> order <span class="token operator">&lt;=</span> max<span class="token punctuation">;</span> order <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> cell <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// from " a_group   /  a_name " to "a_group", "a_name"</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>group<span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> cell
        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> bg <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> fg <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getFontColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        order<span class="token punctuation">,</span>
        bg<span class="token punctuation">,</span>
        fg<span class="token punctuation">,</span>
        name<span class="token punctuation">,</span>
        group<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,mh,oa,vb,qc,Eb,bb,yh,po,oo,oT,gh,la,ia,Gc,xb,wh,ca,Sb,Vc,_b,Tb,vh,ae,RP=`<code class="language-js"><span class="token comment">// genericGotofritzUtils.gs</span>
<span class="token keyword">function</span> <span class="token function">getBgColor</span><span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> colorObj <span class="token operator">=</span>
    cell<span class="token punctuation">.</span><span class="token function">getBackgroundObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> SpreadsheetApp<span class="token punctuation">.</span>ColorType<span class="token punctuation">.</span><span class="token constant">RGB</span>
      <span class="token operator">?</span> cell<span class="token punctuation">.</span><span class="token function">getBackgroundObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getSpreadsheetTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConcreteColor</span><span class="token punctuation">(</span>
          cell<span class="token punctuation">.</span><span class="token function">getBackgroundObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asThemeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThemeColorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> colorObj<span class="token punctuation">.</span><span class="token function">asRgbColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHexString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getFgColor</span><span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> colorObj <span class="token operator">=</span>
    cell<span class="token punctuation">.</span><span class="token function">getFontColorObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> SpreadsheetApp<span class="token punctuation">.</span>ColorType<span class="token punctuation">.</span><span class="token constant">RGB</span>
      <span class="token operator">?</span> cell<span class="token punctuation">.</span><span class="token function">getFontColorObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getSpreadsheetTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConcreteColor</span><span class="token punctuation">(</span>
          cell<span class="token punctuation">.</span><span class="token function">getFontColorObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asThemeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThemeColorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> colorObj<span class="token punctuation">.</span><span class="token function">asRgbColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHexString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Eh,lo,Ib,bh,te,LP=`<code class="language-diff">// State.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   .map((x) => x.trim());
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const bg = cell.getBackground()
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const bg = getBgColor(cell)
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const fg = cell.getFontColor(),
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const fg = getFgColor(cell),
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const state = new State(&#123;</span></span></code>`,xh,ra,ua,Wc,Ob,Sh,io,Ab,_h,d,Pb,Yc,Db,Cb,zc,Rb,Lb,Jc,Mb,Hb,$c,Bb,Fb,Kc,jb,Nb,Xc,Ub,qb,Zc,Gb,Vb,Qc,Wb,Yb,Th,ee,MP=`<code class="language-js"><span class="token comment">// globals.gs</span>
<span class="token keyword">const</span> <span class="token constant">A_CONST</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token string">"what it was originally"</span><span class="token punctuation">;</span>

<span class="token comment">// Code.gs</span>
<span class="token keyword">function</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getUi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token string">"a menu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"What is App?"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// App.gs</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token constant">A_CONST</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// func.gs</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Browser<span class="token punctuation">.</span><span class="token function">msgBox</span><span class="token punctuation">(</span><span class="token constant">A_CONST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Browser<span class="token punctuation">.</span><span class="token function">msgBox</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ih,ka,zb,sr,Jb,$b,Oh,pe,HP=`<code class="language-js"><span class="token comment">// global</span>
<span class="token keyword">let</span> app_<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    app_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> app_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ah,ds,Kb,nr,Xb,Zb,ar,Qb,sx,Ph,oe,BP=`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>states_ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">get</span> <span class="token function">states</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>states_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>states_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatesMgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadStates_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states_<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">loadStates_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> sh <span class="token operator">=</span> <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> range <span class="token operator">=</span> sh<span class="token punctuation">.</span><span class="token function">getRange</span><span class="token punctuation">(</span>
      <span class="token constant">DATA_ROW_HEADER</span><span class="token punctuation">,</span>
      <span class="token constant">DATA_COL_STATES_START</span><span class="token punctuation">,</span>
      <span class="token number">1</span><span class="token punctuation">,</span>
      sh<span class="token punctuation">.</span><span class="token function">getLastColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">DATA_COL_STATES_START</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>states_<span class="token punctuation">.</span><span class="token function">loadStates</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Dh,co,nx,Ch,le,FP=`<code class="language-diff">// main.gs
function onOpen() &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> SpreadsheetApp.getActiveSpreadsheet().setSpreadsheetTimeZone("Europe/Berlin");
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> SpreadsheetApp.getUi().createMenu("CRM 4.0" )
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     .addItem('APP - test', function () &#123;
</span><span class="token prefix inserted">+</span><span class="token line">       Logger.log(getApp().states)
</span><span class="token prefix inserted">+</span><span class="token line">     &#125;)</span></span></code>`,Rh,ro,ax,Lh,da,fa,tr,tx,Mh,uo,ex,Hh,fs,er,px,ox,pr,lx,ix,or,cx,Bh,x,rx,lr,ux,kx,ir,dx,fx,cr,hx,mx,rr,yx,gx,ur,wx,vx,Fh,ha,ma,kr,Ex,jh,w,bx,dr,xx,Sx,fr,_x,Tx,hr,Ix,Ox,mr,Ax,Px,yr,Dx,Cx,gr,Rx,Lx,Nh,ie,jP=`<code class="language-diff">// StructToUIBridge.gs
class StructToUIBridge &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   fields = [],
</span><span class="token prefix unchanged"> </span><span class="token line">   colBg = COL_BG_DEFAULT,
</span><span class="token prefix unchanged"> </span><span class="token line">   colFg = COL_FG_DEFAULT,
</span><span class="token prefix unchanged"> </span><span class="token line">   vAlign = DEFAULT_VALIGN,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   state,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   ...
</span><span class="token prefix unchanged"> </span><span class="token line">   this.vAlign = vAlign;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.state_ = state;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.parser = this.generateParsingRegexp_();
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> get state() &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   return this.state_;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> set state(stateThing) &#123;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,Uh,D,Mx,wr,Hx,Bx,vr,Fx,jx,Er,Nx,Ux,br,qx,Gx,qh,ce,NP=`<code class="language-js"><span class="token comment">// StructToUIBridge.gs</span>

  <span class="token keyword">set</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token parameter">stateThing</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// if state_ is falsy, it means this is stateless, so we don't care</span>
    <span class="token comment">// if boolean but truthy, it means we haven't initialised it yet</span>
    <span class="token comment">// either way, no need for anything fancy</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> stateThing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">"boolean"</span><span class="token operator">:</span>
      <span class="token keyword">case</span> <span class="token string">"undefined"</span><span class="token operator">:</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state_ <span class="token operator">=</span> stateThing<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token comment">// a string can be either the bgColor or the name of the state</span>
      <span class="token keyword">case</span> <span class="token string">"string"</span><span class="token operator">:</span>
        stateThing <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stateFromName</span><span class="token punctuation">(</span>stateThing<span class="token punctuation">)</span> <span class="token operator">??</span>
          <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stateFromColor</span><span class="token punctuation">(</span>stateThing<span class="token punctuation">)</span> <span class="token operator">??</span>
          <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">// I don't normally use fall-throughs in switch statements,</span>
        <span class="token comment">// but here it seems to fit</span>

      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stateThing <span class="token keyword">instanceof</span> <span class="token class-name">State</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>colBg <span class="token operator">=</span> stateThing<span class="token operator">?.</span>bg<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>colFg <span class="token operator">=</span> stateThing<span class="token operator">?.</span>fg<span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>state_ <span class="token operator">=</span> stateThing<span class="token operator">?.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Unexpected type for State: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">typeof</span> stateThing<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stateThing<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Gh,C,Vx,xr,Wx,Yx,Sr,zx,Jx,_r,$x,Kx,Tr,Xx,Zx,Vh,re,UP=`<code class="language-diff">// Step.gs
class Step &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   sh = SS.getActiveSheet(),
</span><span class="token prefix unchanged"> </span><span class="token line">   row,
</span><span class="token prefix unchanged"> </span><span class="token line">   col = DATA_COL_LATEST,
</span><span class="token prefix unchanged"> </span><span class="token line">   stepData
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125; = &#123;&#125;) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.sh = sh;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.row = row;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.col = col;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.stepData = new StructToUIBridge(&#123;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     state: true,
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     ...</span></span></code>`,Wh,y,Ir,Qx,s3,Or,n3,a3,Ar,t3,e3,Pr,p3,o3,Dr,l3,i3,Cr,c3,r3,Rr,u3,k3,Yh,ue,qP=`<code class="language-diff">// StructToUIBridge.gs

<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> loadDataFromSheet(cell = die("loadDataFromSheet called without a cell")) &#123;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.loadTextDataFromSheet_(cell);
</span><span class="token prefix inserted">+</span><span class="token line">   this.loadStateDataFromSheet_(cell);
</span><span class="token prefix inserted">+</span><span class="token line">   return this;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> loadTextDataFromSheet_(cell) &#123;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let dataToParse = cell.getValue();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // GAS always tries to be helpful and convert strings to something else \u{1F644}
</span><span class="token prefix unchanged"> </span><span class="token line">   if (dataToParse instanceof Date) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     dataToParse = asString(dataToParse[i]);
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const matches = dataToParse.match(this.parser);
</span><span class="token prefix unchanged"> </span><span class="token line">   if (!matches) return this;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   for (let i = 0, j = 1; i &lt; this.fields.length &amp;&amp; j &lt; matches.length; i += 1, j += 1) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     this.fields[i].value = matches[j];
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span><span class="token prefix unchanged"> </span><span class="token line">   return this;
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> loadStateDataFromSheet_(cell) &#123;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // if this.state_ is falsy this is stateless
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   if (!this.state_) return this;
</span><span class="token prefix inserted">+</span><span class="token line">   this.state = getBgColor(cell);
</span><span class="token prefix inserted">+</span><span class="token line">   return this;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,zh,ya,Lr,d3,f3,Mr,h3,Jh,ke,GP=`<code class="language-diff">// App.gs
class App &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> stateFromColor(color) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   return this.states.fromColor(color)
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...
</span></span>&#125;</code>`,$h,h,m3,Hr,y3,g3,Br,w3,v3,Fr,E3,b3,jr,x3,S3,Nr,_3,T3,Ur,I3,O3,qr,A3,P3,Kh,de,VP=`<code class="language-diff">// State.gs
class StatesMgr &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor() &#123;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.byColor = &#123;&#125;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.list = [];
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   return Object.freeze(this);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> fromColor(rgb) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   return this.byColor[rgb];
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> loadStates(range) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   const max = range.getValues()[0].length;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const list = [];
</span><span class="token prefix inserted">+</span><span class="token line">   const byColor = &#123;&#125;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   for (let order = 1; order &lt;= max; order += 1) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     ..
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     byColor[bg] = state;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     this.list.push(state);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     list.push(state);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.list = Object.freeze(list);
</span><span class="token prefix inserted">+</span><span class="token line">   this.byColor = Object.freeze(byColor);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,Xh,ko,D3,Zh,ga,wa,Gr,C3,Qh,fe,WP=`<code class="language-diff">// main.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const htmlFragment = asHTMLfragment(
</span><span class="token prefix unchanged"> </span><span class="token line">   stepToEdit.asJson(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     id: stepIndex,
</span><span class="token prefix unchanged"> </span><span class="token line">     row: opportunityRow,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     allStates: getApp().statesAsList(),
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;)
</span><span class="token prefix unchanged"> </span><span class="token line"> );</span></span></code>`,sm,va,R3,Vr,L3,M3,nm,he,YP=`<code class="language-diff">// StructToUIBridge.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> asJson() &#123;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   const jsonRepresentation = &#123;&#125;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const jsonRepresentation = this.state_
</span><span class="token prefix inserted">+</span><span class="token line">   ? &#123;
</span><span class="token prefix inserted">+</span><span class="token line">       state: this.state_,
</span><span class="token prefix inserted">+</span><span class="token line">       colBg: this.colBg,
</span><span class="token prefix inserted">+</span><span class="token line">       colFg: this.colFg,
</span><span class="token prefix inserted">+</span><span class="token line">     &#125;
</span><span class="token prefix inserted">+</span><span class="token line">   : &#123;&#125;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   for (let &#123;name, value&#125; of this.fields) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     jsonRepresentation[name] = value;
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span><span class="token prefix unchanged"> </span><span class="token line">   return jsonRepresentation;
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,am,fo,H3,tm,me,zP=`<code class="language-js"><span class="token comment">// App.gs</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
  <span class="token function">statesAsListOfNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">asListOfNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span></code>`,em,ho,B3,pm,ye,JP=`<code class="language-diff">// State.gs

class StatesMgr &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.byColor = &#123;&#125;;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.byName = &#123;&#125;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.list = [];
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> asListOfNames() &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   return Object.keys(this.byName);
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> loadStates(range) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   const max = range.getValues()[0].length;
</span><span class="token prefix unchanged"> </span><span class="token line">   const list = [];
</span><span class="token prefix unchanged"> </span><span class="token line">   const byColor = &#123;&#125;;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const byName = &#123;&#125;;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   for (let order = 1; order &lt;= max; order += 1) &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">     const cell = range.getCell(1, order);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // from " a_group   /  a_name " to "a_group", "a_name"
</span><span class="token prefix unchanged"> </span><span class="token line">     const [group, name] = cell
</span><span class="token prefix unchanged"> </span><span class="token line">       .getValue()
</span><span class="token prefix unchanged"> </span><span class="token line">       .split("/")
</span><span class="token prefix unchanged"> </span><span class="token line">       .map((x) => x.trim());
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     const bg = getBgColor(cell);
</span><span class="token prefix unchanged"> </span><span class="token line">     const fg = getFgColor(cell);
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     const state = new State(&#123;
</span><span class="token prefix unchanged"> </span><span class="token line">       order,
</span><span class="token prefix unchanged"> </span><span class="token line">       bg,
</span><span class="token prefix unchanged"> </span><span class="token line">       fg,
</span><span class="token prefix unchanged"> </span><span class="token line">       name,
</span><span class="token prefix unchanged"> </span><span class="token line">       group
</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;);
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     byColor[bg] = state;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     byColor[bg] = byName[name] = state;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     list.push(state);
</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.byColor = Object.freeze(byColor);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.byName = Object.freeze(byName);
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.list = Object.freeze(list);
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,om,mo,F3,lm,ge,$P=`<code class="language-diff">// genericGotofritzUtils.gs
function asHTMLfragment(jsonData=&#123;&#125;, htmlId=HTML_ID_EXTRA_FORM_DATA) &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return &#96;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   &lt;div style="display: none; background: pink" id="$&#123;htmlId&#125;">
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &lt;div style="display: block; background: pink" id="$&#123;htmlId&#125;">
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    $&#123;JSON.stringify(jsonData)&#125;
</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;/div>
</span><span class="token prefix unchanged"> </span><span class="token line"> &#96;;
</span></span>&#125;</code>`,im,yo,j3,cm,go,wo,lT,rm,vo,N3,um,we,KP=`<code class="language-diff">// formStep.gs
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &lt;script>
</span><span class="token prefix unchanged"> </span><span class="token line">     let initData = &#123;&#125;;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     function prefill() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">       ...
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       const el = document.getElementById("state");
</span><span class="token prefix inserted">+</span><span class="token line">       if (Array.isArray(initData.allStates)) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">         initData.allStates.forEach((state, i) => &#123;
</span><span class="token prefix inserted">+</span><span class="token line">           el.add(new Option(state));
</span><span class="token prefix inserted">+</span><span class="token line">         &#125;)
</span><span class="token prefix inserted">+</span><span class="token line">       &#125;
</span><span class="token prefix inserted">+</span><span class="token line">       el.value = initData.state;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;
</span><span class="token prefix unchanged"> </span><span class="token line">     ...
</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;div>
</span><span class="token prefix unchanged"> </span><span class="token line">       &lt;label for="title">Title&lt;/label>
</span><span class="token prefix unchanged"> </span><span class="token line">       &lt;input type="text" name="title" id="title" required="required" />
</span><span class="token prefix unchanged"> </span><span class="token line">     &lt;/div>
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &lt;div>
</span><span class="token prefix inserted">+</span><span class="token line">       &lt;label for="title">State&lt;/label>
</span><span class="token prefix inserted">+</span><span class="token line">       &lt;select name="state" id="state">
</span><span class="token prefix inserted">+</span><span class="token line">       &lt;/select>
</span><span class="token prefix inserted">+</span><span class="token line">     &lt;/div>
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &lt;div>
</span><span class="token prefix unchanged"> </span><span class="token line">       &lt;label for="contact">Contact&lt;/label></span></span></code>`,km,Eo,bo,iT,dm,Ea,ba,Wr,U3,fm,m,q3,Yr,G3,V3,zr,W3,Y3,Jr,z3,J3,$r,$3,K3,Kr,X3,Z3,Xr,Q3,sS,Zr,nS,aS,hm,ve,XP=`<code class="language-diff">// Step.gs
class Step &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> get state() &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   return this.stepData.state;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> set state(state) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   this.stepData.state = state;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> updateStepData_(stepData) &#123;
</span><span class="token prefix deleted">-</span><span class="token line">   if (!stepData) return;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> updateStepData_(initData) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   if (!initData) return;
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.validateStepData_(initData);
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const &#123; state, ...stepData &#125; = initData;
</span><span class="token prefix inserted">+</span><span class="token line">   this.state = state;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   this.stepData.updateAllValues(stepData);
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code>`,mm,xo,tS,ym,So,Q,cT,gm,xa,Sa,Qr,eS,wm,S,pS,su,oS,lS,nu,iS,cS,au,rS,uS,tu,kS,dS,eu,fS,hS,vm,_a,Ta,pu,mS,Em,_o,yS,bm,V,ou,lu,gS,wS,iu,xs,vS,cu,ES,bS,ru,xS,SS,_S,uu,Ee,TS,ku,IS,OS,AS,du,be,PS,fu,DS,CS,xm,To,RS,Sm,Ia,LS,hu,MS,HS,_m,Io,BS,Tm,xe,ZP=`<code class="language-js"><span class="token comment">// main.gs</span>
<span class="token operator">...</span>
      <span class="token punctuation">.</span><span class="token function">addSubMenu</span><span class="token punctuation">(</span>
        SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getUi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token string">'OPPORTUNITY'</span><span class="token punctuation">)</span>
          <span class="token operator">...</span>
          <span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'Sort steps in this opportunity'</span><span class="token punctuation">,</span> <span class="token string">'sortSteps'</span><span class="token punctuation">)</span>
          <span class="token operator">...</span>

 <span class="token operator">...</span>

<span class="token keyword">function</span> <span class="token function">sortSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">dieUnlessSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> opportunityRow <span class="token operator">=</span> <span class="token function">indexOfSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opportunityRow <span class="token operator">&lt;</span> <span class="token constant">DATA_ROW_START</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">msgAndDie</span><span class="token punctuation">(</span><span class="token string">'You need to select one of the opportunities, not there'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> opportunityIndex <span class="token operator">=</span> Pool<span class="token punctuation">.</span><span class="token function">asOpportunityIndex</span><span class="token punctuation">(</span>opportunityRow<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> opportunityToEdit <span class="token operator">=</span> pool<span class="token punctuation">.</span>opportunities<span class="token punctuation">[</span>opportunityIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  opportunityToEdit<span class="token punctuation">.</span><span class="token function">sortSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Im,Oa,FS,mu,jS,NS,Om,Se,QP=`<code class="language-js"><span class="token comment">// Opportunity.gs</span>
  <span class="token function">createStep</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">updateStep</span><span class="token punctuation">(</span><span class="token parameter">stepData<span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>


  <span class="token function">sortSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>steps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> sortedByGroup <span class="token operator">=</span> StatesMgr<span class="token punctuation">.</span><span class="token function">sortByGroup</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sortedByGroup <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> sortedByGroup<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">const</span> aDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> bDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>state<span class="token operator">?.</span>group <span class="token operator">===</span> <span class="token string">'COMPLETE'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> aDate <span class="token operator">&lt;</span> bDate <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> aDate <span class="token operator">&lt;</span> bDate <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span></code>`,Am,Aa,US,yu,qS,GS,Pm,_e,s7=`<code class="language-diff">class StatesMgr &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> constructor() &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.byName = &#123;&#125;;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.byColor = &#123;&#125;;
</span><span class="token prefix unchanged"> </span><span class="token line">   this.list = [];
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> static sortByGroup(a, b) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">   const GROUPS_RANKED = new Map([
</span><span class="token prefix inserted">+</span><span class="token line">     ['ATTENTION', 3],
</span><span class="token prefix inserted">+</span><span class="token line">     ['DUE', 2],
</span><span class="token prefix inserted">+</span><span class="token line">     ['COMPLETE', 1],
</span><span class="token prefix inserted">+</span><span class="token line">   ]);
</span><span class="token prefix inserted">+</span><span class="token line">   const aGroupRank = GROUPS_RANKED.get(a.group);
</span><span class="token prefix inserted">+</span><span class="token line">   const bGroupRank = GROUPS_RANKED.get(b.group);
</span><span class="token prefix inserted">+</span><span class="token line">   if (aGroupRank === bGroupRank) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     return 0;
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span><span class="token prefix inserted">+</span><span class="token line">   if (aGroupRank &lt; bGroupRank) &#123;
</span><span class="token prefix inserted">+</span><span class="token line">     return -1;
</span><span class="token prefix inserted">+</span><span class="token line">   &#125;
</span><span class="token prefix inserted">+</span><span class="token line">   return 1;
</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code>`,Dm,Pa,Da,gu,VS,Cm,Oo,WS,Rm,Ao,YS,Lm,hs,wu,zS,JS,vu,$S,KS,Eu,XS,Mm,Po,ZS;return{c(){as=t("h2"),Ss=t("a"),Wo=t("span"),Ey=i("Need a CRM? Why not just use \u2026?"),Tu=u(),vs=t("p"),Yo=t("em"),by=i("Why not just use a real CRM"),xy=i("? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),qa=t("a"),Sy=i("Capsule"),_y=i(" and I found I spent most of my time trying to bend it to my needs."),Iu=u(),Ga=t("p"),zo=t("em"),Ty=i("Why not just use Trello"),Iy=i("? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),Ou=u(),_s=t("h2"),Ts=t("a"),Jo=t("span"),Oy=i("Google Sheets with Apps Script is a great tool for quick tools and prototypes"),Au=u(),Oe=t("p"),Ay=i("Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),Pu=u(),Is=t("h2"),Os=t("a"),$o=t("span"),Py=i("Tips on using Google Apps Script for prototyping"),Du=u(),Ae=t("p"),Dy=i("In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),Cu=u(),As=t("h3"),Ps=t("a"),Ko=t("span"),Cy=i("1. Explicit interactions vs trying to build a SPA"),Ru=u(),Ds=t("p"),Ry=i("Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),Pe=t("abbr"),Ly=i("SPA"),My=i(" with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),Lu=u(),Cs=t("p"),Hy=i("Just build your \u201Capp\u201D like in the good old days of the "),Xo=t("code"),By=i("cgi-bin"),Fy=i(". But ONLY DOING THE JOB YOU NEED TO. That is, completely stateless. The typical flow would be:"),Mu=u(),g=t("ol"),Zo=t("li"),jy=i("User selects cell(s) in worksheet (optional)"),Ny=u(),Qo=t("li"),Uy=i("User selects an entry from a custom menu which you have created"),qy=u(),sl=t("li"),Gy=i("The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s phase from it"),Vy=u(),nl=t("li"),Wy=i("the script does whatever processing it needs and updates the App state"),Yy=u(),al=t("li"),zy=i("the script updates the spreadsheet to match the new App state"),Jy=u(),tl=t("li"),$y=i("the scripts finishes and the user is free to mess with the spreadsheet manually"),Ky=u(),el=t("li"),Xy=i("back to 1."),Hu=u(),Rs=t("h3"),Ls=t("a"),pl=t("span"),Zy=i("2. minimal work"),Bu=u(),Ms=t("h3"),Hs=t("a"),ol=t("span"),Qy=i("2. Resist the temptation to start coding straight away"),Fu=u(),ts=t("p"),sg=i("The nice thing about prototyping with Google Sheets is that you can start without needing any scripting. Just do everything completely manually. You just need to "),ll=t("em"),ng=i("think"),ag=i(" like a script, and repeat actions mechanically. Requires a bit of discipline, but it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Va=t("a"),tg=i("Lean"),eg=i(" than that!"),ju=u(),Bs=t("h3"),Fs=t("a"),il=t("span"),pg=i("3. Model your problem space first"),Nu=u(),De=t("p"),og=i("For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),Uu=u(),js=t("p"),lg=i("Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ce=t("abbr"),ig=i("OOP"),cg=i(", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),qu=u(),Re=t("p"),rg=i("something something layout of cells or multiple cells something"),Gu=u(),Ns=t("h3"),Us=t("a"),cl=t("span"),ug=i("4. OOP is actually quite helpful (but there is a place for some FP too)"),Vu=u(),es=t("p"),kg=i("GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),rl=t("code"),dg=i("recalculateAmount"),fg=i(" method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),ul=t("code"),hg=i("convertToMetric"),mg=i(" method to your Ingredient class. And so on. Under the bonnet then the abstraction will interact with one of the GAS objects, and create a Sheet, or move a Range, and so on."),Wu=u(),qs=t("p"),yg=i("FP becomes useful when you want to share utilities, especially formatting. For example, an "),kl=t("code"),gg=i("asArchive"),wg=i(" function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),Yu=u(),Gs=t("h3"),Vs=t("a"),dl=t("span"),vg=i("5. Testing is not a solved problem"),zu=u(),Le=t("p"),Eg=i("\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),Ju=u(),Ws=t("h3"),Ys=t("a"),fl=t("span"),bg=i("6. Always save your co-ordinates (rows, cells) in constants"),$u=u(),Me=t("p"),xg=i("It\u2019s inevitable that during the app lifetime you will want to move rows around here, add a column there, and so on. That means changing co-ordinates of all your methods. You really don\u2019t want to have go through your functions and manually update all those numbers. Putting magic numbers in function is a standard good practice in programming, but imperative with gS. It\u2019s confusing enough that half the built-in methods are 0-indexed, and the other half 1-indexed."),Ku=u(),zs=t("h3"),Js=t("a"),hl=t("span"),Sg=i("7. Use sidebars to enter data"),Xu=u(),He=t("p"),Wa=t("a"),_g=i("https://developers.google.com/apps-script/guides/dialogs"),Zu=u(),$s=t("h3"),Ks=t("a"),ml=t("span"),Tg=i("8. Beware of data conversions"),Qu=u(),Be=t("p"),Ig=i("Spreadsheets are notorious for their irritating habit of converting cell data to something you don\u2019t want. GAS is not exempt from that. Dates, or anything date-like, are particularly tricky. Numbers are always represented with one decimal point internally, so be careful you may get a \u201C4.0\u201D when you are expecting a \u201C4\u201D. I suggest creating util functions for forcing conversion and be double sure."),sk=u(),Xs=t("h3"),Zs=t("a"),yl=t("span"),Og=i("Script structure"),nk=u(),Fe=t("p"),je=t("img"),ak=u(),Ne=t("p"),Ag=i("I tend to organise the scripts in my projects pretty much the same way."),tk=u(),b=t("dl"),gl=t("dt"),Pg=i("main.gs"),A=t("dd"),Dg=i("When you select a "),wl=t("code"),Cg=i("Extensions > Apps Script"),Rg=i(" from the menu, a script called Code.gs is created. I rename it to "),vl=t("code"),Lg=i("main.gs"),Mg=i(". In it, I put the "),El=t("code"),Hg=i("function onOpen() ..."),Bg=i(" that creates the main menu I use to enhance the spreadsheet. Each entry in the menu is mapped to a function, and those functions are all in this script as well. They will then call functions in other scripts. This allows me to run scripts from the editor, which is essential if you want to debug. "),bl=t("code"),Fg=i("noop"),jg=i(" is just an empty function, used as a placeholder. "),Ue=t("img"),xl=t("dt"),Ng=i("globals.gs"),Qs=t("dd"),Ug=i("All constants are here, like "),Sl=t("code"),qg=i("const SS = SpreadsheetApp.getActiveSpreadsheet();"),Gg=i(" which is always needed. Colors. I assign rows and columns to variables, like "),_l=t("code"),Vg=i("const DATA_ROW_START = 2;"),Tl=t("dt"),Wg=i("genericGotofritzUtils.gs"),Ya=t("dd"),Yg=i("GAS is quite quirky, and I have a few trusty functions which I use in all projects. Things like "),Il=t("code"),zg=i("getIndexOfSelectedRow"),Jg=i(" or converting to/from date which is often problematic"),Ol=t("dt"),$g=i("utils.gs"),Al=t("dd"),Kg=i("These are generic functions specific to this project"),Pl=t("dt"),Xg=i("..the rest"),Dl=t("dd"),Zg=i("Then I tend to create a file for each class, and encapsulate functionality that way"),ek=u(),sn=t("h2"),nn=t("a"),Cl=t("span"),Qg=i("Designing a CRM app"),pk=u(),an=t("h3"),tn=t("a"),Rl=t("span"),sw=i("Step 1: Defining the problem"),ok=u(),qe=t("p"),nw=i("As a job seeker I have quite simple needs. In short:"),lk=u(),en=t("ul"),M=t("li"),aw=i("keep track of the "),Ll=t("strong"),tw=i("many"),ew=i(" active "),Ml=t("strong"),pw=i("opportunities"),ow=i(", so that I know in what "),Hl=t("strong"),lw=i("phase"),iw=i(" each opportunity is, and what "),Bl=t("strong"),cw=i("stages"),rw=i(" in the interview process are coming up when"),uw=u(),Fl=t("li"),kw=i("archive opportunities when they are no longer active. So that they are out of the way but I can search through them to find out if I have history with recruiter x or company y"),ik=u(),f=t("p"),dw=i("The words in bold look like good candidates for entities. The basic entity seems to be the "),jl=t("strong"),fw=i("Opportunities"),hw=i(". There are "),Nl=t("em"),mw=i("many"),yw=i(" of them, i.e. "),Ul=t("em"),gw=i("collections"),ww=i(", or "),ql=t("strong"),vw=i("Pools"),Ew=i(" of them. Each process goes through a sequence of "),Gl=t("strong"),bw=i("Steps"),xw=i(". Both opportunities and Steps can be in one of a predefined set of "),Vl=t("strong"),Sw=i("States"),_w=i(". These are my main entities. Plus of course an "),Wl=t("strong"),Tw=i("App"),Iw=i(" entity to orchestrate everything."),ck=u(),Ge=t("p"),Ow=i("There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me (although they may still be useful). For now I\u2019ll just treat that information as background noise which I need to move around but not process."),rk=u(),Ve=t("p"),Aw=i("Now I need to flesh out some details of each entity"),uk=u(),pn=t("h4"),on=t("a"),Yl=t("span"),Pw=i("State"),kk=u(),We=t("p"),Ye=t("img"),dk=u(),ze=t("p"),Dw=i("An Opportunity or Step can be in one of a predefined State. States are hierarchical. The main phases are DUE and COMPLETE. The States associated with DUE are: OVERDUE, MAYBE_FAIL, MAYBE_SUCCESS, DUE, TENTATIVE_DUE. The States associated with COMPLETE are FAIL, SUCCESS, COMPLETE, BLACKLIST. Each Step has style information associated with it (a background and foreground colour). This style information is used both as a visual hint for the user, and as a way for the app to find out what phase a certain entity is. This entity has no methods, it\u2019s just a map of strings to style information. The States are actually created in Row 1 of the LIVE Sheet, which must always be present. The style information, name of the phase, and name of parent phase, is embedded in the name. So for example the DUE/OVERDUE cell will take phase OVERDUE, and so on."),fk=u(),ln=t("h4"),cn=t("a"),zl=t("span"),Cw=i("Step"),hk=u(),Je=t("p"),$e=t("img"),mk=u(),Ke=t("p"),Rw=i("A Step is at the lowest level of the hierarchy. It typically involves an appointment or deadline or action (like sending a CV, a tech challenge, an interview). It is represented by a Cell in a Sheet, but the Step entity itself doesn\u2019t know which sheet or which Pool it belongs to. A Step is always associated with a State. It contains other data: phase, date, time, contact involved, name of step, comments. Note that all of these are just strings. When the app needs to do something to a Step, it reads the text content of a cell, parses it, extracts all of the data information from it and instantiates a data object. Then it does whatever processing it needs to do. Finally it does the same process but in reverse: encode the data as a string, puts it in the cell, then change the visual appearance according to the phase the cell is in."),yk=u(),Xe=t("p"),Lw=i("The methods the Step entity will need are:"),gk=u(),ps=t("ul"),Jl=t("li"),Mw=i("loadFromSheet -> decodes a spreadsheet cell to instantiate a State entity"),Hw=u(),$l=t("li"),Bw=i("writeToCell -> serialises a State entity to a spreadsheet cell"),Fw=u(),Kl=t("li"),jw=i("addComment -> comments are a list; this is a utility function to add to them"),wk=u(),rn=t("h4"),un=t("a"),Xl=t("span"),Nw=i("Opportunity"),vk=u(),Ze=t("p"),Qe=t("img"),Ek=u(),sp=t("p"),Uw=i("The next level up. An Opportunity is a sequence of Steps with metadata. Every Opportunity has a State and at least a Step. The State of an Opportunity is the State of the latest Step within it. An Opportunity is associated with a spreadsheet row. When running a command, the app will read all of the cells in the row, decode the metadata, and then decode each of the Steps. From that information it can then create an Opportunity instance."),bk=u(),np=t("p"),qw=i("An Opportunity\u2019s metadata is displayed in a cell in column 1. The initial Step is shown in a cell in column 2. Both columns are frozen, and their information doesn\u2019t change. All of the subsequent steps are shown from column 3 onwards. The ordering is a bit tricky. Column 3 is always the next DUE Step, if any. After that come all the remaining DUE Steps with the latest dates last. Then come the COMPLETE Steps, but they are ordered the other way, i.e. earliest date last. This may sound counter-intuitive, but after experimenting with a few options it works quite well. It lets me see the phase of all the Opportunities at a glance (it\u2019s always in column 3), without constantly having to scroll horizontally. There cannot be duplicate Opportunities."),xk=u(),ap=t("p"),Gw=i("An Opportunity can:"),Sk=u(),H=t("ul"),Zl=t("li"),Vw=i("loadFromRow -> decodes a spreadsheet row to instantiate an Opportunity entity"),Ww=u(),Ql=t("li"),Yw=i("writeToRow -> the opposite"),zw=u(),si=t("li"),Jw=i("activateNextStep -> changes the current Step (i.e, the one in column 3) to one of the COMPLETE States, and either promotes the next DUE Step to column 3 or it asks the user for input so that it can create one"),$w=u(),ni=t("li"),Kw=i("addComment -> to the metadata in column 1"),_k=u(),kn=t("h4"),dn=t("a"),ai=t("span"),Xw=i("Pools"),Tk=u(),tp=t("p"),ep=t("img"),Ik=u(),pp=t("p"),Zw=i("A Pool (=collection) of Opportunities. Each Pool corresponds to a Sheet. Opportunities can be moved from one Pool to another, but Pools don\u2019t need to know about it. They simply deal with whatever Opportunities they find in the current sheet. Pools don\u2019t have any metadata, except for the Sheet name which gives some information on the purpose of the Pool (for example LIVE, ARCHIVE BLACKLIST, etc)"),Ok=u(),op=t("p"),Qw=i("A Pool can:"),Ak=u(),B=t("ul"),ti=t("li"),s1=i("loadFromSheet -> decodes a Sheet to instantiate an Pools entity"),n1=u(),ei=t("li"),a1=i("writeToSheet -> the opposite"),t1=u(),pi=t("li"),e1=i("sort -> the opportunities within it (grouped by State, descending by date)"),p1=u(),oi=t("li"),o1=i("createOpportunity -> at the top of the Sheet"),Pk=u(),fn=t("h4"),hn=t("a"),li=t("span"),l1=i("App"),Dk=u(),lp=t("p"),i1=i("The App entity is at the top of the hierarchy. It consists of Pools. The list of Pools is arbitrary and hardcoded; the name of the sheet gives a hint of how the corresponding Pool will be managed. Not all Pools will exist, you can create them or remove them with the menu. Potential names:"),Ck=u(),P=t("ul"),za=t("li"),c1=i("LIVE: all the Opportunities in one of the DUE States. This is the only Pool that "),ii=t("em"),r1=i("must"),u1=i(" exist"),k1=u(),ci=t("li"),d1=i("LIVE OVERDUE: if this Pool exists, the OVERDUE Opportunities are moved from LIVE to here. Is this is deleted, the opposite will happen"),f1=u(),ri=t("li"),h1=i("ARCHIVE yyyy-qq: all of the COMPLETE Opportunities from quarter qq of year yyyy"),m1=u(),ui=t("li"),y1=i("ARCHIVE BLACKLIST: if it exists, the BLACKLIST Opportunities are moved to here"),g1=u(),ki=t("li"),w1=i("ARCHIVE PROMISING: individual COMPLETE Opportunities can be moved here"),Rk=u(),ip=t("p"),v1=i("The App entity can:"),Lk=u(),F=t("ul"),di=t("li"),E1=i("createPool -> creates one of the Pools above if it doesn\u2019t exist, and move the relevant Opportunities around. It uses the LIVE Pool as a template"),b1=u(),fi=t("li"),x1=i("destroyPool -> the opposite (doesn\u2019t apply to LIVE)"),S1=u(),hi=t("li"),_1=i("moveProcess -> to a different Pool"),T1=u(),mi=t("li"),I1=i("updatePools -> ensures all the Opportunities are allocated to the correct Pool, creating ARCHIVE yyyy-qq as needed"),Mk=u(),mn=t("h3"),yn=t("a"),yi=t("span"),O1=i("Step 2: Iterating without programming to reach an initial MVP"),Hk=u(),cp=t("p"),A1=i("The above is the result of days of experimentation. Without any coding. I tried different layouts and abstractions and then pretended I was a script and did it all by hand. Keeping notes as I went along. Once happy I made a copy of it, removed all the sheets except for one called \u2018LIVE\u2019, and deleted all the data from it except for the top row. That\u2019s where the States are defined (useful as a legend). The first two column stay frozen."),Bk=u(),rp=t("p"),up=t("img"),Fk=u(),gn=t("h3"),wn=t("a"),gi=t("span"),P1=i("Step 3: Setup and menu"),jk=u(),kp=t("p"),z=t("del"),D1=i("When you select "),wi=t("code"),C1=i("Extensions > Apps Script"),R1=i(" from the menu, a script called Code.gs is created. I typically use that to create a menu for the app. I use the menu for most functionality. Right now I create a divider for each of my main entities. It won\u2019t stay like that long term. But first I create a file called "),vi=t("code"),L1=i("constants.gs"),M1=i(" where I put all of the globals. To start off it will contain SS, a const for the active spreadsheet. SS is needed pretty much everywhere. "),Ei=t("code"),H1=i("noop"),B1=i(" is just an empty function, used as a placeholder."),Nk=u(),Ja=t("pre"),Uk=u(),Es=t("p"),bi=t("code"),F1=i("onOpen"),j1=i(" is not as useful as one may think. Because of Google\u2019s paranoia it is quite limited in what it can do. But it can create menus, so that\u2019s what this file does. The SS variable is accessible here to; in fact all the top level variables are. Adding "),xi=t("code"),N1=i("null"),U1=i(" to the array of menu entries will create a divider."),qk=u(),$a=t("pre"),Gk=u(),dp=t("p"),fp=t("img"),Vk=u(),vn=t("h3"),En=t("a"),Si=t("span"),q1=i("Step 4: Creating opportunity"),Wk=u(),hp=t("p"),G1=i("Let\u2019s start doing something useful: creating a new opportunity. A new menu entry will call an actual function."),Yk=u(),Ka=t("pre"),zk=u(),mp=t("p"),V1=i("I create a separate file for all the menu function. That helps when debugging, because I can pick one of the function and then just run it by pressing the button at the top. That is essential to be able to view any error messages."),Jk=u(),yp=t("p"),W1=i("The sequence of steps within the function is quite self-explanatory. Function names which end with an underscore are \u201Cprivate\u201D in GAS."),$k=u(),Xa=t("pre"),Kk=u(),gp=t("p"),Y1=i("For this I will need a Pool class \u2026"),Xk=u(),Za=t("pre"),Zk=u(),wp=t("p"),z1=i("\u2026and an Opportunity one"),Qk=u(),Qa=t("pre"),sd=u(),os=t("p"),J1=i("Double check that selecting "),_i=t("code"),$1=i("> New opportunity"),K1=i(" doesn\u2019t throw any error. Good. Now to fill in the gaps. The minimal work would be to insert a row at the top, and push all the others down, without touching them. But I prefer the "),Ti=t("em"),X1=i("stateless"),Z1=i(" approach - i.e., load the complete Pool phase, process it, save the complete Pool phase. That sounds wasteful, but it means that I can combine functions any way I want. I can always be sure that at the end of each step the UI is in sync with the app state. And I can encapsulate the two steps \u201Cload App state\u201D and \u201Csave App state\u201D in functions and forget about them. As for efficiency, I can optimise later, should I need to."),nd=u(),vp=t("p"),Q1=i("First, hard code some rows / cols coordinates in globals. The whole app starts at row 2 (the top row is for headers). Opportunities have two cols of metadata, col 1 and 2."),ad=u(),st=t("pre"),td=u(),bn=t("p"),sv=i("I will insert enough rows at the top to write the whole sequence of Opportunities in them. Then I will remove the rows below them. That\u2019s because GAS complains if you try to insert rows in a empty Sheet. Pools don\u2019t actually render Opportunities; they tell them to render themselves. To do so, the Opportunities need to know where they are on spreadsheet. The utility function "),Ii=t("code"),nv=i("reindex_"),av=i(" does exactly that."),ed=u(),nt=t("pre"),pd=u(),xn=t("p"),tv=i("And now the two missing methods of Opportunities. "),Oi=t("code"),ev=i("updateUI"),pv=i(" will just show some random text for now"),od=u(),at=t("pre"),ld=u(),tt=t("p"),ov=i("\u201CDie\u201D is a function that I have been using since my Perl days\u2026 a long time ago. It\u2019s for "),et=t("a"),lv=i("failing fast"),id=u(),pt=t("pre"),cd=u(),Sn=t("h4"),_n=t("a"),Ai=t("span"),iv=i("5: Using an HTML form in a sidebar to create an Opportunity"),rd=u(),Ep=t("p"),J=t("video"),ud=u(),Tn=t("p"),cv=i("We can use an HTML form to add real data to an opportunity. Coding sidebars in vanilla js, like in 1999. Clunky but surprisingly easy. The form is a complete HTML document which you can load to the side. There two types of HTML documents you can load: pure HTML and templates. You load them in the sidebar in different ways. I don\u2019t know why they bother with that distinction. The only difference seems to be that templates can use the classic ASP looking "),Pi=t("code"),rv=i("<?= some data ?>"),uv=i(" tags. I did say 1999, didn\u2019t I."),kd=u(),bp=t("p"),xp=t("img"),dd=u(),ls=t("p"),kv=i("You can share JS (for validation, for example) and CSS across those documents by using a trick. You create an HTML document which only has JS in it, and one which only has CSS. Then you import those inside the HTML template you are working with. It only works with templates. It\u2019s ugly but it works. I don\u2019t bother, I only have a couple of forms and a few lines of CSS. I am happy to copy and paste them in all the forms I need. And as for validation, you can go a long way with "),ot=t("a"),dv=i("standard HTML input field parameters"),fv=i(". Here\u2019s the "),lt=t("a"),hv=i("official documentation for the separating CSS/JS/HTML trick"),mv=i("."),fd=u(),it=t("pre"),hd=u(),j=t("p"),yv=i("It\u2019s the simplest possible form, with barely any styling. "),Di=t("code"),gv=i('<body onload="prefill()">'),wv=i(" will fill up the form with data. Gosh I think it\u2019s the first time I use a "),Ci=t("code"),vv=i("body onload"),Ev=i(" in 25 years. Some of it is for testing, so that I don\u2019t have to type it all the time. The only interesting part is the form submission. "),Ri=t("code"),bv=i('<form onsubmit="handleFormSubmit(this)">'),xv=i(" handles that part."),md=u(),bs=t("p"),Li=t("code"),Sv=i("google.script.run.A_FUNCTION(formObj)"),_v=i(" will call A_FUNCTION in your GAS app, and pass it a JSON object with all your form fields. Sweet. You then have this curious model where you create handlers for success and failure, and pass it to "),Mi=t("code"),Tv=i("run"),Iv=i(" before you call it. It\u2019s all relatively straightforward."),yd=u(),ct=t("pre"),gd=u(),Sp=t("p"),Ov=i("Then we actually need to show this sidebar. The code called by the menu is completely different. Instead of processing data, it loads the HTML form and does nothing else"),wd=u(),rt=t("pre"),vd=u(),is=t("p"),Av=i("The data processing is done in the function connected to the form submission, "),Hi=t("code"),Pv=i("handleCreateOpportunity"),Dv=i(". A new file, "),Bi=t("code"),Cv=i("formHandlers.gs"),Rv=i(", will contains all those form handlers."),Ed=u(),ut=t("pre"),bd=u(),kt=t("pre"),xd=u(),In=t("p"),Lv=i("And finally, we have to add some structured metadata, and not some random strings, to an opportunity. I have toyed with difference approaches, trying to keep it simple and yet flexible and easy to update. I came up with a generic utility class called "),Fi=t("code"),Mv=i("StructToUIBridge"),Hv=i(", which I can reuse across projects."),Sd=u(),On=t("p"),Bv=i("The basic idea is that each spreadsheet cell is a mini UI component. Made up of strings, each with their formatting, joined together by separators. To refresh the cell you form a sequence by alternating strings and separators. Then apply formatting. When you want to extract the data from the cell you strip the formatting away. Then break up the text into string + separator pairs. This is somewhat like how "),dt=t("a"),Fv=i("tagged template in JS"),jv=i(" work. The difficulty is that to format parts of a cell content you need to use RichText."),_d=u(),_p=t("p"),Nv=i("A Field is a simple ValueObject wich represents a string + separator pair. It does nothing but hold data. Although it could also have validation methods; that\u2019s what VOs often do. The \u2018style\u2019 attribute is a RichText style, which I create in the globals file. Styles are created by builders, themselves created by the top level app. Don\u2019t ask\u2026"),Td=u(),ft=t("pre"),Id=u(),cs=t("p"),Uv=i("A "),ji=t("code"),qv=i("StructToUIBridge"),Gv=i(" is a sequence of "),Ni=t("code"),Vv=i("Fields"),Wv=i(". Plus a couple of styling values like background colour applied to the whole cell. It has methods to update the field contents. As well as generating the strings + separators sequence."),Od=u(),ht=t("pre"),Ad=u(),An=t("p"),Yv=i("The interesting part is the "),Ui=t("code"),zv=i("updateCell"),Jv=i(" method. It first concatenates all the strings + separators. Then for each pair it finds out their length and puts markers at the beginning and end. RichText is then used to apply styling between those markers. It\u2019s not the easiest thing to debug\u2026"),Pd=u(),mt=t("pre"),Dd=u(),N=t("p"),$v=i("The nice thing about this "),qi=t("code"),Kv=i("StructToUIBridge"),Xv=i(" class is that it hides away all of the ugliness of RichText. It\u2019s very clear what the "),Gi=t("code"),Zv=i("metadata1"),Qv=i(" and "),Vi=t("code"),s2=i("metadata2"),n2=i(" properties contain. They are simple to edit, which was the whole point."),Cd=u(),yt=t("pre"),Rd=u(),U=t("p"),a2=i("The "),Wi=t("code"),t2=i("bold"),e2=i(" and "),Yi=t("code"),p2=i("smaller"),o2=i(" style I created in "),zi=t("code"),l2=i("globals.gs"),i2=i(". It\u2019s easy to create a set of styles for the whole app."),Ld=u(),gt=t("pre"),Md=u(),Tp=t("p"),c2=i("Instantiating the Opportunity object, with some very basic validation, and then updating the spreadsheet cell, is fairly concise."),Hd=u(),wt=t("pre"),Bd=u(),vt=t("p"),Ji=t("code"),r2=i("validDate"),u2=i(" is one of a number of generic functions I share from project to project. Nothing super sophisticated. I use JSDoc for these functions because GAS is actually quite good with tooltips and showing you typing hings. Although they are not JSDoc, they are Closure Compiler annotations. So, not as useful."),Fd=u(),Et=t("pre"),jd=u(),Pn=t("h4"),Dn=t("a"),$i=t("span"),k2=i("Loading the state of the app from the spreadsheet"),Nd=u(),Cn=t("p"),d2=i("Right now every time I create a new Opportunity in the app, the old ones are removed. That\u2019s because I haven\u2019t implemented "),Ki=t("code"),f2=i("loadStateFromSheet_"),h2=i(" yet. It\u2019s time to tackle that. First the easy part: getting the Opportunity object to delegate the job to its metadata objects."),Ud=u(),bt=t("pre"),qd=u(),Ip=t("p"),m2=i("Now for implementing those methods. I\u2019ll be using regular expressions. What could possibly go wrong, right? Actually A LOT could go wrong. If a field has no separator, then it won\u2019t work as there will be no boundary between fields. If the separator is found within any of the strings, then the whole thing will fall apart."),Gd=u(),Op=t("p"),y2=i("The first part is easily solvable: we can simply force a separator. The next cannot be solved easily. I guess the code could reject separators which are potentially too dangerous (commas, dashes). But that\u2019s an overkill for an app which will only be used by myself. I\u2019ll live with the risk"),Vd=u(),xt=t("pre"),Wd=u(),q=t("p"),g2=i("The next part is slightly trickier. The script needs to generate a RegExp based on the fields and separator it expects. The "),Xi=t("code"),w2=i("generateParsingRegexp_"),v2=i(" does that with a simple array.reduce, no special tricks required. Tricky is deciding which of the capturing strings to make greedy "),Zi=t("code"),E2=i("(.*)"),b2=i(" and which not "),Qi=t("code"),x2=i("(.*?)"),S2=i(". There must be at least a greedy one. I opt for putting it last, but it may backfire in the future. We\u2019ll see. I hope it doesn\u2019t because debugging it is a quite painful."),Yd=u(),St=t("pre"),zd=u(),Rn=t("p"),_2=i("And finally the money shot, "),sc=t("code"),T2=i("loadDataFromSheet"),I2=i(". Most of the work is done by the RegExp. This function will simply plyg"),Jd=u(),_t=t("pre"),$d=u(),Ap=t("p"),O2=i("Now when I add a field, the previous ones stay there."),Kd=u(),Pp=t("p"),$=t("video"),Xd=u(),Ln=t("h3"),Mn=t("a"),nc=t("span"),A2=i("Editing an Opportunity"),Zd=u(),G=t("p"),P2=i("I have done Create, Read, I might as well do the rest of the "),ac=t("b"),D2=i("CR"),C2=i("UD operations. So "),tc=t("b"),R2=i("U"),L2=i("pdate, or edit. All the pieces of the puzzle are already there. The app can read from a cell, and it can submit a form. All it needs is to connect the two, so that the data in form comes from the cell, and vice versa. Let\u2019s start fetching data from the cell and pushing it to the form. There is already a function for the fetching part, "),ec=t("code"),M2=i("loadDataFromSheet"),H2=i(". But how do you inject data into the form?"),Qd=u(),Hn=t("h4"),Bn=t("a"),pc=t("span"),B2=i("Injecting data into an HTMLHtmlService form in a sidebar with Apps Script"),sf=u(),Fn=t("p"),F2=i("I assumed it would be relatively easy, perhaps by passing a payload as second argument to "),oc=t("code"),j2=i("createHtmlOutputFromFile"),N2=i(", but nope. There is a way to do it, but it\u2019s hacky. You turn the data into a DOM fragment - it could just be a string, or a whole DOM subtree - and then append it to the HTML form. Don\u2019t forget to CSS display to none! Then at the other end the form can extract it from the HTML and use it. As I said - hacky. There is a variation using HTML templates instead of documents, but I prefer not to use templates. They are not as useful as they seem. Even the documentation cautions against using them! So hacky DOM snippets it is."),nf=u(),jn=t("p"),U2=i("Start with adding a new menu entry, and a placeholder function. The function will be a variation of "),lc=t("code"),q2=i("createOpportunity"),G2=i(", so let\u2019s copy that to start."),af=u(),Tt=t("pre"),tf=u(),rs=t("p"),V2=i("First I will try and make sure I can actually pass data to the HTML form. The form will need data from an Opportunity. The user will need to have an Opportunity selected. So let\u2019s start fetching the Opportunity index, and then passing that as JSON. I use two of my standard functions for that, "),ic=t("code"),W2=i("dieUnlessSelection"),Y2=i(" and "),cc=t("code"),z2=i("indexOfSelectedRow"),J2=i("."),ef=u(),It=t("pre"),pf=u(),Dp=t("p"),$2=i("I will encode the JSON in an HTML div with a standard ID, saved in the globals file. The HTML form will not have access to it though. I will have to copy and paste it there manually. For now I make the div pink so that I can see it, but later on it will be display:none."),of=u(),Ot=t("pre"),lf=u(),Cp=t("p"),K2=i("I click on the form and yeah, the HTML Div is there."),cf=u(),Rp=t("p"),Lp=t("img"),rf=u(),Mp=t("p"),X2=i("Then in the form"),uf=u(),At=t("pre"),kf=u(),Hp=t("p"),Z2=i("and I can confirm I got the data. Cool, now that I have confirmed it works, let\u2019s wire it all app properly. First, a util function to format a JS obj as an HTML string, since I will be using it for different forms."),df=u(),Pt=t("pre"),ff=u(),Nn=t("p"),Q2=i("Then I need a JSON representation of the Opportunity object. Since the data of interest is all in the StructToUIBridge, I add a generic "),rc=t("code"),sE=i("asJson"),nE=i(" method to that. And then a similarly named one for Opportunity"),hf=u(),Dt=t("pre"),mf=u(),Bp=t("p"),aE=i("Finally, pass all that data to the form. I add an \u2018id\u2019 property so that the Pool object will know what to edit later. It is important to make the difference between the id of the Opportunity in the Pool, i.e. the index in the array, and the index of the row in the Sheet. I create static methods in the Pool class to make the conversion"),yf=u(),Ct=t("pre"),gf=u(),Rt=t("pre"),wf=u(),Fp=t("p"),tE=i("The form doesn\u2019t change much - I fetch the prefill data from the data embedded to the HTML, if present. I added a hidden field for the id. If the form is for creation, and there is no data embedded in the HTML in the form, I remove the id field from the HTML. That\u2019s the easiest approach, rather than mess about with the value of \u2018id\u2019. In fact the submit form doesn\u2019t change, it keeps sending all the form data as before."),vf=u(),Lt=t("pre"),Ef=u(),jp=t("p"),eE=i("The form handler only needs a little amend - a new branch to an update call if an id was found"),bf=u(),Mt=t("pre"),xf=u(),Np=t("p"),pE=i("And finally the method that does the update. Because I have decoupled the data manipulation and the rendering, an update is pretty simple. It just puts an instance of a Opportunity in an array."),Sf=u(),Ht=t("pre"),_f=u(),Un=t("h3"),qn=t("a"),uc=t("span"),oE=i("Deleting an Opportunity"),Tf=u(),us=t("p"),lE=i("Having done all the ground work already, deleting an Opportunity is a 10 mins job. I use the same shared methods to get the user\u2019s selection. Then the built-in "),kc=t("code"),iE=i("ui.alert"),cE=i(" to show an \u2018are you sure\u2019 dialog. Finally I call pool\u2019s yet to be coded "),dc=t("code"),rE=i("deleteOpportunity"),uE=i(" method, and redraw the UI."),If=u(),Bt=t("pre"),Of=u(),Ft=t("p"),fc=t("code"),kE=i("pool.deleteOpportunity"),dE=i(" is a simple array splice"),Af=u(),jt=t("pre"),Pf=u(),Gn=t("h3"),Vn=t("a"),hc=t("span"),fE=i("Adding Steps"),Df=u(),Wn=t("p"),hE=i("A reminder of how the problem space is mapped into classes in this app. A Sheet represents a Pool of Opportunities. An Opportunity is a row in the sheet, and it uses the first two columns to the left to display metadata. I have already added CRUD functionality for all of that. To the "),mc=t("em"),mE=i("right"),yE=i(" of those two columns, there should be a sequence of Steps, each taking a cell in the row and growing horizontally, with the least recent at the far right. This is the part which I tackle now. It sounds like it\u2019s going to be a slog, but in fact it\u2019s not that bad. That\u2019s because as a Pool contains an array of Opportunity, an Opportunity contains an array of Steps. So the code is pretty similar. In fact I can pretty much copy and paste it in a new class, adapt it so that it uses columns rather than rows, and that\u2019s about it."),Cf=u(),Up=t("p"),gE=i("The Step class is not too dissimilar from the Opportunity. Step has a col, which Opportunity doesn\u2019t need. And Opportunity has a list of Steps, which is not needed by Step. Of course the data displayed in the cell is different, but the basic idea is the same. All the basic CRUD functionality (Create, Update, Delete) from Opportunity can be ported to Step without too much trouble. I\u2019ll leave it as an exercise for the reader to adapt that. In future refactor I may look into extracting common feature to a commen parent class or mixin, but now\u2019s not the time."),Rf=u(),Yn=t("table"),Nt=t("tr"),yc=t("th"),wE=i("Opportunity"),vE=u(),gc=t("th"),EE=i("Step"),bE=u(),Ut=t("tr"),wc=t("td"),qp=t("pre"),xE=u(),vc=t("td"),Gp=t("pre"),Lf=u(),Vp=t("p"),SE=i("For the record, the updated app menus will look like this"),Mf=u(),qt=t("pre"),Hf=u(),zn=t("h4"),Jn=t("a"),Ec=t("span"),_E=i("Some utility functionality"),Bf=u(),Wp=t("p"),TE=i("At this stage I added a couple of useful menu entries which replicate existing functionality: Add Comment. These are similar to Edit Step / Opportunity but only focus on comments. Why? Because when I am talking to someone in a video call or phone, I want to have a larger than normal text box with no distractions. That spurred some refactoring - until now, whenever I edited an instance (of Opportunity, Step) I simply created a new one and replaced it. But now I want to fiddle with individual fields within the objects. I could of course access them directly, but that of course is a big no-no."),Ff=u(),K=t("p"),IE=i("I change the generic "),bc=t("code"),OE=i("StructToUIBridge"),AE=i(" container to make it easy to locate a specific field by name. After this change, if the fields were "),xc=t("code"),PE=i("[{ name: 'mouse', ...}, { name: 'cat', ... }]"),DE=i(" then fieldNames would contain "),Sc=t("code"),CE=i("{ mouse: 0, cat: 1, ...}"),jf=u(),Gt=t("pre"),Nf=u(),Yp=t("p"),RE=i("And then a method to use those keys"),Uf=u(),Vt=t("pre"),qf=u(),zp=t("p"),LE=i("A new form for editing comments for both Opportunity and Step. A variation on the existing forms, bit with only a textarea and two hidden field. If no \u2018row\u2019 value was passed, the hidden input with id \u2018row\u2019 will be removed from the DOM"),Gf=u(),Wt=t("pre"),Vf=u(),$n=t("p"),ME=i("The menu creates two similar entries for editing comments. I had to make sure the names were different - if you have two menu entries with the same name in GAS, the "),_c=t("code"),HE=i("onOpen"),BE=i(" handler will fail silently."),Wf=u(),Yt=t("pre"),Yf=u(),Jp=t("p"),FE=i("The two functions are very similar, as it\u2019s obvious by putting them side by side. Again, room for refactoring there. But not yet."),zf=u(),Kn=t("table"),zt=t("tr"),Tc=t("th"),jE=i("Opportunity"),NE=u(),Ic=t("th"),UE=i("Step"),qE=u(),Jt=t("tr"),Oc=t("td"),$p=t("pre"),GE=u(),Ac=t("td"),Kp=t("pre"),Jf=u(),ks=t("p"),VE=i("Both use "),Pc=t("code"),WE=i("getFieldValue"),YE=i(", which is a wrapper for "),Dc=t("code"),zE=i("StructToUIBridge"),JE=i("\u2019s version:"),$f=u(),$t=t("pre"),Kf=u(),Kt=t("p"),$E=i("Both use a modal dialog box instead of a sidebar like in the other cases. That\u2019s because the size of a sidebar is fixed at 300px, whereas a dialog can be changed. Here I use values I have set in "),Cc=t("code"),KE=i("globals.gs"),Xf=u(),Xt=t("pre"),Zf=u(),Xp=t("p"),XE=i("Finally the form handler handles both cases. It switches to a Step if it has a row attribute, to Opportunity if it hasn\u2019t"),Qf=u(),Zt=t("pre"),sh=u(),X=t("p"),Rc=t("code"),ZE=i("updateFieldsInOpportunity"),QE=i(" and "),Lc=t("code"),sb=i("updateFieldsInStep"),nb=i(" are wrappers for "),Mc=t("code"),ab=i("StructToUIBridge"),tb=i("\u2019s method"),nh=u(),Qt=t("pre"),ah=u(),Zp=t("p"),eb=i("And here\u2019s the final result"),th=u(),Qp=t("p"),Z=t("video"),eh=u(),Xn=t("h3"),Zn=t("a"),Hc=t("span"),pb=i("States and ordering"),ph=u(),so=t("p"),ob=i("The CRM is beginning to look good, but it\u2019s missing a very important thing. \u201CThe ability to tell the the phase of an Opportunity at a glance\u201D. The time has come to deal with States."),oh=u(),Qn=t("h4"),sa=t("a"),Bc=t("span"),lb=i("Defining a State"),lh=u(),no=t("p"),ib=i("States give me a bird view of an Opportunity. Did all the steps so far look promising, what\u2019s the next step. Opportunities do not have States, it\u2019s the individual Steps that make it up who do. The State of an Opportunity is merely the State of the the \u201Ccurrent\u201D Step. More about \u201Ccurrent\u201D Steps later. For now, I will focus on managing States for Steps."),ih=u(),ao=t("p"),cb=i("Through experimentation, I found that a two levels hierarchical structure works best. I need to know whether a Step is Complete or still Due. Or whether there are issues of some sort and the step needs Attention. Complete, Due, Attention are my top level State Groups, and will be hard coded in the app. They will be used to group Opportunities when ordering. Within each of those groups there are nuances, which I want to capture. For example, Step X is complete. But did it go well or bad? Step Y is simply Due, or Overdue? There are the States proper. The app will encode them as a background / foreground colours pairs. Encoding information with colours is not good for Accessibility. But I am not building an universal app. I am building a little proof of concept for myself."),ch=u(),na=t("p"),rb=i("The last requirement is the ability to define States without code, just by editing cells in the spreadsheet. To achieve that, the app will be used to store definitions for those states. The string content will be in the form "),Fc=t("code"),ub=i("GROUP / STATE"),kb=i(", and the app can read the colours from the sheet. The App instance will manage loading up the States from the Sheet."),rh=u(),aa=t("h4"),ta=t("a"),jc=t("span"),db=i("Creating a StatesMgr and loading States lazily"),uh=u(),to=t("p"),eo=t("img"),kh=u(),ea=t("p"),fb=i("A State is a simple value obj. I don\u2019t think I will actually need an "),Nc=t("code"),hb=i("order"),mb=i(" attribute, but let\u2019s add it anyway just in case."),dh=u(),se=t("pre"),fh=u(),pa=t("p"),yb=i("The StatesMgr does all the heavy lifting when it comes to Stages. For now I will add all the states to a "),Uc=t("code"),gb=i("list"),wb=i(" property. The order in which they are found will determine the order in which they are sorted."),hh=u(),ne=t("pre"),mh=u(),oa=t("p"),vb=i("In the original version I would read the background colour with a simple call to "),qc=t("code"),Eb=i(".getBackground"),bb=i(". But it turns out it\u2019s not so simple. Colours in Google Sheets are either \u201Cnormal\u201D RGB colours, or they are Theme colours. They are both available in the colour picker, there is no way for a user to know which one is which."),yh=u(),po=t("p"),oo=t("img"),gh=u(),la=t("h4"),ia=t("a"),Gc=t("span"),xb=i("Getting the background and font colour of a Google Sheet cell with Apps Script"),wh=u(),ca=t("p"),Sb=i("Why does it matter? A Theme colour doesn\u2019t know what it\u2019s RGB value is. If you try you\u2019ll either get an error or an empty string. Instead you\u2019ll have to fetch information from the Theme. A pointless complication IMHO. Even weirder is that if you change the background colour to a theme one, the foreground also becomes a theme colour. Even though it isn\u2019t. Be as it may, I hid that complexity away by creating two utility functions. To get the RGB value of a ThemeColor in Apps Scripts you need to get the Theme, then call its "),Vc=t("code"),_b=i("getConcreteColor"),Tb=i(" method passing it the label of the ThemeColor. Then once you have the Apps Script representation of the Color Object, it\u2019s treated as if it was a \u201Cnormal\u201D color, i.e. convert to RGB and then Hex. All very unnecessary if you ask me, but it is what it is."),vh=u(),ae=t("pre"),Eh=u(),lo=t("p"),Ib=i("I can now amend the loadStates function to use those util functions"),bh=u(),te=t("pre"),xh=u(),ra=t("h4"),ua=t("a"),Wc=t("span"),Ob=i("Creating a global App object in Apps Scripts"),Sh=u(),io=t("p"),Ab=i("\u2026is not possible as far as I can see. Google Sheets is best thought of as a bunch of serverless functions. Your scripts contain the definitions, and your triggers and menus can cause some of them to call each other. But once all the calls are finished\u2026 poof! It\u2019s gone. There is no runtime global environment. Although there is a global scope in which your variables and deinfitions live. Let\u2019s look at an example"),_h=u(),d=t("p"),Pb=i("When you open the Spreadsheet, "),Yc=t("code"),Db=i("A_CONST"),Cb=i(", "),zc=t("code"),Rb=i("app"),Lb=i(", "),Jc=t("code"),Mb=i("App"),Hb=i(", "),$c=t("code"),Bb=i("test"),Fb=i(" and "),Kc=t("code"),jb=i("onOpen"),Nb=i(" all exist within the global scope. Then "),Xc=t("code"),Ub=i("onOpen"),qb=i(" runs (it\u2019s one of the few triggers that does). It creates a menu and an instance of "),Zc=t("code"),Gb=i("App"),Vb=i(". Then it completes. After that the menu stays there, but "),Qc=t("code"),Wb=i("app"),Yb=i(" goes back to \u2018what it was originally\u2019. If you run \u2018What is App?\u2019 from the menu, it will give you \u201Cwhat it was originally\u201D"),Th=u(),ee=t("pre"),Ih=u(),ka=t("p"),zb=i("So how does one create a global singleton? One way is to create a getter function that lazily instantiates the class, when needed. Throughout the code, you will use "),sr=t("code"),Jb=i("getApp()"),$b=i(" to access the global App instance"),Oh=u(),pe=t("pre"),Ah=u(),ds=t("p"),Kb=i("With that out of the way, I can now concentrate on the States. I will actually use the same pattern to lazily instantiate the StatesMgr. I don\u2019t often use getters in JS, but when I do is usually for lazy evaluation. "),nr=t("code"),Xb=i("get states"),Zb=i(" will return "),ar=t("code"),Qb=i("states_"),sx=i(", and will create it if it doesn\u2019t exist."),Ph=u(),oe=t("pre"),Dh=u(),co=t("p"),nx=i("To test it all works I create a quick menu entry"),Ch=u(),le=t("pre"),Rh=u(),ro=t("p"),ax=i("I run it, check in the \u201Cexecutions\u201D tab in the Script editor\u2026 and the states are logged there. So far so good."),Lh=u(),da=t("h4"),fa=t("a"),tr=t("span"),tx=i("Adding States to Steps and Opportunities"),Mh=u(),uo=t("p"),ex=i("Quick reminder of the classes involved in this app: an Opportunity contains"),Hh=u(),fs=t("ul"),er=t("li"),px=i("2 StructToUIBridge instances for metadata"),ox=u(),pr=t("li"),lx=i("NO State (or rather, the State is inherited from the \u2018current\u2019 Step)"),ix=u(),or=t("li"),cx=i(`an array of Steps, each one of which has\u2026
\u2013 ..a State
\u2013 ..a StructToUIBridge`),Bh=u(),x=t("p"),rx=i("The question arises, whether the State should be included in the Step or the "),lr=t("code"),ux=i("StructToUIBridge"),kx=i(". There is no compelling argument for either. In the end, considering that "),ir=t("code"),dx=i("StructToUIBridge"),fx=i(" interacts with the actual Spreadsheet, and "),cr=t("code"),hx=i("State"),mx=i(" information is read from / written to as colours in a cell, I went for it. But what about the two stateless "),rr=t("code"),yx=i("StructToUIBridge"),gx=i(" instances within "),ur=t("code"),wx=i("Opportunity"),vx=i("? That can be dealt with by making statefulness optional."),Fh=u(),ha=t("h4"),ma=t("a"),kr=t("span"),Ex=i("Add State to StructToUIBridge"),jh=u(),w=t("p"),bx=i("When instantiating a "),dr=t("code"),xx=i("StructToUIBridge"),Sx=i(", you can pass a "),fr=t("code"),_x=i("state"),Tx=i(" parameter. If boolean true, it sets up the instance as stateful, but without any "),hr=t("code"),Ix=i("State"),Ox=i(" data. The instance will load that lazily whenever it needs to sync with the Sheet. But you can pass a "),mr=t("code"),Ax=i("State"),Px=i(" instance as "),yr=t("code"),Dx=i("state"),Cx=i(", in which case the instance will load it up. Finally, if no "),gr=t("code"),Rx=i("state"),Lx=i(" argument is passed, the instance will be considered stateless. It won\u2019t run any of the state-related methods."),Nh=u(),ie=t("pre"),Uh=u(),D=t("p"),Mx=i("I want to be able to pass "),wr=t("code"),Hx=i("States"),Bx=i(" around either as colours, or names, or "),vr=t("code"),Fx=i("State"),jx=i(" instances. Not necessarily a good idea for a large complex app. But this is simple enough I should be able to get away with it. This is handled by the setter for "),Er=t("code"),Nx=i(".state"),Ux=i(". It does different things for different values it is passed. It also updates the colour values associated with a "),br=t("code"),qx=i("State"),Gx=i(". This is rather smelly code and I expected to be refactoring it before long. But it turned out to work quite well and it hasn\u2019t given me any trouble."),qh=u(),ce=t("pre"),Gh=u(),C=t("p"),Vx=i("I make sure "),xr=t("code"),Wx=i("Steps"),Yx=i(" initialised their "),Sr=t("code"),zx=i("StructToUIBridge"),Jx=i(" with "),_r=t("code"),$x=i("state"),Kx=i(" set to true. "),Tr=t("code"),Xx=i("Opportunity"),Zx=i(" don\u2019t need to change"),Vh=u(),re=t("pre"),Wh=u(),y=t("p"),Ir=t("code"),Qx=i("loadDataFromSheet"),s3=i(" used to handle the text content of a cell, but now it also has to handle colors. For readability, I move the original text handling code into its own private function, "),Or=t("code"),n3=i("loadTextDataFromSheet_"),a3=i(". The colour will be handled by a new method, "),Ar=t("code"),t3=i("loadStateDataFromSheet_"),e3=i(". The original "),Pr=t("code"),p3=i("loadDataFromSheet"),o3=i(" will now call the two. "),Dr=t("code"),l3=i("loadStateDataFromSheet_"),i3=i(" will pass a colour to the global "),Cr=t("code"),c3=i("App"),r3=i(" instance, which will then use its "),Rr=t("code"),u3=i("StatesMgr"),k3=i(" to return a State corresponding to the colour."),Yh=u(),ue=t("pre"),zh=u(),ya=t("p"),Lr=t("code"),d3=i("stateFromColor"),f3=i(" is a wrapper for a method of the "),Mr=t("code"),h3=i("StatesMgr"),Jh=u(),ke=t("pre"),$h=u(),h=t("p"),m3=i("The "),Hr=t("code"),y3=i("StateMgr"),g3=i(" is changed so that it keeps a reference to "),Br=t("code"),w3=i("State"),v3=i(" by background colours in a "),Fr=t("code"),E3=i(".byColor"),b3=i(" property. "),jr=t("code"),x3=i("fromColor"),S3=i(" is then a simple lookup. Because objects are stored by reference, this is the kind of naive coding that can cause a world of pain. Changing objects in one place ends up affecting objects in another. In practice these are all read only stores that do not change once the States are loaded up. But still, for extra safety I change the constructor of "),Nr=t("code"),_3=i("StatesMgr"),T3=i(" to return a frozen instance. And I also freeze the "),Ur=t("code"),I3=i("list"),O3=i(" and "),qr=t("code"),A3=i("byColor"),P3=i(" objects."),Kh=u(),de=t("pre"),Xh=u(),ko=t("p"),D3=i("Now the App should know what State each Step is in, at least internally. Next, I am going to surface that information to the form used for editing Steps."),Zh=u(),ga=t("h4"),wa=t("a"),Gr=t("span"),C3=i("Editing States"),Qh=u(),fe=t("pre"),sm=u(),va=t("p"),R3=i("The current State of a Step should be part of the Step\u2019s "),Vr=t("code"),L3=i("asJson"),M3=i(" export function, so no change in the menu function. The change will be in the exporter"),nm=u(),he=t("pre"),am=u(),fo=t("p"),H3=i("The global App instance will provide the list of states with a new function. It will call a new function from the StatesMgr."),tm=u(),me=t("pre"),em=u(),ho=t("p"),B3=i("For ease, on loading up the StatesMgr will also store the States by name. Fetching a list of names will then involve getting the keys of that store."),pm=u(),ye=t("pre"),om=u(),mo=t("p"),F3=i("I briefly change the display of the div appended to the form so that I can see the data"),lm=u(),ge=t("pre"),im=u(),yo=t("p"),j3=i("It\u2019s there"),cm=u(),go=t("p"),wo=t("img"),rm=u(),vo=t("p"),N3=i("Now it\u2019s just a matter of displaying that data in the HTML form"),um=u(),we=t("pre"),km=u(),Eo=t("p"),bo=t("img"),dm=u(),Ea=t("h4"),ba=t("a"),Wr=t("span"),U3=i("Updating the cell with State data"),fm=u(),m=t("p"),q3=i("The nice thing about the code is that most of it already works. The "),Yr=t("code"),G3=i("formHandler"),V3=i(" takes whatever data is sent and passes it on to the "),zr=t("code"),W3=i("Opportunity"),Y3=i(" instance. Which passes it on to the relevant "),Jr=t("code"),z3=i("Step"),J3=i(" (either a new one if adding, or an existing one if editing). "),$r=t("code"),$3=i(".updateStepData_"),K3=i(" only needs a couple of line changes to split the state and rest of form data into two variables, and handling them separately. Finally "),Kr=t("code"),X3=i("Step"),Z3=i(" passes "),Xr=t("code"),Q3=i("state"),sS=i(" to its "),Zr=t("code"),nS=i("StructToUIBridge"),aS=i(" instance, and the setter does the rest."),hm=u(),ve=t("pre"),mm=u(),xo=t("p"),tS=i("And there it is. It\u2019s beginning to look useful. Only a couple of major things left to tackle: sorting, archiving, and search."),ym=u(),So=t("p"),Q=t("video"),gm=u(),xa=t("h2"),Sa=t("a"),Qr=t("span"),eS=i("Sorting"),wm=u(),S=t("p"),pS=i("With "),su=t("code"),oS=i("States"),lS=i(" implemented, there is enough information for sorting. Sorting happens in two stages: first the "),nu=t("code"),iS=i("Opprtunity"),cS=i(" sorts its "),au=t("code"),rS=i("Steps"),uS=i(". Then the "),tu=t("code"),kS=i("Pool"),dS=i(" sorts its "),eu=t("code"),fS=i("Opportunities"),hS=i("."),vm=u(),_a=t("h3"),Ta=t("a"),pu=t("span"),mS=i("Sorting Steps"),Em=u(),_o=t("p"),yS=i("One of the requirements of this app is to show me what\u2019s next due at a glance. After manual experimentation, I discovered a way that works for me. Starting from column C (A and B are taken up by the Opportunity) and moving towards the right:"),bm=u(),V=t("ul"),ou=t("li"),lu=t("p"),gS=i(`column C shows the \u2018current\u2019 step. That is one of, in order
\u2013 the stepthe due step with the earliest`),wS=u(),iu=t("li"),xs=t("p"),vS=i("If there "),cu=t("code"),ES=i("Steps"),bS=i(" in the "),ru=t("code"),xS=i("Attention"),SS=i(" group, they go first. Sarting from the one with the earliest data in column C, and then in ascending date order"),_S=u(),uu=t("li"),Ee=t("p"),TS=i("Exactly the same for Steps in in the "),ku=t("code"),IS=i("Due"),OS=i(" group"),AS=u(),du=t("li"),be=t("p"),PS=i("Last come the Steps in the "),fu=t("code"),DS=i("Complete"),CS=i(" group. But their order is reversed. The leftmost column is the most recent and the ones to its right are in descending date order."),xm=u(),To=t("p"),RS=i("This may sounds confusing and prone to error, but in practice it has been working very well. Having all the next steps in column makes them easy to scan. Having half the row in ascending order and half in descending is not a big issue in practice. That\u2019s because the colour coding keeps them visually separate. One learns to navigate them very quickly."),Sm=u(),Ia=t("p"),LS=i("The next question is "),hu=t("em"),MS=i("when"),HS=i(" to sort. I am not doing any automatic processing; i.e. \u2018Due\u2019 steps are not set to \u2018Overdue\u2019 if x days after the due date have passed. Even if it were useful (and I\u2019m not sure it\u2019d be), Apps Script triggers are too unreliable to bother. That leaves three occurrences: when editing and when creating a Step. Plus a manual entry from the menu (it makes development easier)."),_m=u(),Io=t("p"),BS=i("First the menu, and related function"),Tm=u(),xe=t("pre"),Im=u(),Oa=t("p"),FS=i("Then the changes in "),mu=t("code"),jS=i("Opportunity"),NS=i(", where most of the action is"),Om=u(),Se=t("pre"),Am=u(),Aa=t("p"),US=i("Finally, I delegate sorting of groups to the "),yu=t("code"),qS=i("StatesMgr"),GS=i(", since that\u2019s its responsibility"),Pm=u(),_e=t("pre"),Dm=u(),Pa=t("h3"),Da=t("a"),gu=t("span"),VS=i("Conclusion and potential next steps"),Cm=u(),Oo=t("p"),WS=i("I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),Rm=u(),Ao=t("p"),YS=i("I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),Lm=u(),hs=t("ul"),wu=t("li"),zS=i("integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),JS=u(),vu=t("li"),$S=i("integrate with calendar to generate appointments and set reminders"),KS=u(),Eu=t("li"),XS=i("all of the above, to automatically generate emails with a list of available slots from my calendar."),Mm=u(),Po=t("p"),ZS=i("This would actually be quite useful, and who knows, I may well tackle it one of these days."),this.h()},l(s){as=e(s,"H2",{id:!0});var o=p(as);Ss=e(o,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rT=p(Ss);Wo=e(rT,"SPAN",{class:!0}),p(Wo).forEach(n),rT.forEach(n),Ey=c(o,"Need a CRM? Why not just use \u2026?"),o.forEach(n),Tu=k(s),vs=e(s,"P",{});var bu=p(vs);Yo=e(bu,"EM",{});var uT=p(Yo);by=c(uT,"Why not just use a real CRM"),uT.forEach(n),xy=c(bu,"? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),qa=e(bu,"A",{href:!0,rel:!0});var kT=p(qa);Sy=c(kT,"Capsule"),kT.forEach(n),_y=c(bu," and I found I spent most of my time trying to bend it to my needs."),bu.forEach(n),Iu=k(s),Ga=e(s,"P",{});var QS=p(Ga);zo=e(QS,"EM",{});var dT=p(zo);Ty=c(dT,"Why not just use Trello"),dT.forEach(n),Iy=c(QS,"? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),QS.forEach(n),Ou=k(s),_s=e(s,"H2",{id:!0});var s_=p(_s);Ts=e(s_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fT=p(Ts);Jo=e(fT,"SPAN",{class:!0}),p(Jo).forEach(n),fT.forEach(n),Oy=c(s_,"Google Sheets with Apps Script is a great tool for quick tools and prototypes"),s_.forEach(n),Au=k(s),Oe=e(s,"P",{});var hT=p(Oe);Ay=c(hT,"Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),hT.forEach(n),Pu=k(s),Is=e(s,"H2",{id:!0});var n_=p(Is);Os=e(n_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mT=p(Os);$o=e(mT,"SPAN",{class:!0}),p($o).forEach(n),mT.forEach(n),Py=c(n_,"Tips on using Google Apps Script for prototyping"),n_.forEach(n),Du=k(s),Ae=e(s,"P",{});var yT=p(Ae);Dy=c(yT,"In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),yT.forEach(n),Cu=k(s),As=e(s,"H3",{id:!0});var a_=p(As);Ps=e(a_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var gT=p(Ps);Ko=e(gT,"SPAN",{class:!0}),p(Ko).forEach(n),gT.forEach(n),Cy=c(a_,"1. Explicit interactions vs trying to build a SPA"),a_.forEach(n),Ru=k(s),Ds=e(s,"P",{});var Hm=p(Ds);Ry=c(Hm,"Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),Pe=e(Hm,"ABBR",{title:!0});var wT=p(Pe);Ly=c(wT,"SPA"),wT.forEach(n),My=c(Hm," with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),Hm.forEach(n),Lu=k(s),Cs=e(s,"P",{});var Bm=p(Cs);Hy=c(Bm,"Just build your \u201Capp\u201D like in the good old days of the "),Xo=e(Bm,"CODE",{});var vT=p(Xo);By=c(vT,"cgi-bin"),vT.forEach(n),Fy=c(Bm,". But ONLY DOING THE JOB YOU NEED TO. That is, completely stateless. The typical flow would be:"),Bm.forEach(n),Mu=k(s),g=e(s,"OL",{});var R=p(g);Zo=e(R,"LI",{});var ET=p(Zo);jy=c(ET,"User selects cell(s) in worksheet (optional)"),ET.forEach(n),Ny=k(R),Qo=e(R,"LI",{});var bT=p(Qo);Uy=c(bT,"User selects an entry from a custom menu which you have created"),bT.forEach(n),qy=k(R),sl=e(R,"LI",{});var xT=p(sl);Gy=c(xT,"The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s phase from it"),xT.forEach(n),Vy=k(R),nl=e(R,"LI",{});var ST=p(nl);Wy=c(ST,"the script does whatever processing it needs and updates the App state"),ST.forEach(n),Yy=k(R),al=e(R,"LI",{});var _T=p(al);zy=c(_T,"the script updates the spreadsheet to match the new App state"),_T.forEach(n),Jy=k(R),tl=e(R,"LI",{});var TT=p(tl);$y=c(TT,"the scripts finishes and the user is free to mess with the spreadsheet manually"),TT.forEach(n),Ky=k(R),el=e(R,"LI",{});var IT=p(el);Xy=c(IT,"back to 1."),IT.forEach(n),R.forEach(n),Hu=k(s),Rs=e(s,"H3",{id:!0});var t_=p(Rs);Ls=e(t_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var OT=p(Ls);pl=e(OT,"SPAN",{class:!0}),p(pl).forEach(n),OT.forEach(n),Zy=c(t_,"2. minimal work"),t_.forEach(n),Bu=k(s),Ms=e(s,"H3",{id:!0});var e_=p(Ms);Hs=e(e_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var AT=p(Hs);ol=e(AT,"SPAN",{class:!0}),p(ol).forEach(n),AT.forEach(n),Qy=c(e_,"2. Resist the temptation to start coding straight away"),e_.forEach(n),Fu=k(s),ts=e(s,"P",{});var Do=p(ts);sg=c(Do,"The nice thing about prototyping with Google Sheets is that you can start without needing any scripting. Just do everything completely manually. You just need to "),ll=e(Do,"EM",{});var PT=p(ll);ng=c(PT,"think"),PT.forEach(n),ag=c(Do," like a script, and repeat actions mechanically. Requires a bit of discipline, but it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Va=e(Do,"A",{href:!0,rel:!0});var DT=p(Va);tg=c(DT,"Lean"),DT.forEach(n),eg=c(Do," than that!"),Do.forEach(n),ju=k(s),Bs=e(s,"H3",{id:!0});var p_=p(Bs);Fs=e(p_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var CT=p(Fs);il=e(CT,"SPAN",{class:!0}),p(il).forEach(n),CT.forEach(n),pg=c(p_,"3. Model your problem space first"),p_.forEach(n),Nu=k(s),De=e(s,"P",{});var RT=p(De);og=c(RT,"For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),RT.forEach(n),Uu=k(s),js=e(s,"P",{});var Fm=p(js);lg=c(Fm,"Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ce=e(Fm,"ABBR",{title:!0});var LT=p(Ce);ig=c(LT,"OOP"),LT.forEach(n),cg=c(Fm,", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),Fm.forEach(n),qu=k(s),Re=e(s,"P",{});var MT=p(Re);rg=c(MT,"something something layout of cells or multiple cells something"),MT.forEach(n),Gu=k(s),Ns=e(s,"H3",{id:!0});var o_=p(Ns);Us=e(o_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var HT=p(Us);cl=e(HT,"SPAN",{class:!0}),p(cl).forEach(n),HT.forEach(n),ug=c(o_,"4. OOP is actually quite helpful (but there is a place for some FP too)"),o_.forEach(n),Vu=k(s),es=e(s,"P",{});var Co=p(es);kg=c(Co,"GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),rl=e(Co,"CODE",{});var BT=p(rl);dg=c(BT,"recalculateAmount"),BT.forEach(n),fg=c(Co," method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),ul=e(Co,"CODE",{});var FT=p(ul);hg=c(FT,"convertToMetric"),FT.forEach(n),mg=c(Co," method to your Ingredient class. And so on. Under the bonnet then the abstraction will interact with one of the GAS objects, and create a Sheet, or move a Range, and so on."),Co.forEach(n),Wu=k(s),qs=e(s,"P",{});var jm=p(qs);yg=c(jm,"FP becomes useful when you want to share utilities, especially formatting. For example, an "),kl=e(jm,"CODE",{});var jT=p(kl);gg=c(jT,"asArchive"),jT.forEach(n),wg=c(jm," function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),jm.forEach(n),Yu=k(s),Gs=e(s,"H3",{id:!0});var l_=p(Gs);Vs=e(l_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var NT=p(Vs);dl=e(NT,"SPAN",{class:!0}),p(dl).forEach(n),NT.forEach(n),vg=c(l_,"5. Testing is not a solved problem"),l_.forEach(n),zu=k(s),Le=e(s,"P",{});var UT=p(Le);Eg=c(UT,"\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),UT.forEach(n),Ju=k(s),Ws=e(s,"H3",{id:!0});var i_=p(Ws);Ys=e(i_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qT=p(Ys);fl=e(qT,"SPAN",{class:!0}),p(fl).forEach(n),qT.forEach(n),bg=c(i_,"6. Always save your co-ordinates (rows, cells) in constants"),i_.forEach(n),$u=k(s),Me=e(s,"P",{});var GT=p(Me);xg=c(GT,"It\u2019s inevitable that during the app lifetime you will want to move rows around here, add a column there, and so on. That means changing co-ordinates of all your methods. You really don\u2019t want to have go through your functions and manually update all those numbers. Putting magic numbers in function is a standard good practice in programming, but imperative with gS. It\u2019s confusing enough that half the built-in methods are 0-indexed, and the other half 1-indexed."),GT.forEach(n),Ku=k(s),zs=e(s,"H3",{id:!0});var c_=p(zs);Js=e(c_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var VT=p(Js);hl=e(VT,"SPAN",{class:!0}),p(hl).forEach(n),VT.forEach(n),Sg=c(c_,"7. Use sidebars to enter data"),c_.forEach(n),Xu=k(s),He=e(s,"P",{});var WT=p(He);Wa=e(WT,"A",{href:!0,rel:!0});var YT=p(Wa);_g=c(YT,"https://developers.google.com/apps-script/guides/dialogs"),YT.forEach(n),WT.forEach(n),Zu=k(s),$s=e(s,"H3",{id:!0});var r_=p($s);Ks=e(r_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zT=p(Ks);ml=e(zT,"SPAN",{class:!0}),p(ml).forEach(n),zT.forEach(n),Tg=c(r_,"8. Beware of data conversions"),r_.forEach(n),Qu=k(s),Be=e(s,"P",{});var JT=p(Be);Ig=c(JT,"Spreadsheets are notorious for their irritating habit of converting cell data to something you don\u2019t want. GAS is not exempt from that. Dates, or anything date-like, are particularly tricky. Numbers are always represented with one decimal point internally, so be careful you may get a \u201C4.0\u201D when you are expecting a \u201C4\u201D. I suggest creating util functions for forcing conversion and be double sure."),JT.forEach(n),sk=k(s),Xs=e(s,"H3",{id:!0});var u_=p(Xs);Zs=e(u_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $T=p(Zs);yl=e($T,"SPAN",{class:!0}),p(yl).forEach(n),$T.forEach(n),Og=c(u_,"Script structure"),u_.forEach(n),nk=k(s),Fe=e(s,"P",{});var KT=p(Fe);je=e(KT,"IMG",{src:!0,alt:!0}),KT.forEach(n),ak=k(s),Ne=e(s,"P",{});var XT=p(Ne);Ag=c(XT,"I tend to organise the scripts in my projects pretty much the same way."),XT.forEach(n),tk=k(s),b=e(s,"DL",{class:!0});var ss=p(b);gl=e(ss,"DT",{});var ZT=p(gl);Pg=c(ZT,"main.gs"),ZT.forEach(n),A=e(ss,"DD",{});var ns=p(A);Dg=c(ns,"When you select a "),wl=e(ns,"CODE",{});var QT=p(wl);Cg=c(QT,"Extensions > Apps Script"),QT.forEach(n),Rg=c(ns," from the menu, a script called Code.gs is created. I rename it to "),vl=e(ns,"CODE",{});var s5=p(vl);Lg=c(s5,"main.gs"),s5.forEach(n),Mg=c(ns,". In it, I put the "),El=e(ns,"CODE",{});var n5=p(El);Hg=c(n5,"function onOpen() ..."),n5.forEach(n),Bg=c(ns," that creates the main menu I use to enhance the spreadsheet. Each entry in the menu is mapped to a function, and those functions are all in this script as well. They will then call functions in other scripts. This allows me to run scripts from the editor, which is essential if you want to debug. "),bl=e(ns,"CODE",{});var a5=p(bl);Fg=c(a5,"noop"),a5.forEach(n),jg=c(ns," is just an empty function, used as a placeholder. "),Ue=e(ns,"IMG",{src:!0,alt:!0}),ns.forEach(n),xl=e(ss,"DT",{});var t5=p(xl);Ng=c(t5,"globals.gs"),t5.forEach(n),Qs=e(ss,"DD",{});var xu=p(Qs);Ug=c(xu,"All constants are here, like "),Sl=e(xu,"CODE",{});var e5=p(Sl);qg=c(e5,"const SS = SpreadsheetApp.getActiveSpreadsheet();"),e5.forEach(n),Gg=c(xu," which is always needed. Colors. I assign rows and columns to variables, like "),_l=e(xu,"CODE",{});var p5=p(_l);Vg=c(p5,"const DATA_ROW_START = 2;"),p5.forEach(n),xu.forEach(n),Tl=e(ss,"DT",{});var o5=p(Tl);Wg=c(o5,"genericGotofritzUtils.gs"),o5.forEach(n),Ya=e(ss,"DD",{});var Nm=p(Ya);Yg=c(Nm,"GAS is quite quirky, and I have a few trusty functions which I use in all projects. Things like "),Il=e(Nm,"CODE",{});var l5=p(Il);zg=c(l5,"getIndexOfSelectedRow"),l5.forEach(n),Jg=c(Nm," or converting to/from date which is often problematic"),Nm.forEach(n),Ol=e(ss,"DT",{});var i5=p(Ol);$g=c(i5,"utils.gs"),i5.forEach(n),Al=e(ss,"DD",{});var c5=p(Al);Kg=c(c5,"These are generic functions specific to this project"),c5.forEach(n),Pl=e(ss,"DT",{});var r5=p(Pl);Xg=c(r5,"..the rest"),r5.forEach(n),Dl=e(ss,"DD",{});var u5=p(Dl);Zg=c(u5,"Then I tend to create a file for each class, and encapsulate functionality that way"),u5.forEach(n),ss.forEach(n),ek=k(s),sn=e(s,"H2",{id:!0});var k_=p(sn);nn=e(k_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var k5=p(nn);Cl=e(k5,"SPAN",{class:!0}),p(Cl).forEach(n),k5.forEach(n),Qg=c(k_,"Designing a CRM app"),k_.forEach(n),pk=k(s),an=e(s,"H3",{id:!0});var d_=p(an);tn=e(d_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var d5=p(tn);Rl=e(d5,"SPAN",{class:!0}),p(Rl).forEach(n),d5.forEach(n),sw=c(d_,"Step 1: Defining the problem"),d_.forEach(n),ok=k(s),qe=e(s,"P",{});var f5=p(qe);nw=c(f5,"As a job seeker I have quite simple needs. In short:"),f5.forEach(n),lk=k(s),en=e(s,"UL",{});var Um=p(en);M=e(Um,"LI",{});var ms=p(M);aw=c(ms,"keep track of the "),Ll=e(ms,"STRONG",{});var h5=p(Ll);tw=c(h5,"many"),h5.forEach(n),ew=c(ms," active "),Ml=e(ms,"STRONG",{});var m5=p(Ml);pw=c(m5,"opportunities"),m5.forEach(n),ow=c(ms,", so that I know in what "),Hl=e(ms,"STRONG",{});var y5=p(Hl);lw=c(y5,"phase"),y5.forEach(n),iw=c(ms," each opportunity is, and what "),Bl=e(ms,"STRONG",{});var g5=p(Bl);cw=c(g5,"stages"),g5.forEach(n),rw=c(ms," in the interview process are coming up when"),ms.forEach(n),uw=k(Um),Fl=e(Um,"LI",{});var w5=p(Fl);kw=c(w5,"archive opportunities when they are no longer active. So that they are out of the way but I can search through them to find out if I have history with recruiter x or company y"),w5.forEach(n),Um.forEach(n),ik=k(s),f=e(s,"P",{});var _=p(f);dw=c(_,"The words in bold look like good candidates for entities. The basic entity seems to be the "),jl=e(_,"STRONG",{});var v5=p(jl);fw=c(v5,"Opportunities"),v5.forEach(n),hw=c(_,". There are "),Nl=e(_,"EM",{});var E5=p(Nl);mw=c(E5,"many"),E5.forEach(n),yw=c(_," of them, i.e. "),Ul=e(_,"EM",{});var b5=p(Ul);gw=c(b5,"collections"),b5.forEach(n),ww=c(_,", or "),ql=e(_,"STRONG",{});var x5=p(ql);vw=c(x5,"Pools"),x5.forEach(n),Ew=c(_," of them. Each process goes through a sequence of "),Gl=e(_,"STRONG",{});var S5=p(Gl);bw=c(S5,"Steps"),S5.forEach(n),xw=c(_,". Both opportunities and Steps can be in one of a predefined set of "),Vl=e(_,"STRONG",{});var _5=p(Vl);Sw=c(_5,"States"),_5.forEach(n),_w=c(_,". These are my main entities. Plus of course an "),Wl=e(_,"STRONG",{});var T5=p(Wl);Tw=c(T5,"App"),T5.forEach(n),Iw=c(_," entity to orchestrate everything."),_.forEach(n),ck=k(s),Ge=e(s,"P",{});var I5=p(Ge);Ow=c(I5,"There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me (although they may still be useful). For now I\u2019ll just treat that information as background noise which I need to move around but not process."),I5.forEach(n),rk=k(s),Ve=e(s,"P",{});var O5=p(Ve);Aw=c(O5,"Now I need to flesh out some details of each entity"),O5.forEach(n),uk=k(s),pn=e(s,"H4",{id:!0});var f_=p(pn);on=e(f_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var A5=p(on);Yl=e(A5,"SPAN",{class:!0}),p(Yl).forEach(n),A5.forEach(n),Pw=c(f_,"State"),f_.forEach(n),kk=k(s),We=e(s,"P",{});var P5=p(We);Ye=e(P5,"IMG",{src:!0,alt:!0}),P5.forEach(n),dk=k(s),ze=e(s,"P",{});var D5=p(ze);Dw=c(D5,"An Opportunity or Step can be in one of a predefined State. States are hierarchical. The main phases are DUE and COMPLETE. The States associated with DUE are: OVERDUE, MAYBE_FAIL, MAYBE_SUCCESS, DUE, TENTATIVE_DUE. The States associated with COMPLETE are FAIL, SUCCESS, COMPLETE, BLACKLIST. Each Step has style information associated with it (a background and foreground colour). This style information is used both as a visual hint for the user, and as a way for the app to find out what phase a certain entity is. This entity has no methods, it\u2019s just a map of strings to style information. The States are actually created in Row 1 of the LIVE Sheet, which must always be present. The style information, name of the phase, and name of parent phase, is embedded in the name. So for example the DUE/OVERDUE cell will take phase OVERDUE, and so on."),D5.forEach(n),fk=k(s),ln=e(s,"H4",{id:!0});var h_=p(ln);cn=e(h_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var C5=p(cn);zl=e(C5,"SPAN",{class:!0}),p(zl).forEach(n),C5.forEach(n),Cw=c(h_,"Step"),h_.forEach(n),hk=k(s),Je=e(s,"P",{});var R5=p(Je);$e=e(R5,"IMG",{src:!0,alt:!0}),R5.forEach(n),mk=k(s),Ke=e(s,"P",{});var L5=p(Ke);Rw=c(L5,"A Step is at the lowest level of the hierarchy. It typically involves an appointment or deadline or action (like sending a CV, a tech challenge, an interview). It is represented by a Cell in a Sheet, but the Step entity itself doesn\u2019t know which sheet or which Pool it belongs to. A Step is always associated with a State. It contains other data: phase, date, time, contact involved, name of step, comments. Note that all of these are just strings. When the app needs to do something to a Step, it reads the text content of a cell, parses it, extracts all of the data information from it and instantiates a data object. Then it does whatever processing it needs to do. Finally it does the same process but in reverse: encode the data as a string, puts it in the cell, then change the visual appearance according to the phase the cell is in."),L5.forEach(n),yk=k(s),Xe=e(s,"P",{});var M5=p(Xe);Lw=c(M5,"The methods the Step entity will need are:"),M5.forEach(n),gk=k(s),ps=e(s,"UL",{});var Ro=p(ps);Jl=e(Ro,"LI",{});var H5=p(Jl);Mw=c(H5,"loadFromSheet -> decodes a spreadsheet cell to instantiate a State entity"),H5.forEach(n),Hw=k(Ro),$l=e(Ro,"LI",{});var B5=p($l);Bw=c(B5,"writeToCell -> serialises a State entity to a spreadsheet cell"),B5.forEach(n),Fw=k(Ro),Kl=e(Ro,"LI",{});var F5=p(Kl);jw=c(F5,"addComment -> comments are a list; this is a utility function to add to them"),F5.forEach(n),Ro.forEach(n),wk=k(s),rn=e(s,"H4",{id:!0});var m_=p(rn);un=e(m_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var j5=p(un);Xl=e(j5,"SPAN",{class:!0}),p(Xl).forEach(n),j5.forEach(n),Nw=c(m_,"Opportunity"),m_.forEach(n),vk=k(s),Ze=e(s,"P",{});var N5=p(Ze);Qe=e(N5,"IMG",{src:!0,alt:!0}),N5.forEach(n),Ek=k(s),sp=e(s,"P",{});var U5=p(sp);Uw=c(U5,"The next level up. An Opportunity is a sequence of Steps with metadata. Every Opportunity has a State and at least a Step. The State of an Opportunity is the State of the latest Step within it. An Opportunity is associated with a spreadsheet row. When running a command, the app will read all of the cells in the row, decode the metadata, and then decode each of the Steps. From that information it can then create an Opportunity instance."),U5.forEach(n),bk=k(s),np=e(s,"P",{});var q5=p(np);qw=c(q5,"An Opportunity\u2019s metadata is displayed in a cell in column 1. The initial Step is shown in a cell in column 2. Both columns are frozen, and their information doesn\u2019t change. All of the subsequent steps are shown from column 3 onwards. The ordering is a bit tricky. Column 3 is always the next DUE Step, if any. After that come all the remaining DUE Steps with the latest dates last. Then come the COMPLETE Steps, but they are ordered the other way, i.e. earliest date last. This may sound counter-intuitive, but after experimenting with a few options it works quite well. It lets me see the phase of all the Opportunities at a glance (it\u2019s always in column 3), without constantly having to scroll horizontally. There cannot be duplicate Opportunities."),q5.forEach(n),xk=k(s),ap=e(s,"P",{});var G5=p(ap);Gw=c(G5,"An Opportunity can:"),G5.forEach(n),Sk=k(s),H=e(s,"UL",{});var Ca=p(H);Zl=e(Ca,"LI",{});var V5=p(Zl);Vw=c(V5,"loadFromRow -> decodes a spreadsheet row to instantiate an Opportunity entity"),V5.forEach(n),Ww=k(Ca),Ql=e(Ca,"LI",{});var W5=p(Ql);Yw=c(W5,"writeToRow -> the opposite"),W5.forEach(n),zw=k(Ca),si=e(Ca,"LI",{});var Y5=p(si);Jw=c(Y5,"activateNextStep -> changes the current Step (i.e, the one in column 3) to one of the COMPLETE States, and either promotes the next DUE Step to column 3 or it asks the user for input so that it can create one"),Y5.forEach(n),$w=k(Ca),ni=e(Ca,"LI",{});var z5=p(ni);Kw=c(z5,"addComment -> to the metadata in column 1"),z5.forEach(n),Ca.forEach(n),_k=k(s),kn=e(s,"H4",{id:!0});var y_=p(kn);dn=e(y_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var J5=p(dn);ai=e(J5,"SPAN",{class:!0}),p(ai).forEach(n),J5.forEach(n),Xw=c(y_,"Pools"),y_.forEach(n),Tk=k(s),tp=e(s,"P",{});var $5=p(tp);ep=e($5,"IMG",{src:!0,alt:!0}),$5.forEach(n),Ik=k(s),pp=e(s,"P",{});var K5=p(pp);Zw=c(K5,"A Pool (=collection) of Opportunities. Each Pool corresponds to a Sheet. Opportunities can be moved from one Pool to another, but Pools don\u2019t need to know about it. They simply deal with whatever Opportunities they find in the current sheet. Pools don\u2019t have any metadata, except for the Sheet name which gives some information on the purpose of the Pool (for example LIVE, ARCHIVE BLACKLIST, etc)"),K5.forEach(n),Ok=k(s),op=e(s,"P",{});var X5=p(op);Qw=c(X5,"A Pool can:"),X5.forEach(n),Ak=k(s),B=e(s,"UL",{});var Ra=p(B);ti=e(Ra,"LI",{});var Z5=p(ti);s1=c(Z5,"loadFromSheet -> decodes a Sheet to instantiate an Pools entity"),Z5.forEach(n),n1=k(Ra),ei=e(Ra,"LI",{});var Q5=p(ei);a1=c(Q5,"writeToSheet -> the opposite"),Q5.forEach(n),t1=k(Ra),pi=e(Ra,"LI",{});var sI=p(pi);e1=c(sI,"sort -> the opportunities within it (grouped by State, descending by date)"),sI.forEach(n),p1=k(Ra),oi=e(Ra,"LI",{});var nI=p(oi);o1=c(nI,"createOpportunity -> at the top of the Sheet"),nI.forEach(n),Ra.forEach(n),Pk=k(s),fn=e(s,"H4",{id:!0});var g_=p(fn);hn=e(g_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var aI=p(hn);li=e(aI,"SPAN",{class:!0}),p(li).forEach(n),aI.forEach(n),l1=c(g_,"App"),g_.forEach(n),Dk=k(s),lp=e(s,"P",{});var tI=p(lp);i1=c(tI,"The App entity is at the top of the hierarchy. It consists of Pools. The list of Pools is arbitrary and hardcoded; the name of the sheet gives a hint of how the corresponding Pool will be managed. Not all Pools will exist, you can create them or remove them with the menu. Potential names:"),tI.forEach(n),Ck=k(s),P=e(s,"UL",{});var ys=p(P);za=e(ys,"LI",{});var qm=p(za);c1=c(qm,"LIVE: all the Opportunities in one of the DUE States. This is the only Pool that "),ii=e(qm,"EM",{});var eI=p(ii);r1=c(eI,"must"),eI.forEach(n),u1=c(qm," exist"),qm.forEach(n),k1=k(ys),ci=e(ys,"LI",{});var pI=p(ci);d1=c(pI,"LIVE OVERDUE: if this Pool exists, the OVERDUE Opportunities are moved from LIVE to here. Is this is deleted, the opposite will happen"),pI.forEach(n),f1=k(ys),ri=e(ys,"LI",{});var oI=p(ri);h1=c(oI,"ARCHIVE yyyy-qq: all of the COMPLETE Opportunities from quarter qq of year yyyy"),oI.forEach(n),m1=k(ys),ui=e(ys,"LI",{});var lI=p(ui);y1=c(lI,"ARCHIVE BLACKLIST: if it exists, the BLACKLIST Opportunities are moved to here"),lI.forEach(n),g1=k(ys),ki=e(ys,"LI",{});var iI=p(ki);w1=c(iI,"ARCHIVE PROMISING: individual COMPLETE Opportunities can be moved here"),iI.forEach(n),ys.forEach(n),Rk=k(s),ip=e(s,"P",{});var cI=p(ip);v1=c(cI,"The App entity can:"),cI.forEach(n),Lk=k(s),F=e(s,"UL",{});var La=p(F);di=e(La,"LI",{});var rI=p(di);E1=c(rI,"createPool -> creates one of the Pools above if it doesn\u2019t exist, and move the relevant Opportunities around. It uses the LIVE Pool as a template"),rI.forEach(n),b1=k(La),fi=e(La,"LI",{});var uI=p(fi);x1=c(uI,"destroyPool -> the opposite (doesn\u2019t apply to LIVE)"),uI.forEach(n),S1=k(La),hi=e(La,"LI",{});var kI=p(hi);_1=c(kI,"moveProcess -> to a different Pool"),kI.forEach(n),T1=k(La),mi=e(La,"LI",{});var dI=p(mi);I1=c(dI,"updatePools -> ensures all the Opportunities are allocated to the correct Pool, creating ARCHIVE yyyy-qq as needed"),dI.forEach(n),La.forEach(n),Mk=k(s),mn=e(s,"H3",{id:!0});var w_=p(mn);yn=e(w_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fI=p(yn);yi=e(fI,"SPAN",{class:!0}),p(yi).forEach(n),fI.forEach(n),O1=c(w_,"Step 2: Iterating without programming to reach an initial MVP"),w_.forEach(n),Hk=k(s),cp=e(s,"P",{});var hI=p(cp);A1=c(hI,"The above is the result of days of experimentation. Without any coding. I tried different layouts and abstractions and then pretended I was a script and did it all by hand. Keeping notes as I went along. Once happy I made a copy of it, removed all the sheets except for one called \u2018LIVE\u2019, and deleted all the data from it except for the top row. That\u2019s where the States are defined (useful as a legend). The first two column stay frozen."),hI.forEach(n),Bk=k(s),rp=e(s,"P",{});var mI=p(rp);up=e(mI,"IMG",{src:!0,alt:!0}),mI.forEach(n),Fk=k(s),gn=e(s,"H3",{id:!0});var v_=p(gn);wn=e(v_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yI=p(wn);gi=e(yI,"SPAN",{class:!0}),p(gi).forEach(n),yI.forEach(n),P1=c(v_,"Step 3: Setup and menu"),v_.forEach(n),jk=k(s),kp=e(s,"P",{});var gI=p(kp);z=e(gI,"DEL",{});var Ma=p(z);D1=c(Ma,"When you select "),wi=e(Ma,"CODE",{});var wI=p(wi);C1=c(wI,"Extensions > Apps Script"),wI.forEach(n),R1=c(Ma," from the menu, a script called Code.gs is created. I typically use that to create a menu for the app. I use the menu for most functionality. Right now I create a divider for each of my main entities. It won\u2019t stay like that long term. But first I create a file called "),vi=e(Ma,"CODE",{});var vI=p(vi);L1=c(vI,"constants.gs"),vI.forEach(n),M1=c(Ma," where I put all of the globals. To start off it will contain SS, a const for the active spreadsheet. SS is needed pretty much everywhere. "),Ei=e(Ma,"CODE",{});var EI=p(Ei);H1=c(EI,"noop"),EI.forEach(n),B1=c(Ma," is just an empty function, used as a placeholder."),Ma.forEach(n),gI.forEach(n),Nk=k(s),Ja=e(s,"PRE",{class:!0});var n7=p(Ja);n7.forEach(n),Uk=k(s),Es=e(s,"P",{});var Su=p(Es);bi=e(Su,"CODE",{});var bI=p(bi);F1=c(bI,"onOpen"),bI.forEach(n),j1=c(Su," is not as useful as one may think. Because of Google\u2019s paranoia it is quite limited in what it can do. But it can create menus, so that\u2019s what this file does. The SS variable is accessible here to; in fact all the top level variables are. Adding "),xi=e(Su,"CODE",{});var xI=p(xi);N1=c(xI,"null"),xI.forEach(n),U1=c(Su," to the array of menu entries will create a divider."),Su.forEach(n),qk=k(s),$a=e(s,"PRE",{class:!0});var a7=p($a);a7.forEach(n),Gk=k(s),dp=e(s,"P",{});var SI=p(dp);fp=e(SI,"IMG",{src:!0,alt:!0}),SI.forEach(n),Vk=k(s),vn=e(s,"H3",{id:!0});var E_=p(vn);En=e(E_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _I=p(En);Si=e(_I,"SPAN",{class:!0}),p(Si).forEach(n),_I.forEach(n),q1=c(E_,"Step 4: Creating opportunity"),E_.forEach(n),Wk=k(s),hp=e(s,"P",{});var TI=p(hp);G1=c(TI,"Let\u2019s start doing something useful: creating a new opportunity. A new menu entry will call an actual function."),TI.forEach(n),Yk=k(s),Ka=e(s,"PRE",{class:!0});var t7=p(Ka);t7.forEach(n),zk=k(s),mp=e(s,"P",{});var II=p(mp);V1=c(II,"I create a separate file for all the menu function. That helps when debugging, because I can pick one of the function and then just run it by pressing the button at the top. That is essential to be able to view any error messages."),II.forEach(n),Jk=k(s),yp=e(s,"P",{});var OI=p(yp);W1=c(OI,"The sequence of steps within the function is quite self-explanatory. Function names which end with an underscore are \u201Cprivate\u201D in GAS."),OI.forEach(n),$k=k(s),Xa=e(s,"PRE",{class:!0});var e7=p(Xa);e7.forEach(n),Kk=k(s),gp=e(s,"P",{});var AI=p(gp);Y1=c(AI,"For this I will need a Pool class \u2026"),AI.forEach(n),Xk=k(s),Za=e(s,"PRE",{class:!0});var p7=p(Za);p7.forEach(n),Zk=k(s),wp=e(s,"P",{});var PI=p(wp);z1=c(PI,"\u2026and an Opportunity one"),PI.forEach(n),Qk=k(s),Qa=e(s,"PRE",{class:!0});var o7=p(Qa);o7.forEach(n),sd=k(s),os=e(s,"P",{});var Lo=p(os);J1=c(Lo,"Double check that selecting "),_i=e(Lo,"CODE",{});var DI=p(_i);$1=c(DI,"> New opportunity"),DI.forEach(n),K1=c(Lo," doesn\u2019t throw any error. Good. Now to fill in the gaps. The minimal work would be to insert a row at the top, and push all the others down, without touching them. But I prefer the "),Ti=e(Lo,"EM",{});var CI=p(Ti);X1=c(CI,"stateless"),CI.forEach(n),Z1=c(Lo," approach - i.e., load the complete Pool phase, process it, save the complete Pool phase. That sounds wasteful, but it means that I can combine functions any way I want. I can always be sure that at the end of each step the UI is in sync with the app state. And I can encapsulate the two steps \u201Cload App state\u201D and \u201Csave App state\u201D in functions and forget about them. As for efficiency, I can optimise later, should I need to."),Lo.forEach(n),nd=k(s),vp=e(s,"P",{});var RI=p(vp);Q1=c(RI,"First, hard code some rows / cols coordinates in globals. The whole app starts at row 2 (the top row is for headers). Opportunities have two cols of metadata, col 1 and 2."),RI.forEach(n),ad=k(s),st=e(s,"PRE",{class:!0});var l7=p(st);l7.forEach(n),td=k(s),bn=e(s,"P",{});var Gm=p(bn);sv=c(Gm,"I will insert enough rows at the top to write the whole sequence of Opportunities in them. Then I will remove the rows below them. That\u2019s because GAS complains if you try to insert rows in a empty Sheet. Pools don\u2019t actually render Opportunities; they tell them to render themselves. To do so, the Opportunities need to know where they are on spreadsheet. The utility function "),Ii=e(Gm,"CODE",{});var LI=p(Ii);nv=c(LI,"reindex_"),LI.forEach(n),av=c(Gm," does exactly that."),Gm.forEach(n),ed=k(s),nt=e(s,"PRE",{class:!0});var i7=p(nt);i7.forEach(n),pd=k(s),xn=e(s,"P",{});var Vm=p(xn);tv=c(Vm,"And now the two missing methods of Opportunities. "),Oi=e(Vm,"CODE",{});var MI=p(Oi);ev=c(MI,"updateUI"),MI.forEach(n),pv=c(Vm," will just show some random text for now"),Vm.forEach(n),od=k(s),at=e(s,"PRE",{class:!0});var c7=p(at);c7.forEach(n),ld=k(s),tt=e(s,"P",{});var b_=p(tt);ov=c(b_,"\u201CDie\u201D is a function that I have been using since my Perl days\u2026 a long time ago. It\u2019s for "),et=e(b_,"A",{href:!0,rel:!0});var HI=p(et);lv=c(HI,"failing fast"),HI.forEach(n),b_.forEach(n),id=k(s),pt=e(s,"PRE",{class:!0});var r7=p(pt);r7.forEach(n),cd=k(s),Sn=e(s,"H4",{id:!0});var x_=p(Sn);_n=e(x_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var BI=p(_n);Ai=e(BI,"SPAN",{class:!0}),p(Ai).forEach(n),BI.forEach(n),iv=c(x_,"5: Using an HTML form in a sidebar to create an Opportunity"),x_.forEach(n),rd=k(s),Ep=e(s,"P",{});var FI=p(Ep);J=e(FI,"VIDEO",{src:!0,title:!0}),p(J).forEach(n),FI.forEach(n),ud=k(s),Tn=e(s,"P",{});var Wm=p(Tn);cv=c(Wm,"We can use an HTML form to add real data to an opportunity. Coding sidebars in vanilla js, like in 1999. Clunky but surprisingly easy. The form is a complete HTML document which you can load to the side. There two types of HTML documents you can load: pure HTML and templates. You load them in the sidebar in different ways. I don\u2019t know why they bother with that distinction. The only difference seems to be that templates can use the classic ASP looking "),Pi=e(Wm,"CODE",{});var jI=p(Pi);rv=c(jI,"<?= some data ?>"),jI.forEach(n),uv=c(Wm," tags. I did say 1999, didn\u2019t I."),Wm.forEach(n),kd=k(s),bp=e(s,"P",{});var NI=p(bp);xp=e(NI,"IMG",{src:!0,alt:!0}),NI.forEach(n),dd=k(s),ls=e(s,"P",{});var Mo=p(ls);kv=c(Mo,"You can share JS (for validation, for example) and CSS across those documents by using a trick. You create an HTML document which only has JS in it, and one which only has CSS. Then you import those inside the HTML template you are working with. It only works with templates. It\u2019s ugly but it works. I don\u2019t bother, I only have a couple of forms and a few lines of CSS. I am happy to copy and paste them in all the forms I need. And as for validation, you can go a long way with "),ot=e(Mo,"A",{href:!0,rel:!0});var UI=p(ot);dv=c(UI,"standard HTML input field parameters"),UI.forEach(n),fv=c(Mo,". Here\u2019s the "),lt=e(Mo,"A",{href:!0,rel:!0});var qI=p(lt);hv=c(qI,"official documentation for the separating CSS/JS/HTML trick"),qI.forEach(n),mv=c(Mo,"."),Mo.forEach(n),fd=k(s),it=e(s,"PRE",{class:!0});var u7=p(it);u7.forEach(n),hd=k(s),j=e(s,"P",{});var Ha=p(j);yv=c(Ha,"It\u2019s the simplest possible form, with barely any styling. "),Di=e(Ha,"CODE",{});var GI=p(Di);gv=c(GI,'<body onload="prefill()">'),GI.forEach(n),wv=c(Ha," will fill up the form with data. Gosh I think it\u2019s the first time I use a "),Ci=e(Ha,"CODE",{});var VI=p(Ci);vv=c(VI,"body onload"),VI.forEach(n),Ev=c(Ha," in 25 years. Some of it is for testing, so that I don\u2019t have to type it all the time. The only interesting part is the form submission. "),Ri=e(Ha,"CODE",{});var WI=p(Ri);bv=c(WI,'<form onsubmit="handleFormSubmit(this)">'),WI.forEach(n),xv=c(Ha," handles that part."),Ha.forEach(n),md=k(s),bs=e(s,"P",{});var _u=p(bs);Li=e(_u,"CODE",{});var YI=p(Li);Sv=c(YI,"google.script.run.A_FUNCTION(formObj)"),YI.forEach(n),_v=c(_u," will call A_FUNCTION in your GAS app, and pass it a JSON object with all your form fields. Sweet. You then have this curious model where you create handlers for success and failure, and pass it to "),Mi=e(_u,"CODE",{});var zI=p(Mi);Tv=c(zI,"run"),zI.forEach(n),Iv=c(_u," before you call it. It\u2019s all relatively straightforward."),_u.forEach(n),yd=k(s),ct=e(s,"PRE",{class:!0});var k7=p(ct);k7.forEach(n),gd=k(s),Sp=e(s,"P",{});var JI=p(Sp);Ov=c(JI,"Then we actually need to show this sidebar. The code called by the menu is completely different. Instead of processing data, it loads the HTML form and does nothing else"),JI.forEach(n),wd=k(s),rt=e(s,"PRE",{class:!0});var d7=p(rt);d7.forEach(n),vd=k(s),is=e(s,"P",{});var Ho=p(is);Av=c(Ho,"The data processing is done in the function connected to the form submission, "),Hi=e(Ho,"CODE",{});var $I=p(Hi);Pv=c($I,"handleCreateOpportunity"),$I.forEach(n),Dv=c(Ho,". A new file, "),Bi=e(Ho,"CODE",{});var KI=p(Bi);Cv=c(KI,"formHandlers.gs"),KI.forEach(n),Rv=c(Ho,", will contains all those form handlers."),Ho.forEach(n),Ed=k(s),ut=e(s,"PRE",{class:!0});var f7=p(ut);f7.forEach(n),bd=k(s),kt=e(s,"PRE",{class:!0});var h7=p(kt);h7.forEach(n),xd=k(s),In=e(s,"P",{});var Ym=p(In);Lv=c(Ym,"And finally, we have to add some structured metadata, and not some random strings, to an opportunity. I have toyed with difference approaches, trying to keep it simple and yet flexible and easy to update. I came up with a generic utility class called "),Fi=e(Ym,"CODE",{});var XI=p(Fi);Mv=c(XI,"StructToUIBridge"),XI.forEach(n),Hv=c(Ym,", which I can reuse across projects."),Ym.forEach(n),Sd=k(s),On=e(s,"P",{});var zm=p(On);Bv=c(zm,"The basic idea is that each spreadsheet cell is a mini UI component. Made up of strings, each with their formatting, joined together by separators. To refresh the cell you form a sequence by alternating strings and separators. Then apply formatting. When you want to extract the data from the cell you strip the formatting away. Then break up the text into string + separator pairs. This is somewhat like how "),dt=e(zm,"A",{href:!0,rel:!0});var ZI=p(dt);Fv=c(ZI,"tagged template in JS"),ZI.forEach(n),jv=c(zm," work. The difficulty is that to format parts of a cell content you need to use RichText."),zm.forEach(n),_d=k(s),_p=e(s,"P",{});var QI=p(_p);Nv=c(QI,"A Field is a simple ValueObject wich represents a string + separator pair. It does nothing but hold data. Although it could also have validation methods; that\u2019s what VOs often do. The \u2018style\u2019 attribute is a RichText style, which I create in the globals file. Styles are created by builders, themselves created by the top level app. Don\u2019t ask\u2026"),QI.forEach(n),Td=k(s),ft=e(s,"PRE",{class:!0});var m7=p(ft);m7.forEach(n),Id=k(s),cs=e(s,"P",{});var Bo=p(cs);Uv=c(Bo,"A "),ji=e(Bo,"CODE",{});var sO=p(ji);qv=c(sO,"StructToUIBridge"),sO.forEach(n),Gv=c(Bo," is a sequence of "),Ni=e(Bo,"CODE",{});var nO=p(Ni);Vv=c(nO,"Fields"),nO.forEach(n),Wv=c(Bo,". Plus a couple of styling values like background colour applied to the whole cell. It has methods to update the field contents. As well as generating the strings + separators sequence."),Bo.forEach(n),Od=k(s),ht=e(s,"PRE",{class:!0});var y7=p(ht);y7.forEach(n),Ad=k(s),An=e(s,"P",{});var Jm=p(An);Yv=c(Jm,"The interesting part is the "),Ui=e(Jm,"CODE",{});var aO=p(Ui);zv=c(aO,"updateCell"),aO.forEach(n),Jv=c(Jm," method. It first concatenates all the strings + separators. Then for each pair it finds out their length and puts markers at the beginning and end. RichText is then used to apply styling between those markers. It\u2019s not the easiest thing to debug\u2026"),Jm.forEach(n),Pd=k(s),mt=e(s,"PRE",{class:!0});var g7=p(mt);g7.forEach(n),Dd=k(s),N=e(s,"P",{});var Ba=p(N);$v=c(Ba,"The nice thing about this "),qi=e(Ba,"CODE",{});var tO=p(qi);Kv=c(tO,"StructToUIBridge"),tO.forEach(n),Xv=c(Ba," class is that it hides away all of the ugliness of RichText. It\u2019s very clear what the "),Gi=e(Ba,"CODE",{});var eO=p(Gi);Zv=c(eO,"metadata1"),eO.forEach(n),Qv=c(Ba," and "),Vi=e(Ba,"CODE",{});var pO=p(Vi);s2=c(pO,"metadata2"),pO.forEach(n),n2=c(Ba," properties contain. They are simple to edit, which was the whole point."),Ba.forEach(n),Cd=k(s),yt=e(s,"PRE",{class:!0});var w7=p(yt);w7.forEach(n),Rd=k(s),U=e(s,"P",{});var Fa=p(U);a2=c(Fa,"The "),Wi=e(Fa,"CODE",{});var oO=p(Wi);t2=c(oO,"bold"),oO.forEach(n),e2=c(Fa," and "),Yi=e(Fa,"CODE",{});var lO=p(Yi);p2=c(lO,"smaller"),lO.forEach(n),o2=c(Fa," style I created in "),zi=e(Fa,"CODE",{});var iO=p(zi);l2=c(iO,"globals.gs"),iO.forEach(n),i2=c(Fa,". It\u2019s easy to create a set of styles for the whole app."),Fa.forEach(n),Ld=k(s),gt=e(s,"PRE",{class:!0});var v7=p(gt);v7.forEach(n),Md=k(s),Tp=e(s,"P",{});var cO=p(Tp);c2=c(cO,"Instantiating the Opportunity object, with some very basic validation, and then updating the spreadsheet cell, is fairly concise."),cO.forEach(n),Hd=k(s),wt=e(s,"PRE",{class:!0});var E7=p(wt);E7.forEach(n),Bd=k(s),vt=e(s,"P",{});var S_=p(vt);Ji=e(S_,"CODE",{});var rO=p(Ji);r2=c(rO,"validDate"),rO.forEach(n),u2=c(S_," is one of a number of generic functions I share from project to project. Nothing super sophisticated. I use JSDoc for these functions because GAS is actually quite good with tooltips and showing you typing hings. Although they are not JSDoc, they are Closure Compiler annotations. So, not as useful."),S_.forEach(n),Fd=k(s),Et=e(s,"PRE",{class:!0});var b7=p(Et);b7.forEach(n),jd=k(s),Pn=e(s,"H4",{id:!0});var __=p(Pn);Dn=e(__,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var uO=p(Dn);$i=e(uO,"SPAN",{class:!0}),p($i).forEach(n),uO.forEach(n),k2=c(__,"Loading the state of the app from the spreadsheet"),__.forEach(n),Nd=k(s),Cn=e(s,"P",{});var $m=p(Cn);d2=c($m,"Right now every time I create a new Opportunity in the app, the old ones are removed. That\u2019s because I haven\u2019t implemented "),Ki=e($m,"CODE",{});var kO=p(Ki);f2=c(kO,"loadStateFromSheet_"),kO.forEach(n),h2=c($m," yet. It\u2019s time to tackle that. First the easy part: getting the Opportunity object to delegate the job to its metadata objects."),$m.forEach(n),Ud=k(s),bt=e(s,"PRE",{class:!0});var x7=p(bt);x7.forEach(n),qd=k(s),Ip=e(s,"P",{});var dO=p(Ip);m2=c(dO,"Now for implementing those methods. I\u2019ll be using regular expressions. What could possibly go wrong, right? Actually A LOT could go wrong. If a field has no separator, then it won\u2019t work as there will be no boundary between fields. If the separator is found within any of the strings, then the whole thing will fall apart."),dO.forEach(n),Gd=k(s),Op=e(s,"P",{});var fO=p(Op);y2=c(fO,"The first part is easily solvable: we can simply force a separator. The next cannot be solved easily. I guess the code could reject separators which are potentially too dangerous (commas, dashes). But that\u2019s an overkill for an app which will only be used by myself. I\u2019ll live with the risk"),fO.forEach(n),Vd=k(s),xt=e(s,"PRE",{class:!0});var S7=p(xt);S7.forEach(n),Wd=k(s),q=e(s,"P",{});var ja=p(q);g2=c(ja,"The next part is slightly trickier. The script needs to generate a RegExp based on the fields and separator it expects. The "),Xi=e(ja,"CODE",{});var hO=p(Xi);w2=c(hO,"generateParsingRegexp_"),hO.forEach(n),v2=c(ja," does that with a simple array.reduce, no special tricks required. Tricky is deciding which of the capturing strings to make greedy "),Zi=e(ja,"CODE",{});var mO=p(Zi);E2=c(mO,"(.*)"),mO.forEach(n),b2=c(ja," and which not "),Qi=e(ja,"CODE",{});var yO=p(Qi);x2=c(yO,"(.*?)"),yO.forEach(n),S2=c(ja,". There must be at least a greedy one. I opt for putting it last, but it may backfire in the future. We\u2019ll see. I hope it doesn\u2019t because debugging it is a quite painful."),ja.forEach(n),Yd=k(s),St=e(s,"PRE",{class:!0});var _7=p(St);_7.forEach(n),zd=k(s),Rn=e(s,"P",{});var Km=p(Rn);_2=c(Km,"And finally the money shot, "),sc=e(Km,"CODE",{});var gO=p(sc);T2=c(gO,"loadDataFromSheet"),gO.forEach(n),I2=c(Km,". Most of the work is done by the RegExp. This function will simply plyg"),Km.forEach(n),Jd=k(s),_t=e(s,"PRE",{class:!0});var T7=p(_t);T7.forEach(n),$d=k(s),Ap=e(s,"P",{});var wO=p(Ap);O2=c(wO,"Now when I add a field, the previous ones stay there."),wO.forEach(n),Kd=k(s),Pp=e(s,"P",{});var vO=p(Pp);$=e(vO,"VIDEO",{src:!0,title:!0}),p($).forEach(n),vO.forEach(n),Xd=k(s),Ln=e(s,"H3",{id:!0});var T_=p(Ln);Mn=e(T_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var EO=p(Mn);nc=e(EO,"SPAN",{class:!0}),p(nc).forEach(n),EO.forEach(n),A2=c(T_,"Editing an Opportunity"),T_.forEach(n),Zd=k(s),G=e(s,"P",{});var Na=p(G);P2=c(Na,"I have done Create, Read, I might as well do the rest of the "),ac=e(Na,"B",{});var bO=p(ac);D2=c(bO,"CR"),bO.forEach(n),C2=c(Na,"UD operations. So "),tc=e(Na,"B",{});var xO=p(tc);R2=c(xO,"U"),xO.forEach(n),L2=c(Na,"pdate, or edit. All the pieces of the puzzle are already there. The app can read from a cell, and it can submit a form. All it needs is to connect the two, so that the data in form comes from the cell, and vice versa. Let\u2019s start fetching data from the cell and pushing it to the form. There is already a function for the fetching part, "),ec=e(Na,"CODE",{});var SO=p(ec);M2=c(SO,"loadDataFromSheet"),SO.forEach(n),H2=c(Na,". But how do you inject data into the form?"),Na.forEach(n),Qd=k(s),Hn=e(s,"H4",{id:!0});var I_=p(Hn);Bn=e(I_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _O=p(Bn);pc=e(_O,"SPAN",{class:!0}),p(pc).forEach(n),_O.forEach(n),B2=c(I_,"Injecting data into an HTMLHtmlService form in a sidebar with Apps Script"),I_.forEach(n),sf=k(s),Fn=e(s,"P",{});var Xm=p(Fn);F2=c(Xm,"I assumed it would be relatively easy, perhaps by passing a payload as second argument to "),oc=e(Xm,"CODE",{});var TO=p(oc);j2=c(TO,"createHtmlOutputFromFile"),TO.forEach(n),N2=c(Xm,", but nope. There is a way to do it, but it\u2019s hacky. You turn the data into a DOM fragment - it could just be a string, or a whole DOM subtree - and then append it to the HTML form. Don\u2019t forget to CSS display to none! Then at the other end the form can extract it from the HTML and use it. As I said - hacky. There is a variation using HTML templates instead of documents, but I prefer not to use templates. They are not as useful as they seem. Even the documentation cautions against using them! So hacky DOM snippets it is."),Xm.forEach(n),nf=k(s),jn=e(s,"P",{});var Zm=p(jn);U2=c(Zm,"Start with adding a new menu entry, and a placeholder function. The function will be a variation of "),lc=e(Zm,"CODE",{});var IO=p(lc);q2=c(IO,"createOpportunity"),IO.forEach(n),G2=c(Zm,", so let\u2019s copy that to start."),Zm.forEach(n),af=k(s),Tt=e(s,"PRE",{class:!0});var I7=p(Tt);I7.forEach(n),tf=k(s),rs=e(s,"P",{});var Fo=p(rs);V2=c(Fo,"First I will try and make sure I can actually pass data to the HTML form. The form will need data from an Opportunity. The user will need to have an Opportunity selected. So let\u2019s start fetching the Opportunity index, and then passing that as JSON. I use two of my standard functions for that, "),ic=e(Fo,"CODE",{});var OO=p(ic);W2=c(OO,"dieUnlessSelection"),OO.forEach(n),Y2=c(Fo," and "),cc=e(Fo,"CODE",{});var AO=p(cc);z2=c(AO,"indexOfSelectedRow"),AO.forEach(n),J2=c(Fo,"."),Fo.forEach(n),ef=k(s),It=e(s,"PRE",{class:!0});var O7=p(It);O7.forEach(n),pf=k(s),Dp=e(s,"P",{});var PO=p(Dp);$2=c(PO,"I will encode the JSON in an HTML div with a standard ID, saved in the globals file. The HTML form will not have access to it though. I will have to copy and paste it there manually. For now I make the div pink so that I can see it, but later on it will be display:none."),PO.forEach(n),of=k(s),Ot=e(s,"PRE",{class:!0});var A7=p(Ot);A7.forEach(n),lf=k(s),Cp=e(s,"P",{});var DO=p(Cp);K2=c(DO,"I click on the form and yeah, the HTML Div is there."),DO.forEach(n),cf=k(s),Rp=e(s,"P",{});var CO=p(Rp);Lp=e(CO,"IMG",{src:!0,alt:!0}),CO.forEach(n),rf=k(s),Mp=e(s,"P",{});var RO=p(Mp);X2=c(RO,"Then in the form"),RO.forEach(n),uf=k(s),At=e(s,"PRE",{class:!0});var P7=p(At);P7.forEach(n),kf=k(s),Hp=e(s,"P",{});var LO=p(Hp);Z2=c(LO,"and I can confirm I got the data. Cool, now that I have confirmed it works, let\u2019s wire it all app properly. First, a util function to format a JS obj as an HTML string, since I will be using it for different forms."),LO.forEach(n),df=k(s),Pt=e(s,"PRE",{class:!0});var D7=p(Pt);D7.forEach(n),ff=k(s),Nn=e(s,"P",{});var Qm=p(Nn);Q2=c(Qm,"Then I need a JSON representation of the Opportunity object. Since the data of interest is all in the StructToUIBridge, I add a generic "),rc=e(Qm,"CODE",{});var MO=p(rc);sE=c(MO,"asJson"),MO.forEach(n),nE=c(Qm," method to that. And then a similarly named one for Opportunity"),Qm.forEach(n),hf=k(s),Dt=e(s,"PRE",{class:!0});var C7=p(Dt);C7.forEach(n),mf=k(s),Bp=e(s,"P",{});var HO=p(Bp);aE=c(HO,"Finally, pass all that data to the form. I add an \u2018id\u2019 property so that the Pool object will know what to edit later. It is important to make the difference between the id of the Opportunity in the Pool, i.e. the index in the array, and the index of the row in the Sheet. I create static methods in the Pool class to make the conversion"),HO.forEach(n),yf=k(s),Ct=e(s,"PRE",{class:!0});var R7=p(Ct);R7.forEach(n),gf=k(s),Rt=e(s,"PRE",{class:!0});var L7=p(Rt);L7.forEach(n),wf=k(s),Fp=e(s,"P",{});var BO=p(Fp);tE=c(BO,"The form doesn\u2019t change much - I fetch the prefill data from the data embedded to the HTML, if present. I added a hidden field for the id. If the form is for creation, and there is no data embedded in the HTML in the form, I remove the id field from the HTML. That\u2019s the easiest approach, rather than mess about with the value of \u2018id\u2019. In fact the submit form doesn\u2019t change, it keeps sending all the form data as before."),BO.forEach(n),vf=k(s),Lt=e(s,"PRE",{class:!0});var M7=p(Lt);M7.forEach(n),Ef=k(s),jp=e(s,"P",{});var FO=p(jp);eE=c(FO,"The form handler only needs a little amend - a new branch to an update call if an id was found"),FO.forEach(n),bf=k(s),Mt=e(s,"PRE",{class:!0});var H7=p(Mt);H7.forEach(n),xf=k(s),Np=e(s,"P",{});var jO=p(Np);pE=c(jO,"And finally the method that does the update. Because I have decoupled the data manipulation and the rendering, an update is pretty simple. It just puts an instance of a Opportunity in an array."),jO.forEach(n),Sf=k(s),Ht=e(s,"PRE",{class:!0});var B7=p(Ht);B7.forEach(n),_f=k(s),Un=e(s,"H3",{id:!0});var O_=p(Un);qn=e(O_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var NO=p(qn);uc=e(NO,"SPAN",{class:!0}),p(uc).forEach(n),NO.forEach(n),oE=c(O_,"Deleting an Opportunity"),O_.forEach(n),Tf=k(s),us=e(s,"P",{});var jo=p(us);lE=c(jo,"Having done all the ground work already, deleting an Opportunity is a 10 mins job. I use the same shared methods to get the user\u2019s selection. Then the built-in "),kc=e(jo,"CODE",{});var UO=p(kc);iE=c(UO,"ui.alert"),UO.forEach(n),cE=c(jo," to show an \u2018are you sure\u2019 dialog. Finally I call pool\u2019s yet to be coded "),dc=e(jo,"CODE",{});var qO=p(dc);rE=c(qO,"deleteOpportunity"),qO.forEach(n),uE=c(jo," method, and redraw the UI."),jo.forEach(n),If=k(s),Bt=e(s,"PRE",{class:!0});var F7=p(Bt);F7.forEach(n),Of=k(s),Ft=e(s,"P",{});var A_=p(Ft);fc=e(A_,"CODE",{});var GO=p(fc);kE=c(GO,"pool.deleteOpportunity"),GO.forEach(n),dE=c(A_," is a simple array splice"),A_.forEach(n),Af=k(s),jt=e(s,"PRE",{class:!0});var j7=p(jt);j7.forEach(n),Pf=k(s),Gn=e(s,"H3",{id:!0});var P_=p(Gn);Vn=e(P_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var VO=p(Vn);hc=e(VO,"SPAN",{class:!0}),p(hc).forEach(n),VO.forEach(n),fE=c(P_,"Adding Steps"),P_.forEach(n),Df=k(s),Wn=e(s,"P",{});var sy=p(Wn);hE=c(sy,"A reminder of how the problem space is mapped into classes in this app. A Sheet represents a Pool of Opportunities. An Opportunity is a row in the sheet, and it uses the first two columns to the left to display metadata. I have already added CRUD functionality for all of that. To the "),mc=e(sy,"EM",{});var WO=p(mc);mE=c(WO,"right"),WO.forEach(n),yE=c(sy," of those two columns, there should be a sequence of Steps, each taking a cell in the row and growing horizontally, with the least recent at the far right. This is the part which I tackle now. It sounds like it\u2019s going to be a slog, but in fact it\u2019s not that bad. That\u2019s because as a Pool contains an array of Opportunity, an Opportunity contains an array of Steps. So the code is pretty similar. In fact I can pretty much copy and paste it in a new class, adapt it so that it uses columns rather than rows, and that\u2019s about it."),sy.forEach(n),Cf=k(s),Up=e(s,"P",{});var YO=p(Up);gE=c(YO,"The Step class is not too dissimilar from the Opportunity. Step has a col, which Opportunity doesn\u2019t need. And Opportunity has a list of Steps, which is not needed by Step. Of course the data displayed in the cell is different, but the basic idea is the same. All the basic CRUD functionality (Create, Update, Delete) from Opportunity can be ported to Step without too much trouble. I\u2019ll leave it as an exercise for the reader to adapt that. In future refactor I may look into extracting common feature to a commen parent class or mixin, but now\u2019s not the time."),YO.forEach(n),Rf=k(s),Yn=e(s,"TABLE",{});var ny=p(Yn);Nt=e(ny,"TR",{});var ay=p(Nt);yc=e(ay,"TH",{});var zO=p(yc);wE=c(zO,"Opportunity"),zO.forEach(n),vE=k(ay),gc=e(ay,"TH",{});var JO=p(gc);EE=c(JO,"Step"),JO.forEach(n),ay.forEach(n),bE=k(ny),Ut=e(ny,"TR",{});var ty=p(Ut);wc=e(ty,"TD",{});var $O=p(wc);qp=e($O,"PRE",{class:!0});var N7=p(qp);N7.forEach(n),$O.forEach(n),xE=k(ty),vc=e(ty,"TD",{});var KO=p(vc);Gp=e(KO,"PRE",{class:!0});var U7=p(Gp);U7.forEach(n),KO.forEach(n),ty.forEach(n),ny.forEach(n),Lf=k(s),Vp=e(s,"P",{});var XO=p(Vp);SE=c(XO,"For the record, the updated app menus will look like this"),XO.forEach(n),Mf=k(s),qt=e(s,"PRE",{class:!0});var q7=p(qt);q7.forEach(n),Hf=k(s),zn=e(s,"H4",{id:!0});var D_=p(zn);Jn=e(D_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ZO=p(Jn);Ec=e(ZO,"SPAN",{class:!0}),p(Ec).forEach(n),ZO.forEach(n),_E=c(D_,"Some utility functionality"),D_.forEach(n),Bf=k(s),Wp=e(s,"P",{});var QO=p(Wp);TE=c(QO,"At this stage I added a couple of useful menu entries which replicate existing functionality: Add Comment. These are similar to Edit Step / Opportunity but only focus on comments. Why? Because when I am talking to someone in a video call or phone, I want to have a larger than normal text box with no distractions. That spurred some refactoring - until now, whenever I edited an instance (of Opportunity, Step) I simply created a new one and replaced it. But now I want to fiddle with individual fields within the objects. I could of course access them directly, but that of course is a big no-no."),QO.forEach(n),Ff=k(s),K=e(s,"P",{});var Te=p(K);IE=c(Te,"I change the generic "),bc=e(Te,"CODE",{});var sA=p(bc);OE=c(sA,"StructToUIBridge"),sA.forEach(n),AE=c(Te," container to make it easy to locate a specific field by name. After this change, if the fields were "),xc=e(Te,"CODE",{});var nA=p(xc);PE=c(nA,"[{ name: 'mouse', ...}, { name: 'cat', ... }]"),nA.forEach(n),DE=c(Te," then fieldNames would contain "),Sc=e(Te,"CODE",{});var aA=p(Sc);CE=c(aA,"{ mouse: 0, cat: 1, ...}"),aA.forEach(n),Te.forEach(n),jf=k(s),Gt=e(s,"PRE",{class:!0});var G7=p(Gt);G7.forEach(n),Nf=k(s),Yp=e(s,"P",{});var tA=p(Yp);RE=c(tA,"And then a method to use those keys"),tA.forEach(n),Uf=k(s),Vt=e(s,"PRE",{class:!0});var V7=p(Vt);V7.forEach(n),qf=k(s),zp=e(s,"P",{});var eA=p(zp);LE=c(eA,"A new form for editing comments for both Opportunity and Step. A variation on the existing forms, bit with only a textarea and two hidden field. If no \u2018row\u2019 value was passed, the hidden input with id \u2018row\u2019 will be removed from the DOM"),eA.forEach(n),Gf=k(s),Wt=e(s,"PRE",{class:!0});var W7=p(Wt);W7.forEach(n),Vf=k(s),$n=e(s,"P",{});var ey=p($n);ME=c(ey,"The menu creates two similar entries for editing comments. I had to make sure the names were different - if you have two menu entries with the same name in GAS, the "),_c=e(ey,"CODE",{});var pA=p(_c);HE=c(pA,"onOpen"),pA.forEach(n),BE=c(ey," handler will fail silently."),ey.forEach(n),Wf=k(s),Yt=e(s,"PRE",{class:!0});var Y7=p(Yt);Y7.forEach(n),Yf=k(s),Jp=e(s,"P",{});var oA=p(Jp);FE=c(oA,"The two functions are very similar, as it\u2019s obvious by putting them side by side. Again, room for refactoring there. But not yet."),oA.forEach(n),zf=k(s),Kn=e(s,"TABLE",{});var py=p(Kn);zt=e(py,"TR",{});var oy=p(zt);Tc=e(oy,"TH",{});var lA=p(Tc);jE=c(lA,"Opportunity"),lA.forEach(n),NE=k(oy),Ic=e(oy,"TH",{});var iA=p(Ic);UE=c(iA,"Step"),iA.forEach(n),oy.forEach(n),qE=k(py),Jt=e(py,"TR",{});var ly=p(Jt);Oc=e(ly,"TD",{});var cA=p(Oc);$p=e(cA,"PRE",{class:!0});var z7=p($p);z7.forEach(n),cA.forEach(n),GE=k(ly),Ac=e(ly,"TD",{});var rA=p(Ac);Kp=e(rA,"PRE",{class:!0});var J7=p(Kp);J7.forEach(n),rA.forEach(n),ly.forEach(n),py.forEach(n),Jf=k(s),ks=e(s,"P",{});var No=p(ks);VE=c(No,"Both use "),Pc=e(No,"CODE",{});var uA=p(Pc);WE=c(uA,"getFieldValue"),uA.forEach(n),YE=c(No,", which is a wrapper for "),Dc=e(No,"CODE",{});var kA=p(Dc);zE=c(kA,"StructToUIBridge"),kA.forEach(n),JE=c(No,"\u2019s version:"),No.forEach(n),$f=k(s),$t=e(s,"PRE",{class:!0});var $7=p($t);$7.forEach(n),Kf=k(s),Kt=e(s,"P",{});var C_=p(Kt);$E=c(C_,"Both use a modal dialog box instead of a sidebar like in the other cases. That\u2019s because the size of a sidebar is fixed at 300px, whereas a dialog can be changed. Here I use values I have set in "),Cc=e(C_,"CODE",{});var dA=p(Cc);KE=c(dA,"globals.gs"),dA.forEach(n),C_.forEach(n),Xf=k(s),Xt=e(s,"PRE",{class:!0});var K7=p(Xt);K7.forEach(n),Zf=k(s),Xp=e(s,"P",{});var fA=p(Xp);XE=c(fA,"Finally the form handler handles both cases. It switches to a Step if it has a row attribute, to Opportunity if it hasn\u2019t"),fA.forEach(n),Qf=k(s),Zt=e(s,"PRE",{class:!0});var X7=p(Zt);X7.forEach(n),sh=k(s),X=e(s,"P",{});var Ie=p(X);Rc=e(Ie,"CODE",{});var hA=p(Rc);ZE=c(hA,"updateFieldsInOpportunity"),hA.forEach(n),QE=c(Ie," and "),Lc=e(Ie,"CODE",{});var mA=p(Lc);sb=c(mA,"updateFieldsInStep"),mA.forEach(n),nb=c(Ie," are wrappers for "),Mc=e(Ie,"CODE",{});var yA=p(Mc);ab=c(yA,"StructToUIBridge"),yA.forEach(n),tb=c(Ie,"\u2019s method"),Ie.forEach(n),nh=k(s),Qt=e(s,"PRE",{class:!0});var Z7=p(Qt);Z7.forEach(n),ah=k(s),Zp=e(s,"P",{});var gA=p(Zp);eb=c(gA,"And here\u2019s the final result"),gA.forEach(n),th=k(s),Qp=e(s,"P",{});var wA=p(Qp);Z=e(wA,"VIDEO",{src:!0,title:!0}),p(Z).forEach(n),wA.forEach(n),eh=k(s),Xn=e(s,"H3",{id:!0});var R_=p(Xn);Zn=e(R_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vA=p(Zn);Hc=e(vA,"SPAN",{class:!0}),p(Hc).forEach(n),vA.forEach(n),pb=c(R_,"States and ordering"),R_.forEach(n),ph=k(s),so=e(s,"P",{});var EA=p(so);ob=c(EA,"The CRM is beginning to look good, but it\u2019s missing a very important thing. \u201CThe ability to tell the the phase of an Opportunity at a glance\u201D. The time has come to deal with States."),EA.forEach(n),oh=k(s),Qn=e(s,"H4",{id:!0});var L_=p(Qn);sa=e(L_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bA=p(sa);Bc=e(bA,"SPAN",{class:!0}),p(Bc).forEach(n),bA.forEach(n),lb=c(L_,"Defining a State"),L_.forEach(n),lh=k(s),no=e(s,"P",{});var xA=p(no);ib=c(xA,"States give me a bird view of an Opportunity. Did all the steps so far look promising, what\u2019s the next step. Opportunities do not have States, it\u2019s the individual Steps that make it up who do. The State of an Opportunity is merely the State of the the \u201Ccurrent\u201D Step. More about \u201Ccurrent\u201D Steps later. For now, I will focus on managing States for Steps."),xA.forEach(n),ih=k(s),ao=e(s,"P",{});var SA=p(ao);cb=c(SA,"Through experimentation, I found that a two levels hierarchical structure works best. I need to know whether a Step is Complete or still Due. Or whether there are issues of some sort and the step needs Attention. Complete, Due, Attention are my top level State Groups, and will be hard coded in the app. They will be used to group Opportunities when ordering. Within each of those groups there are nuances, which I want to capture. For example, Step X is complete. But did it go well or bad? Step Y is simply Due, or Overdue? There are the States proper. The app will encode them as a background / foreground colours pairs. Encoding information with colours is not good for Accessibility. But I am not building an universal app. I am building a little proof of concept for myself."),SA.forEach(n),ch=k(s),na=e(s,"P",{});var iy=p(na);rb=c(iy,"The last requirement is the ability to define States without code, just by editing cells in the spreadsheet. To achieve that, the app will be used to store definitions for those states. The string content will be in the form "),Fc=e(iy,"CODE",{});var _A=p(Fc);ub=c(_A,"GROUP / STATE"),_A.forEach(n),kb=c(iy,", and the app can read the colours from the sheet. The App instance will manage loading up the States from the Sheet."),iy.forEach(n),rh=k(s),aa=e(s,"H4",{id:!0});var M_=p(aa);ta=e(M_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var TA=p(ta);jc=e(TA,"SPAN",{class:!0}),p(jc).forEach(n),TA.forEach(n),db=c(M_,"Creating a StatesMgr and loading States lazily"),M_.forEach(n),uh=k(s),to=e(s,"P",{});var IA=p(to);eo=e(IA,"IMG",{src:!0,alt:!0}),IA.forEach(n),kh=k(s),ea=e(s,"P",{});var cy=p(ea);fb=c(cy,"A State is a simple value obj. I don\u2019t think I will actually need an "),Nc=e(cy,"CODE",{});var OA=p(Nc);hb=c(OA,"order"),OA.forEach(n),mb=c(cy," attribute, but let\u2019s add it anyway just in case."),cy.forEach(n),dh=k(s),se=e(s,"PRE",{class:!0});var Q7=p(se);Q7.forEach(n),fh=k(s),pa=e(s,"P",{});var ry=p(pa);yb=c(ry,"The StatesMgr does all the heavy lifting when it comes to Stages. For now I will add all the states to a "),Uc=e(ry,"CODE",{});var AA=p(Uc);gb=c(AA,"list"),AA.forEach(n),wb=c(ry," property. The order in which they are found will determine the order in which they are sorted."),ry.forEach(n),hh=k(s),ne=e(s,"PRE",{class:!0});var sD=p(ne);sD.forEach(n),mh=k(s),oa=e(s,"P",{});var uy=p(oa);vb=c(uy,"In the original version I would read the background colour with a simple call to "),qc=e(uy,"CODE",{});var PA=p(qc);Eb=c(PA,".getBackground"),PA.forEach(n),bb=c(uy,". But it turns out it\u2019s not so simple. Colours in Google Sheets are either \u201Cnormal\u201D RGB colours, or they are Theme colours. They are both available in the colour picker, there is no way for a user to know which one is which."),uy.forEach(n),yh=k(s),po=e(s,"P",{});var DA=p(po);oo=e(DA,"IMG",{src:!0,alt:!0}),DA.forEach(n),gh=k(s),la=e(s,"H4",{id:!0});var H_=p(la);ia=e(H_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var CA=p(ia);Gc=e(CA,"SPAN",{class:!0}),p(Gc).forEach(n),CA.forEach(n),xb=c(H_,"Getting the background and font colour of a Google Sheet cell with Apps Script"),H_.forEach(n),wh=k(s),ca=e(s,"P",{});var ky=p(ca);Sb=c(ky,"Why does it matter? A Theme colour doesn\u2019t know what it\u2019s RGB value is. If you try you\u2019ll either get an error or an empty string. Instead you\u2019ll have to fetch information from the Theme. A pointless complication IMHO. Even weirder is that if you change the background colour to a theme one, the foreground also becomes a theme colour. Even though it isn\u2019t. Be as it may, I hid that complexity away by creating two utility functions. To get the RGB value of a ThemeColor in Apps Scripts you need to get the Theme, then call its "),Vc=e(ky,"CODE",{});var RA=p(Vc);_b=c(RA,"getConcreteColor"),RA.forEach(n),Tb=c(ky," method passing it the label of the ThemeColor. Then once you have the Apps Script representation of the Color Object, it\u2019s treated as if it was a \u201Cnormal\u201D color, i.e. convert to RGB and then Hex. All very unnecessary if you ask me, but it is what it is."),ky.forEach(n),vh=k(s),ae=e(s,"PRE",{class:!0});var nD=p(ae);nD.forEach(n),Eh=k(s),lo=e(s,"P",{});var LA=p(lo);Ib=c(LA,"I can now amend the loadStates function to use those util functions"),LA.forEach(n),bh=k(s),te=e(s,"PRE",{class:!0});var aD=p(te);aD.forEach(n),xh=k(s),ra=e(s,"H4",{id:!0});var B_=p(ra);ua=e(B_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var MA=p(ua);Wc=e(MA,"SPAN",{class:!0}),p(Wc).forEach(n),MA.forEach(n),Ob=c(B_,"Creating a global App object in Apps Scripts"),B_.forEach(n),Sh=k(s),io=e(s,"P",{});var HA=p(io);Ab=c(HA,"\u2026is not possible as far as I can see. Google Sheets is best thought of as a bunch of serverless functions. Your scripts contain the definitions, and your triggers and menus can cause some of them to call each other. But once all the calls are finished\u2026 poof! It\u2019s gone. There is no runtime global environment. Although there is a global scope in which your variables and deinfitions live. Let\u2019s look at an example"),HA.forEach(n),_h=k(s),d=e(s,"P",{});var v=p(d);Pb=c(v,"When you open the Spreadsheet, "),Yc=e(v,"CODE",{});var BA=p(Yc);Db=c(BA,"A_CONST"),BA.forEach(n),Cb=c(v,", "),zc=e(v,"CODE",{});var FA=p(zc);Rb=c(FA,"app"),FA.forEach(n),Lb=c(v,", "),Jc=e(v,"CODE",{});var jA=p(Jc);Mb=c(jA,"App"),jA.forEach(n),Hb=c(v,", "),$c=e(v,"CODE",{});var NA=p($c);Bb=c(NA,"test"),NA.forEach(n),Fb=c(v," and "),Kc=e(v,"CODE",{});var UA=p(Kc);jb=c(UA,"onOpen"),UA.forEach(n),Nb=c(v," all exist within the global scope. Then "),Xc=e(v,"CODE",{});var qA=p(Xc);Ub=c(qA,"onOpen"),qA.forEach(n),qb=c(v," runs (it\u2019s one of the few triggers that does). It creates a menu and an instance of "),Zc=e(v,"CODE",{});var GA=p(Zc);Gb=c(GA,"App"),GA.forEach(n),Vb=c(v,". Then it completes. After that the menu stays there, but "),Qc=e(v,"CODE",{});var VA=p(Qc);Wb=c(VA,"app"),VA.forEach(n),Yb=c(v," goes back to \u2018what it was originally\u2019. If you run \u2018What is App?\u2019 from the menu, it will give you \u201Cwhat it was originally\u201D"),v.forEach(n),Th=k(s),ee=e(s,"PRE",{class:!0});var tD=p(ee);tD.forEach(n),Ih=k(s),ka=e(s,"P",{});var dy=p(ka);zb=c(dy,"So how does one create a global singleton? One way is to create a getter function that lazily instantiates the class, when needed. Throughout the code, you will use "),sr=e(dy,"CODE",{});var WA=p(sr);Jb=c(WA,"getApp()"),WA.forEach(n),$b=c(dy," to access the global App instance"),dy.forEach(n),Oh=k(s),pe=e(s,"PRE",{class:!0});var eD=p(pe);eD.forEach(n),Ah=k(s),ds=e(s,"P",{});var Uo=p(ds);Kb=c(Uo,"With that out of the way, I can now concentrate on the States. I will actually use the same pattern to lazily instantiate the StatesMgr. I don\u2019t often use getters in JS, but when I do is usually for lazy evaluation. "),nr=e(Uo,"CODE",{});var YA=p(nr);Xb=c(YA,"get states"),YA.forEach(n),Zb=c(Uo," will return "),ar=e(Uo,"CODE",{});var zA=p(ar);Qb=c(zA,"states_"),zA.forEach(n),sx=c(Uo,", and will create it if it doesn\u2019t exist."),Uo.forEach(n),Ph=k(s),oe=e(s,"PRE",{class:!0});var pD=p(oe);pD.forEach(n),Dh=k(s),co=e(s,"P",{});var JA=p(co);nx=c(JA,"To test it all works I create a quick menu entry"),JA.forEach(n),Ch=k(s),le=e(s,"PRE",{class:!0});var oD=p(le);oD.forEach(n),Rh=k(s),ro=e(s,"P",{});var $A=p(ro);ax=c($A,"I run it, check in the \u201Cexecutions\u201D tab in the Script editor\u2026 and the states are logged there. So far so good."),$A.forEach(n),Lh=k(s),da=e(s,"H4",{id:!0});var F_=p(da);fa=e(F_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var KA=p(fa);tr=e(KA,"SPAN",{class:!0}),p(tr).forEach(n),KA.forEach(n),tx=c(F_,"Adding States to Steps and Opportunities"),F_.forEach(n),Mh=k(s),uo=e(s,"P",{});var XA=p(uo);ex=c(XA,"Quick reminder of the classes involved in this app: an Opportunity contains"),XA.forEach(n),Hh=k(s),fs=e(s,"UL",{});var qo=p(fs);er=e(qo,"LI",{});var ZA=p(er);px=c(ZA,"2 StructToUIBridge instances for metadata"),ZA.forEach(n),ox=k(qo),pr=e(qo,"LI",{});var QA=p(pr);lx=c(QA,"NO State (or rather, the State is inherited from the \u2018current\u2019 Step)"),QA.forEach(n),ix=k(qo),or=e(qo,"LI",{});var s4=p(or);cx=c(s4,`an array of Steps, each one of which has\u2026
\u2013 ..a State
\u2013 ..a StructToUIBridge`),s4.forEach(n),qo.forEach(n),Bh=k(s),x=e(s,"P",{});var W=p(x);rx=c(W,"The question arises, whether the State should be included in the Step or the "),lr=e(W,"CODE",{});var n4=p(lr);ux=c(n4,"StructToUIBridge"),n4.forEach(n),kx=c(W,". There is no compelling argument for either. In the end, considering that "),ir=e(W,"CODE",{});var a4=p(ir);dx=c(a4,"StructToUIBridge"),a4.forEach(n),fx=c(W," interacts with the actual Spreadsheet, and "),cr=e(W,"CODE",{});var t4=p(cr);hx=c(t4,"State"),t4.forEach(n),mx=c(W," information is read from / written to as colours in a cell, I went for it. But what about the two stateless "),rr=e(W,"CODE",{});var e4=p(rr);yx=c(e4,"StructToUIBridge"),e4.forEach(n),gx=c(W," instances within "),ur=e(W,"CODE",{});var p4=p(ur);wx=c(p4,"Opportunity"),p4.forEach(n),vx=c(W,"? That can be dealt with by making statefulness optional."),W.forEach(n),Fh=k(s),ha=e(s,"H4",{id:!0});var j_=p(ha);ma=e(j_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var o4=p(ma);kr=e(o4,"SPAN",{class:!0}),p(kr).forEach(n),o4.forEach(n),Ex=c(j_,"Add State to StructToUIBridge"),j_.forEach(n),jh=k(s),w=e(s,"P",{});var L=p(w);bx=c(L,"When instantiating a "),dr=e(L,"CODE",{});var l4=p(dr);xx=c(l4,"StructToUIBridge"),l4.forEach(n),Sx=c(L,", you can pass a "),fr=e(L,"CODE",{});var i4=p(fr);_x=c(i4,"state"),i4.forEach(n),Tx=c(L," parameter. If boolean true, it sets up the instance as stateful, but without any "),hr=e(L,"CODE",{});var c4=p(hr);Ix=c(c4,"State"),c4.forEach(n),Ox=c(L," data. The instance will load that lazily whenever it needs to sync with the Sheet. But you can pass a "),mr=e(L,"CODE",{});var r4=p(mr);Ax=c(r4,"State"),r4.forEach(n),Px=c(L," instance as "),yr=e(L,"CODE",{});var u4=p(yr);Dx=c(u4,"state"),u4.forEach(n),Cx=c(L,", in which case the instance will load it up. Finally, if no "),gr=e(L,"CODE",{});var k4=p(gr);Rx=c(k4,"state"),k4.forEach(n),Lx=c(L," argument is passed, the instance will be considered stateless. It won\u2019t run any of the state-related methods."),L.forEach(n),Nh=k(s),ie=e(s,"PRE",{class:!0});var lD=p(ie);lD.forEach(n),Uh=k(s),D=e(s,"P",{});var gs=p(D);Mx=c(gs,"I want to be able to pass "),wr=e(gs,"CODE",{});var d4=p(wr);Hx=c(d4,"States"),d4.forEach(n),Bx=c(gs," around either as colours, or names, or "),vr=e(gs,"CODE",{});var f4=p(vr);Fx=c(f4,"State"),f4.forEach(n),jx=c(gs," instances. Not necessarily a good idea for a large complex app. But this is simple enough I should be able to get away with it. This is handled by the setter for "),Er=e(gs,"CODE",{});var h4=p(Er);Nx=c(h4,".state"),h4.forEach(n),Ux=c(gs,". It does different things for different values it is passed. It also updates the colour values associated with a "),br=e(gs,"CODE",{});var m4=p(br);qx=c(m4,"State"),m4.forEach(n),Gx=c(gs,". This is rather smelly code and I expected to be refactoring it before long. But it turned out to work quite well and it hasn\u2019t given me any trouble."),gs.forEach(n),qh=k(s),ce=e(s,"PRE",{class:!0});var iD=p(ce);iD.forEach(n),Gh=k(s),C=e(s,"P",{});var ws=p(C);Vx=c(ws,"I make sure "),xr=e(ws,"CODE",{});var y4=p(xr);Wx=c(y4,"Steps"),y4.forEach(n),Yx=c(ws," initialised their "),Sr=e(ws,"CODE",{});var g4=p(Sr);zx=c(g4,"StructToUIBridge"),g4.forEach(n),Jx=c(ws," with "),_r=e(ws,"CODE",{});var w4=p(_r);$x=c(w4,"state"),w4.forEach(n),Kx=c(ws," set to true. "),Tr=e(ws,"CODE",{});var v4=p(Tr);Xx=c(v4,"Opportunity"),v4.forEach(n),Zx=c(ws," don\u2019t need to change"),ws.forEach(n),Vh=k(s),re=e(s,"PRE",{class:!0});var cD=p(re);cD.forEach(n),Wh=k(s),y=e(s,"P",{});var O=p(y);Ir=e(O,"CODE",{});var E4=p(Ir);Qx=c(E4,"loadDataFromSheet"),E4.forEach(n),s3=c(O," used to handle the text content of a cell, but now it also has to handle colors. For readability, I move the original text handling code into its own private function, "),Or=e(O,"CODE",{});var b4=p(Or);n3=c(b4,"loadTextDataFromSheet_"),b4.forEach(n),a3=c(O,". The colour will be handled by a new method, "),Ar=e(O,"CODE",{});var x4=p(Ar);t3=c(x4,"loadStateDataFromSheet_"),x4.forEach(n),e3=c(O,". The original "),Pr=e(O,"CODE",{});var S4=p(Pr);p3=c(S4,"loadDataFromSheet"),S4.forEach(n),o3=c(O," will now call the two. "),Dr=e(O,"CODE",{});var _4=p(Dr);l3=c(_4,"loadStateDataFromSheet_"),_4.forEach(n),i3=c(O," will pass a colour to the global "),Cr=e(O,"CODE",{});var T4=p(Cr);c3=c(T4,"App"),T4.forEach(n),r3=c(O," instance, which will then use its "),Rr=e(O,"CODE",{});var I4=p(Rr);u3=c(I4,"StatesMgr"),I4.forEach(n),k3=c(O," to return a State corresponding to the colour."),O.forEach(n),Yh=k(s),ue=e(s,"PRE",{class:!0});var rD=p(ue);rD.forEach(n),zh=k(s),ya=e(s,"P",{});var fy=p(ya);Lr=e(fy,"CODE",{});var O4=p(Lr);d3=c(O4,"stateFromColor"),O4.forEach(n),f3=c(fy," is a wrapper for a method of the "),Mr=e(fy,"CODE",{});var A4=p(Mr);h3=c(A4,"StatesMgr"),A4.forEach(n),fy.forEach(n),Jh=k(s),ke=e(s,"PRE",{class:!0});var uD=p(ke);uD.forEach(n),$h=k(s),h=e(s,"P",{});var T=p(h);m3=c(T,"The "),Hr=e(T,"CODE",{});var P4=p(Hr);y3=c(P4,"StateMgr"),P4.forEach(n),g3=c(T," is changed so that it keeps a reference to "),Br=e(T,"CODE",{});var D4=p(Br);w3=c(D4,"State"),D4.forEach(n),v3=c(T," by background colours in a "),Fr=e(T,"CODE",{});var C4=p(Fr);E3=c(C4,".byColor"),C4.forEach(n),b3=c(T," property. "),jr=e(T,"CODE",{});var R4=p(jr);x3=c(R4,"fromColor"),R4.forEach(n),S3=c(T," is then a simple lookup. Because objects are stored by reference, this is the kind of naive coding that can cause a world of pain. Changing objects in one place ends up affecting objects in another. In practice these are all read only stores that do not change once the States are loaded up. But still, for extra safety I change the constructor of "),Nr=e(T,"CODE",{});var L4=p(Nr);_3=c(L4,"StatesMgr"),L4.forEach(n),T3=c(T," to return a frozen instance. And I also freeze the "),Ur=e(T,"CODE",{});var M4=p(Ur);I3=c(M4,"list"),M4.forEach(n),O3=c(T," and "),qr=e(T,"CODE",{});var H4=p(qr);A3=c(H4,"byColor"),H4.forEach(n),P3=c(T," objects."),T.forEach(n),Kh=k(s),de=e(s,"PRE",{class:!0});var kD=p(de);kD.forEach(n),Xh=k(s),ko=e(s,"P",{});var B4=p(ko);D3=c(B4,"Now the App should know what State each Step is in, at least internally. Next, I am going to surface that information to the form used for editing Steps."),B4.forEach(n),Zh=k(s),ga=e(s,"H4",{id:!0});var N_=p(ga);wa=e(N_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var F4=p(wa);Gr=e(F4,"SPAN",{class:!0}),p(Gr).forEach(n),F4.forEach(n),C3=c(N_,"Editing States"),N_.forEach(n),Qh=k(s),fe=e(s,"PRE",{class:!0});var dD=p(fe);dD.forEach(n),sm=k(s),va=e(s,"P",{});var hy=p(va);R3=c(hy,"The current State of a Step should be part of the Step\u2019s "),Vr=e(hy,"CODE",{});var j4=p(Vr);L3=c(j4,"asJson"),j4.forEach(n),M3=c(hy," export function, so no change in the menu function. The change will be in the exporter"),hy.forEach(n),nm=k(s),he=e(s,"PRE",{class:!0});var fD=p(he);fD.forEach(n),am=k(s),fo=e(s,"P",{});var N4=p(fo);H3=c(N4,"The global App instance will provide the list of states with a new function. It will call a new function from the StatesMgr."),N4.forEach(n),tm=k(s),me=e(s,"PRE",{class:!0});var hD=p(me);hD.forEach(n),em=k(s),ho=e(s,"P",{});var U4=p(ho);B3=c(U4,"For ease, on loading up the StatesMgr will also store the States by name. Fetching a list of names will then involve getting the keys of that store."),U4.forEach(n),pm=k(s),ye=e(s,"PRE",{class:!0});var mD=p(ye);mD.forEach(n),om=k(s),mo=e(s,"P",{});var q4=p(mo);F3=c(q4,"I briefly change the display of the div appended to the form so that I can see the data"),q4.forEach(n),lm=k(s),ge=e(s,"PRE",{class:!0});var yD=p(ge);yD.forEach(n),im=k(s),yo=e(s,"P",{});var G4=p(yo);j3=c(G4,"It\u2019s there"),G4.forEach(n),cm=k(s),go=e(s,"P",{});var V4=p(go);wo=e(V4,"IMG",{src:!0,alt:!0}),V4.forEach(n),rm=k(s),vo=e(s,"P",{});var W4=p(vo);N3=c(W4,"Now it\u2019s just a matter of displaying that data in the HTML form"),W4.forEach(n),um=k(s),we=e(s,"PRE",{class:!0});var gD=p(we);gD.forEach(n),km=k(s),Eo=e(s,"P",{});var Y4=p(Eo);bo=e(Y4,"IMG",{src:!0,alt:!0}),Y4.forEach(n),dm=k(s),Ea=e(s,"H4",{id:!0});var U_=p(Ea);ba=e(U_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var z4=p(ba);Wr=e(z4,"SPAN",{class:!0}),p(Wr).forEach(n),z4.forEach(n),U3=c(U_,"Updating the cell with State data"),U_.forEach(n),fm=k(s),m=e(s,"P",{});var I=p(m);q3=c(I,"The nice thing about the code is that most of it already works. The "),Yr=e(I,"CODE",{});var J4=p(Yr);G3=c(J4,"formHandler"),J4.forEach(n),V3=c(I," takes whatever data is sent and passes it on to the "),zr=e(I,"CODE",{});var $4=p(zr);W3=c($4,"Opportunity"),$4.forEach(n),Y3=c(I," instance. Which passes it on to the relevant "),Jr=e(I,"CODE",{});var K4=p(Jr);z3=c(K4,"Step"),K4.forEach(n),J3=c(I," (either a new one if adding, or an existing one if editing). "),$r=e(I,"CODE",{});var X4=p($r);$3=c(X4,".updateStepData_"),X4.forEach(n),K3=c(I," only needs a couple of line changes to split the state and rest of form data into two variables, and handling them separately. Finally "),Kr=e(I,"CODE",{});var Z4=p(Kr);X3=c(Z4,"Step"),Z4.forEach(n),Z3=c(I," passes "),Xr=e(I,"CODE",{});var Q4=p(Xr);Q3=c(Q4,"state"),Q4.forEach(n),sS=c(I," to its "),Zr=e(I,"CODE",{});var s6=p(Zr);nS=c(s6,"StructToUIBridge"),s6.forEach(n),aS=c(I," instance, and the setter does the rest."),I.forEach(n),hm=k(s),ve=e(s,"PRE",{class:!0});var wD=p(ve);wD.forEach(n),mm=k(s),xo=e(s,"P",{});var n6=p(xo);tS=c(n6,"And there it is. It\u2019s beginning to look useful. Only a couple of major things left to tackle: sorting, archiving, and search."),n6.forEach(n),ym=k(s),So=e(s,"P",{});var a6=p(So);Q=e(a6,"VIDEO",{src:!0,title:!0}),p(Q).forEach(n),a6.forEach(n),gm=k(s),xa=e(s,"H2",{id:!0});var q_=p(xa);Sa=e(q_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var t6=p(Sa);Qr=e(t6,"SPAN",{class:!0}),p(Qr).forEach(n),t6.forEach(n),eS=c(q_,"Sorting"),q_.forEach(n),wm=k(s),S=e(s,"P",{});var Y=p(S);pS=c(Y,"With "),su=e(Y,"CODE",{});var e6=p(su);oS=c(e6,"States"),e6.forEach(n),lS=c(Y," implemented, there is enough information for sorting. Sorting happens in two stages: first the "),nu=e(Y,"CODE",{});var p6=p(nu);iS=c(p6,"Opprtunity"),p6.forEach(n),cS=c(Y," sorts its "),au=e(Y,"CODE",{});var o6=p(au);rS=c(o6,"Steps"),o6.forEach(n),uS=c(Y,". Then the "),tu=e(Y,"CODE",{});var l6=p(tu);kS=c(l6,"Pool"),l6.forEach(n),dS=c(Y," sorts its "),eu=e(Y,"CODE",{});var i6=p(eu);fS=c(i6,"Opportunities"),i6.forEach(n),hS=c(Y,"."),Y.forEach(n),vm=k(s),_a=e(s,"H3",{id:!0});var G_=p(_a);Ta=e(G_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var c6=p(Ta);pu=e(c6,"SPAN",{class:!0}),p(pu).forEach(n),c6.forEach(n),mS=c(G_,"Sorting Steps"),G_.forEach(n),Em=k(s),_o=e(s,"P",{});var r6=p(_o);yS=c(r6,"One of the requirements of this app is to show me what\u2019s next due at a glance. After manual experimentation, I discovered a way that works for me. Starting from column C (A and B are taken up by the Opportunity) and moving towards the right:"),r6.forEach(n),bm=k(s),V=e(s,"UL",{});var Ua=p(V);ou=e(Ua,"LI",{});var u6=p(ou);lu=e(u6,"P",{});var k6=p(lu);gS=c(k6,`column C shows the \u2018current\u2019 step. That is one of, in order
\u2013 the stepthe due step with the earliest`),k6.forEach(n),u6.forEach(n),wS=k(Ua),iu=e(Ua,"LI",{});var d6=p(iu);xs=e(d6,"P",{});var Go=p(xs);vS=c(Go,"If there "),cu=e(Go,"CODE",{});var f6=p(cu);ES=c(f6,"Steps"),f6.forEach(n),bS=c(Go," in the "),ru=e(Go,"CODE",{});var h6=p(ru);xS=c(h6,"Attention"),h6.forEach(n),SS=c(Go," group, they go first. Sarting from the one with the earliest data in column C, and then in ascending date order"),Go.forEach(n),d6.forEach(n),_S=k(Ua),uu=e(Ua,"LI",{});var m6=p(uu);Ee=e(m6,"P",{});var my=p(Ee);TS=c(my,"Exactly the same for Steps in in the "),ku=e(my,"CODE",{});var y6=p(ku);IS=c(y6,"Due"),y6.forEach(n),OS=c(my," group"),my.forEach(n),m6.forEach(n),AS=k(Ua),du=e(Ua,"LI",{});var g6=p(du);be=e(g6,"P",{});var yy=p(be);PS=c(yy,"Last come the Steps in the "),fu=e(yy,"CODE",{});var w6=p(fu);DS=c(w6,"Complete"),w6.forEach(n),CS=c(yy," group. But their order is reversed. The leftmost column is the most recent and the ones to its right are in descending date order."),yy.forEach(n),g6.forEach(n),Ua.forEach(n),xm=k(s),To=e(s,"P",{});var v6=p(To);RS=c(v6,"This may sounds confusing and prone to error, but in practice it has been working very well. Having all the next steps in column makes them easy to scan. Having half the row in ascending order and half in descending is not a big issue in practice. That\u2019s because the colour coding keeps them visually separate. One learns to navigate them very quickly."),v6.forEach(n),Sm=k(s),Ia=e(s,"P",{});var gy=p(Ia);LS=c(gy,"The next question is "),hu=e(gy,"EM",{});var E6=p(hu);MS=c(E6,"when"),E6.forEach(n),HS=c(gy," to sort. I am not doing any automatic processing; i.e. \u2018Due\u2019 steps are not set to \u2018Overdue\u2019 if x days after the due date have passed. Even if it were useful (and I\u2019m not sure it\u2019d be), Apps Script triggers are too unreliable to bother. That leaves three occurrences: when editing and when creating a Step. Plus a manual entry from the menu (it makes development easier)."),gy.forEach(n),_m=k(s),Io=e(s,"P",{});var b6=p(Io);BS=c(b6,"First the menu, and related function"),b6.forEach(n),Tm=k(s),xe=e(s,"PRE",{class:!0});var vD=p(xe);vD.forEach(n),Im=k(s),Oa=e(s,"P",{});var wy=p(Oa);FS=c(wy,"Then the changes in "),mu=e(wy,"CODE",{});var x6=p(mu);jS=c(x6,"Opportunity"),x6.forEach(n),NS=c(wy,", where most of the action is"),wy.forEach(n),Om=k(s),Se=e(s,"PRE",{class:!0});var ED=p(Se);ED.forEach(n),Am=k(s),Aa=e(s,"P",{});var vy=p(Aa);US=c(vy,"Finally, I delegate sorting of groups to the "),yu=e(vy,"CODE",{});var S6=p(yu);qS=c(S6,"StatesMgr"),S6.forEach(n),GS=c(vy,", since that\u2019s its responsibility"),vy.forEach(n),Pm=k(s),_e=e(s,"PRE",{class:!0});var bD=p(_e);bD.forEach(n),Dm=k(s),Pa=e(s,"H3",{id:!0});var V_=p(Pa);Da=e(V_,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _6=p(Da);gu=e(_6,"SPAN",{class:!0}),p(gu).forEach(n),_6.forEach(n),VS=c(V_,"Conclusion and potential next steps"),V_.forEach(n),Cm=k(s),Oo=e(s,"P",{});var T6=p(Oo);WS=c(T6,"I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),T6.forEach(n),Rm=k(s),Ao=e(s,"P",{});var I6=p(Ao);YS=c(I6,"I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),I6.forEach(n),Lm=k(s),hs=e(s,"UL",{});var Vo=p(hs);wu=e(Vo,"LI",{});var O6=p(wu);zS=c(O6,"integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),O6.forEach(n),JS=k(Vo),vu=e(Vo,"LI",{});var A6=p(vu);$S=c(A6,"integrate with calendar to generate appointments and set reminders"),A6.forEach(n),KS=k(Vo),Eu=e(Vo,"LI",{});var P6=p(Eu);XS=c(P6,"all of the above, to automatically generate emails with a list of available slots from my calendar."),P6.forEach(n),Vo.forEach(n),Mm=k(s),Po=e(s,"P",{});var D6=p(Po);ZS=c(D6,"This would actually be quite useful, and who knows, I may well tackle it one of these days."),D6.forEach(n),this.h()},h(){r(Wo,"class","icon icon-link"),r(Ss,"aria-hidden","true"),r(Ss,"tabindex","-1"),r(Ss,"href","#need-a-crm-why-not-just-use-"),r(as,"id","need-a-crm-why-not-just-use-"),r(qa,"href","https://capsulecrm.com/"),r(qa,"rel","nofollow"),r(Jo,"class","icon icon-link"),r(Ts,"aria-hidden","true"),r(Ts,"tabindex","-1"),r(Ts,"href","#google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),r(_s,"id","google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),r($o,"class","icon icon-link"),r(Os,"aria-hidden","true"),r(Os,"tabindex","-1"),r(Os,"href","#tips-on-using-google-apps-script-for-prototyping"),r(Is,"id","tips-on-using-google-apps-script-for-prototyping"),r(Ko,"class","icon icon-link"),r(Ps,"aria-hidden","true"),r(Ps,"tabindex","-1"),r(Ps,"href","#1-explicit-interactions-vs-trying-to-build-a-spa"),r(As,"id","1-explicit-interactions-vs-trying-to-build-a-spa"),r(Pe,"title","Single Page Application"),r(pl,"class","icon icon-link"),r(Ls,"aria-hidden","true"),r(Ls,"tabindex","-1"),r(Ls,"href","#2-minimal-work"),r(Rs,"id","2-minimal-work"),r(ol,"class","icon icon-link"),r(Hs,"aria-hidden","true"),r(Hs,"tabindex","-1"),r(Hs,"href","#2-resist-the-temptation-to-start-coding-straight-away"),r(Ms,"id","2-resist-the-temptation-to-start-coding-straight-away"),r(Va,"href","https://www.natechplastics.com/four-stages-of-lean-product-development/"),r(Va,"rel","nofollow"),r(il,"class","icon icon-link"),r(Fs,"aria-hidden","true"),r(Fs,"tabindex","-1"),r(Fs,"href","#3-model-your-problem-space-first"),r(Bs,"id","3-model-your-problem-space-first"),r(Ce,"title","Object Oriented Programming"),r(cl,"class","icon icon-link"),r(Us,"aria-hidden","true"),r(Us,"tabindex","-1"),r(Us,"href","#4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),r(Ns,"id","4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),r(dl,"class","icon icon-link"),r(Vs,"aria-hidden","true"),r(Vs,"tabindex","-1"),r(Vs,"href","#5-testing-is-not-a-solved-problem"),r(Gs,"id","5-testing-is-not-a-solved-problem"),r(fl,"class","icon icon-link"),r(Ys,"aria-hidden","true"),r(Ys,"tabindex","-1"),r(Ys,"href","#6-always-save-your-co-ordinates-rows-cells-in-constants"),r(Ws,"id","6-always-save-your-co-ordinates-rows-cells-in-constants"),r(hl,"class","icon icon-link"),r(Js,"aria-hidden","true"),r(Js,"tabindex","-1"),r(Js,"href","#7-use-sidebars-to-enter-data"),r(zs,"id","7-use-sidebars-to-enter-data"),r(Wa,"href","https://developers.google.com/apps-script/guides/dialogs"),r(Wa,"rel","nofollow"),r(ml,"class","icon icon-link"),r(Ks,"aria-hidden","true"),r(Ks,"tabindex","-1"),r(Ks,"href","#8-beware-of-data-conversions"),r($s,"id","8-beware-of-data-conversions"),r(yl,"class","icon icon-link"),r(Zs,"aria-hidden","true"),r(Zs,"tabindex","-1"),r(Zs,"href","#script-structure"),r(Xs,"id","script-structure"),E(je.src,Y_=TD)||r(je,"src",Y_),r(je,"alt","My standard Google Apps Script file structure"),E(Ue.src,z_="/posts/blog/trello-like-crm-tool-with-google-apps-script/debug.png")||r(Ue,"src",z_),r(Ue,"alt","Running functions with debugger"),r(b,"class","code-breakdown"),r(Cl,"class","icon icon-link"),r(nn,"aria-hidden","true"),r(nn,"tabindex","-1"),r(nn,"href","#designing-a-crm-app"),r(sn,"id","designing-a-crm-app"),r(Rl,"class","icon icon-link"),r(tn,"aria-hidden","true"),r(tn,"tabindex","-1"),r(tn,"href","#step-1-defining-the-problem"),r(an,"id","step-1-defining-the-problem"),r(Yl,"class","icon icon-link"),r(on,"aria-hidden","true"),r(on,"tabindex","-1"),r(on,"href","#state"),r(pn,"id","state"),E(Ye.src,J_=ID)||r(Ye,"src",J_),r(Ye,"alt","A list of States"),r(zl,"class","icon icon-link"),r(cn,"aria-hidden","true"),r(cn,"tabindex","-1"),r(cn,"href","#step"),r(ln,"id","step"),E($e.src,$_=OD)||r($e,"src",$_),r($e,"alt","A Step"),r(Xl,"class","icon icon-link"),r(un,"aria-hidden","true"),r(un,"tabindex","-1"),r(un,"href","#opportunity"),r(rn,"id","opportunity"),E(Qe.src,K_=AD)||r(Qe,"src",K_),r(Qe,"alt","An Opportunity"),r(ai,"class","icon icon-link"),r(dn,"aria-hidden","true"),r(dn,"tabindex","-1"),r(dn,"href","#pools"),r(kn,"id","pools"),E(ep.src,X_=PD)||r(ep,"src",X_),r(ep,"alt","A pool"),r(li,"class","icon icon-link"),r(hn,"aria-hidden","true"),r(hn,"tabindex","-1"),r(hn,"href","#app"),r(fn,"id","app"),r(yi,"class","icon icon-link"),r(yn,"aria-hidden","true"),r(yn,"tabindex","-1"),r(yn,"href","#step-2-iterating-without-programming-to-reach-an-initial-mvp"),r(mn,"id","step-2-iterating-without-programming-to-reach-an-initial-mvp"),E(up.src,Z_=DD)||r(up,"src",Z_),r(up,"alt","Initial sheet"),r(gi,"class","icon icon-link"),r(wn,"aria-hidden","true"),r(wn,"tabindex","-1"),r(wn,"href","#step-3-setup-and-menu"),r(gn,"id","step-3-setup-and-menu"),r(Ja,"class","language-js"),r($a,"class","language-js"),E(fp.src,Q_=CD)||r(fp,"src",Q_),r(fp,"alt","The initial menu, with placeholders"),r(Si,"class","icon icon-link"),r(En,"aria-hidden","true"),r(En,"tabindex","-1"),r(En,"href","#step-4-creating-opportunity"),r(vn,"id","step-4-creating-opportunity"),r(Ka,"class","language-diff"),r(Xa,"class","language-js"),r(Za,"class","language-js"),r(Qa,"class","language-js"),r(st,"class","language-diff"),r(nt,"class","language-diff"),r(at,"class","language-diff"),r(et,"href","https://en.wikipedia.org/wiki/Fail-fast"),r(et,"rel","nofollow"),r(pt,"class","language-js"),r(Ai,"class","icon icon-link"),r(_n,"aria-hidden","true"),r(_n,"tabindex","-1"),r(_n,"href","#5-using-an-html-form-in-a-sidebar-to-create-an-opportunity"),r(Sn,"id","5-using-an-html-form-in-a-sidebar-to-create-an-opportunity"),E(J.src,sT=jD)||r(J,"src",sT),J.autoplay=!0,J.muted=!0,J.playsInline=!0,J.loop=!0,r(J,"title","Adding an Opportunity with a form"),E(xp.src,nT=RD)||r(xp,"src",nT),r(xp,"alt","An HTML sidebar in a Google Sheet"),r(ot,"href","https://www.the-art-of-web.com/html/html5-form-validation/"),r(ot,"rel","nofollow"),r(lt,"href","https://developers.google.com/apps-script/guides/html/best-practices#separate_html_css_and_javascript"),r(lt,"rel","nofollow"),r(it,"class","language-html"),r(ct,"class","language-diff"),r(rt,"class","language-diff"),r(ut,"class","language-js"),r(kt,"class","language-diff"),r(dt,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"),r(dt,"rel","nofollow"),r(ft,"class","language-js"),r(ht,"class","language-js"),r(mt,"class","language-diff"),r(yt,"class","language-diff"),r(gt,"class","language-diff"),r(wt,"class","language-diff"),r(Et,"class","language-js"),r($i,"class","icon icon-link"),r(Dn,"aria-hidden","true"),r(Dn,"tabindex","-1"),r(Dn,"href","#loading-the-state-of-the-app-from-the-spreadsheet"),r(Pn,"id","loading-the-state-of-the-app-from-the-spreadsheet"),r(bt,"class","language-js"),r(xt,"class","language-diff"),r(St,"class","language-js"),r(_t,"class","language-js"),E($.src,aT=ND)||r($,"src",aT),$.autoplay=!0,$.muted=!0,$.playsInline=!0,$.loop=!0,r($,"title","Demonstrating that now when I add a field, the previous ones stay there"),r(nc,"class","icon icon-link"),r(Mn,"aria-hidden","true"),r(Mn,"tabindex","-1"),r(Mn,"href","#editing-an-opportunity"),r(Ln,"id","editing-an-opportunity"),r(pc,"class","icon icon-link"),r(Bn,"aria-hidden","true"),r(Bn,"tabindex","-1"),r(Bn,"href","#injecting-data-into-an-htmlhtmlservice-form-in-a-sidebar-with-apps-script"),r(Hn,"id","injecting-data-into-an-htmlhtmlservice-form-in-a-sidebar-with-apps-script"),r(Tt,"class","language-diff"),r(It,"class","language-js"),r(Ot,"class","language-diff"),E(Lp.src,tT=LD)||r(Lp,"src",tT),r(Lp,"alt","Select a row to edit an Opportunity"),r(At,"class","language-diff"),r(Pt,"class","language-js"),r(Dt,"class","language-js"),r(Ct,"class","language-js"),r(Rt,"class","language-diff"),r(Lt,"class","language-diff"),r(Mt,"class","language-diff"),r(Ht,"class","language-js"),r(uc,"class","icon icon-link"),r(qn,"aria-hidden","true"),r(qn,"tabindex","-1"),r(qn,"href","#deleting-an-opportunity"),r(Un,"id","deleting-an-opportunity"),r(Bt,"class","language-js"),r(jt,"class","language-js"),r(hc,"class","icon icon-link"),r(Vn,"aria-hidden","true"),r(Vn,"tabindex","-1"),r(Vn,"href","#adding-steps"),r(Gn,"id","adding-steps"),r(qp,"class","language-diff"),r(Gp,"class","language-diff"),r(qt,"class","language-diff"),r(Ec,"class","icon icon-link"),r(Jn,"aria-hidden","true"),r(Jn,"tabindex","-1"),r(Jn,"href","#some-utility-functionality"),r(zn,"id","some-utility-functionality"),r(Gt,"class","language-diff"),r(Vt,"class","language-js"),r(Wt,"class","language-html"),r(Yt,"class","language-diff"),r($p,"class","language-diff"),r(Kp,"class","language-diff"),r($t,"class","language-js"),r(Xt,"class","language-js"),r(Zt,"class","language-js"),r(Qt,"class","language-js"),E(Z.src,eT=UD)||r(Z,"src",eT),Z.autoplay=!0,Z.muted=!0,Z.playsInline=!0,Z.loop=!0,r(Z,"title","Editing comments for both Opportunity and Step"),r(Hc,"class","icon icon-link"),r(Zn,"aria-hidden","true"),r(Zn,"tabindex","-1"),r(Zn,"href","#states-and-ordering"),r(Xn,"id","states-and-ordering"),r(Bc,"class","icon icon-link"),r(sa,"aria-hidden","true"),r(sa,"tabindex","-1"),r(sa,"href","#defining-a-state"),r(Qn,"id","defining-a-state"),r(jc,"class","icon icon-link"),r(ta,"aria-hidden","true"),r(ta,"tabindex","-1"),r(ta,"href","#creating-a-statesmgr-and-loading-states-lazily"),r(aa,"id","creating-a-statesmgr-and-loading-states-lazily"),E(eo.src,pT=MD)||r(eo,"src",pT),r(eo,"alt","An example of States definitions in the top row"),r(se,"class","language-js"),r(ne,"class","language-js"),E(oo.src,oT=HD)||r(oo,"src",oT),r(oo,"alt","The Google Sheets colour picker"),r(Gc,"class","icon icon-link"),r(ia,"aria-hidden","true"),r(ia,"tabindex","-1"),r(ia,"href","#getting-the-background-and-font-colour-of-a-google-sheet-cell-with-apps-script"),r(la,"id","getting-the-background-and-font-colour-of-a-google-sheet-cell-with-apps-script"),r(ae,"class","language-js"),r(te,"class","language-diff"),r(Wc,"class","icon icon-link"),r(ua,"aria-hidden","true"),r(ua,"tabindex","-1"),r(ua,"href","#creating-a-global-app-object-in-apps-scripts"),r(ra,"id","creating-a-global-app-object-in-apps-scripts"),r(ee,"class","language-js"),r(pe,"class","language-js"),r(oe,"class","language-js"),r(le,"class","language-diff"),r(tr,"class","icon icon-link"),r(fa,"aria-hidden","true"),r(fa,"tabindex","-1"),r(fa,"href","#adding-states-to-steps-and-opportunities"),r(da,"id","adding-states-to-steps-and-opportunities"),r(kr,"class","icon icon-link"),r(ma,"aria-hidden","true"),r(ma,"tabindex","-1"),r(ma,"href","#add-state-to-structtouibridge"),r(ha,"id","add-state-to-structtouibridge"),r(ie,"class","language-diff"),r(ce,"class","language-js"),r(re,"class","language-diff"),r(ue,"class","language-diff"),r(ke,"class","language-diff"),r(de,"class","language-diff"),r(Gr,"class","icon icon-link"),r(wa,"aria-hidden","true"),r(wa,"tabindex","-1"),r(wa,"href","#editing-states"),r(ga,"id","editing-states"),r(fe,"class","language-diff"),r(he,"class","language-diff"),r(me,"class","language-js"),r(ye,"class","language-diff"),r(ge,"class","language-diff"),E(wo.src,lT=BD)||r(wo,"src",lT),r(wo,"alt","All states"),r(we,"class","language-diff"),E(bo.src,iT=FD)||r(bo,"src",iT),r(bo,"alt","Pulldown menu for States"),r(Wr,"class","icon icon-link"),r(ba,"aria-hidden","true"),r(ba,"tabindex","-1"),r(ba,"href","#updating-the-cell-with-state-data"),r(Ea,"id","updating-the-cell-with-state-data"),r(ve,"class","language-diff"),E(Q.src,cT=qD)||r(Q,"src",cT),Q.autoplay=!0,Q.muted=!0,Q.playsInline=!0,Q.loop=!0,r(Q,"title","Editing Steps with States"),r(Qr,"class","icon icon-link"),r(Sa,"aria-hidden","true"),r(Sa,"tabindex","-1"),r(Sa,"href","#sorting"),r(xa,"id","sorting"),r(pu,"class","icon icon-link"),r(Ta,"aria-hidden","true"),r(Ta,"tabindex","-1"),r(Ta,"href","#sorting-steps"),r(_a,"id","sorting-steps"),r(xe,"class","language-js"),r(Se,"class","language-js"),r(_e,"class","language-diff"),r(gu,"class","icon icon-link"),r(Da,"aria-hidden","true"),r(Da,"tabindex","-1"),r(Da,"href","#conclusion-and-potential-next-steps"),r(Pa,"id","conclusion-and-potential-next-steps")},m(s,o){l(s,as,o),a(as,Ss),a(Ss,Wo),a(as,Ey),l(s,Tu,o),l(s,vs,o),a(vs,Yo),a(Yo,by),a(vs,xy),a(vs,qa),a(qa,Sy),a(vs,_y),l(s,Iu,o),l(s,Ga,o),a(Ga,zo),a(zo,Ty),a(Ga,Iy),l(s,Ou,o),l(s,_s,o),a(_s,Ts),a(Ts,Jo),a(_s,Oy),l(s,Au,o),l(s,Oe,o),a(Oe,Ay),l(s,Pu,o),l(s,Is,o),a(Is,Os),a(Os,$o),a(Is,Py),l(s,Du,o),l(s,Ae,o),a(Ae,Dy),l(s,Cu,o),l(s,As,o),a(As,Ps),a(Ps,Ko),a(As,Cy),l(s,Ru,o),l(s,Ds,o),a(Ds,Ry),a(Ds,Pe),a(Pe,Ly),a(Ds,My),l(s,Lu,o),l(s,Cs,o),a(Cs,Hy),a(Cs,Xo),a(Xo,By),a(Cs,Fy),l(s,Mu,o),l(s,g,o),a(g,Zo),a(Zo,jy),a(g,Ny),a(g,Qo),a(Qo,Uy),a(g,qy),a(g,sl),a(sl,Gy),a(g,Vy),a(g,nl),a(nl,Wy),a(g,Yy),a(g,al),a(al,zy),a(g,Jy),a(g,tl),a(tl,$y),a(g,Ky),a(g,el),a(el,Xy),l(s,Hu,o),l(s,Rs,o),a(Rs,Ls),a(Ls,pl),a(Rs,Zy),l(s,Bu,o),l(s,Ms,o),a(Ms,Hs),a(Hs,ol),a(Ms,Qy),l(s,Fu,o),l(s,ts,o),a(ts,sg),a(ts,ll),a(ll,ng),a(ts,ag),a(ts,Va),a(Va,tg),a(ts,eg),l(s,ju,o),l(s,Bs,o),a(Bs,Fs),a(Fs,il),a(Bs,pg),l(s,Nu,o),l(s,De,o),a(De,og),l(s,Uu,o),l(s,js,o),a(js,lg),a(js,Ce),a(Ce,ig),a(js,cg),l(s,qu,o),l(s,Re,o),a(Re,rg),l(s,Gu,o),l(s,Ns,o),a(Ns,Us),a(Us,cl),a(Ns,ug),l(s,Vu,o),l(s,es,o),a(es,kg),a(es,rl),a(rl,dg),a(es,fg),a(es,ul),a(ul,hg),a(es,mg),l(s,Wu,o),l(s,qs,o),a(qs,yg),a(qs,kl),a(kl,gg),a(qs,wg),l(s,Yu,o),l(s,Gs,o),a(Gs,Vs),a(Vs,dl),a(Gs,vg),l(s,zu,o),l(s,Le,o),a(Le,Eg),l(s,Ju,o),l(s,Ws,o),a(Ws,Ys),a(Ys,fl),a(Ws,bg),l(s,$u,o),l(s,Me,o),a(Me,xg),l(s,Ku,o),l(s,zs,o),a(zs,Js),a(Js,hl),a(zs,Sg),l(s,Xu,o),l(s,He,o),a(He,Wa),a(Wa,_g),l(s,Zu,o),l(s,$s,o),a($s,Ks),a(Ks,ml),a($s,Tg),l(s,Qu,o),l(s,Be,o),a(Be,Ig),l(s,sk,o),l(s,Xs,o),a(Xs,Zs),a(Zs,yl),a(Xs,Og),l(s,nk,o),l(s,Fe,o),a(Fe,je),l(s,ak,o),l(s,Ne,o),a(Ne,Ag),l(s,tk,o),l(s,b,o),a(b,gl),a(gl,Pg),a(b,A),a(A,Dg),a(A,wl),a(wl,Cg),a(A,Rg),a(A,vl),a(vl,Lg),a(A,Mg),a(A,El),a(El,Hg),a(A,Bg),a(A,bl),a(bl,Fg),a(A,jg),a(A,Ue),a(b,xl),a(xl,Ng),a(b,Qs),a(Qs,Ug),a(Qs,Sl),a(Sl,qg),a(Qs,Gg),a(Qs,_l),a(_l,Vg),a(b,Tl),a(Tl,Wg),a(b,Ya),a(Ya,Yg),a(Ya,Il),a(Il,zg),a(Ya,Jg),a(b,Ol),a(Ol,$g),a(b,Al),a(Al,Kg),a(b,Pl),a(Pl,Xg),a(b,Dl),a(Dl,Zg),l(s,ek,o),l(s,sn,o),a(sn,nn),a(nn,Cl),a(sn,Qg),l(s,pk,o),l(s,an,o),a(an,tn),a(tn,Rl),a(an,sw),l(s,ok,o),l(s,qe,o),a(qe,nw),l(s,lk,o),l(s,en,o),a(en,M),a(M,aw),a(M,Ll),a(Ll,tw),a(M,ew),a(M,Ml),a(Ml,pw),a(M,ow),a(M,Hl),a(Hl,lw),a(M,iw),a(M,Bl),a(Bl,cw),a(M,rw),a(en,uw),a(en,Fl),a(Fl,kw),l(s,ik,o),l(s,f,o),a(f,dw),a(f,jl),a(jl,fw),a(f,hw),a(f,Nl),a(Nl,mw),a(f,yw),a(f,Ul),a(Ul,gw),a(f,ww),a(f,ql),a(ql,vw),a(f,Ew),a(f,Gl),a(Gl,bw),a(f,xw),a(f,Vl),a(Vl,Sw),a(f,_w),a(f,Wl),a(Wl,Tw),a(f,Iw),l(s,ck,o),l(s,Ge,o),a(Ge,Ow),l(s,rk,o),l(s,Ve,o),a(Ve,Aw),l(s,uk,o),l(s,pn,o),a(pn,on),a(on,Yl),a(pn,Pw),l(s,kk,o),l(s,We,o),a(We,Ye),l(s,dk,o),l(s,ze,o),a(ze,Dw),l(s,fk,o),l(s,ln,o),a(ln,cn),a(cn,zl),a(ln,Cw),l(s,hk,o),l(s,Je,o),a(Je,$e),l(s,mk,o),l(s,Ke,o),a(Ke,Rw),l(s,yk,o),l(s,Xe,o),a(Xe,Lw),l(s,gk,o),l(s,ps,o),a(ps,Jl),a(Jl,Mw),a(ps,Hw),a(ps,$l),a($l,Bw),a(ps,Fw),a(ps,Kl),a(Kl,jw),l(s,wk,o),l(s,rn,o),a(rn,un),a(un,Xl),a(rn,Nw),l(s,vk,o),l(s,Ze,o),a(Ze,Qe),l(s,Ek,o),l(s,sp,o),a(sp,Uw),l(s,bk,o),l(s,np,o),a(np,qw),l(s,xk,o),l(s,ap,o),a(ap,Gw),l(s,Sk,o),l(s,H,o),a(H,Zl),a(Zl,Vw),a(H,Ww),a(H,Ql),a(Ql,Yw),a(H,zw),a(H,si),a(si,Jw),a(H,$w),a(H,ni),a(ni,Kw),l(s,_k,o),l(s,kn,o),a(kn,dn),a(dn,ai),a(kn,Xw),l(s,Tk,o),l(s,tp,o),a(tp,ep),l(s,Ik,o),l(s,pp,o),a(pp,Zw),l(s,Ok,o),l(s,op,o),a(op,Qw),l(s,Ak,o),l(s,B,o),a(B,ti),a(ti,s1),a(B,n1),a(B,ei),a(ei,a1),a(B,t1),a(B,pi),a(pi,e1),a(B,p1),a(B,oi),a(oi,o1),l(s,Pk,o),l(s,fn,o),a(fn,hn),a(hn,li),a(fn,l1),l(s,Dk,o),l(s,lp,o),a(lp,i1),l(s,Ck,o),l(s,P,o),a(P,za),a(za,c1),a(za,ii),a(ii,r1),a(za,u1),a(P,k1),a(P,ci),a(ci,d1),a(P,f1),a(P,ri),a(ri,h1),a(P,m1),a(P,ui),a(ui,y1),a(P,g1),a(P,ki),a(ki,w1),l(s,Rk,o),l(s,ip,o),a(ip,v1),l(s,Lk,o),l(s,F,o),a(F,di),a(di,E1),a(F,b1),a(F,fi),a(fi,x1),a(F,S1),a(F,hi),a(hi,_1),a(F,T1),a(F,mi),a(mi,I1),l(s,Mk,o),l(s,mn,o),a(mn,yn),a(yn,yi),a(mn,O1),l(s,Hk,o),l(s,cp,o),a(cp,A1),l(s,Bk,o),l(s,rp,o),a(rp,up),l(s,Fk,o),l(s,gn,o),a(gn,wn),a(wn,gi),a(gn,P1),l(s,jk,o),l(s,kp,o),a(kp,z),a(z,D1),a(z,wi),a(wi,C1),a(z,R1),a(z,vi),a(vi,L1),a(z,M1),a(z,Ei),a(Ei,H1),a(z,B1),l(s,Nk,o),l(s,Ja,o),Ja.innerHTML=R6,l(s,Uk,o),l(s,Es,o),a(Es,bi),a(bi,F1),a(Es,j1),a(Es,xi),a(xi,N1),a(Es,U1),l(s,qk,o),l(s,$a,o),$a.innerHTML=L6,l(s,Gk,o),l(s,dp,o),a(dp,fp),l(s,Vk,o),l(s,vn,o),a(vn,En),a(En,Si),a(vn,q1),l(s,Wk,o),l(s,hp,o),a(hp,G1),l(s,Yk,o),l(s,Ka,o),Ka.innerHTML=M6,l(s,zk,o),l(s,mp,o),a(mp,V1),l(s,Jk,o),l(s,yp,o),a(yp,W1),l(s,$k,o),l(s,Xa,o),Xa.innerHTML=H6,l(s,Kk,o),l(s,gp,o),a(gp,Y1),l(s,Xk,o),l(s,Za,o),Za.innerHTML=B6,l(s,Zk,o),l(s,wp,o),a(wp,z1),l(s,Qk,o),l(s,Qa,o),Qa.innerHTML=F6,l(s,sd,o),l(s,os,o),a(os,J1),a(os,_i),a(_i,$1),a(os,K1),a(os,Ti),a(Ti,X1),a(os,Z1),l(s,nd,o),l(s,vp,o),a(vp,Q1),l(s,ad,o),l(s,st,o),st.innerHTML=j6,l(s,td,o),l(s,bn,o),a(bn,sv),a(bn,Ii),a(Ii,nv),a(bn,av),l(s,ed,o),l(s,nt,o),nt.innerHTML=N6,l(s,pd,o),l(s,xn,o),a(xn,tv),a(xn,Oi),a(Oi,ev),a(xn,pv),l(s,od,o),l(s,at,o),at.innerHTML=U6,l(s,ld,o),l(s,tt,o),a(tt,ov),a(tt,et),a(et,lv),l(s,id,o),l(s,pt,o),pt.innerHTML=q6,l(s,cd,o),l(s,Sn,o),a(Sn,_n),a(_n,Ai),a(Sn,iv),l(s,rd,o),l(s,Ep,o),a(Ep,J),l(s,ud,o),l(s,Tn,o),a(Tn,cv),a(Tn,Pi),a(Pi,rv),a(Tn,uv),l(s,kd,o),l(s,bp,o),a(bp,xp),l(s,dd,o),l(s,ls,o),a(ls,kv),a(ls,ot),a(ot,dv),a(ls,fv),a(ls,lt),a(lt,hv),a(ls,mv),l(s,fd,o),l(s,it,o),it.innerHTML=G6,l(s,hd,o),l(s,j,o),a(j,yv),a(j,Di),a(Di,gv),a(j,wv),a(j,Ci),a(Ci,vv),a(j,Ev),a(j,Ri),a(Ri,bv),a(j,xv),l(s,md,o),l(s,bs,o),a(bs,Li),a(Li,Sv),a(bs,_v),a(bs,Mi),a(Mi,Tv),a(bs,Iv),l(s,yd,o),l(s,ct,o),ct.innerHTML=V6,l(s,gd,o),l(s,Sp,o),a(Sp,Ov),l(s,wd,o),l(s,rt,o),rt.innerHTML=W6,l(s,vd,o),l(s,is,o),a(is,Av),a(is,Hi),a(Hi,Pv),a(is,Dv),a(is,Bi),a(Bi,Cv),a(is,Rv),l(s,Ed,o),l(s,ut,o),ut.innerHTML=Y6,l(s,bd,o),l(s,kt,o),kt.innerHTML=z6,l(s,xd,o),l(s,In,o),a(In,Lv),a(In,Fi),a(Fi,Mv),a(In,Hv),l(s,Sd,o),l(s,On,o),a(On,Bv),a(On,dt),a(dt,Fv),a(On,jv),l(s,_d,o),l(s,_p,o),a(_p,Nv),l(s,Td,o),l(s,ft,o),ft.innerHTML=J6,l(s,Id,o),l(s,cs,o),a(cs,Uv),a(cs,ji),a(ji,qv),a(cs,Gv),a(cs,Ni),a(Ni,Vv),a(cs,Wv),l(s,Od,o),l(s,ht,o),ht.innerHTML=$6,l(s,Ad,o),l(s,An,o),a(An,Yv),a(An,Ui),a(Ui,zv),a(An,Jv),l(s,Pd,o),l(s,mt,o),mt.innerHTML=K6,l(s,Dd,o),l(s,N,o),a(N,$v),a(N,qi),a(qi,Kv),a(N,Xv),a(N,Gi),a(Gi,Zv),a(N,Qv),a(N,Vi),a(Vi,s2),a(N,n2),l(s,Cd,o),l(s,yt,o),yt.innerHTML=X6,l(s,Rd,o),l(s,U,o),a(U,a2),a(U,Wi),a(Wi,t2),a(U,e2),a(U,Yi),a(Yi,p2),a(U,o2),a(U,zi),a(zi,l2),a(U,i2),l(s,Ld,o),l(s,gt,o),gt.innerHTML=Z6,l(s,Md,o),l(s,Tp,o),a(Tp,c2),l(s,Hd,o),l(s,wt,o),wt.innerHTML=Q6,l(s,Bd,o),l(s,vt,o),a(vt,Ji),a(Ji,r2),a(vt,u2),l(s,Fd,o),l(s,Et,o),Et.innerHTML=sP,l(s,jd,o),l(s,Pn,o),a(Pn,Dn),a(Dn,$i),a(Pn,k2),l(s,Nd,o),l(s,Cn,o),a(Cn,d2),a(Cn,Ki),a(Ki,f2),a(Cn,h2),l(s,Ud,o),l(s,bt,o),bt.innerHTML=nP,l(s,qd,o),l(s,Ip,o),a(Ip,m2),l(s,Gd,o),l(s,Op,o),a(Op,y2),l(s,Vd,o),l(s,xt,o),xt.innerHTML=aP,l(s,Wd,o),l(s,q,o),a(q,g2),a(q,Xi),a(Xi,w2),a(q,v2),a(q,Zi),a(Zi,E2),a(q,b2),a(q,Qi),a(Qi,x2),a(q,S2),l(s,Yd,o),l(s,St,o),St.innerHTML=tP,l(s,zd,o),l(s,Rn,o),a(Rn,_2),a(Rn,sc),a(sc,T2),a(Rn,I2),l(s,Jd,o),l(s,_t,o),_t.innerHTML=eP,l(s,$d,o),l(s,Ap,o),a(Ap,O2),l(s,Kd,o),l(s,Pp,o),a(Pp,$),l(s,Xd,o),l(s,Ln,o),a(Ln,Mn),a(Mn,nc),a(Ln,A2),l(s,Zd,o),l(s,G,o),a(G,P2),a(G,ac),a(ac,D2),a(G,C2),a(G,tc),a(tc,R2),a(G,L2),a(G,ec),a(ec,M2),a(G,H2),l(s,Qd,o),l(s,Hn,o),a(Hn,Bn),a(Bn,pc),a(Hn,B2),l(s,sf,o),l(s,Fn,o),a(Fn,F2),a(Fn,oc),a(oc,j2),a(Fn,N2),l(s,nf,o),l(s,jn,o),a(jn,U2),a(jn,lc),a(lc,q2),a(jn,G2),l(s,af,o),l(s,Tt,o),Tt.innerHTML=pP,l(s,tf,o),l(s,rs,o),a(rs,V2),a(rs,ic),a(ic,W2),a(rs,Y2),a(rs,cc),a(cc,z2),a(rs,J2),l(s,ef,o),l(s,It,o),It.innerHTML=oP,l(s,pf,o),l(s,Dp,o),a(Dp,$2),l(s,of,o),l(s,Ot,o),Ot.innerHTML=lP,l(s,lf,o),l(s,Cp,o),a(Cp,K2),l(s,cf,o),l(s,Rp,o),a(Rp,Lp),l(s,rf,o),l(s,Mp,o),a(Mp,X2),l(s,uf,o),l(s,At,o),At.innerHTML=iP,l(s,kf,o),l(s,Hp,o),a(Hp,Z2),l(s,df,o),l(s,Pt,o),Pt.innerHTML=cP,l(s,ff,o),l(s,Nn,o),a(Nn,Q2),a(Nn,rc),a(rc,sE),a(Nn,nE),l(s,hf,o),l(s,Dt,o),Dt.innerHTML=rP,l(s,mf,o),l(s,Bp,o),a(Bp,aE),l(s,yf,o),l(s,Ct,o),Ct.innerHTML=uP,l(s,gf,o),l(s,Rt,o),Rt.innerHTML=kP,l(s,wf,o),l(s,Fp,o),a(Fp,tE),l(s,vf,o),l(s,Lt,o),Lt.innerHTML=dP,l(s,Ef,o),l(s,jp,o),a(jp,eE),l(s,bf,o),l(s,Mt,o),Mt.innerHTML=fP,l(s,xf,o),l(s,Np,o),a(Np,pE),l(s,Sf,o),l(s,Ht,o),Ht.innerHTML=hP,l(s,_f,o),l(s,Un,o),a(Un,qn),a(qn,uc),a(Un,oE),l(s,Tf,o),l(s,us,o),a(us,lE),a(us,kc),a(kc,iE),a(us,cE),a(us,dc),a(dc,rE),a(us,uE),l(s,If,o),l(s,Bt,o),Bt.innerHTML=mP,l(s,Of,o),l(s,Ft,o),a(Ft,fc),a(fc,kE),a(Ft,dE),l(s,Af,o),l(s,jt,o),jt.innerHTML=yP,l(s,Pf,o),l(s,Gn,o),a(Gn,Vn),a(Vn,hc),a(Gn,fE),l(s,Df,o),l(s,Wn,o),a(Wn,hE),a(Wn,mc),a(mc,mE),a(Wn,yE),l(s,Cf,o),l(s,Up,o),a(Up,gE),l(s,Rf,o),l(s,Yn,o),a(Yn,Nt),a(Nt,yc),a(yc,wE),a(Nt,vE),a(Nt,gc),a(gc,EE),a(Yn,bE),a(Yn,Ut),a(Ut,wc),a(wc,qp),qp.innerHTML=gP,a(Ut,xE),a(Ut,vc),a(vc,Gp),Gp.innerHTML=wP,l(s,Lf,o),l(s,Vp,o),a(Vp,SE),l(s,Mf,o),l(s,qt,o),qt.innerHTML=vP,l(s,Hf,o),l(s,zn,o),a(zn,Jn),a(Jn,Ec),a(zn,_E),l(s,Bf,o),l(s,Wp,o),a(Wp,TE),l(s,Ff,o),l(s,K,o),a(K,IE),a(K,bc),a(bc,OE),a(K,AE),a(K,xc),a(xc,PE),a(K,DE),a(K,Sc),a(Sc,CE),l(s,jf,o),l(s,Gt,o),Gt.innerHTML=EP,l(s,Nf,o),l(s,Yp,o),a(Yp,RE),l(s,Uf,o),l(s,Vt,o),Vt.innerHTML=bP,l(s,qf,o),l(s,zp,o),a(zp,LE),l(s,Gf,o),l(s,Wt,o),Wt.innerHTML=xP,l(s,Vf,o),l(s,$n,o),a($n,ME),a($n,_c),a(_c,HE),a($n,BE),l(s,Wf,o),l(s,Yt,o),Yt.innerHTML=SP,l(s,Yf,o),l(s,Jp,o),a(Jp,FE),l(s,zf,o),l(s,Kn,o),a(Kn,zt),a(zt,Tc),a(Tc,jE),a(zt,NE),a(zt,Ic),a(Ic,UE),a(Kn,qE),a(Kn,Jt),a(Jt,Oc),a(Oc,$p),$p.innerHTML=_P,a(Jt,GE),a(Jt,Ac),a(Ac,Kp),Kp.innerHTML=TP,l(s,Jf,o),l(s,ks,o),a(ks,VE),a(ks,Pc),a(Pc,WE),a(ks,YE),a(ks,Dc),a(Dc,zE),a(ks,JE),l(s,$f,o),l(s,$t,o),$t.innerHTML=IP,l(s,Kf,o),l(s,Kt,o),a(Kt,$E),a(Kt,Cc),a(Cc,KE),l(s,Xf,o),l(s,Xt,o),Xt.innerHTML=OP,l(s,Zf,o),l(s,Xp,o),a(Xp,XE),l(s,Qf,o),l(s,Zt,o),Zt.innerHTML=AP,l(s,sh,o),l(s,X,o),a(X,Rc),a(Rc,ZE),a(X,QE),a(X,Lc),a(Lc,sb),a(X,nb),a(X,Mc),a(Mc,ab),a(X,tb),l(s,nh,o),l(s,Qt,o),Qt.innerHTML=PP,l(s,ah,o),l(s,Zp,o),a(Zp,eb),l(s,th,o),l(s,Qp,o),a(Qp,Z),l(s,eh,o),l(s,Xn,o),a(Xn,Zn),a(Zn,Hc),a(Xn,pb),l(s,ph,o),l(s,so,o),a(so,ob),l(s,oh,o),l(s,Qn,o),a(Qn,sa),a(sa,Bc),a(Qn,lb),l(s,lh,o),l(s,no,o),a(no,ib),l(s,ih,o),l(s,ao,o),a(ao,cb),l(s,ch,o),l(s,na,o),a(na,rb),a(na,Fc),a(Fc,ub),a(na,kb),l(s,rh,o),l(s,aa,o),a(aa,ta),a(ta,jc),a(aa,db),l(s,uh,o),l(s,to,o),a(to,eo),l(s,kh,o),l(s,ea,o),a(ea,fb),a(ea,Nc),a(Nc,hb),a(ea,mb),l(s,dh,o),l(s,se,o),se.innerHTML=DP,l(s,fh,o),l(s,pa,o),a(pa,yb),a(pa,Uc),a(Uc,gb),a(pa,wb),l(s,hh,o),l(s,ne,o),ne.innerHTML=CP,l(s,mh,o),l(s,oa,o),a(oa,vb),a(oa,qc),a(qc,Eb),a(oa,bb),l(s,yh,o),l(s,po,o),a(po,oo),l(s,gh,o),l(s,la,o),a(la,ia),a(ia,Gc),a(la,xb),l(s,wh,o),l(s,ca,o),a(ca,Sb),a(ca,Vc),a(Vc,_b),a(ca,Tb),l(s,vh,o),l(s,ae,o),ae.innerHTML=RP,l(s,Eh,o),l(s,lo,o),a(lo,Ib),l(s,bh,o),l(s,te,o),te.innerHTML=LP,l(s,xh,o),l(s,ra,o),a(ra,ua),a(ua,Wc),a(ra,Ob),l(s,Sh,o),l(s,io,o),a(io,Ab),l(s,_h,o),l(s,d,o),a(d,Pb),a(d,Yc),a(Yc,Db),a(d,Cb),a(d,zc),a(zc,Rb),a(d,Lb),a(d,Jc),a(Jc,Mb),a(d,Hb),a(d,$c),a($c,Bb),a(d,Fb),a(d,Kc),a(Kc,jb),a(d,Nb),a(d,Xc),a(Xc,Ub),a(d,qb),a(d,Zc),a(Zc,Gb),a(d,Vb),a(d,Qc),a(Qc,Wb),a(d,Yb),l(s,Th,o),l(s,ee,o),ee.innerHTML=MP,l(s,Ih,o),l(s,ka,o),a(ka,zb),a(ka,sr),a(sr,Jb),a(ka,$b),l(s,Oh,o),l(s,pe,o),pe.innerHTML=HP,l(s,Ah,o),l(s,ds,o),a(ds,Kb),a(ds,nr),a(nr,Xb),a(ds,Zb),a(ds,ar),a(ar,Qb),a(ds,sx),l(s,Ph,o),l(s,oe,o),oe.innerHTML=BP,l(s,Dh,o),l(s,co,o),a(co,nx),l(s,Ch,o),l(s,le,o),le.innerHTML=FP,l(s,Rh,o),l(s,ro,o),a(ro,ax),l(s,Lh,o),l(s,da,o),a(da,fa),a(fa,tr),a(da,tx),l(s,Mh,o),l(s,uo,o),a(uo,ex),l(s,Hh,o),l(s,fs,o),a(fs,er),a(er,px),a(fs,ox),a(fs,pr),a(pr,lx),a(fs,ix),a(fs,or),a(or,cx),l(s,Bh,o),l(s,x,o),a(x,rx),a(x,lr),a(lr,ux),a(x,kx),a(x,ir),a(ir,dx),a(x,fx),a(x,cr),a(cr,hx),a(x,mx),a(x,rr),a(rr,yx),a(x,gx),a(x,ur),a(ur,wx),a(x,vx),l(s,Fh,o),l(s,ha,o),a(ha,ma),a(ma,kr),a(ha,Ex),l(s,jh,o),l(s,w,o),a(w,bx),a(w,dr),a(dr,xx),a(w,Sx),a(w,fr),a(fr,_x),a(w,Tx),a(w,hr),a(hr,Ix),a(w,Ox),a(w,mr),a(mr,Ax),a(w,Px),a(w,yr),a(yr,Dx),a(w,Cx),a(w,gr),a(gr,Rx),a(w,Lx),l(s,Nh,o),l(s,ie,o),ie.innerHTML=jP,l(s,Uh,o),l(s,D,o),a(D,Mx),a(D,wr),a(wr,Hx),a(D,Bx),a(D,vr),a(vr,Fx),a(D,jx),a(D,Er),a(Er,Nx),a(D,Ux),a(D,br),a(br,qx),a(D,Gx),l(s,qh,o),l(s,ce,o),ce.innerHTML=NP,l(s,Gh,o),l(s,C,o),a(C,Vx),a(C,xr),a(xr,Wx),a(C,Yx),a(C,Sr),a(Sr,zx),a(C,Jx),a(C,_r),a(_r,$x),a(C,Kx),a(C,Tr),a(Tr,Xx),a(C,Zx),l(s,Vh,o),l(s,re,o),re.innerHTML=UP,l(s,Wh,o),l(s,y,o),a(y,Ir),a(Ir,Qx),a(y,s3),a(y,Or),a(Or,n3),a(y,a3),a(y,Ar),a(Ar,t3),a(y,e3),a(y,Pr),a(Pr,p3),a(y,o3),a(y,Dr),a(Dr,l3),a(y,i3),a(y,Cr),a(Cr,c3),a(y,r3),a(y,Rr),a(Rr,u3),a(y,k3),l(s,Yh,o),l(s,ue,o),ue.innerHTML=qP,l(s,zh,o),l(s,ya,o),a(ya,Lr),a(Lr,d3),a(ya,f3),a(ya,Mr),a(Mr,h3),l(s,Jh,o),l(s,ke,o),ke.innerHTML=GP,l(s,$h,o),l(s,h,o),a(h,m3),a(h,Hr),a(Hr,y3),a(h,g3),a(h,Br),a(Br,w3),a(h,v3),a(h,Fr),a(Fr,E3),a(h,b3),a(h,jr),a(jr,x3),a(h,S3),a(h,Nr),a(Nr,_3),a(h,T3),a(h,Ur),a(Ur,I3),a(h,O3),a(h,qr),a(qr,A3),a(h,P3),l(s,Kh,o),l(s,de,o),de.innerHTML=VP,l(s,Xh,o),l(s,ko,o),a(ko,D3),l(s,Zh,o),l(s,ga,o),a(ga,wa),a(wa,Gr),a(ga,C3),l(s,Qh,o),l(s,fe,o),fe.innerHTML=WP,l(s,sm,o),l(s,va,o),a(va,R3),a(va,Vr),a(Vr,L3),a(va,M3),l(s,nm,o),l(s,he,o),he.innerHTML=YP,l(s,am,o),l(s,fo,o),a(fo,H3),l(s,tm,o),l(s,me,o),me.innerHTML=zP,l(s,em,o),l(s,ho,o),a(ho,B3),l(s,pm,o),l(s,ye,o),ye.innerHTML=JP,l(s,om,o),l(s,mo,o),a(mo,F3),l(s,lm,o),l(s,ge,o),ge.innerHTML=$P,l(s,im,o),l(s,yo,o),a(yo,j3),l(s,cm,o),l(s,go,o),a(go,wo),l(s,rm,o),l(s,vo,o),a(vo,N3),l(s,um,o),l(s,we,o),we.innerHTML=KP,l(s,km,o),l(s,Eo,o),a(Eo,bo),l(s,dm,o),l(s,Ea,o),a(Ea,ba),a(ba,Wr),a(Ea,U3),l(s,fm,o),l(s,m,o),a(m,q3),a(m,Yr),a(Yr,G3),a(m,V3),a(m,zr),a(zr,W3),a(m,Y3),a(m,Jr),a(Jr,z3),a(m,J3),a(m,$r),a($r,$3),a(m,K3),a(m,Kr),a(Kr,X3),a(m,Z3),a(m,Xr),a(Xr,Q3),a(m,sS),a(m,Zr),a(Zr,nS),a(m,aS),l(s,hm,o),l(s,ve,o),ve.innerHTML=XP,l(s,mm,o),l(s,xo,o),a(xo,tS),l(s,ym,o),l(s,So,o),a(So,Q),l(s,gm,o),l(s,xa,o),a(xa,Sa),a(Sa,Qr),a(xa,eS),l(s,wm,o),l(s,S,o),a(S,pS),a(S,su),a(su,oS),a(S,lS),a(S,nu),a(nu,iS),a(S,cS),a(S,au),a(au,rS),a(S,uS),a(S,tu),a(tu,kS),a(S,dS),a(S,eu),a(eu,fS),a(S,hS),l(s,vm,o),l(s,_a,o),a(_a,Ta),a(Ta,pu),a(_a,mS),l(s,Em,o),l(s,_o,o),a(_o,yS),l(s,bm,o),l(s,V,o),a(V,ou),a(ou,lu),a(lu,gS),a(V,wS),a(V,iu),a(iu,xs),a(xs,vS),a(xs,cu),a(cu,ES),a(xs,bS),a(xs,ru),a(ru,xS),a(xs,SS),a(V,_S),a(V,uu),a(uu,Ee),a(Ee,TS),a(Ee,ku),a(ku,IS),a(Ee,OS),a(V,AS),a(V,du),a(du,be),a(be,PS),a(be,fu),a(fu,DS),a(be,CS),l(s,xm,o),l(s,To,o),a(To,RS),l(s,Sm,o),l(s,Ia,o),a(Ia,LS),a(Ia,hu),a(hu,MS),a(Ia,HS),l(s,_m,o),l(s,Io,o),a(Io,BS),l(s,Tm,o),l(s,xe,o),xe.innerHTML=ZP,l(s,Im,o),l(s,Oa,o),a(Oa,FS),a(Oa,mu),a(mu,jS),a(Oa,NS),l(s,Om,o),l(s,Se,o),Se.innerHTML=QP,l(s,Am,o),l(s,Aa,o),a(Aa,US),a(Aa,yu),a(yu,qS),a(Aa,GS),l(s,Pm,o),l(s,_e,o),_e.innerHTML=s7,l(s,Dm,o),l(s,Pa,o),a(Pa,Da),a(Da,gu),a(Pa,VS),l(s,Cm,o),l(s,Oo,o),a(Oo,WS),l(s,Rm,o),l(s,Ao,o),a(Ao,YS),l(s,Lm,o),l(s,hs,o),a(hs,wu),a(wu,zS),a(hs,JS),a(hs,vu),a(vu,$S),a(hs,KS),a(hs,Eu),a(Eu,XS),l(s,Mm,o),l(s,Po,o),a(Po,ZS)},p:W_,i:W_,o:W_,d(s){s&&n(as),s&&n(Tu),s&&n(vs),s&&n(Iu),s&&n(Ga),s&&n(Ou),s&&n(_s),s&&n(Au),s&&n(Oe),s&&n(Pu),s&&n(Is),s&&n(Du),s&&n(Ae),s&&n(Cu),s&&n(As),s&&n(Ru),s&&n(Ds),s&&n(Lu),s&&n(Cs),s&&n(Mu),s&&n(g),s&&n(Hu),s&&n(Rs),s&&n(Bu),s&&n(Ms),s&&n(Fu),s&&n(ts),s&&n(ju),s&&n(Bs),s&&n(Nu),s&&n(De),s&&n(Uu),s&&n(js),s&&n(qu),s&&n(Re),s&&n(Gu),s&&n(Ns),s&&n(Vu),s&&n(es),s&&n(Wu),s&&n(qs),s&&n(Yu),s&&n(Gs),s&&n(zu),s&&n(Le),s&&n(Ju),s&&n(Ws),s&&n($u),s&&n(Me),s&&n(Ku),s&&n(zs),s&&n(Xu),s&&n(He),s&&n(Zu),s&&n($s),s&&n(Qu),s&&n(Be),s&&n(sk),s&&n(Xs),s&&n(nk),s&&n(Fe),s&&n(ak),s&&n(Ne),s&&n(tk),s&&n(b),s&&n(ek),s&&n(sn),s&&n(pk),s&&n(an),s&&n(ok),s&&n(qe),s&&n(lk),s&&n(en),s&&n(ik),s&&n(f),s&&n(ck),s&&n(Ge),s&&n(rk),s&&n(Ve),s&&n(uk),s&&n(pn),s&&n(kk),s&&n(We),s&&n(dk),s&&n(ze),s&&n(fk),s&&n(ln),s&&n(hk),s&&n(Je),s&&n(mk),s&&n(Ke),s&&n(yk),s&&n(Xe),s&&n(gk),s&&n(ps),s&&n(wk),s&&n(rn),s&&n(vk),s&&n(Ze),s&&n(Ek),s&&n(sp),s&&n(bk),s&&n(np),s&&n(xk),s&&n(ap),s&&n(Sk),s&&n(H),s&&n(_k),s&&n(kn),s&&n(Tk),s&&n(tp),s&&n(Ik),s&&n(pp),s&&n(Ok),s&&n(op),s&&n(Ak),s&&n(B),s&&n(Pk),s&&n(fn),s&&n(Dk),s&&n(lp),s&&n(Ck),s&&n(P),s&&n(Rk),s&&n(ip),s&&n(Lk),s&&n(F),s&&n(Mk),s&&n(mn),s&&n(Hk),s&&n(cp),s&&n(Bk),s&&n(rp),s&&n(Fk),s&&n(gn),s&&n(jk),s&&n(kp),s&&n(Nk),s&&n(Ja),s&&n(Uk),s&&n(Es),s&&n(qk),s&&n($a),s&&n(Gk),s&&n(dp),s&&n(Vk),s&&n(vn),s&&n(Wk),s&&n(hp),s&&n(Yk),s&&n(Ka),s&&n(zk),s&&n(mp),s&&n(Jk),s&&n(yp),s&&n($k),s&&n(Xa),s&&n(Kk),s&&n(gp),s&&n(Xk),s&&n(Za),s&&n(Zk),s&&n(wp),s&&n(Qk),s&&n(Qa),s&&n(sd),s&&n(os),s&&n(nd),s&&n(vp),s&&n(ad),s&&n(st),s&&n(td),s&&n(bn),s&&n(ed),s&&n(nt),s&&n(pd),s&&n(xn),s&&n(od),s&&n(at),s&&n(ld),s&&n(tt),s&&n(id),s&&n(pt),s&&n(cd),s&&n(Sn),s&&n(rd),s&&n(Ep),s&&n(ud),s&&n(Tn),s&&n(kd),s&&n(bp),s&&n(dd),s&&n(ls),s&&n(fd),s&&n(it),s&&n(hd),s&&n(j),s&&n(md),s&&n(bs),s&&n(yd),s&&n(ct),s&&n(gd),s&&n(Sp),s&&n(wd),s&&n(rt),s&&n(vd),s&&n(is),s&&n(Ed),s&&n(ut),s&&n(bd),s&&n(kt),s&&n(xd),s&&n(In),s&&n(Sd),s&&n(On),s&&n(_d),s&&n(_p),s&&n(Td),s&&n(ft),s&&n(Id),s&&n(cs),s&&n(Od),s&&n(ht),s&&n(Ad),s&&n(An),s&&n(Pd),s&&n(mt),s&&n(Dd),s&&n(N),s&&n(Cd),s&&n(yt),s&&n(Rd),s&&n(U),s&&n(Ld),s&&n(gt),s&&n(Md),s&&n(Tp),s&&n(Hd),s&&n(wt),s&&n(Bd),s&&n(vt),s&&n(Fd),s&&n(Et),s&&n(jd),s&&n(Pn),s&&n(Nd),s&&n(Cn),s&&n(Ud),s&&n(bt),s&&n(qd),s&&n(Ip),s&&n(Gd),s&&n(Op),s&&n(Vd),s&&n(xt),s&&n(Wd),s&&n(q),s&&n(Yd),s&&n(St),s&&n(zd),s&&n(Rn),s&&n(Jd),s&&n(_t),s&&n($d),s&&n(Ap),s&&n(Kd),s&&n(Pp),s&&n(Xd),s&&n(Ln),s&&n(Zd),s&&n(G),s&&n(Qd),s&&n(Hn),s&&n(sf),s&&n(Fn),s&&n(nf),s&&n(jn),s&&n(af),s&&n(Tt),s&&n(tf),s&&n(rs),s&&n(ef),s&&n(It),s&&n(pf),s&&n(Dp),s&&n(of),s&&n(Ot),s&&n(lf),s&&n(Cp),s&&n(cf),s&&n(Rp),s&&n(rf),s&&n(Mp),s&&n(uf),s&&n(At),s&&n(kf),s&&n(Hp),s&&n(df),s&&n(Pt),s&&n(ff),s&&n(Nn),s&&n(hf),s&&n(Dt),s&&n(mf),s&&n(Bp),s&&n(yf),s&&n(Ct),s&&n(gf),s&&n(Rt),s&&n(wf),s&&n(Fp),s&&n(vf),s&&n(Lt),s&&n(Ef),s&&n(jp),s&&n(bf),s&&n(Mt),s&&n(xf),s&&n(Np),s&&n(Sf),s&&n(Ht),s&&n(_f),s&&n(Un),s&&n(Tf),s&&n(us),s&&n(If),s&&n(Bt),s&&n(Of),s&&n(Ft),s&&n(Af),s&&n(jt),s&&n(Pf),s&&n(Gn),s&&n(Df),s&&n(Wn),s&&n(Cf),s&&n(Up),s&&n(Rf),s&&n(Yn),s&&n(Lf),s&&n(Vp),s&&n(Mf),s&&n(qt),s&&n(Hf),s&&n(zn),s&&n(Bf),s&&n(Wp),s&&n(Ff),s&&n(K),s&&n(jf),s&&n(Gt),s&&n(Nf),s&&n(Yp),s&&n(Uf),s&&n(Vt),s&&n(qf),s&&n(zp),s&&n(Gf),s&&n(Wt),s&&n(Vf),s&&n($n),s&&n(Wf),s&&n(Yt),s&&n(Yf),s&&n(Jp),s&&n(zf),s&&n(Kn),s&&n(Jf),s&&n(ks),s&&n($f),s&&n($t),s&&n(Kf),s&&n(Kt),s&&n(Xf),s&&n(Xt),s&&n(Zf),s&&n(Xp),s&&n(Qf),s&&n(Zt),s&&n(sh),s&&n(X),s&&n(nh),s&&n(Qt),s&&n(ah),s&&n(Zp),s&&n(th),s&&n(Qp),s&&n(eh),s&&n(Xn),s&&n(ph),s&&n(so),s&&n(oh),s&&n(Qn),s&&n(lh),s&&n(no),s&&n(ih),s&&n(ao),s&&n(ch),s&&n(na),s&&n(rh),s&&n(aa),s&&n(uh),s&&n(to),s&&n(kh),s&&n(ea),s&&n(dh),s&&n(se),s&&n(fh),s&&n(pa),s&&n(hh),s&&n(ne),s&&n(mh),s&&n(oa),s&&n(yh),s&&n(po),s&&n(gh),s&&n(la),s&&n(wh),s&&n(ca),s&&n(vh),s&&n(ae),s&&n(Eh),s&&n(lo),s&&n(bh),s&&n(te),s&&n(xh),s&&n(ra),s&&n(Sh),s&&n(io),s&&n(_h),s&&n(d),s&&n(Th),s&&n(ee),s&&n(Ih),s&&n(ka),s&&n(Oh),s&&n(pe),s&&n(Ah),s&&n(ds),s&&n(Ph),s&&n(oe),s&&n(Dh),s&&n(co),s&&n(Ch),s&&n(le),s&&n(Rh),s&&n(ro),s&&n(Lh),s&&n(da),s&&n(Mh),s&&n(uo),s&&n(Hh),s&&n(fs),s&&n(Bh),s&&n(x),s&&n(Fh),s&&n(ha),s&&n(jh),s&&n(w),s&&n(Nh),s&&n(ie),s&&n(Uh),s&&n(D),s&&n(qh),s&&n(ce),s&&n(Gh),s&&n(C),s&&n(Vh),s&&n(re),s&&n(Wh),s&&n(y),s&&n(Yh),s&&n(ue),s&&n(zh),s&&n(ya),s&&n(Jh),s&&n(ke),s&&n($h),s&&n(h),s&&n(Kh),s&&n(de),s&&n(Xh),s&&n(ko),s&&n(Zh),s&&n(ga),s&&n(Qh),s&&n(fe),s&&n(sm),s&&n(va),s&&n(nm),s&&n(he),s&&n(am),s&&n(fo),s&&n(tm),s&&n(me),s&&n(em),s&&n(ho),s&&n(pm),s&&n(ye),s&&n(om),s&&n(mo),s&&n(lm),s&&n(ge),s&&n(im),s&&n(yo),s&&n(cm),s&&n(go),s&&n(rm),s&&n(vo),s&&n(um),s&&n(we),s&&n(km),s&&n(Eo),s&&n(dm),s&&n(Ea),s&&n(fm),s&&n(m),s&&n(hm),s&&n(ve),s&&n(mm),s&&n(xo),s&&n(ym),s&&n(So),s&&n(gm),s&&n(xa),s&&n(wm),s&&n(S),s&&n(vm),s&&n(_a),s&&n(Em),s&&n(_o),s&&n(bm),s&&n(V),s&&n(xm),s&&n(To),s&&n(Sm),s&&n(Ia),s&&n(_m),s&&n(Io),s&&n(Tm),s&&n(xe),s&&n(Im),s&&n(Oa),s&&n(Om),s&&n(Se),s&&n(Am),s&&n(Aa),s&&n(Pm),s&&n(_e),s&&n(Dm),s&&n(Pa),s&&n(Cm),s&&n(Oo),s&&n(Rm),s&&n(Ao),s&&n(Lm),s&&n(hs),s&&n(Mm),s&&n(Po)}}}const WD={date:"2022-05-26T17:04:48.123Z",draft:!0,archived:!1,title:"A Trello-like CRM tool with Google Apps Script",tags:["google apps script"],excerpt:"Keeping track of all the leads and opportunities when freelancing or now that I have just been laid off and am job hunting, can be a daunting task. I have built a simple tool in Google Apps Script to make the process easier"};class YD extends xD{constructor(as){super(),SD(this,as,null,GD,_D,{})}}export{YD as default,WD as metadata};
