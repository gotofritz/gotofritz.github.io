import{S as so,i as no,s as ro,e as o,t as n,j as f,c as a,a as s,g as r,d as t,l as p,b as c,f as d,F as i,J as ei}from"./vendor-e04e0de5.js";function lo(zi){let _,Ye,xe,k,Bi=`<code class="language-sh">$ cd DIR_FROM
$ find .  \\! \\( -name . -or -name &quot;.git&quot; -or -path &quot;*/.git/*&quot; \\) \\
   -print | cpio -padv PTH_TO</code>`,ke,y,g,Q,Ze,Me,D,et,M,tt,it,Fe,F,Ki='<code class="language-sh">$ find DIR_FROM \\! \\( -path &quot;*/.git/*&quot; -or -name &quot;.git&quot; \\) -print</code>',qe,$,ot,Pe,h,V,at,W,st,Y,nt,Z,rt,ee,lt,te,dt,ie,ct,oe,ht,ae,ft,se,pt,ne,ut,re,mt,le,wt,de,vt,ce,_t,he,yt,Ae,E,b,fe,gt,He,T,Dt,pe,Et,bt,je,C,Tt,Le,q,Qi=`<code class="language-sh">$ cp -R DIR_FROM DIR_TO
$ find DIR_FROM \\( -path &quot;*/.git/*&quot; -or -name &quot;.git&quot; \\) -delete</code>`,Se,w,ue,Rt,me,It,N,Ot,U,xt,we,kt,ve,Mt,$e,X,Ft,Ce,R,I,_e,qt,Ne,G,Pt,Ue,P,Vi=`<code class="language-sh">$ find DIR_FROM \\! \\( -path &quot;*/.git/*&quot; -or -name &quot;.git&quot; \\) \\
  -exec cp &#123;&#125; DIR_TO \\;</code>`,Xe,J,At,Ge,A,Wi=`<code class="language-sh">$ find DIR_FROM \\! \\( -path &quot;*/.git/*&quot; -or -name &quot;.git&quot; \\) \\
    -exec cp -b --parent &#123;&#125; DIR_TO ;</code>`,Je,O,x,ye,Ht,ze,H,j,jt,Lt,Be,L,Yi=`<code class="language-sh">$ cd DIR_FROM
$ find .  \\! \\( -name . -or -name &quot;.git&quot; -or -path &quot;*/.git/*&quot; \\) \\
    -print | cpio -padv PTH_TO</code>`,Ke,m,ge,St,De,$t,z,Ct,B,Nt,Ee,Ut,be,Xt,Te,Gt,Re,Jt,Ie,zt,Oe,Bt,Qe,K,Kt;return{c(){_=o("p"),Ye=n("TL;DR"),xe=f(),k=o("pre"),ke=f(),y=o("h2"),g=o("a"),Q=o("span"),Ze=n("Finding files matching a set of conditions"),Me=f(),D=o("p"),et=n("The shell command to find files matching certain conditions is called, unsurprisingly, "),M=o("a"),tt=n("find"),it=n(", a powerful command. It includes \u2018actions\u2019 which can be performed on the found files. The command below finds all the files we want to copy and ignores the rest."),Fe=f(),F=o("pre"),qe=f(),$=o("p"),ot=n("It breaks down as"),Pe=f(),h=o("dl"),V=o("dt"),at=n("find DIR_FROM"),W=o("dd"),st=n("run the find command, searching in DIR_FROM (in OS X, you can just drag DIR_FROM from the Finder to the Terminal window instead of typing it all out)"),Y=o("dt"),nt=n("\\!"),Z=o("dd"),rt=n("since we are ignoring files, use ! (negative) to find files which do NOT match the pattern. The slash is needed, because esclamation marks mean something to Terminal, and we want Terminal to ignore that"),ee=o("dt"),lt=n("\\( "),te=o("dd"),dt=n("the parenthesis groups conditions together, since we have more than one. Again, the slash is needed because we want Terminal to ignore its special meaning"),ie=o("dt"),ct=n('-path "*/.git/*"'),oe=o("dd"),ht=n(`this is the condition "the path includes '/.git' anywhere in it"`),ae=o("dt"),ft=n("-or"),se=o("dd"),pt=n("adds conditions together, matching any of them"),ne=o("dt"),ut=n('-name ".git"'),re=o("dd"),mt=n(`this is the condition "the name of the files is exactly '.git'`),le=o("dt"),wt=n("\\)"),de=o("dd"),vt=n("ends the group of condition. The negative ! applies to all of them."),ce=o("dt"),_t=n("-print"),he=o("dd"),yt=n("At this stage, just prints the names out on the terminal. Always safe to run this first, to double check the results are as expected."),Ae=f(),E=o("h2"),b=o("a"),fe=o("span"),gt=n("Delete all .git directories from a project"),He=f(),T=o("p"),Dt=n("In an ideal world, I\u2019d run the find command above with \u201C-print\u201D, check it\u2019s ok, then I\u2019d run it again with \u201C-copy\u201D. Except that there is no \u201C-copy\u201D action, so it\u2019s back to "),pe=o("code"),Et=n("man find"),bt=n(" to work out an action that will help."),je=f(),C=o("p"),Tt=n("It turns out the simplest way is to copy all files first, then find the .git ones and use the \u2018-delete\u2019 action to get rid of them."),Le=f(),q=o("pre"),Se=f(),w=o("dl"),ue=o("dt"),Rt=n("cp -R DIR_FROM DIR_TO"),me=o("dd"),It=n(`this is how you copy a directory in Terminal. cp is the command to copy files on the shell, but it won't do directories. cp -R is used to copy directories. R stands for "recursive", it is common to many other shell commands`),N=o("dt"),Ot=n('find DIR_TO \\( -path "*/.git/*" -or -name ".git" \\)'),U=o("dd"),xt=n("almost as before - but note there is no \\! this time. That's because we want to find the files we don't need, rather than ignore them."),we=o("dt"),kt=n("-delete"),ve=o("dd"),Mt=n("deletes the files it finds. I suggest to try it with -print first, just to double check"),$e=f(),X=o("p"),Ft=n("The above works fine, but read on for another way of doing it."),Ce=f(),R=o("h2"),I=o("a"),_e=o("span"),qt=n("Finding files and passimg them to the cp command"),Ne=f(),G=o("p"),Pt=n("My initial approach when trying to move files across was to use find with the \u2018-exec\u2019 action and the cp command, like this:"),Ue=f(),P=o("pre"),Xe=f(),J=o("p"),At=n("This looks good at first, but there\u2019s a problem - it finds and copies the files, but it doesn\u2019t preserve the directory structure, and the files end up all in the same directory. Apparently on Linux you can tell cp to preserve the directory structure with the -b \u2013parent option, but this doesn\u2019t work on OS X."),Ge=f(),A=o("pre"),Je=f(),O=o("h2"),x=o("a"),ye=o("span"),Ht=n("Using cpio to copy files"),ze=f(),H=o("p"),j=o("a"),jt=n("cpio"),Lt=n(" is an archiving utility similar to tar, but it has an important difference - it can copy files into and archive and then out again to a different location, without actually creating an archive in between. In other words, it copies directory structures. The only snag is that you have to cd to the directory where you are copying from."),Be=f(),L=o("pre"),Ke=f(),m=o("dl"),ge=o("dt"),St=n("cd DIR_FROM"),De=o("dd"),$t=n("move to the directory you are copying - this is where the directory structure will be calculated from"),z=o("dt"),Ct=n('find . \\! \\(  -name . -or -path "*/.git/*" -or -name ".git" \\)'),B=o("dd"),Nt=n("similar to the previous find command, but note how DIR_FROM is replaced with '.', which means 'here'. Also, there is an extra condition, `-name .`, without which empty .git directories would be created."),Ee=o("dt"),Ut=n("-print "),be=o("dd"),Xt=n("prints out the filename"),Te=o("dt"),Gt=n("|"),Re=o("dd"),Jt=n("pass the results of the command on the left (find) to the one on the right (cpio)"),Ie=o("dt"),zt=n("cpio -padv PTH_TO"),Oe=o("dd"),Bt=n("run the cpio command in 'move files across' mode (p) with options d (create directory structure) -a (reset access time on copied files) -v (verbose, i.e., show me what you are doing)"),Qe=f(),K=o("p"),Kt=n("And that\u2019s that - exciting Unix fun."),this.h()},l(e){_=a(e,"P",{});var l=s(_);Ye=r(l,"TL;DR"),l.forEach(t),xe=p(e),k=a(e,"PRE",{class:!0});var Zi=s(k);Zi.forEach(t),ke=p(e),y=a(e,"H2",{id:!0});var Qt=s(y);g=a(Qt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ti=s(g);Q=a(ti,"SPAN",{class:!0}),s(Q).forEach(t),ti.forEach(t),Ze=r(Qt,"Finding files matching a set of conditions"),Qt.forEach(t),Me=p(e),D=a(e,"P",{});var Ve=s(D);et=r(Ve,"The shell command to find files matching certain conditions is called, unsurprisingly, "),M=a(Ve,"A",{href:!0,rel:!0});var ii=s(M);tt=r(ii,"find"),ii.forEach(t),it=r(Ve,", a powerful command. It includes \u2018actions\u2019 which can be performed on the found files. The command below finds all the files we want to copy and ignores the rest."),Ve.forEach(t),Fe=p(e),F=a(e,"PRE",{class:!0});var eo=s(F);eo.forEach(t),qe=p(e),$=a(e,"P",{});var oi=s($);ot=r(oi,"It breaks down as"),oi.forEach(t),Pe=p(e),h=a(e,"DL",{class:!0});var u=s(h);V=a(u,"DT",{});var ai=s(V);at=r(ai,"find DIR_FROM"),ai.forEach(t),W=a(u,"DD",{});var si=s(W);st=r(si,"run the find command, searching in DIR_FROM (in OS X, you can just drag DIR_FROM from the Finder to the Terminal window instead of typing it all out)"),si.forEach(t),Y=a(u,"DT",{});var ni=s(Y);nt=r(ni,"\\!"),ni.forEach(t),Z=a(u,"DD",{});var ri=s(Z);rt=r(ri,"since we are ignoring files, use ! (negative) to find files which do NOT match the pattern. The slash is needed, because esclamation marks mean something to Terminal, and we want Terminal to ignore that"),ri.forEach(t),ee=a(u,"DT",{});var li=s(ee);lt=r(li,"\\( "),li.forEach(t),te=a(u,"DD",{});var di=s(te);dt=r(di,"the parenthesis groups conditions together, since we have more than one. Again, the slash is needed because we want Terminal to ignore its special meaning"),di.forEach(t),ie=a(u,"DT",{});var ci=s(ie);ct=r(ci,'-path "*/.git/*"'),ci.forEach(t),oe=a(u,"DD",{});var hi=s(oe);ht=r(hi,`this is the condition "the path includes '/.git' anywhere in it"`),hi.forEach(t),ae=a(u,"DT",{});var fi=s(ae);ft=r(fi,"-or"),fi.forEach(t),se=a(u,"DD",{});var pi=s(se);pt=r(pi,"adds conditions together, matching any of them"),pi.forEach(t),ne=a(u,"DT",{});var ui=s(ne);ut=r(ui,'-name ".git"'),ui.forEach(t),re=a(u,"DD",{});var mi=s(re);mt=r(mi,`this is the condition "the name of the files is exactly '.git'`),mi.forEach(t),le=a(u,"DT",{});var wi=s(le);wt=r(wi,"\\)"),wi.forEach(t),de=a(u,"DD",{});var vi=s(de);vt=r(vi,"ends the group of condition. The negative ! applies to all of them."),vi.forEach(t),ce=a(u,"DT",{});var _i=s(ce);_t=r(_i,"-print"),_i.forEach(t),he=a(u,"DD",{});var yi=s(he);yt=r(yi,"At this stage, just prints the names out on the terminal. Always safe to run this first, to double check the results are as expected."),yi.forEach(t),u.forEach(t),Ae=p(e),E=a(e,"H2",{id:!0});var Vt=s(E);b=a(Vt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var gi=s(b);fe=a(gi,"SPAN",{class:!0}),s(fe).forEach(t),gi.forEach(t),gt=r(Vt,"Delete all .git directories from a project"),Vt.forEach(t),He=p(e),T=a(e,"P",{});var We=s(T);Dt=r(We,"In an ideal world, I\u2019d run the find command above with \u201C-print\u201D, check it\u2019s ok, then I\u2019d run it again with \u201C-copy\u201D. Except that there is no \u201C-copy\u201D action, so it\u2019s back to "),pe=a(We,"CODE",{});var Di=s(pe);Et=r(Di,"man find"),Di.forEach(t),bt=r(We," to work out an action that will help."),We.forEach(t),je=p(e),C=a(e,"P",{});var Ei=s(C);Tt=r(Ei,"It turns out the simplest way is to copy all files first, then find the .git ones and use the \u2018-delete\u2019 action to get rid of them."),Ei.forEach(t),Le=p(e),q=a(e,"PRE",{class:!0});var to=s(q);to.forEach(t),Se=p(e),w=a(e,"DL",{class:!0});var S=s(w);ue=a(S,"DT",{});var bi=s(ue);Rt=r(bi,"cp -R DIR_FROM DIR_TO"),bi.forEach(t),me=a(S,"DD",{});var Ti=s(me);It=r(Ti,`this is how you copy a directory in Terminal. cp is the command to copy files on the shell, but it won't do directories. cp -R is used to copy directories. R stands for "recursive", it is common to many other shell commands`),Ti.forEach(t),N=a(S,"DT",{class:!0});var Ri=s(N);Ot=r(Ri,'find DIR_TO \\( -path "*/.git/*" -or -name ".git" \\)'),Ri.forEach(t),U=a(S,"DD",{class:!0});var Ii=s(U);xt=r(Ii,"almost as before - but note there is no \\! this time. That's because we want to find the files we don't need, rather than ignore them."),Ii.forEach(t),we=a(S,"DT",{});var Oi=s(we);kt=r(Oi,"-delete"),Oi.forEach(t),ve=a(S,"DD",{});var xi=s(ve);Mt=r(xi,"deletes the files it finds. I suggest to try it with -print first, just to double check"),xi.forEach(t),S.forEach(t),$e=p(e),X=a(e,"P",{});var ki=s(X);Ft=r(ki,"The above works fine, but read on for another way of doing it."),ki.forEach(t),Ce=p(e),R=a(e,"H2",{id:!0});var Wt=s(R);I=a(Wt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Mi=s(I);_e=a(Mi,"SPAN",{class:!0}),s(_e).forEach(t),Mi.forEach(t),qt=r(Wt,"Finding files and passimg them to the cp command"),Wt.forEach(t),Ne=p(e),G=a(e,"P",{});var Fi=s(G);Pt=r(Fi,"My initial approach when trying to move files across was to use find with the \u2018-exec\u2019 action and the cp command, like this:"),Fi.forEach(t),Ue=p(e),P=a(e,"PRE",{class:!0});var io=s(P);io.forEach(t),Xe=p(e),J=a(e,"P",{});var qi=s(J);At=r(qi,"This looks good at first, but there\u2019s a problem - it finds and copies the files, but it doesn\u2019t preserve the directory structure, and the files end up all in the same directory. Apparently on Linux you can tell cp to preserve the directory structure with the -b \u2013parent option, but this doesn\u2019t work on OS X."),qi.forEach(t),Ge=p(e),A=a(e,"PRE",{class:!0});var oo=s(A);oo.forEach(t),Je=p(e),O=a(e,"H2",{id:!0});var Yt=s(O);x=a(Yt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Pi=s(x);ye=a(Pi,"SPAN",{class:!0}),s(ye).forEach(t),Pi.forEach(t),Ht=r(Yt,"Using cpio to copy files"),Yt.forEach(t),ze=p(e),H=a(e,"P",{});var Zt=s(H);j=a(Zt,"A",{href:!0,rel:!0});var Ai=s(j);jt=r(Ai,"cpio"),Ai.forEach(t),Lt=r(Zt," is an archiving utility similar to tar, but it has an important difference - it can copy files into and archive and then out again to a different location, without actually creating an archive in between. In other words, it copies directory structures. The only snag is that you have to cd to the directory where you are copying from."),Zt.forEach(t),Be=p(e),L=a(e,"PRE",{class:!0});var ao=s(L);ao.forEach(t),Ke=p(e),m=a(e,"DL",{class:!0});var v=s(m);ge=a(v,"DT",{});var Hi=s(ge);St=r(Hi,"cd DIR_FROM"),Hi.forEach(t),De=a(v,"DD",{});var ji=s(De);$t=r(ji,"move to the directory you are copying - this is where the directory structure will be calculated from"),ji.forEach(t),z=a(v,"DT",{class:!0});var Li=s(z);Ct=r(Li,'find . \\! \\(  -name . -or -path "*/.git/*" -or -name ".git" \\)'),Li.forEach(t),B=a(v,"DD",{class:!0});var Si=s(B);Nt=r(Si,"similar to the previous find command, but note how DIR_FROM is replaced with '.', which means 'here'. Also, there is an extra condition, `-name .`, without which empty .git directories would be created."),Si.forEach(t),Ee=a(v,"DT",{});var $i=s(Ee);Ut=r($i,"-print "),$i.forEach(t),be=a(v,"DD",{});var Ci=s(be);Xt=r(Ci,"prints out the filename"),Ci.forEach(t),Te=a(v,"DT",{});var Ni=s(Te);Gt=r(Ni,"|"),Ni.forEach(t),Re=a(v,"DD",{});var Ui=s(Re);Jt=r(Ui,"pass the results of the command on the left (find) to the one on the right (cpio)"),Ui.forEach(t),Ie=a(v,"DT",{});var Xi=s(Ie);zt=r(Xi,"cpio -padv PTH_TO"),Xi.forEach(t),Oe=a(v,"DD",{});var Gi=s(Oe);Bt=r(Gi,"run the cpio command in 'move files across' mode (p) with options d (create directory structure) -a (reset access time on copied files) -v (verbose, i.e., show me what you are doing)"),Gi.forEach(t),v.forEach(t),Qe=p(e),K=a(e,"P",{});var Ji=s(K);Kt=r(Ji,"And that\u2019s that - exciting Unix fun."),Ji.forEach(t),this.h()},h(){c(k,"class","language-sh"),c(Q,"class","icon icon-link"),c(g,"aria-hidden","true"),c(g,"tabindex","-1"),c(g,"href","#finding-files-matching-a-set-of-conditions"),c(y,"id","finding-files-matching-a-set-of-conditions"),c(M,"href","http://unixhelp.ed.ac.uk/CGI/man-cgi?find"),c(M,"rel","nofollow"),c(F,"class","language-sh"),c(h,"class","code-breakdown"),c(fe,"class","icon icon-link"),c(b,"aria-hidden","true"),c(b,"tabindex","-1"),c(b,"href","#delete-all-git-directories-from-a-project"),c(E,"id","delete-all-git-directories-from-a-project"),c(q,"class","language-sh"),c(N,"class","long-line"),c(U,"class","long-line"),c(w,"class","code-breakdown"),c(_e,"class","icon icon-link"),c(I,"aria-hidden","true"),c(I,"tabindex","-1"),c(I,"href","#finding-files-and-passimg-them-to-the-cp-command"),c(R,"id","finding-files-and-passimg-them-to-the-cp-command"),c(P,"class","language-sh"),c(A,"class","language-sh"),c(ye,"class","icon icon-link"),c(x,"aria-hidden","true"),c(x,"tabindex","-1"),c(x,"href","#using-cpio-to-copy-files"),c(O,"id","using-cpio-to-copy-files"),c(j,"href","http://en.wikipedia.org/wiki/Cpio"),c(j,"rel","nofollow"),c(L,"class","language-sh"),c(z,"class","long-line"),c(B,"class","long-line"),c(m,"class","code-breakdown")},m(e,l){d(e,_,l),i(_,Ye),d(e,xe,l),d(e,k,l),k.innerHTML=Bi,d(e,ke,l),d(e,y,l),i(y,g),i(g,Q),i(y,Ze),d(e,Me,l),d(e,D,l),i(D,et),i(D,M),i(M,tt),i(D,it),d(e,Fe,l),d(e,F,l),F.innerHTML=Ki,d(e,qe,l),d(e,$,l),i($,ot),d(e,Pe,l),d(e,h,l),i(h,V),i(V,at),i(h,W),i(W,st),i(h,Y),i(Y,nt),i(h,Z),i(Z,rt),i(h,ee),i(ee,lt),i(h,te),i(te,dt),i(h,ie),i(ie,ct),i(h,oe),i(oe,ht),i(h,ae),i(ae,ft),i(h,se),i(se,pt),i(h,ne),i(ne,ut),i(h,re),i(re,mt),i(h,le),i(le,wt),i(h,de),i(de,vt),i(h,ce),i(ce,_t),i(h,he),i(he,yt),d(e,Ae,l),d(e,E,l),i(E,b),i(b,fe),i(E,gt),d(e,He,l),d(e,T,l),i(T,Dt),i(T,pe),i(pe,Et),i(T,bt),d(e,je,l),d(e,C,l),i(C,Tt),d(e,Le,l),d(e,q,l),q.innerHTML=Qi,d(e,Se,l),d(e,w,l),i(w,ue),i(ue,Rt),i(w,me),i(me,It),i(w,N),i(N,Ot),i(w,U),i(U,xt),i(w,we),i(we,kt),i(w,ve),i(ve,Mt),d(e,$e,l),d(e,X,l),i(X,Ft),d(e,Ce,l),d(e,R,l),i(R,I),i(I,_e),i(R,qt),d(e,Ne,l),d(e,G,l),i(G,Pt),d(e,Ue,l),d(e,P,l),P.innerHTML=Vi,d(e,Xe,l),d(e,J,l),i(J,At),d(e,Ge,l),d(e,A,l),A.innerHTML=Wi,d(e,Je,l),d(e,O,l),i(O,x),i(x,ye),i(O,Ht),d(e,ze,l),d(e,H,l),i(H,j),i(j,jt),i(H,Lt),d(e,Be,l),d(e,L,l),L.innerHTML=Yi,d(e,Ke,l),d(e,m,l),i(m,ge),i(ge,St),i(m,De),i(De,$t),i(m,z),i(z,Ct),i(m,B),i(B,Nt),i(m,Ee),i(Ee,Ut),i(m,be),i(be,Xt),i(m,Te),i(Te,Gt),i(m,Re),i(Re,Jt),i(m,Ie),i(Ie,zt),i(m,Oe),i(Oe,Bt),d(e,Qe,l),d(e,K,l),i(K,Kt)},p:ei,i:ei,o:ei,d(e){e&&t(_),e&&t(xe),e&&t(k),e&&t(ke),e&&t(y),e&&t(Me),e&&t(D),e&&t(Fe),e&&t(F),e&&t(qe),e&&t($),e&&t(Pe),e&&t(h),e&&t(Ae),e&&t(E),e&&t(He),e&&t(T),e&&t(je),e&&t(C),e&&t(Le),e&&t(q),e&&t(Se),e&&t(w),e&&t($e),e&&t(X),e&&t(Ce),e&&t(R),e&&t(Ne),e&&t(G),e&&t(Ue),e&&t(P),e&&t(Xe),e&&t(J),e&&t(Ge),e&&t(A),e&&t(Je),e&&t(O),e&&t(ze),e&&t(H),e&&t(Be),e&&t(L),e&&t(Ke),e&&t(m),e&&t(Qe),e&&t(K)}}}const ho={date:"2013-03-23 11:23",title:"Copying sourcefiles without .git folders with cpio",published:!0,prev:"os-x-extended-attibutes",next:"install-specific-version-homebrew",tags:["bash"],excerpt:"Sometimes you need to copy your local version of a project under subversion to a new location, without all the .git stuff. Here's a couple of ways of doing it."};class fo extends so{constructor(_){super();no(this,_,null,lo,ro,{})}}export{fo as default,ho as metadata};
