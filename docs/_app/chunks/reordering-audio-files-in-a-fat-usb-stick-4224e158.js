import{S as Ko,i as Qo,s as $o,e as s,t as l,j as f,c as a,a as i,d as t,g as n,l as p,b as u,f as d,F as o,J as io}from"./vendor-2f9f7cb3.js";function go(Uo){let m,b,ee,ge,Te,X,et,Ae,J,tt,De,c,ot,te,st,at,oe,it,rt,se,lt,nt,ae,ut,dt,ie,ft,pt,re,ct,ht,xe,Z,mt,Pe,y,_,le,vt,Be,z,Et,Oe,I,S,ne,kt,Ce,K,wt,Fe,N,jo=`<code class="language-bash"><span class="token operator">></span> brew <span class="token function">install</span> fatsort
<span class="token operator">==</span><span class="token operator">></span> Downloading https://ghcr.io/v2/homebrew/core/help2man/manifests/1.49.1
<span class="token punctuation">..</span>.</code>`,Re,T,A,ue,bt,He,v,yt,de,_t,It,fe,St,Tt,Le,M,Vo=`<code class="language-bash"><span class="token operator">></span> fatsort /Volumes/DIE_DREI
device_open: Is a directory<span class="token operator">!</span>
openFileSystem: Is a directory<span class="token operator">!</span>
sortFileSystem: Failed to <span class="token function">open</span> <span class="token function">file</span> system<span class="token operator">!</span>
main: Failed to <span class="token function">sort</span> <span class="token function">file</span> system<span class="token operator">!</span></code>`,Ne,E,At,pe,Dt,xt,ce,Pt,Bt,Me,U,Yo=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mount</span>
 /dev/disk1s5s1 on / <span class="token punctuation">(</span>apfs, sealed, local, read-only, journaled<span class="token punctuation">)</span>
devfs on /dev <span class="token punctuation">(</span>devfs, local, nobrowse<span class="token punctuation">)</span>
/dev/disk1s2 on /System/Volumes/Preboot <span class="token punctuation">(</span>apfs, local, journaled, nobrowse<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
/dev/disk5s1 on /Volumes/DIE_DREI <span class="token punctuation">(</span>msdos, local, nodev, nosuid, noowners<span class="token punctuation">)</span></code>`,Ue,D,Ot,he,Ct,Ft,je,x,P,me,Rt,Ve,k,ve,Ht,Lt,Ee,Nt,Mt,Ye,j,Wo=`<code class="language-bash"><span class="token operator">></span>  <span class="token function">sudo</span> diskutil unmount /Volumes/DIE_DREI
Password:
 Volume DIE_DREI on disk5s1 unmounted</code>`,We,B,O,ke,Ut,qe,Q,jt,Ge,V,qo=`<code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> fatsort /dev/disk5s
File system: FAT32.

Sorting directory /
<span class="token punctuation">..</span>.
Directory reordered. Writing changes.</code>`,Xe,C,F,we,Vt,Je,w,Yt,be,Wt,qt,Y,Gt,Ze,R,H,ye,Xt,ze,L,_e,W,Jt,Zt,q,zt,G,Kt,Qt;return{c(){m=s("h2"),b=s("a"),ee=s("span"),ge=l("FAT formatting"),Te=f(),X=s("p"),et=l("I use Macs, and have no use for the FAT system. But it is the most widely supported by consumer devices like my SONY CD/MP3 player, for example. So i have no choice."),Ae=f(),J=s("p"),tt=l("Those devices play back songs in date creation order. That would be the creation time on the stick; i.e., the time one started transferring them to the stick. Your typical laptop copies a few of these files in parallel. So one never knows what those creation times might be. This is why they get jumbled up."),De=f(),c=s("p"),ot=l("One solution could be to write a little script to change those times after copying those files. It could traverse the directory structure of the stick, and use the bash command "),te=s("code"),st=l("touch"),at=l(". Or its python version. But it turns out neither works well on FAT. The python version of touch, "),oe=s("code"),it=l("os.utime"),rt=l(", doesn\u2019t handle creation time. There are extensions which seem would work well, like "),se=s("code"),lt=l("pywintypes"),nt=l(", "),ae=s("code"),ut=l("win32file"),dt=l(", "),ie=s("code"),ft=l("wintypes"),pt=l(" or "),re=s("code"),ct=l("win32-setctime"),ht=l(". But they rely on C executables that only run on Windows."),xe=f(),Z=s("p"),mt=l("A better solution would be to write a script that copies the files one at the time. With a little pause to make sure the creation times are in order. That should work. But it would make copying files last much longer."),Pe=f(),y=s("h2"),_=s("a"),le=s("span"),vt=l("Enter fatsort"),Be=f(),z=s("p"),Et=l("Luckily there is a C utility that does the job quite well. And there is a precompiled version for homebrew, the standard installer for OS X."),Oe=f(),I=s("h3"),S=s("a"),ne=s("span"),kt=l("Step 1: install it"),Ce=f(),K=s("p"),wt=l("Your typical homebrew installation"),Fe=f(),N=s("pre"),Re=f(),T=s("h3"),A=s("a"),ue=s("span"),bt=l("Step 2: find out where the drive is mounted"),He=f(),v=s("p"),yt=l("The first instinct is to run it on the drive as it appears in Finder, i.e. "),de=s("code"),_t=l("/Volumes/--SOMETHING--"),It=l(". So for my USB stick, called "),fe=s("code"),St=l("DIE_DREI"),Tt=l(", it would be like in the command below. But that turns out to be too easy"),Le=f(),M=s("pre"),Ne=f(),E=s("p"),At=l("Instead I needed to find out what directory the USB device is "),pe=s("em"),Dt=l("mounted to"),xt=l(". There is a handy command for that, "),ce=s("code"),Pt=l("mount"),Bt=l(". So step 2 goes"),Me=f(),U=s("pre"),Ue=f(),D=s("p"),Ot=l("It\u2019s "),he=s("code"),Ct=l("/dev/disk5s1"),Ft=l(" I need to run fatsort on, not /Volumes/DIE_DREI."),je=f(),x=s("h3"),P=s("a"),me=s("span"),Rt=l("Step 3: unmount the drive"),Ve=f(),k=s("p"),ve=s("code"),Ht=l("fatsort"),Lt=l(" doesn\u2019t work on the USB stick if it\u2019s mounted. I didn\u2019t even know a device\u2019s content would be available even after unmounted! TIL. To unmount and run the next steps I will need "),Ee=s("code"),Nt=l("sudo"),Mt=l(" to gain superuser permissions"),Ye=f(),j=s("pre"),We=f(),B=s("h3"),O=s("a"),ke=s("span"),Ut=l("Step 4: reorder the files"),qe=f(),Q=s("p"),jt=l("Now I am ready to reorder the files"),Ge=f(),V=s("pre"),Xe=f(),C=s("h2"),F=s("a"),we=s("span"),Vt=l("And that was it."),Je=f(),w=s("p"),Yt=l("It only takes a few seconds. It\u2019s a great little tool. Thanks Boris! If you enter "),be=s("code"),Wt=l("fatsort -h"),qt=l(" you can "),Y=s("a"),Gt=l("see some of the options you can pass to it"),Ze=f(),R=s("h2"),H=s("a"),ye=s("span"),Xt=l("Prior art"),ze=f(),L=s("ul"),_e=s("li"),W=s("a"),Jt=l("fatsort homepage"),Zt=f(),q=s("li"),zt=l("I found "),G=s("a"),Kt=l("useful information about fatsort"),Qt=l(" in a blog called \u2018Unfinished Bitness\u2019"),this.h()},l(e){m=a(e,"H2",{id:!0});var r=i(m);b=a(r,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ro=i(b);ee=a(ro,"SPAN",{class:!0}),i(ee).forEach(t),ro.forEach(t),ge=n(r,"FAT formatting"),r.forEach(t),Te=p(e),X=a(e,"P",{});var lo=i(X);et=n(lo,"I use Macs, and have no use for the FAT system. But it is the most widely supported by consumer devices like my SONY CD/MP3 player, for example. So i have no choice."),lo.forEach(t),Ae=p(e),J=a(e,"P",{});var no=i(J);tt=n(no,"Those devices play back songs in date creation order. That would be the creation time on the stick; i.e., the time one started transferring them to the stick. Your typical laptop copies a few of these files in parallel. So one never knows what those creation times might be. This is why they get jumbled up."),no.forEach(t),De=p(e),c=a(e,"P",{});var h=i(c);ot=n(h,"One solution could be to write a little script to change those times after copying those files. It could traverse the directory structure of the stick, and use the bash command "),te=a(h,"CODE",{});var uo=i(te);st=n(uo,"touch"),uo.forEach(t),at=n(h,". Or its python version. But it turns out neither works well on FAT. The python version of touch, "),oe=a(h,"CODE",{});var fo=i(oe);it=n(fo,"os.utime"),fo.forEach(t),rt=n(h,", doesn\u2019t handle creation time. There are extensions which seem would work well, like "),se=a(h,"CODE",{});var po=i(se);lt=n(po,"pywintypes"),po.forEach(t),nt=n(h,", "),ae=a(h,"CODE",{});var co=i(ae);ut=n(co,"win32file"),co.forEach(t),dt=n(h,", "),ie=a(h,"CODE",{});var ho=i(ie);ft=n(ho,"wintypes"),ho.forEach(t),pt=n(h," or "),re=a(h,"CODE",{});var mo=i(re);ct=n(mo,"win32-setctime"),mo.forEach(t),ht=n(h,". But they rely on C executables that only run on Windows."),h.forEach(t),xe=p(e),Z=a(e,"P",{});var vo=i(Z);mt=n(vo,"A better solution would be to write a script that copies the files one at the time. With a little pause to make sure the creation times are in order. That should work. But it would make copying files last much longer."),vo.forEach(t),Pe=p(e),y=a(e,"H2",{id:!0});var $t=i(y);_=a($t,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Eo=i(_);le=a(Eo,"SPAN",{class:!0}),i(le).forEach(t),Eo.forEach(t),vt=n($t,"Enter fatsort"),$t.forEach(t),Be=p(e),z=a(e,"P",{});var ko=i(z);Et=n(ko,"Luckily there is a C utility that does the job quite well. And there is a precompiled version for homebrew, the standard installer for OS X."),ko.forEach(t),Oe=p(e),I=a(e,"H3",{id:!0});var gt=i(I);S=a(gt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wo=i(S);ne=a(wo,"SPAN",{class:!0}),i(ne).forEach(t),wo.forEach(t),kt=n(gt,"Step 1: install it"),gt.forEach(t),Ce=p(e),K=a(e,"P",{});var bo=i(K);wt=n(bo,"Your typical homebrew installation"),bo.forEach(t),Fe=p(e),N=a(e,"PRE",{class:!0});var Go=i(N);Go.forEach(t),Re=p(e),T=a(e,"H3",{id:!0});var eo=i(T);A=a(eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yo=i(A);ue=a(yo,"SPAN",{class:!0}),i(ue).forEach(t),yo.forEach(t),bt=n(eo,"Step 2: find out where the drive is mounted"),eo.forEach(t),He=p(e),v=a(e,"P",{});var $=i(v);yt=n($,"The first instinct is to run it on the drive as it appears in Finder, i.e. "),de=a($,"CODE",{});var _o=i(de);_t=n(_o,"/Volumes/--SOMETHING--"),_o.forEach(t),It=n($,". So for my USB stick, called "),fe=a($,"CODE",{});var Io=i(fe);St=n(Io,"DIE_DREI"),Io.forEach(t),Tt=n($,", it would be like in the command below. But that turns out to be too easy"),$.forEach(t),Le=p(e),M=a(e,"PRE",{class:!0});var Xo=i(M);Xo.forEach(t),Ne=p(e),E=a(e,"P",{});var g=i(E);At=n(g,"Instead I needed to find out what directory the USB device is "),pe=a(g,"EM",{});var So=i(pe);Dt=n(So,"mounted to"),So.forEach(t),xt=n(g,". There is a handy command for that, "),ce=a(g,"CODE",{});var To=i(ce);Pt=n(To,"mount"),To.forEach(t),Bt=n(g,". So step 2 goes"),g.forEach(t),Me=p(e),U=a(e,"PRE",{class:!0});var Jo=i(U);Jo.forEach(t),Ue=p(e),D=a(e,"P",{});var Ke=i(D);Ot=n(Ke,"It\u2019s "),he=a(Ke,"CODE",{});var Ao=i(he);Ct=n(Ao,"/dev/disk5s1"),Ao.forEach(t),Ft=n(Ke," I need to run fatsort on, not /Volumes/DIE_DREI."),Ke.forEach(t),je=p(e),x=a(e,"H3",{id:!0});var to=i(x);P=a(to,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Do=i(P);me=a(Do,"SPAN",{class:!0}),i(me).forEach(t),Do.forEach(t),Rt=n(to,"Step 3: unmount the drive"),to.forEach(t),Ve=p(e),k=a(e,"P",{});var Ie=i(k);ve=a(Ie,"CODE",{});var xo=i(ve);Ht=n(xo,"fatsort"),xo.forEach(t),Lt=n(Ie," doesn\u2019t work on the USB stick if it\u2019s mounted. I didn\u2019t even know a device\u2019s content would be available even after unmounted! TIL. To unmount and run the next steps I will need "),Ee=a(Ie,"CODE",{});var Po=i(Ee);Nt=n(Po,"sudo"),Po.forEach(t),Mt=n(Ie," to gain superuser permissions"),Ie.forEach(t),Ye=p(e),j=a(e,"PRE",{class:!0});var Zo=i(j);Zo.forEach(t),We=p(e),B=a(e,"H3",{id:!0});var oo=i(B);O=a(oo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bo=i(O);ke=a(Bo,"SPAN",{class:!0}),i(ke).forEach(t),Bo.forEach(t),Ut=n(oo,"Step 4: reorder the files"),oo.forEach(t),qe=p(e),Q=a(e,"P",{});var Oo=i(Q);jt=n(Oo,"Now I am ready to reorder the files"),Oo.forEach(t),Ge=p(e),V=a(e,"PRE",{class:!0});var zo=i(V);zo.forEach(t),Xe=p(e),C=a(e,"H2",{id:!0});var so=i(C);F=a(so,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Co=i(F);we=a(Co,"SPAN",{class:!0}),i(we).forEach(t),Co.forEach(t),Vt=n(so,"And that was it."),so.forEach(t),Je=p(e),w=a(e,"P",{});var Se=i(w);Yt=n(Se,"It only takes a few seconds. It\u2019s a great little tool. Thanks Boris! If you enter "),be=a(Se,"CODE",{});var Fo=i(be);Wt=n(Fo,"fatsort -h"),Fo.forEach(t),qt=n(Se," you can "),Y=a(Se,"A",{href:!0,rel:!0});var Ro=i(Y);Gt=n(Ro,"see some of the options you can pass to it"),Ro.forEach(t),Se.forEach(t),Ze=p(e),R=a(e,"H2",{id:!0});var ao=i(R);H=a(ao,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ho=i(H);ye=a(Ho,"SPAN",{class:!0}),i(ye).forEach(t),Ho.forEach(t),Xt=n(ao,"Prior art"),ao.forEach(t),ze=p(e),L=a(e,"UL",{});var Qe=i(L);_e=a(Qe,"LI",{});var Lo=i(_e);W=a(Lo,"A",{href:!0,rel:!0});var No=i(W);Jt=n(No,"fatsort homepage"),No.forEach(t),Lo.forEach(t),Zt=p(Qe),q=a(Qe,"LI",{});var $e=i(q);zt=n($e,"I found "),G=a($e,"A",{href:!0,rel:!0});var Mo=i(G);Kt=n(Mo,"useful information about fatsort"),Mo.forEach(t),Qt=n($e," in a blog called \u2018Unfinished Bitness\u2019"),$e.forEach(t),Qe.forEach(t),this.h()},h(){u(ee,"class","icon icon-link"),u(b,"aria-hidden","true"),u(b,"tabindex","-1"),u(b,"href","#fat-formatting"),u(m,"id","fat-formatting"),u(le,"class","icon icon-link"),u(_,"aria-hidden","true"),u(_,"tabindex","-1"),u(_,"href","#enter-fatsort"),u(y,"id","enter-fatsort"),u(ne,"class","icon icon-link"),u(S,"aria-hidden","true"),u(S,"tabindex","-1"),u(S,"href","#step-1-install-it"),u(I,"id","step-1-install-it"),u(N,"class","language-bash"),u(ue,"class","icon icon-link"),u(A,"aria-hidden","true"),u(A,"tabindex","-1"),u(A,"href","#step-2-find-out-where-the-drive-is-mounted"),u(T,"id","step-2-find-out-where-the-drive-is-mounted"),u(M,"class","language-bash"),u(U,"class","language-bash"),u(me,"class","icon icon-link"),u(P,"aria-hidden","true"),u(P,"tabindex","-1"),u(P,"href","#step-3-unmount-the-drive"),u(x,"id","step-3-unmount-the-drive"),u(j,"class","language-bash"),u(ke,"class","icon icon-link"),u(O,"aria-hidden","true"),u(O,"tabindex","-1"),u(O,"href","#step-4-reorder-the-files"),u(B,"id","step-4-reorder-the-files"),u(V,"class","language-bash"),u(we,"class","icon icon-link"),u(F,"aria-hidden","true"),u(F,"tabindex","-1"),u(F,"href","#and-that-was-it"),u(C,"id","and-that-was-it"),u(Y,"href","https://fatsort.sourceforge.io/fatsort.1.html"),u(Y,"rel","nofollow"),u(ye,"class","icon icon-link"),u(H,"aria-hidden","true"),u(H,"tabindex","-1"),u(H,"href","#prior-art"),u(R,"id","prior-art"),u(W,"href","https://fatsort.sourceforge.io/"),u(W,"rel","nofollow"),u(G,"href","https://unfinishedbitness.info/2014/04/16/alphabetically-sorting-fat-usb-drives-with-mac-osx/"),u(G,"rel","nofollow")},m(e,r){d(e,m,r),o(m,b),o(b,ee),o(m,ge),d(e,Te,r),d(e,X,r),o(X,et),d(e,Ae,r),d(e,J,r),o(J,tt),d(e,De,r),d(e,c,r),o(c,ot),o(c,te),o(te,st),o(c,at),o(c,oe),o(oe,it),o(c,rt),o(c,se),o(se,lt),o(c,nt),o(c,ae),o(ae,ut),o(c,dt),o(c,ie),o(ie,ft),o(c,pt),o(c,re),o(re,ct),o(c,ht),d(e,xe,r),d(e,Z,r),o(Z,mt),d(e,Pe,r),d(e,y,r),o(y,_),o(_,le),o(y,vt),d(e,Be,r),d(e,z,r),o(z,Et),d(e,Oe,r),d(e,I,r),o(I,S),o(S,ne),o(I,kt),d(e,Ce,r),d(e,K,r),o(K,wt),d(e,Fe,r),d(e,N,r),N.innerHTML=jo,d(e,Re,r),d(e,T,r),o(T,A),o(A,ue),o(T,bt),d(e,He,r),d(e,v,r),o(v,yt),o(v,de),o(de,_t),o(v,It),o(v,fe),o(fe,St),o(v,Tt),d(e,Le,r),d(e,M,r),M.innerHTML=Vo,d(e,Ne,r),d(e,E,r),o(E,At),o(E,pe),o(pe,Dt),o(E,xt),o(E,ce),o(ce,Pt),o(E,Bt),d(e,Me,r),d(e,U,r),U.innerHTML=Yo,d(e,Ue,r),d(e,D,r),o(D,Ot),o(D,he),o(he,Ct),o(D,Ft),d(e,je,r),d(e,x,r),o(x,P),o(P,me),o(x,Rt),d(e,Ve,r),d(e,k,r),o(k,ve),o(ve,Ht),o(k,Lt),o(k,Ee),o(Ee,Nt),o(k,Mt),d(e,Ye,r),d(e,j,r),j.innerHTML=Wo,d(e,We,r),d(e,B,r),o(B,O),o(O,ke),o(B,Ut),d(e,qe,r),d(e,Q,r),o(Q,jt),d(e,Ge,r),d(e,V,r),V.innerHTML=qo,d(e,Xe,r),d(e,C,r),o(C,F),o(F,we),o(C,Vt),d(e,Je,r),d(e,w,r),o(w,Yt),o(w,be),o(be,Wt),o(w,qt),o(w,Y),o(Y,Gt),d(e,Ze,r),d(e,R,r),o(R,H),o(H,ye),o(R,Xt),d(e,ze,r),d(e,L,r),o(L,_e),o(_e,W),o(W,Jt),o(L,Zt),o(L,q),o(q,zt),o(q,G),o(G,Kt),o(q,Qt)},p:io,i:io,o:io,d(e){e&&t(m),e&&t(Te),e&&t(X),e&&t(Ae),e&&t(J),e&&t(De),e&&t(c),e&&t(xe),e&&t(Z),e&&t(Pe),e&&t(y),e&&t(Be),e&&t(z),e&&t(Oe),e&&t(I),e&&t(Ce),e&&t(K),e&&t(Fe),e&&t(N),e&&t(Re),e&&t(T),e&&t(He),e&&t(v),e&&t(Le),e&&t(M),e&&t(Ne),e&&t(E),e&&t(Me),e&&t(U),e&&t(Ue),e&&t(D),e&&t(je),e&&t(x),e&&t(Ve),e&&t(k),e&&t(Ye),e&&t(j),e&&t(We),e&&t(B),e&&t(qe),e&&t(Q),e&&t(Ge),e&&t(V),e&&t(Xe),e&&t(C),e&&t(Je),e&&t(w),e&&t(Ze),e&&t(R),e&&t(ze),e&&t(L)}}}const ts={excerpt:'I copy audiobooks from CDs to USB sticks to play them in cars and random device like old radios. But often those devices play the files out of order. Reordering files in <abbr title="File Allocation Table">FAT</abbr> USB sticks is harder than I thought. Luckily, a chap by the name of Boris Leidner has written a useful tool for that.',date:"2022-04-01T00:00:00.000Z",published:!0,archived:!1,prev:"fixing-autoformatting-django-templates-in-visual-studio-code",next:"blog-with-sveltekit-and-markdown",title:"Reordering audio files in a FAT USB stick",tags:["tools"]};class os extends Ko{constructor(m){super();Qo(this,m,null,go,$o,{})}}export{os as default,ts as metadata};
