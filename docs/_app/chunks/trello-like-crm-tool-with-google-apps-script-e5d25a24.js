import{S as Zr,i as $r,s as en,e as o,t as u,k as p,c as i,a as l,d as t,h,m as d,b as s,g as n,I as a,E as ws}from"./index-6e518972.js";function tn(Qr){let E,P,et,ko,fa,S,tt,_o,So,Oe,Po,xo,ca,Le,at,To,Oo,ma,x,T,ot,Lo,ya,qe,Co,va,O,L,it,qo,wa,Ge,Go,ba,C,q,lt,Mo,Ea,G,Ro,Me,No,Yo,Aa,M,Ho,st,jo,Bo,ga,f,rt,Uo,Do,nt,Fo,Vo,ut,Wo,Xo,ht,Jo,Ko,pt,zo,Qo,dt,Zo,Ia,R,N,ft,$o,ka,Y,ei,Ce,ti,ai,_a,H,j,ct,oi,Sa,Re,ii,Pa,B,li,Ne,si,ri,xa,U,D,mt,ni,Ta,F,ui,yt,hi,pi,Oa,V,W,vt,di,La,A,fi,wt,ci,mi,bt,yi,vi,Ca,X,wi,Et,bi,Ei,qa,J,K,At,Ai,Ga,Ye,gi,Ma,z,Q,gt,Ii,Ra,Z,$,It,ki,Na,He,_i,Ya,y,kt,Si,Pi,_t,xi,Ti,St,Oi,Li,Pt,Ci,Ha,c,qi,xt,Gi,Mi,Tt,Ri,Ni,Ot,Yi,Hi,Lt,ji,Bi,ja,je,Ui,Ba,ee,te,Ct,Di,Ua,Be,Fi,Da,v,qt,Vi,Wi,Gt,Xi,Ji,Mt,Ki,zi,Rt,Qi,Fa,Ue,Zi,Va,m,Nt,$i,el,Yt,tl,al,Ht,ol,il,jt,ll,sl,Bt,rl,Wa,ae,oe,Ut,nl,Xa,De,ul,Ja,Fe,hl,Ka,w,Dt,pl,dl,Ft,fl,cl,Vt,ml,yl,Wt,vl,za,ie,le,Xt,wl,Qa,Ve,bl,Za,We,El,$a,Xe,Al,eo,g,Jt,gl,Il,Kt,kl,_l,zt,Sl,to,se,re,Qt,Pl,ao,ne,Zt,xl,Tl,$t,Ol,oo,ue,he,ea,Ll,io,pe,de,ta,Cl,lo,fe,ce,aa,ql,so,me,ye,oa,Gl,ro,ve,we,ia,Ml,no,be,Ee,la,Rl,uo,Ae,ge,sa,Nl,ho,Ie,ke,ra,Yl,po,_e,Se,na,Hl,fo,Je,jl,co,Ke,Bl,mo,I,ua,Ul,Dl,ha,Fl,Vl,pa,Wl,yo,ze,Xl;return{c(){E=o("h2"),P=o("a"),et=o("span"),ko=u("Need a CRM? Why not just use \u2026?"),fa=p(),S=o("p"),tt=o("em"),_o=u("Why not just use a real CRM"),So=u("? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),Oe=o("a"),Po=u("Capsule"),xo=u(" and I found I spent most of my time trying to bend it to my needs."),ca=p(),Le=o("p"),at=o("em"),To=u("Why not just use Trello"),Oo=u("? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),ma=p(),x=o("h2"),T=o("a"),ot=o("span"),Lo=u("Google Sheets with Apps Script is a great tool for quick tools and prototypes"),ya=p(),qe=o("p"),Co=u("Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),va=p(),O=o("h2"),L=o("a"),it=o("span"),qo=u("Tips on using Google Apps Script for prototyping"),wa=p(),Ge=o("p"),Go=u("In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),ba=p(),C=o("h3"),q=o("a"),lt=o("span"),Mo=u("1. Explicit interactions vs trying to build a SPA"),Ea=p(),G=o("p"),Ro=u("Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),Me=o("abbr"),No=u("SPA"),Yo=u(" with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),Aa=p(),M=o("p"),Ho=u("Just build your \u201Capp\u201D like in the good old days of the "),st=o("code"),jo=u("cgi-bin"),Bo=u(". That is, completely stateless. The typical flow would be:"),ga=p(),f=o("ol"),rt=o("li"),Uo=u("User selects cell(s) in worksheet (optional)"),Do=p(),nt=o("li"),Fo=u("User selects an entry from a custom menu"),Vo=p(),ut=o("li"),Wo=u("The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s state from it"),Xo=p(),ht=o("li"),Jo=u("the script does what it needs to do, which likely involves updating the spreadsheet"),Ko=p(),pt=o("li"),zo=u("the scripts finishes and the user is free to mess with the spreadsheet manuall"),Qo=p(),dt=o("li"),Zo=u("back to 1."),Ia=p(),R=o("h3"),N=o("a"),ft=o("span"),$o=u("2. Resist the temptation to start coding straight away"),ka=p(),Y=o("p"),ei=u("The nice thing about prototyping with Google Sheets is that you don\u2019t have need scripting. You can start doing everything completely manually. You\u2019ll need a bit of discipline to perform all the steps a script would do. But it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Ce=o("a"),ti=u("Lean"),ai=u(" than that!"),_a=p(),H=o("h3"),j=o("a"),ct=o("span"),oi=u("3. Model your problem space first"),Sa=p(),Re=o("p"),ii=u("For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),Pa=p(),B=o("p"),li=u("Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ne=o("abbr"),si=u("OOP"),ri=u(", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),xa=p(),U=o("h4"),D=o("a"),mt=o("span"),ni=u("Mapping your problem space to a spreadsheet"),Ta=p(),F=o("p"),ui=u("At the simplest level, spreadsheets are three levels hierarchies. You have sheets, rows, and cells. You could also add a fourth level, documents to that mix. But then it gets slightly awkward with having to grant permissions to each new document. I would avoid it. If you need extra dimensions, you can always use a naming convention for your sheets. A classic case would be renaming your sheets \u2018ARCHIVE-XXX\u2019 for archives, and \u2018CURRENT-yyyy\u2019 for those "),yt=o("em"),hi=u("things"),pi=u(" your app deals which are still ongoing. Or you could designate different areas of each sheets for different purposes. For example, in a recipe app, the first column could be for ingredients, the second for steps."),Oa=p(),V=o("h3"),W=o("a"),vt=o("span"),di=u("4. OOP is actually quite helpful (but there is a place for some FP too)"),La=p(),A=o("p"),fi=u("GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),wt=o("code"),ci=u("recalculateAmount"),mi=u(" method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),bt=o("code"),yi=u("convertToMetric"),vi=u(" method to your Ingredient class. And so on. It keeps everything neat"),Ca=p(),X=o("p"),wi=u("FP becomes useful when you want to share utilities, especially formatting. For example, an "),Et=o("code"),bi=u("asArchive"),Ei=u(" function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),qa=p(),J=o("h3"),K=o("a"),At=o("span"),Ai=u("5. Testing is not a solved problem"),Ga=p(),Ye=o("p"),gi=u("\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),Ma=p(),z=o("h2"),Q=o("a"),gt=o("span"),Ii=u("Designing a CRM app"),Ra=p(),Z=o("h3"),$=o("a"),It=o("span"),ki=u("Step 1: Defining the problem"),Na=p(),He=o("p"),_i=u("As a job seeker I have quite simple needs. In short:"),Ya=p(),y=o("ul"),kt=o("li"),Si=u("keep a record of all the various live opportunities and where I am at with them"),Pi=p(),_t=o("li"),xi=u("let me know when I need to to something next\u2026"),Ti=p(),St=o("li"),Oi=u("\u2026including chasing up opportunities that have potentially gone cold"),Li=p(),Pt=o("li"),Ci=u("archive opportunities when they are no longer active so that I can easily find out if I have already some history with recruiter x or company y"),Ha=p(),c=o("p"),qi=u("So the basic entities for my CRM are "),xt=o("strong"),Gi=u("Opportunities"),Mi=u(". Each of them has some metadata, and a sequence of "),Tt=o("strong"),Ri=u("Steps"),Ni=u(". Opportunities are either Live or Archived. \u201CLive\u201D, \u201CArchive X\u201D, \u201CArchive Y\u201D, \u2026 could be considered a type of Opportunities "),Ot=o("strong"),Yi=u("Pool"),Hi=u(". Plus of course an "),Lt=o("strong"),ji=u("App"),Bi=u(" entity. There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me achieve my goals. I\u2019ll just treat that information as background noise which I need to move around but not process."),ja=p(),je=o("p"),Ui=u("Now I need to flesh out some details of each entity"),Ba=p(),ee=o("h4"),te=o("a"),Ct=o("span"),Di=u("(Opportunity) Pools"),Ua=p(),Be=o("p"),Fi=u("A Pool (=collection) of Opportunities. Pools don\u2019t need to know why certain Opportunities are inside it. All it cares about is managing them. It\u2019s the App entity which moves Opportunities from one Pool to another. can contain Live or Archived. As it happens, I only need a single Live. But I will need different types of archives. A Pool doesn\u2019t have any meta information other than which type it is. That can be easily encoded in the sheet name This can map to a GAS Sheet."),Da=p(),v=o("ul"),qt=o("li"),Vi=u("Live Pool (name: LIVE)"),Wi=p(),Gt=o("li"),Xi=u("a \u2018promising\u2019 Pool, for opportunities that may be worth revisiting later (name: ARCHIVE PROMISING)"),Ji=p(),Mt=o("li"),Ki=u("a \u2018trash\u2019 Pool, for wastes of time and I never want to hear of the people involved again (name: ARCHIVE BLACKLIST)"),zi=p(),Rt=o("li"),Qi=u("a Pool for each quarter or semester (name: ARCHIVE YYYY-QQ)"),Fa=p(),Ue=o("p"),Zi=u("A Pool can:"),Va=p(),m=o("ul"),Nt=o("li"),$i=u("Displays the Opportunities within it"),el=p(),Yt=o("li"),tl=u("Create a new Opportunity (at the top)"),al=p(),Ht=o("li"),ol=u("Duplicate an Opportunity"),il=p(),jt=o("li"),ll=u("Sort the Opportunities within it (descending by date)"),sl=p(),Bt=o("li"),rl=u("\u201CClose\u201D a Live opportunity (a special case of \u2018Move an Opportunity\u2019)"),Wa=p(),ae=o("h4"),oe=o("a"),Ut=o("span"),nl=u("Opportunity"),Xa=p(),De=o("p"),ul=u("These can be represented by rows in a sheet (=Pool). They actually have quite a fair amount of metadata (company name, name of position, job description, salary, location, role, tech stack, state). I will store that metadata in the leftmost cell of the row, cell 1. They consist of a sequence of Steps, and the initial Step is a special one which will always be displayed at cell 2."),Ja=p(),Fe=o("p"),hl=u("An Opportunity can:"),Ka=p(),w=o("ul"),Dt=o("li"),pl=u("Be displayed in a Pool"),dl=p(),Ft=o("li"),fl=u("Create a \u2018next\u2019 Step"),cl=p(),Vt=o("li"),ml=u("Change state"),yl=p(),Wt=o("li"),vl=u("Change some of its metadata"),za=p(),ie=o("h4"),le=o("a"),Xt=o("span"),wl=u("Step"),Qa=p(),Ve=o("p"),bl=u("These are cells within an Opportunity. The initial Step is special and will always be shown in cell 2, next to the metadata. Column 1 and 2 are frozen, so they will always be in sight. All following steps will be added from column 3 on, but backwards. So cell 3 will always be the latest Step, cell 4 the one before it, and so on. That may sound weird, but it came after a fair amount of manual experimentation. It allows me to have all the latest steps neatly aligned on top of each other. The earliest steps are not as important, so they can be out of sight until I scroll"),Za=p(),We=o("p"),El=u("Steps are containers for data: state, date, time, contact involved, name of step, comments"),$a=p(),Xe=o("p"),Al=u("Cells can"),eo=p(),g=o("ul"),Jt=o("li"),gl=u("Show up in an Opportunity"),Il=p(),Kt=o("li"),kl=u("Change state"),_l=p(),zt=o("li"),Sl=u("Add a comment"),to=p(),se=o("h4"),re=o("a"),Qt=o("span"),Pl=u("App"),ao=p(),ne=o("ul"),Zt=o("li"),xl=u("Create a new Pool (i.e., a new Archive Sheet)"),Tl=p(),$t=o("li"),Ol=u("Move an Opportunity to a different Pool"),oo=p(),ue=o("h3"),he=o("a"),ea=o("span"),Ll=u("Setup and menu"),io=p(),pe=o("h3"),de=o("a"),ta=o("span"),Cl=u("Iterating without programming to reach an initial MVP"),lo=p(),fe=o("h3"),ce=o("a"),aa=o("span"),ql=u("Modelling the data"),so=p(),me=o("h4"),ye=o("a"),oa=o("span"),Gl=u("Generic Atom component"),ro=p(),ve=o("h4"),we=o("a"),ia=o("span"),Ml=u("Derived components: Step, Current, Meta"),no=p(),be=o("h4"),Ee=o("a"),la=o("span"),Rl=u("A Sequence of Steps"),uo=p(),Ae=o("h4"),ge=o("a"),sa=o("span"),Nl=u("There must be a better way to provide input\u2026"),ho=p(),Ie=o("h4"),ke=o("a"),ra=o("span"),Yl=u("Bringing it All Together: Store"),po=p(),_e=o("h3"),Se=o("a"),na=o("span"),Hl=u("Conclusion and potential next steps"),fo=p(),Je=o("p"),jl=u("I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),co=p(),Ke=o("p"),Bl=u("I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),mo=p(),I=o("ul"),ua=o("li"),Ul=u("integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),Dl=p(),ha=o("li"),Fl=u("integrate with calendar to generate appointments and set reminders"),Vl=p(),pa=o("li"),Wl=u("all of the above, to automatically generate emails with a list of available slots from my calendar."),yo=p(),ze=o("p"),Xl=u("This would actually be quite useful, and who knows, I may well tackle it one of these days."),this.h()},l(e){E=i(e,"H2",{id:!0});var r=l(E);P=i(r,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bs=l(P);et=i(bs,"SPAN",{class:!0}),l(et).forEach(t),bs.forEach(t),ko=h(r,"Need a CRM? Why not just use \u2026?"),r.forEach(t),fa=d(e),S=i(e,"P",{});var da=l(S);tt=i(da,"EM",{});var Es=l(tt);_o=h(Es,"Why not just use a real CRM"),Es.forEach(t),So=h(da,"? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),Oe=i(da,"A",{href:!0,rel:!0});var As=l(Oe);Po=h(As,"Capsule"),As.forEach(t),xo=h(da," and I found I spent most of my time trying to bend it to my needs."),da.forEach(t),ca=d(e),Le=i(e,"P",{});var Jl=l(Le);at=i(Jl,"EM",{});var gs=l(at);To=h(gs,"Why not just use Trello"),gs.forEach(t),Oo=h(Jl,"? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),Jl.forEach(t),ma=d(e),x=i(e,"H2",{id:!0});var Kl=l(x);T=i(Kl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Is=l(T);ot=i(Is,"SPAN",{class:!0}),l(ot).forEach(t),Is.forEach(t),Lo=h(Kl,"Google Sheets with Apps Script is a great tool for quick tools and prototypes"),Kl.forEach(t),ya=d(e),qe=i(e,"P",{});var ks=l(qe);Co=h(ks,"Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),ks.forEach(t),va=d(e),O=i(e,"H2",{id:!0});var zl=l(O);L=i(zl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _s=l(L);it=i(_s,"SPAN",{class:!0}),l(it).forEach(t),_s.forEach(t),qo=h(zl,"Tips on using Google Apps Script for prototyping"),zl.forEach(t),wa=d(e),Ge=i(e,"P",{});var Ss=l(Ge);Go=h(Ss,"In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),Ss.forEach(t),ba=d(e),C=i(e,"H3",{id:!0});var Ql=l(C);q=i(Ql,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ps=l(q);lt=i(Ps,"SPAN",{class:!0}),l(lt).forEach(t),Ps.forEach(t),Mo=h(Ql,"1. Explicit interactions vs trying to build a SPA"),Ql.forEach(t),Ea=d(e),G=i(e,"P",{});var vo=l(G);Ro=h(vo,"Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),Me=i(vo,"ABBR",{title:!0});var xs=l(Me);No=h(xs,"SPA"),xs.forEach(t),Yo=h(vo," with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),vo.forEach(t),Aa=d(e),M=i(e,"P",{});var wo=l(M);Ho=h(wo,"Just build your \u201Capp\u201D like in the good old days of the "),st=i(wo,"CODE",{});var Ts=l(st);jo=h(Ts,"cgi-bin"),Ts.forEach(t),Bo=h(wo,". That is, completely stateless. The typical flow would be:"),wo.forEach(t),ga=d(e),f=i(e,"OL",{});var b=l(f);rt=i(b,"LI",{});var Os=l(rt);Uo=h(Os,"User selects cell(s) in worksheet (optional)"),Os.forEach(t),Do=d(b),nt=i(b,"LI",{});var Ls=l(nt);Fo=h(Ls,"User selects an entry from a custom menu"),Ls.forEach(t),Vo=d(b),ut=i(b,"LI",{});var Cs=l(ut);Wo=h(Cs,"The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s state from it"),Cs.forEach(t),Xo=d(b),ht=i(b,"LI",{});var qs=l(ht);Jo=h(qs,"the script does what it needs to do, which likely involves updating the spreadsheet"),qs.forEach(t),Ko=d(b),pt=i(b,"LI",{});var Gs=l(pt);zo=h(Gs,"the scripts finishes and the user is free to mess with the spreadsheet manuall"),Gs.forEach(t),Qo=d(b),dt=i(b,"LI",{});var Ms=l(dt);Zo=h(Ms,"back to 1."),Ms.forEach(t),b.forEach(t),Ia=d(e),R=i(e,"H3",{id:!0});var Zl=l(R);N=i(Zl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Rs=l(N);ft=i(Rs,"SPAN",{class:!0}),l(ft).forEach(t),Rs.forEach(t),$o=h(Zl,"2. Resist the temptation to start coding straight away"),Zl.forEach(t),ka=d(e),Y=i(e,"P",{});var bo=l(Y);ei=h(bo,"The nice thing about prototyping with Google Sheets is that you don\u2019t have need scripting. You can start doing everything completely manually. You\u2019ll need a bit of discipline to perform all the steps a script would do. But it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Ce=i(bo,"A",{href:!0,rel:!0});var Ns=l(Ce);ti=h(Ns,"Lean"),Ns.forEach(t),ai=h(bo," than that!"),bo.forEach(t),_a=d(e),H=i(e,"H3",{id:!0});var $l=l(H);j=i($l,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ys=l(j);ct=i(Ys,"SPAN",{class:!0}),l(ct).forEach(t),Ys.forEach(t),oi=h($l,"3. Model your problem space first"),$l.forEach(t),Sa=d(e),Re=i(e,"P",{});var Hs=l(Re);ii=h(Hs,"For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),Hs.forEach(t),Pa=d(e),B=i(e,"P",{});var Eo=l(B);li=h(Eo,"Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ne=i(Eo,"ABBR",{title:!0});var js=l(Ne);si=h(js,"OOP"),js.forEach(t),ri=h(Eo,", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),Eo.forEach(t),xa=d(e),U=i(e,"H4",{id:!0});var es=l(U);D=i(es,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bs=l(D);mt=i(Bs,"SPAN",{class:!0}),l(mt).forEach(t),Bs.forEach(t),ni=h(es,"Mapping your problem space to a spreadsheet"),es.forEach(t),Ta=d(e),F=i(e,"P",{});var Ao=l(F);ui=h(Ao,"At the simplest level, spreadsheets are three levels hierarchies. You have sheets, rows, and cells. You could also add a fourth level, documents to that mix. But then it gets slightly awkward with having to grant permissions to each new document. I would avoid it. If you need extra dimensions, you can always use a naming convention for your sheets. A classic case would be renaming your sheets \u2018ARCHIVE-XXX\u2019 for archives, and \u2018CURRENT-yyyy\u2019 for those "),yt=i(Ao,"EM",{});var Us=l(yt);hi=h(Us,"things"),Us.forEach(t),pi=h(Ao," your app deals which are still ongoing. Or you could designate different areas of each sheets for different purposes. For example, in a recipe app, the first column could be for ingredients, the second for steps."),Ao.forEach(t),Oa=d(e),V=i(e,"H3",{id:!0});var ts=l(V);W=i(ts,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ds=l(W);vt=i(Ds,"SPAN",{class:!0}),l(vt).forEach(t),Ds.forEach(t),di=h(ts,"4. OOP is actually quite helpful (but there is a place for some FP too)"),ts.forEach(t),La=d(e),A=i(e,"P",{});var Qe=l(A);fi=h(Qe,"GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),wt=i(Qe,"CODE",{});var Fs=l(wt);ci=h(Fs,"recalculateAmount"),Fs.forEach(t),mi=h(Qe," method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),bt=i(Qe,"CODE",{});var Vs=l(bt);yi=h(Vs,"convertToMetric"),Vs.forEach(t),vi=h(Qe," method to your Ingredient class. And so on. It keeps everything neat"),Qe.forEach(t),Ca=d(e),X=i(e,"P",{});var go=l(X);wi=h(go,"FP becomes useful when you want to share utilities, especially formatting. For example, an "),Et=i(go,"CODE",{});var Ws=l(Et);bi=h(Ws,"asArchive"),Ws.forEach(t),Ei=h(go," function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),go.forEach(t),qa=d(e),J=i(e,"H3",{id:!0});var as=l(J);K=i(as,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xs=l(K);At=i(Xs,"SPAN",{class:!0}),l(At).forEach(t),Xs.forEach(t),Ai=h(as,"5. Testing is not a solved problem"),as.forEach(t),Ga=d(e),Ye=i(e,"P",{});var Js=l(Ye);gi=h(Js,"\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),Js.forEach(t),Ma=d(e),z=i(e,"H2",{id:!0});var os=l(z);Q=i(os,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ks=l(Q);gt=i(Ks,"SPAN",{class:!0}),l(gt).forEach(t),Ks.forEach(t),Ii=h(os,"Designing a CRM app"),os.forEach(t),Ra=d(e),Z=i(e,"H3",{id:!0});var is=l(Z);$=i(is,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zs=l($);It=i(zs,"SPAN",{class:!0}),l(It).forEach(t),zs.forEach(t),ki=h(is,"Step 1: Defining the problem"),is.forEach(t),Na=d(e),He=i(e,"P",{});var Qs=l(He);_i=h(Qs,"As a job seeker I have quite simple needs. In short:"),Qs.forEach(t),Ya=d(e),y=i(e,"UL",{});var Pe=l(y);kt=i(Pe,"LI",{});var Zs=l(kt);Si=h(Zs,"keep a record of all the various live opportunities and where I am at with them"),Zs.forEach(t),Pi=d(Pe),_t=i(Pe,"LI",{});var $s=l(_t);xi=h($s,"let me know when I need to to something next\u2026"),$s.forEach(t),Ti=d(Pe),St=i(Pe,"LI",{});var er=l(St);Oi=h(er,"\u2026including chasing up opportunities that have potentially gone cold"),er.forEach(t),Li=d(Pe),Pt=i(Pe,"LI",{});var tr=l(Pt);Ci=h(tr,"archive opportunities when they are no longer active so that I can easily find out if I have already some history with recruiter x or company y"),tr.forEach(t),Pe.forEach(t),Ha=d(e),c=i(e,"P",{});var k=l(c);qi=h(k,"So the basic entities for my CRM are "),xt=i(k,"STRONG",{});var ar=l(xt);Gi=h(ar,"Opportunities"),ar.forEach(t),Mi=h(k,". Each of them has some metadata, and a sequence of "),Tt=i(k,"STRONG",{});var or=l(Tt);Ri=h(or,"Steps"),or.forEach(t),Ni=h(k,". Opportunities are either Live or Archived. \u201CLive\u201D, \u201CArchive X\u201D, \u201CArchive Y\u201D, \u2026 could be considered a type of Opportunities "),Ot=i(k,"STRONG",{});var ir=l(Ot);Yi=h(ir,"Pool"),ir.forEach(t),Hi=h(k,". Plus of course an "),Lt=i(k,"STRONG",{});var lr=l(Lt);ji=h(lr,"App"),lr.forEach(t),Bi=h(k," entity. There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me achieve my goals. I\u2019ll just treat that information as background noise which I need to move around but not process."),k.forEach(t),ja=d(e),je=i(e,"P",{});var sr=l(je);Ui=h(sr,"Now I need to flesh out some details of each entity"),sr.forEach(t),Ba=d(e),ee=i(e,"H4",{id:!0});var ls=l(ee);te=i(ls,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rr=l(te);Ct=i(rr,"SPAN",{class:!0}),l(Ct).forEach(t),rr.forEach(t),Di=h(ls,"(Opportunity) Pools"),ls.forEach(t),Ua=d(e),Be=i(e,"P",{});var nr=l(Be);Fi=h(nr,"A Pool (=collection) of Opportunities. Pools don\u2019t need to know why certain Opportunities are inside it. All it cares about is managing them. It\u2019s the App entity which moves Opportunities from one Pool to another. can contain Live or Archived. As it happens, I only need a single Live. But I will need different types of archives. A Pool doesn\u2019t have any meta information other than which type it is. That can be easily encoded in the sheet name This can map to a GAS Sheet."),nr.forEach(t),Da=d(e),v=i(e,"UL",{});var xe=l(v);qt=i(xe,"LI",{});var ur=l(qt);Vi=h(ur,"Live Pool (name: LIVE)"),ur.forEach(t),Wi=d(xe),Gt=i(xe,"LI",{});var hr=l(Gt);Xi=h(hr,"a \u2018promising\u2019 Pool, for opportunities that may be worth revisiting later (name: ARCHIVE PROMISING)"),hr.forEach(t),Ji=d(xe),Mt=i(xe,"LI",{});var pr=l(Mt);Ki=h(pr,"a \u2018trash\u2019 Pool, for wastes of time and I never want to hear of the people involved again (name: ARCHIVE BLACKLIST)"),pr.forEach(t),zi=d(xe),Rt=i(xe,"LI",{});var dr=l(Rt);Qi=h(dr,"a Pool for each quarter or semester (name: ARCHIVE YYYY-QQ)"),dr.forEach(t),xe.forEach(t),Fa=d(e),Ue=i(e,"P",{});var fr=l(Ue);Zi=h(fr,"A Pool can:"),fr.forEach(t),Va=d(e),m=i(e,"UL",{});var _=l(m);Nt=i(_,"LI",{});var cr=l(Nt);$i=h(cr,"Displays the Opportunities within it"),cr.forEach(t),el=d(_),Yt=i(_,"LI",{});var mr=l(Yt);tl=h(mr,"Create a new Opportunity (at the top)"),mr.forEach(t),al=d(_),Ht=i(_,"LI",{});var yr=l(Ht);ol=h(yr,"Duplicate an Opportunity"),yr.forEach(t),il=d(_),jt=i(_,"LI",{});var vr=l(jt);ll=h(vr,"Sort the Opportunities within it (descending by date)"),vr.forEach(t),sl=d(_),Bt=i(_,"LI",{});var wr=l(Bt);rl=h(wr,"\u201CClose\u201D a Live opportunity (a special case of \u2018Move an Opportunity\u2019)"),wr.forEach(t),_.forEach(t),Wa=d(e),ae=i(e,"H4",{id:!0});var ss=l(ae);oe=i(ss,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var br=l(oe);Ut=i(br,"SPAN",{class:!0}),l(Ut).forEach(t),br.forEach(t),nl=h(ss,"Opportunity"),ss.forEach(t),Xa=d(e),De=i(e,"P",{});var Er=l(De);ul=h(Er,"These can be represented by rows in a sheet (=Pool). They actually have quite a fair amount of metadata (company name, name of position, job description, salary, location, role, tech stack, state). I will store that metadata in the leftmost cell of the row, cell 1. They consist of a sequence of Steps, and the initial Step is a special one which will always be displayed at cell 2."),Er.forEach(t),Ja=d(e),Fe=i(e,"P",{});var Ar=l(Fe);hl=h(Ar,"An Opportunity can:"),Ar.forEach(t),Ka=d(e),w=i(e,"UL",{});var Te=l(w);Dt=i(Te,"LI",{});var gr=l(Dt);pl=h(gr,"Be displayed in a Pool"),gr.forEach(t),dl=d(Te),Ft=i(Te,"LI",{});var Ir=l(Ft);fl=h(Ir,"Create a \u2018next\u2019 Step"),Ir.forEach(t),cl=d(Te),Vt=i(Te,"LI",{});var kr=l(Vt);ml=h(kr,"Change state"),kr.forEach(t),yl=d(Te),Wt=i(Te,"LI",{});var _r=l(Wt);vl=h(_r,"Change some of its metadata"),_r.forEach(t),Te.forEach(t),za=d(e),ie=i(e,"H4",{id:!0});var rs=l(ie);le=i(rs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Sr=l(le);Xt=i(Sr,"SPAN",{class:!0}),l(Xt).forEach(t),Sr.forEach(t),wl=h(rs,"Step"),rs.forEach(t),Qa=d(e),Ve=i(e,"P",{});var Pr=l(Ve);bl=h(Pr,"These are cells within an Opportunity. The initial Step is special and will always be shown in cell 2, next to the metadata. Column 1 and 2 are frozen, so they will always be in sight. All following steps will be added from column 3 on, but backwards. So cell 3 will always be the latest Step, cell 4 the one before it, and so on. That may sound weird, but it came after a fair amount of manual experimentation. It allows me to have all the latest steps neatly aligned on top of each other. The earliest steps are not as important, so they can be out of sight until I scroll"),Pr.forEach(t),Za=d(e),We=i(e,"P",{});var xr=l(We);El=h(xr,"Steps are containers for data: state, date, time, contact involved, name of step, comments"),xr.forEach(t),$a=d(e),Xe=i(e,"P",{});var Tr=l(Xe);Al=h(Tr,"Cells can"),Tr.forEach(t),eo=d(e),g=i(e,"UL",{});var Ze=l(g);Jt=i(Ze,"LI",{});var Or=l(Jt);gl=h(Or,"Show up in an Opportunity"),Or.forEach(t),Il=d(Ze),Kt=i(Ze,"LI",{});var Lr=l(Kt);kl=h(Lr,"Change state"),Lr.forEach(t),_l=d(Ze),zt=i(Ze,"LI",{});var Cr=l(zt);Sl=h(Cr,"Add a comment"),Cr.forEach(t),Ze.forEach(t),to=d(e),se=i(e,"H4",{id:!0});var ns=l(se);re=i(ns,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qr=l(re);Qt=i(qr,"SPAN",{class:!0}),l(Qt).forEach(t),qr.forEach(t),Pl=h(ns,"App"),ns.forEach(t),ao=d(e),ne=i(e,"UL",{});var Io=l(ne);Zt=i(Io,"LI",{});var Gr=l(Zt);xl=h(Gr,"Create a new Pool (i.e., a new Archive Sheet)"),Gr.forEach(t),Tl=d(Io),$t=i(Io,"LI",{});var Mr=l($t);Ol=h(Mr,"Move an Opportunity to a different Pool"),Mr.forEach(t),Io.forEach(t),oo=d(e),ue=i(e,"H3",{id:!0});var us=l(ue);he=i(us,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Rr=l(he);ea=i(Rr,"SPAN",{class:!0}),l(ea).forEach(t),Rr.forEach(t),Ll=h(us,"Setup and menu"),us.forEach(t),io=d(e),pe=i(e,"H3",{id:!0});var hs=l(pe);de=i(hs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nr=l(de);ta=i(Nr,"SPAN",{class:!0}),l(ta).forEach(t),Nr.forEach(t),Cl=h(hs,"Iterating without programming to reach an initial MVP"),hs.forEach(t),lo=d(e),fe=i(e,"H3",{id:!0});var ps=l(fe);ce=i(ps,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yr=l(ce);aa=i(Yr,"SPAN",{class:!0}),l(aa).forEach(t),Yr.forEach(t),ql=h(ps,"Modelling the data"),ps.forEach(t),so=d(e),me=i(e,"H4",{id:!0});var ds=l(me);ye=i(ds,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hr=l(ye);oa=i(Hr,"SPAN",{class:!0}),l(oa).forEach(t),Hr.forEach(t),Gl=h(ds,"Generic Atom component"),ds.forEach(t),ro=d(e),ve=i(e,"H4",{id:!0});var fs=l(ve);we=i(fs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jr=l(we);ia=i(jr,"SPAN",{class:!0}),l(ia).forEach(t),jr.forEach(t),Ml=h(fs,"Derived components: Step, Current, Meta"),fs.forEach(t),no=d(e),be=i(e,"H4",{id:!0});var cs=l(be);Ee=i(cs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Br=l(Ee);la=i(Br,"SPAN",{class:!0}),l(la).forEach(t),Br.forEach(t),Rl=h(cs,"A Sequence of Steps"),cs.forEach(t),uo=d(e),Ae=i(e,"H4",{id:!0});var ms=l(Ae);ge=i(ms,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ur=l(ge);sa=i(Ur,"SPAN",{class:!0}),l(sa).forEach(t),Ur.forEach(t),Nl=h(ms,"There must be a better way to provide input\u2026"),ms.forEach(t),ho=d(e),Ie=i(e,"H4",{id:!0});var ys=l(Ie);ke=i(ys,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Dr=l(ke);ra=i(Dr,"SPAN",{class:!0}),l(ra).forEach(t),Dr.forEach(t),Yl=h(ys,"Bringing it All Together: Store"),ys.forEach(t),po=d(e),_e=i(e,"H3",{id:!0});var vs=l(_e);Se=i(vs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fr=l(Se);na=i(Fr,"SPAN",{class:!0}),l(na).forEach(t),Fr.forEach(t),Hl=h(vs,"Conclusion and potential next steps"),vs.forEach(t),fo=d(e),Je=i(e,"P",{});var Vr=l(Je);jl=h(Vr,"I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),Vr.forEach(t),co=d(e),Ke=i(e,"P",{});var Wr=l(Ke);Bl=h(Wr,"I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),Wr.forEach(t),mo=d(e),I=i(e,"UL",{});var $e=l(I);ua=i($e,"LI",{});var Xr=l(ua);Ul=h(Xr,"integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),Xr.forEach(t),Dl=d($e),ha=i($e,"LI",{});var Jr=l(ha);Fl=h(Jr,"integrate with calendar to generate appointments and set reminders"),Jr.forEach(t),Vl=d($e),pa=i($e,"LI",{});var Kr=l(pa);Wl=h(Kr,"all of the above, to automatically generate emails with a list of available slots from my calendar."),Kr.forEach(t),$e.forEach(t),yo=d(e),ze=i(e,"P",{});var zr=l(ze);Xl=h(zr,"This would actually be quite useful, and who knows, I may well tackle it one of these days."),zr.forEach(t),this.h()},h(){s(et,"class","icon icon-link"),s(P,"aria-hidden","true"),s(P,"tabindex","-1"),s(P,"href","#need-a-crm-why-not-just-use-"),s(E,"id","need-a-crm-why-not-just-use-"),s(Oe,"href","https://capsulecrm.com/"),s(Oe,"rel","nofollow"),s(ot,"class","icon icon-link"),s(T,"aria-hidden","true"),s(T,"tabindex","-1"),s(T,"href","#google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),s(x,"id","google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),s(it,"class","icon icon-link"),s(L,"aria-hidden","true"),s(L,"tabindex","-1"),s(L,"href","#tips-on-using-google-apps-script-for-prototyping"),s(O,"id","tips-on-using-google-apps-script-for-prototyping"),s(lt,"class","icon icon-link"),s(q,"aria-hidden","true"),s(q,"tabindex","-1"),s(q,"href","#1-explicit-interactions-vs-trying-to-build-a-spa"),s(C,"id","1-explicit-interactions-vs-trying-to-build-a-spa"),s(Me,"title","Single Page Application"),s(ft,"class","icon icon-link"),s(N,"aria-hidden","true"),s(N,"tabindex","-1"),s(N,"href","#2-resist-the-temptation-to-start-coding-straight-away"),s(R,"id","2-resist-the-temptation-to-start-coding-straight-away"),s(Ce,"href","https://www.natechplastics.com/four-stages-of-lean-product-development/"),s(Ce,"rel","nofollow"),s(ct,"class","icon icon-link"),s(j,"aria-hidden","true"),s(j,"tabindex","-1"),s(j,"href","#3-model-your-problem-space-first"),s(H,"id","3-model-your-problem-space-first"),s(Ne,"title","Object Oriented Programming"),s(mt,"class","icon icon-link"),s(D,"aria-hidden","true"),s(D,"tabindex","-1"),s(D,"href","#mapping-your-problem-space-to-a-spreadsheet"),s(U,"id","mapping-your-problem-space-to-a-spreadsheet"),s(vt,"class","icon icon-link"),s(W,"aria-hidden","true"),s(W,"tabindex","-1"),s(W,"href","#4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),s(V,"id","4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),s(At,"class","icon icon-link"),s(K,"aria-hidden","true"),s(K,"tabindex","-1"),s(K,"href","#5-testing-is-not-a-solved-problem"),s(J,"id","5-testing-is-not-a-solved-problem"),s(gt,"class","icon icon-link"),s(Q,"aria-hidden","true"),s(Q,"tabindex","-1"),s(Q,"href","#designing-a-crm-app"),s(z,"id","designing-a-crm-app"),s(It,"class","icon icon-link"),s($,"aria-hidden","true"),s($,"tabindex","-1"),s($,"href","#step-1-defining-the-problem"),s(Z,"id","step-1-defining-the-problem"),s(Ct,"class","icon icon-link"),s(te,"aria-hidden","true"),s(te,"tabindex","-1"),s(te,"href","#opportunity-pools"),s(ee,"id","opportunity-pools"),s(Ut,"class","icon icon-link"),s(oe,"aria-hidden","true"),s(oe,"tabindex","-1"),s(oe,"href","#opportunity"),s(ae,"id","opportunity"),s(Xt,"class","icon icon-link"),s(le,"aria-hidden","true"),s(le,"tabindex","-1"),s(le,"href","#step"),s(ie,"id","step"),s(Qt,"class","icon icon-link"),s(re,"aria-hidden","true"),s(re,"tabindex","-1"),s(re,"href","#app"),s(se,"id","app"),s(ea,"class","icon icon-link"),s(he,"aria-hidden","true"),s(he,"tabindex","-1"),s(he,"href","#setup-and-menu"),s(ue,"id","setup-and-menu"),s(ta,"class","icon icon-link"),s(de,"aria-hidden","true"),s(de,"tabindex","-1"),s(de,"href","#iterating-without-programming-to-reach-an-initial-mvp"),s(pe,"id","iterating-without-programming-to-reach-an-initial-mvp"),s(aa,"class","icon icon-link"),s(ce,"aria-hidden","true"),s(ce,"tabindex","-1"),s(ce,"href","#modelling-the-data"),s(fe,"id","modelling-the-data"),s(oa,"class","icon icon-link"),s(ye,"aria-hidden","true"),s(ye,"tabindex","-1"),s(ye,"href","#generic-atom-component"),s(me,"id","generic-atom-component"),s(ia,"class","icon icon-link"),s(we,"aria-hidden","true"),s(we,"tabindex","-1"),s(we,"href","#derived-components-step-current-meta"),s(ve,"id","derived-components-step-current-meta"),s(la,"class","icon icon-link"),s(Ee,"aria-hidden","true"),s(Ee,"tabindex","-1"),s(Ee,"href","#a-sequence-of-steps"),s(be,"id","a-sequence-of-steps"),s(sa,"class","icon icon-link"),s(ge,"aria-hidden","true"),s(ge,"tabindex","-1"),s(ge,"href","#there-must-be-a-better-way-to-provide-input"),s(Ae,"id","there-must-be-a-better-way-to-provide-input"),s(ra,"class","icon icon-link"),s(ke,"aria-hidden","true"),s(ke,"tabindex","-1"),s(ke,"href","#bringing-it-all-together-store"),s(Ie,"id","bringing-it-all-together-store"),s(na,"class","icon icon-link"),s(Se,"aria-hidden","true"),s(Se,"tabindex","-1"),s(Se,"href","#conclusion-and-potential-next-steps"),s(_e,"id","conclusion-and-potential-next-steps")},m(e,r){n(e,E,r),a(E,P),a(P,et),a(E,ko),n(e,fa,r),n(e,S,r),a(S,tt),a(tt,_o),a(S,So),a(S,Oe),a(Oe,Po),a(S,xo),n(e,ca,r),n(e,Le,r),a(Le,at),a(at,To),a(Le,Oo),n(e,ma,r),n(e,x,r),a(x,T),a(T,ot),a(x,Lo),n(e,ya,r),n(e,qe,r),a(qe,Co),n(e,va,r),n(e,O,r),a(O,L),a(L,it),a(O,qo),n(e,wa,r),n(e,Ge,r),a(Ge,Go),n(e,ba,r),n(e,C,r),a(C,q),a(q,lt),a(C,Mo),n(e,Ea,r),n(e,G,r),a(G,Ro),a(G,Me),a(Me,No),a(G,Yo),n(e,Aa,r),n(e,M,r),a(M,Ho),a(M,st),a(st,jo),a(M,Bo),n(e,ga,r),n(e,f,r),a(f,rt),a(rt,Uo),a(f,Do),a(f,nt),a(nt,Fo),a(f,Vo),a(f,ut),a(ut,Wo),a(f,Xo),a(f,ht),a(ht,Jo),a(f,Ko),a(f,pt),a(pt,zo),a(f,Qo),a(f,dt),a(dt,Zo),n(e,Ia,r),n(e,R,r),a(R,N),a(N,ft),a(R,$o),n(e,ka,r),n(e,Y,r),a(Y,ei),a(Y,Ce),a(Ce,ti),a(Y,ai),n(e,_a,r),n(e,H,r),a(H,j),a(j,ct),a(H,oi),n(e,Sa,r),n(e,Re,r),a(Re,ii),n(e,Pa,r),n(e,B,r),a(B,li),a(B,Ne),a(Ne,si),a(B,ri),n(e,xa,r),n(e,U,r),a(U,D),a(D,mt),a(U,ni),n(e,Ta,r),n(e,F,r),a(F,ui),a(F,yt),a(yt,hi),a(F,pi),n(e,Oa,r),n(e,V,r),a(V,W),a(W,vt),a(V,di),n(e,La,r),n(e,A,r),a(A,fi),a(A,wt),a(wt,ci),a(A,mi),a(A,bt),a(bt,yi),a(A,vi),n(e,Ca,r),n(e,X,r),a(X,wi),a(X,Et),a(Et,bi),a(X,Ei),n(e,qa,r),n(e,J,r),a(J,K),a(K,At),a(J,Ai),n(e,Ga,r),n(e,Ye,r),a(Ye,gi),n(e,Ma,r),n(e,z,r),a(z,Q),a(Q,gt),a(z,Ii),n(e,Ra,r),n(e,Z,r),a(Z,$),a($,It),a(Z,ki),n(e,Na,r),n(e,He,r),a(He,_i),n(e,Ya,r),n(e,y,r),a(y,kt),a(kt,Si),a(y,Pi),a(y,_t),a(_t,xi),a(y,Ti),a(y,St),a(St,Oi),a(y,Li),a(y,Pt),a(Pt,Ci),n(e,Ha,r),n(e,c,r),a(c,qi),a(c,xt),a(xt,Gi),a(c,Mi),a(c,Tt),a(Tt,Ri),a(c,Ni),a(c,Ot),a(Ot,Yi),a(c,Hi),a(c,Lt),a(Lt,ji),a(c,Bi),n(e,ja,r),n(e,je,r),a(je,Ui),n(e,Ba,r),n(e,ee,r),a(ee,te),a(te,Ct),a(ee,Di),n(e,Ua,r),n(e,Be,r),a(Be,Fi),n(e,Da,r),n(e,v,r),a(v,qt),a(qt,Vi),a(v,Wi),a(v,Gt),a(Gt,Xi),a(v,Ji),a(v,Mt),a(Mt,Ki),a(v,zi),a(v,Rt),a(Rt,Qi),n(e,Fa,r),n(e,Ue,r),a(Ue,Zi),n(e,Va,r),n(e,m,r),a(m,Nt),a(Nt,$i),a(m,el),a(m,Yt),a(Yt,tl),a(m,al),a(m,Ht),a(Ht,ol),a(m,il),a(m,jt),a(jt,ll),a(m,sl),a(m,Bt),a(Bt,rl),n(e,Wa,r),n(e,ae,r),a(ae,oe),a(oe,Ut),a(ae,nl),n(e,Xa,r),n(e,De,r),a(De,ul),n(e,Ja,r),n(e,Fe,r),a(Fe,hl),n(e,Ka,r),n(e,w,r),a(w,Dt),a(Dt,pl),a(w,dl),a(w,Ft),a(Ft,fl),a(w,cl),a(w,Vt),a(Vt,ml),a(w,yl),a(w,Wt),a(Wt,vl),n(e,za,r),n(e,ie,r),a(ie,le),a(le,Xt),a(ie,wl),n(e,Qa,r),n(e,Ve,r),a(Ve,bl),n(e,Za,r),n(e,We,r),a(We,El),n(e,$a,r),n(e,Xe,r),a(Xe,Al),n(e,eo,r),n(e,g,r),a(g,Jt),a(Jt,gl),a(g,Il),a(g,Kt),a(Kt,kl),a(g,_l),a(g,zt),a(zt,Sl),n(e,to,r),n(e,se,r),a(se,re),a(re,Qt),a(se,Pl),n(e,ao,r),n(e,ne,r),a(ne,Zt),a(Zt,xl),a(ne,Tl),a(ne,$t),a($t,Ol),n(e,oo,r),n(e,ue,r),a(ue,he),a(he,ea),a(ue,Ll),n(e,io,r),n(e,pe,r),a(pe,de),a(de,ta),a(pe,Cl),n(e,lo,r),n(e,fe,r),a(fe,ce),a(ce,aa),a(fe,ql),n(e,so,r),n(e,me,r),a(me,ye),a(ye,oa),a(me,Gl),n(e,ro,r),n(e,ve,r),a(ve,we),a(we,ia),a(ve,Ml),n(e,no,r),n(e,be,r),a(be,Ee),a(Ee,la),a(be,Rl),n(e,uo,r),n(e,Ae,r),a(Ae,ge),a(ge,sa),a(Ae,Nl),n(e,ho,r),n(e,Ie,r),a(Ie,ke),a(ke,ra),a(Ie,Yl),n(e,po,r),n(e,_e,r),a(_e,Se),a(Se,na),a(_e,Hl),n(e,fo,r),n(e,Je,r),a(Je,jl),n(e,co,r),n(e,Ke,r),a(Ke,Bl),n(e,mo,r),n(e,I,r),a(I,ua),a(ua,Ul),a(I,Dl),a(I,ha),a(ha,Fl),a(I,Vl),a(I,pa),a(pa,Wl),n(e,yo,r),n(e,ze,r),a(ze,Xl)},p:ws,i:ws,o:ws,d(e){e&&t(E),e&&t(fa),e&&t(S),e&&t(ca),e&&t(Le),e&&t(ma),e&&t(x),e&&t(ya),e&&t(qe),e&&t(va),e&&t(O),e&&t(wa),e&&t(Ge),e&&t(ba),e&&t(C),e&&t(Ea),e&&t(G),e&&t(Aa),e&&t(M),e&&t(ga),e&&t(f),e&&t(Ia),e&&t(R),e&&t(ka),e&&t(Y),e&&t(_a),e&&t(H),e&&t(Sa),e&&t(Re),e&&t(Pa),e&&t(B),e&&t(xa),e&&t(U),e&&t(Ta),e&&t(F),e&&t(Oa),e&&t(V),e&&t(La),e&&t(A),e&&t(Ca),e&&t(X),e&&t(qa),e&&t(J),e&&t(Ga),e&&t(Ye),e&&t(Ma),e&&t(z),e&&t(Ra),e&&t(Z),e&&t(Na),e&&t(He),e&&t(Ya),e&&t(y),e&&t(Ha),e&&t(c),e&&t(ja),e&&t(je),e&&t(Ba),e&&t(ee),e&&t(Ua),e&&t(Be),e&&t(Da),e&&t(v),e&&t(Fa),e&&t(Ue),e&&t(Va),e&&t(m),e&&t(Wa),e&&t(ae),e&&t(Xa),e&&t(De),e&&t(Ja),e&&t(Fe),e&&t(Ka),e&&t(w),e&&t(za),e&&t(ie),e&&t(Qa),e&&t(Ve),e&&t(Za),e&&t(We),e&&t($a),e&&t(Xe),e&&t(eo),e&&t(g),e&&t(to),e&&t(se),e&&t(ao),e&&t(ne),e&&t(oo),e&&t(ue),e&&t(io),e&&t(pe),e&&t(lo),e&&t(fe),e&&t(so),e&&t(me),e&&t(ro),e&&t(ve),e&&t(no),e&&t(be),e&&t(uo),e&&t(Ae),e&&t(ho),e&&t(Ie),e&&t(po),e&&t(_e),e&&t(fo),e&&t(Je),e&&t(co),e&&t(Ke),e&&t(mo),e&&t(I),e&&t(yo),e&&t(ze)}}}const on={date:"2022-05-26T17:04:48.123Z",draft:!0,archived:!1,title:"A Trello-like CRM tool with Google Apps Script",tags:["google apps script"],excerpt:"Keeping track of all the leads and processes when freelancing or now that I have just been laid off and am job hunting, can be a daunting task. I have built a simple tool in Google Apps Script to make the process easier"};class ln extends Zr{constructor(E){super(),$r(this,E,null,tn,en,{})}}export{ln as default,on as metadata};
