import{S as uw,i as fw,s as dw,e as o,t as r,k,c as p,a as l,d as a,h as c,m as u,b as i,g as t,I as e,E as Fh}from"./index-6e518972.js";function hw(Zy){let $,O,Yn,Tc,Zo,_,$c,la,jc,Sc,ra,Cc,Ac,Wn,Dc,Rc,sp,N,F,Kn,Hc,ap,Le,Mc,ep,ca,sb='<code class="language-bash"><span class="token operator">></span> cookiecutter gh:gotofritz/cookiecutter-gotofritz-poetry</code>',np,q,B,Jn,Lc,tp,Oe,Oc,op,j,Qn,Nc,Fc,Xn,qc,Bc,Zn,Uc,pp,U,z,st,zc,lp,S,Vc,Ne,Gc,Yc,ia,Wc,Kc,rp,V,G,at,Jc,cp,Y,W,et,Qc,ip,Fe,Xc,kp,ka,ab=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> specimen <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> specimen
<span class="token operator">></span> python <span class="token parameter variable">-V</span>
<span class="token number">3.8</span>.5
<span class="token operator">></span> pyenv <span class="token builtin class-name">local</span> <span class="token number">3.10</span>.1
<span class="token punctuation">..</span>.
<span class="token operator">></span> python <span class="token parameter variable">-V</span>
<span class="token number">3.10</span>.4

<span class="token comment"># this was created by pyenv local</span>
<span class="token operator">></span> <span class="token function">cat</span> .python-version
<span class="token number">3.10</span>.4</code>`,up,qe,Zc,fp,ua,eb=`<code class="language-bash"><span class="token operator">></span> poetry init --no-interaction
<span class="token operator">></span> <span class="token function">cat</span> pyproject.toml
<span class="token punctuation">[</span>tool.poetry<span class="token punctuation">]</span>
name <span class="token operator">=</span> <span class="token string">"specimen"</span>
version <span class="token operator">=</span> <span class="token string">"0.1.0"</span>
description <span class="token operator">=</span> <span class="token string">""</span>
authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Your Name &lt;you@example.com>"</span><span class="token punctuation">]</span>
readme <span class="token operator">=</span> <span class="token string">"README.md"</span>
description <span class="token operator">=</span> <span class="token string">"blah blah"</span>
license <span class="token operator">=</span> <span class="token string">"MIT"</span>
readme <span class="token operator">=</span> <span class="token string">"README.md"</span>
homepage <span class="token operator">=</span> <span class="token string">"https://github.com/blah"</span>
repository <span class="token operator">=</span> <span class="token string">"https://github.com/blah"</span>

<span class="token punctuation">[</span>tool.poetry.dependencies<span class="token punctuation">]</span>
python <span class="token operator">=</span> <span class="token string">"^3.10"</span>

<span class="token punctuation">[</span>build-system<span class="token punctuation">]</span>
requires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"poetry-core"</span><span class="token punctuation">]</span>
build-backend <span class="token operator">=</span> <span class="token string">"poetry.core.masonry.api"</span></code>`,dp,K,J,nt,si,hp,w,ai,fa,ei,ni,tt,ti,oi,ot,pi,li,mp,da,nb=`<code class="language-bash"> <span class="token comment"># toptal.com offers a free, comprehensive .gitignore generator</span>
 <span class="token operator">></span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://www.toptal.com/developers/gitignore/api/python,visualstudiocode <span class="token operator">></span> <span class="token punctuation"></span><span class="token punctuation"></span>
  .gitignore
 <span class="token operator">></span> <span class="token function">git</span> init --initial-branch<span class="token operator">=</span>trunk
 Initialized empty Git repository <span class="token keyword">in</span> /Users/ <span class="token punctuation">..</span>. etc
 <span class="token operator">></span> <span class="token function">git</span> config user.email <span class="token string">"gotofritz@users.noreply.github.com"</span>
 <span class="token operator">></span> <span class="token function">git</span> config user.name <span class="token string">"gotofritz"</span>
 <span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
 <span class="token operator">></span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"initial commit"</span>
<span class="token punctuation">[</span>trunk <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> <span class="token number">5299312</span><span class="token punctuation">]</span> initial commit
 <span class="token number">3</span> files changed, <span class="token number">647</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> .gitignore
 create mode <span class="token number">100644</span> poetry.lock
 create mode <span class="token number">100644</span> pyproject.toml</code>`,vp,Q,X,pt,ri,yp,E,ci,lt,ii,ki,rt,ui,fi,ct,di,hi,bp,ha,tb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/specimen
<span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">'__version__ = "0.1.0"'</span> <span class="token operator">>></span> src/specimen/__init__.py
<span class="token operator">></span> <span class="token function">mkdir</span> tests
<span class="token operator">></span> <span class="token function">touch</span> tests/__init__.py
<span class="token operator">></span> tree <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
\u251C\u2500\u2500 pyproject.toml
\u251C\u2500\u2500 src
\u2502   \u2514\u2500\u2500 specimen
\u2502       \u2514\u2500\u2500 __init__.py
\u2514\u2500\u2500 tests
    \u2514\u2500\u2500 __init__.py</code>`,_p,Z,ss,it,mi,wp,C,vi,kt,yi,bi,ut,_i,wi,Ep,ma,ob=`<code class="language-bash"><span class="token operator">></span> poetry shell
Spawning shell within /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-xQlBT47A-py3.10
<span class="token builtin class-name">.</span> /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-xQlBT47A-py3.10/bin/activate

<span class="token operator">></span> poetry <span class="token function">env</span> info
Virtualenv
Python:         <span class="token number">3.10</span>.6
Implementation: CPython
Path:           /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10
Executable:     /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python
Valid:          True

System
Platform:   darwin
OS:         posix
Python:     <span class="token number">3.10</span>.6
Path:       /opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10
Executable: /opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10/bin/python3.10</code>`,gp,A,Ei,ft,gi,Ii,dt,Pi,xi,Ip,va,pb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">env</span> info <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/Executable/ &#123; print $2; exit &#125;'</span>
/Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python</code>`,Pp,Be,Ti,xp,f,ht,$i,mt,ji,vt,Si,yt,Ci,bt,Ai,_t,Di,wt,Ri,Et,Hi,gt,Mi,It,Li,Pt,Oi,T,Ni,xt,Fi,qi,Tt,Bi,Ui,$t,zi,Vi,jt,Gi,ya,Yi,St,Wi,Ki,Ct,Ji,At,Qi,Dt,Xi,Rt,Zi,Tp,D,sk,Ht,ak,ek,Mt,nk,tk,$p,ba,lb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> .vscode
<span class="token operator">></span> <span class="token function">vim</span> .vscode/settings.json
<span class="token punctuation">[</span>opens editor<span class="token punctuation">]</span></code>`,jp,Ue,ok,Sp,ze,Lt,pk,Cp,_a,rb=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"python.defaultInterpreterPath"</span><span class="token operator">:</span> <span class="token string">"/Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python"</span><span class="token punctuation">,</span>
  <span class="token property">"terminal.integrated.env.windows"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"PYTHONPATH"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/src;$&#123;workspaceFolder&#125;/tests"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"python.envFile"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/.env"</span>
<span class="token punctuation">&#125;</span></code>`,Ap,Ve,lk,Dp,wa,cb=`<code class="language-bash"><span class="token comment"># .env</span>
<span class="token assign-left variable">WORKSPACE_FOLDER</span><span class="token operator">=</span>/Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
<span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/src<span class="token punctuation">;</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/tests</code>`,Rp,g,rk,Ot,ck,ik,Nt,kk,uk,Ft,fk,dk,Hp,as,es,qt,hk,Mp,Ge,mk,Lp,Ea,ib=`<code class="language-python"><span class="token comment"># tests/test_setup.py</span>
<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span></code>`,Op,Ye,vk,Np,ga,kb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev pytest
Using version ^7.1.3 <span class="token keyword">for</span> pytest

Updating dependencies
Resolving dependencies<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">0</span>.1s<span class="token punctuation">)</span>

<span class="token punctuation">..</span>.etc
<span class="token operator">></span> poetry run pytest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.00s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span></code>`,Fp,We,yk,qp,Ia,ub=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev coverage<span class="token punctuation">[</span>toml<span class="token punctuation">]</span> pytest-cov
<span class="token punctuation">..</span>.</code>`,Bp,Ke,bk,Up,Pa,fb=`<code class="language-toml"><span class="token comment"># pyproject.toml</span>
<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.paths</span><span class="token punctuation">]</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.run</span><span class="token punctuation">]</span>
<span class="token key property">branch</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"specimen"</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.report</span><span class="token punctuation">]</span>
<span class="token key property">fail_under</span> <span class="token punctuation">=</span> <span class="token number">100</span>
<span class="token key property">show_missing</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></code>`,zp,ns,_k,Bt,wk,Ek,Vp,xa,db=`<code class="language-bash"><span class="token operator">></span> poetry run pytest <span class="token parameter variable">--cov</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                                                                                                                           <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>/Users/fritz/L<span class="token punctuation">..</span><span class="token punctuation">..</span>etc<span class="token punctuation">..</span>.
WARNING: Failed to generate report: No data to report.
<span class="token punctuation">..</span>.</code>`,Gp,Je,gk,Yp,Ta,hb=`<code class="language-python"><span class="token comment"># tests/test_setup.py</span>
<span class="token keyword">import</span> re
<span class="token keyword">from</span> specimen <span class="token keyword">import</span> __version__ <span class="token keyword">as</span> version


<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"^d+.d+.d+$"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span></code>`,Wp,R,Ik,Ut,Pk,xk,zt,Tk,$k,Kp,$a,mb=`<code class="language-bash"><span class="token punctuation">..</span>.
ImportError <span class="token keyword">while</span> importing <span class="token builtin class-name">test</span> module <span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
tests/test_setup.py:2: <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    from specimen <span class="token function">import</span> __version__ as version
E   ModuleNotFoundError: No module named <span class="token string">'specimen'</span>
<span class="token punctuation">..</span>.</code>`,Jp,ts,jk,Vt,Sk,Ck,Qp,ja,vb=`<code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">tool.pytest.ini_options</span><span class="token punctuation">]</span>
<span class="token key property">pythonpath</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span></code>`,Xp,Qe,Ak,Zp,Sa,yb=`<code class="language-bash"><span class="token operator">></span> poetry run pytest <span class="token parameter variable">--cov</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen, configfile: pyproject.toml
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                               <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

---------- coverage: platform darwin, python <span class="token number">3.10</span>.6-final-0 ----------
Name                       Stmts   Miss Branch BrPart  Cover   Missing
----------------------------------------------------------------------
src/specimen/__init__.py       <span class="token number">1</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
----------------------------------------------------------------------
TOTAL                          <span class="token number">1</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%

Required <span class="token builtin class-name">test</span> coverage of <span class="token number">100.0</span>% reached. Total coverage: <span class="token number">100.00</span>%

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.01s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add trivial test to prove test+coverage works"</span></code>`,sl,os,ps,Gt,Dk,al,Xe,Rk,el,Ca,bb=`<code class="language-python"><span class="token comment"># tests/conftest.py</span>
<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker
<span class="token keyword">import</span> pytest

fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>
Faker<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1369</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fake"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fixture_fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Pass a seeded Faker instance as a fixture"""</span>
    <span class="token keyword">return</span> fake


&#96;&#96;&#96;
And add it to the current test

&#96;&#96;&#96;python
<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Sanity check that there is a version in the right place"""</span>
    <span class="token keyword">assert</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"^d+.d+.d+$"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> fake<span class="token punctuation">.</span>pystr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> version</code>`,nl,ls,rs,Yt,Hk,tl,cs,Mk,Aa,Lk,Ok,ol,Da,_b=`<code class="language-makefile">PYTHON_VERSION <span class="token operator">?=</span> 3.10.4
CMD <span class="token operator">:=</span> poetry run
SRC_DIR <span class="token operator">:=</span> src
TESTS_DIR <span class="token operator">:=</span> tests

<span class="token target symbol">help</span><span class="token punctuation">:</span>  <span class="token comment">## Display this help</span>
	<span class="token operator">@</span>awk <span class="token string">'BEGIN &#123;FS = ":.*##"; printf "&#92;nUsage:&#92;n  make \\033[36m\\033[0m&#92;n"&#125; /^[a-zA-Z0-9_-]+:.*?##/ &#123; printf "  \\033[36m%-15s\\033[0m %s&#92;n", $$1, $$2 &#125; /^##@/ &#123; printf "&#92;n\\033[1m%s\\033[0m&#92;n", substr($$0, 5) &#125; '</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKEFILE_LIST<span class="token punctuation">)</span>
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> help

<span class="token target symbol">test</span><span class="token punctuation">:</span> <span class="token comment">## runs tests in the tests/ directory, with coverage</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CMD<span class="token punctuation">)</span> pytest --cov <span class="token variable">$</span><span class="token punctuation">(</span>TESTS_DIR<span class="token punctuation">)</span>
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test</code>`,pl,Ze,Nk,ll,Ra,wb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">help</span>

Usage:
  <span class="token function">make</span>
  <span class="token builtin class-name">help</span>             Display this <span class="token builtin class-name">help</span>
  <span class="token builtin class-name">test</span>             runs tests <span class="token keyword">in</span> the tests/ directory, with coverage</code>`,rl,sn,Fk,cl,Ha,Eb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">test</span>
poetry run pytest <span class="token parameter variable">--cov</span> tests
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen, configfile: pyproject.toml
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                                                                                                                                                <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

---------- coverage: platform darwin, python <span class="token number">3.10</span>.6-final-0 ----------
Name                  Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------
tests/__init__.py         <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
tests/test_setup.py       <span class="token number">4</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
-----------------------------------------------------------------
TOTAL                     <span class="token number">4</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%

Required <span class="token builtin class-name">test</span> coverage of <span class="token number">100.0</span>% reached. Total coverage: <span class="token number">100.00</span>%

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.02s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add tests and Makefile to run them"</span>
<span class="token punctuation">[</span>trunk c15e669<span class="token punctuation">]</span> <span class="token function">add</span> tests and Makefile to run them
 <span class="token number">4</span> files changed, <span class="token number">263</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">3</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> Makefile
 create mode <span class="token number">100644</span> poetry.lock</code>`,il,is,ks,Wt,qk,kl,an,Bk,ul,us,Uk,Ma,zk,Vk,fl,en,Gk,dl,La,gb=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">format: ## rewrites code with black and isort
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) black $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) isort $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: format
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-black: ## checks src and tests with mypy
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) black --check --fast $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-black
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black ## runs all static analysis tools
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint
</span></span>
test: ## runs tests
	$(CMD) pytest --cov=src --cov-report term --cov-report html:tests/.coverage $(TESTS_DIR)
.PHONY: test

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa: lint test ## for CI/CD. Runs all code quality tools
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: qa
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa-local: format qa ## for local development (before checking in). Formats code and runs qa
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: qa-local</span></span></code>`,hl,nn,Yk,ml,Oa,Ib=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">help</span>

Usage:
  <span class="token function">make</span>
  <span class="token builtin class-name">help</span>             Display this <span class="token builtin class-name">help</span>
  <span class="token function">format</span>           rewrites code with black and isort
  lint-black       checks src and tests with mypy
  lint             runs all static analysis tools
  <span class="token builtin class-name">test</span>             runs tests
  qa               <span class="token keyword">for</span> CI/CD. Runs all code quality tools
  qa-local         <span class="token keyword">for</span> <span class="token builtin class-name">local</span> development <span class="token punctuation">(</span>before checking <span class="token keyword">in</span><span class="token punctuation">)</span>. Formats code and runs qa</code>`,vl,m,Kt,Wk,Kk,Jt,Jk,Qk,Qt,Xk,Zk,Xt,su,au,Zt,eu,nu,so,tu,ou,yl,Na,Pb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev black isort
Using version ^22.8.0 <span class="token keyword">for</span> black
Using version ^5.10.1 <span class="token keyword">for</span> isort
<span class="token punctuation">..</span>.</code>`,bl,tn,pu,_l,Fa,xb=`<code class="language-diff"># pyproject.toml

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.black]
</span><span class="token prefix inserted">+</span><span class="token line">line-length = 88
</span><span class="token prefix inserted">+</span><span class="token line">target-version = ['py310']
</span><span class="token prefix inserted">+</span><span class="token line">include = '.pyi?$'
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.isort]
</span><span class="token prefix inserted">+</span><span class="token line">multi_line_output = 3
</span><span class="token prefix inserted">+</span><span class="token line">line_length = 88
</span><span class="token prefix inserted">+</span><span class="token line">include_trailing_comma = true</span></span></code>`,wl,on,lu,El,qa,Tb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token function">format</span>
poetry run black src tests
All done<span class="token operator">!</span> \u2728 \u{1F370} \u2728
<span class="token number">3</span> files left unchanged.
poetry run isort src tests
Fixing /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen/tests/test_setup.py

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add black and isort and amend Makefile"</span>
<span class="token number">4</span> files changed, <span class="token number">146</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">6</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,gl,fs,ds,ao,ru,Il,H,cu,Ba,iu,ku,Ua,uu,fu,Pl,za,$b=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev flake8@^4 flakeheaven
Using version ^5.0.4 <span class="token keyword">for</span> flake8
Using version ^0.9.0 <span class="token keyword">for</span> flakeheaven
<span class="token punctuation">..</span>.</code>`,xl,I,du,eo,hu,mu,no,vu,yu,to,bu,_u,Tl,Va,jb=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven]
</span><span class="token prefix inserted">+</span><span class="token line">exclude = ["*.md", ".env", ".git", ".gitignore"]
</span><span class="token prefix inserted">+</span><span class="token line">format = "colored"
</span><span class="token prefix inserted">+</span><span class="token line">max_line_length = 88
</span><span class="token prefix inserted">+</span><span class="token line">show_source = true
</span><span class="token prefix inserted">+</span><span class="token line">format = "grouped"
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven.plugins]
</span><span class="token prefix inserted">+</span><span class="token line">mccabe = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pycodestyle = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pyflake = ["+*"]</span></span></code>`,$l,pn,wu,jl,Ga,Sb=`<code class="language-diff">lint-black: ## checks src and tests with mypy
	$(CMD) black --check --fast $(SRC_DIR) $(TESTS_DIR)
.PHONY: lint-black

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-flake: ## checks src and tests with mypy
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) flakeheaven lint $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-flake
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">lint: lint-black ## runs all static analysis tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black lint-flake ## runs all static analysis tools
</span></span>.PHONY: lint</code>`,Sl,ln,Eu,Cl,hs,ms,oo,gu,Al,rn,Iu,Dl,Ya,Cb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev flake8-bandit@^3.0
Updating dependencies
<span class="token punctuation">..</span>.</code>`,Rl,P,Pu,po,xu,Tu,lo,$u,ju,ro,Su,Cu,Hl,Wa,Ab=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-bandit = ["+*", "-S322"]
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven.exceptions."tests/"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-bandit = ["+*", "-S322", "-S101"]
</span></span></code>`,Ml,vs,ys,co,Au,Ll,cn,Du,Ol,Ka,Db=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev flake8-bugbear
Using version ^22.8.23 <span class="token keyword">for</span> flake8-bugbear
<span class="token punctuation">..</span>.</code>`,Nl,kn,Ru,Fl,Ja,Rb=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-bugbear = ["+*", "-B950"]</span></span></code>`,ql,bs,_s,io,Hu,Bl,L,ko,Mu,Lu,uo,Ou,Nu,Ul,Qa,Hb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev darglint flake8-docstrings
Using version ^1.8.1 <span class="token keyword">for</span> darglint
Using version ^1.6.0 <span class="token keyword">for</span> flake8-docstrings
<span class="token punctuation">..</span>.</code>`,zl,Xa,Mb=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">darglint = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-docstrings = ["+*"]</span></span></code>`,Vl,ws,Es,fo,Fu,Gl,d,un,ho,qu,Bu,Uu,fn,mo,zu,Vu,Gu,dn,vo,Yu,Wu,Ku,gs,yo,Ju,Qu,bo,Xu,Zu,sf,hn,_o,af,ef,nf,mn,wo,tf,of,pf,vn,Eo,lf,rf,cf,yn,go,kf,uf,Yl,Za,Lb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev flake8-comprehensions flake8-isort flake8-mutable flake8-simplify pep8-naming pyflakes
Using version ^22.8.23 <span class="token keyword">for</span> flake8-builtins
Using version ^3.10.0 <span class="token keyword">for</span> flake8-comprehensions
Using version ^4.2.0 <span class="token keyword">for</span> flake8-isort
Using version ^1.2.0 <span class="token keyword">for</span> flake8-mutable
Using version ^1.6.0 <span class="token keyword">for</span> flake8-pytest-style
Using version ^0.19.3 <span class="token keyword">for</span> flake8-simplify
Using version ^0.13.2 <span class="token keyword">for</span> pep8-naming
<span class="token punctuation">..</span>.

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add flake8 plugins"</span>
<span class="token number">3</span> files changed, <span class="token number">539</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">13</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,Wl,se,Ob=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-builtins = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-isort = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-comprehensions = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-mutable = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-pytest-style = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-simplify = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pep8-naming = ["+*"]</span></span></code>`,Kl,Is,Ps,Io,ff,Jl,bn,df,Ql,ae,Nb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev safety
Using version ^2.1.1 <span class="token keyword">for</span> safety
<span class="token punctuation">..</span>.</code>`,Xl,_n,hf,Zl,ee,Fb=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">safety: ## tests third part packages against a database of known compromised ones
</span><span class="token prefix inserted">+</span><span class="token line"> poetry export --with dev --format=requirements.txt --without-hashes | poetry run safety check --stdin
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">qa: lint test ## for CI/CD. Runs all code quality tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa: safety lint test ## for CI/CD. Runs all code quality tools
</span></span>.PHONY: qa</code>`,sr,ne,qb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> safety
error: No such remote <span class="token string">'origin'</span>
<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

                               /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>            /<span class="token variable">$$</span>
                              /<span class="token variable">$$</span>__  <span class="token variable">$$</span>          <span class="token operator">|</span> <span class="token variable">$$</span>
           /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$  /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span> <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token punctuation"></span>__//<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>  /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span>   /<span class="token variable">$$</span>
          /<span class="token variable">$$</span>_____/ <span class="token operator">|</span>____  <span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span>__  <span class="token variable">$$</span><span class="token operator">|</span>_  <span class="token variable">$$</span>_/  <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
         <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$<span class="token operator">|</span> <span class="token variable">$$</span>_/  <span class="token operator">|</span> <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
          <span class="token punctuation"></span>____  <span class="token variable">$$</span> /<span class="token variable">$$</span>__  <span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span> <span class="token variable">$$</span>_____/  <span class="token operator">|</span> <span class="token variable">$$</span> /<span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
          /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$/<span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$<span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$  <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span>/<span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$
         <span class="token operator">|</span>_______/  <span class="token punctuation"></span>_______/<span class="token operator">|</span>__/     <span class="token punctuation"></span>_______/   <span class="token punctuation"></span>___/   <span class="token punctuation"></span>____  <span class="token variable">$$</span>
                                                          /<span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
                                                         <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>/
  by pyup.io                                              <span class="token punctuation"></span>______/

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

 REPORT
<span class="token punctuation">..</span>.
<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

 No known security vulnerabilities found.

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

  You are using Safety's <span class="token function">free</span> vulnerability database. This data
is outdated, limited, and
  licensed <span class="token keyword">for</span> non-commercial use only.
  All commercial projects must sign up and get an API key at
https://pyup.io

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add safety"</span>
 <span class="token number">4</span> files changed, <span class="token number">242</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">2</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> requirements.txt</code>`,ar,xs,Ts,Po,mf,er,wn,vf,nr,te,Bb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">--group</span> dev mypy
Using version ^0.971 <span class="token keyword">for</span> mypy
<span class="token punctuation">..</span>.</code>`,tr,En,yf,or,oe,Ub=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.mypy]
</span><span class="token prefix inserted">+</span><span class="token line">warn_return_any = true
</span><span class="token prefix inserted">+</span><span class="token line">warn_unused_configs = true</span></span></code>`,pr,gn,bf,lr,pe,zb=`<code class="language-diff">lint-flake: ## checks src and tests with mypy
	$(CMD) flakeheaven lint $(SRC_DIR) $(TESTS_DIR)
.PHONY: lint-flake

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-mypy: ## checks type annotation
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) mypy $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-mypy
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">lint: lint-black lint-flake ## runs all static analysis tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black lint-flake lint-mypy ## runs all static analysis tools
</span></span>.PHONY: lint
</code>`,rr,In,_f,cr,le,Vb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> lint-mypy
poetry run mypy src tests
Success: no issues found <span class="token keyword">in</span> <span class="token number">3</span> <span class="token builtin class-name">source</span> files

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add mypy"</span>
 <span class="token number">3</span> files changed, <span class="token number">67</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">3</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,ir,$s,js,xo,wf,kr,Pn,Ef,ur,Ss,xn,gf,Tn,If,Pf,To,xf,fr,$n,Tf,dr,Cs,As,$o,$f,hr,jn,jf,mr,re,Gb=`<code class="language-bash"><span class="token comment"># copy somewhere out of the way</span>
<span class="token operator">></span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> specimen <span class="token punctuation">..</span>/

<span class="token comment"># remove all git info</span>
<span class="token operator">></span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> specimen/.git

<span class="token comment"># remove all caches</span>
<span class="token operator">></span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-name</span> __pycache__ <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation"></span><span class="token punctuation">;</span>
find: ./tests/__pycache__: No such <span class="token function">file</span> or directory
find: ./src/specimen/__pycache__: No such <span class="token function">file</span> or directory
<span class="token operator">></span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .pytest_cache .mypy_cache .coverage

<span class="token comment"># start turning it into a template</span>
<span class="token operator">></span> <span class="token function">mv</span> specimen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.project_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token comment"># initial settings, just to test</span>
<span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">'&#123; "project_name": "new-project" &#125;'</span> <span class="token operator">></span> cookiecutter.json

<span class="token comment"># go somewhere new</span>
<span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/test

<span class="token comment"># try to run it</span>
<span class="token operator">></span> cookiecutter <span class="token punctuation">..</span>/cookiecutter-gotofritz-poetry/
project_name <span class="token punctuation">[</span>new-project<span class="token punctuation">]</span>:

<span class="token comment"># test it</span>
<span class="token operator">></span> tree <span class="token parameter variable">-a</span>
<span class="token builtin class-name">.</span>
\u2514\u2500\u2500 new-project
    \u251C\u2500\u2500 .env
    \u251C\u2500\u2500 .gitignore
    \u251C\u2500\u2500 .python-version
    \u251C\u2500\u2500 .vscode
    \u2502   \u2514\u2500\u2500 settings.json
    \u251C\u2500\u2500 CHANGELOG.md
    \u251C\u2500\u2500 LICENSE.md
    \u251C\u2500\u2500 Makefile
    \u251C\u2500\u2500 README.md
    \u251C\u2500\u2500 poetry.lock
    \u251C\u2500\u2500 pyproject.toml
    \u251C\u2500\u2500 requirements.txt
    \u251C\u2500\u2500 src
    \u2502   \u2514\u2500\u2500 specimen
    \u2502       \u2514\u2500\u2500 __init__.py
    \u2514\u2500\u2500 tests
        \u251C\u2500\u2500 __init__.py
        \u2514\u2500\u2500 test_setup.py

<span class="token number">5</span> directories, <span class="token number">14</span> files</code>`,vr,Sn,Sf,yr,Ds,Rs,jo,Cf,br,Hs,Af,ce,Df,Rf,_r,Ms,Hf,So,Mf,Lf,wr,ie,Yb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">cp</span> <span class="token punctuation">..</span>
<span class="token operator">></span> poetry <span class="token function">add</span> <span class="token parameter variable">-D</span> pytest-cookies
Using version ^0.6.1 <span class="token keyword">for</span> pytest-cookies
<span class="token punctuation">..</span>.
<span class="token operator">></span> <span class="token function">mkdir</span> tests
<span class="token operator">></span> code tests/test_create_template.py
<span class="token punctuation">[</span>opens editor<span class="token punctuation">]</span></code>`,Er,Cn,Of,gr,ke,Wb=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_run_cookiecutter_result</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Create a new plugin via cookiecutter and run its tests."""</span>
    project_name <span class="token operator">=</span> <span class="token string">"sancho panza"</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span>
        extra_context<span class="token operator">=</span><span class="token punctuation">&#123;</span>
            <span class="token string">"project_name"</span><span class="token punctuation">:</span> project_name<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exception <span class="token keyword">is</span> <span class="token boolean">None</span>
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>name <span class="token operator">==</span> project_name
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>

    readme_path <span class="token operator">=</span> result<span class="token punctuation">.</span>project_path <span class="token operator">/</span> <span class="token string">"README.md"</span>
    <span class="token keyword">assert</span> readme_path<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span>

    readme <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>readme_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> project_name <span class="token keyword">in</span> readme
    <span class="token keyword">assert</span> <span class="token string">"project_name"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> readme
</code>`,Ir,Ls,Nf,Co,Ff,qf,Pr,M,Bf,Ao,Uf,zf,Do,Vf,Gf,xr,ue,Kb='<code class="language-json"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.python_version<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code>',Tr,fe,Yf,Ro,Wf,$r,de,Jb='<code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"project_name"</span><span class="token operator">:</span> <span class="token string">"new-project"</span><span class="token punctuation">,</span> <span class="token property">"python_version"</span><span class="token operator">:</span> <span class="token string">"3.10.4"</span> <span class="token punctuation">&#125;</span></code>',jr,An,Kf,Sr,Dn,Jf,Cr,he,Qb=`<code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">cd</span> tree <span class="token punctuation">..</span>
\u251C\u2500\u2500 cookiecutter.json
\u251C\u2500\u2500 pyproject.toml
\u251C\u2500\u2500 specimen
\u2514\u2500\u2500 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.project_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    \u251C\u2500\u2500 CHANGELOG.md
    \u251C\u2500\u2500 LICENSE.md
    \u251C\u2500\u2500 Makefile
    \u251C\u2500\u2500 README.md
    \u251C\u2500\u2500 poetry.lock
    \u251C\u2500\u2500 pyproject.toml
    \u251C\u2500\u2500 requirements.txt
    \u251C\u2500\u2500 src
    \u2502   \u2514\u2500\u2500 specimen
    \u2502       \u2514\u2500\u2500 __init__.py
    \u2514\u2500\u2500 tests
        \u251C\u2500\u2500 __init__.py
        \u2514\u2500\u2500 test_setup.py</code>`,Ar,Os,Qf,Ho,Xf,Zf,Dr,me,Xb=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"project_name"</span><span class="token operator">:</span> <span class="token string">"new-project"</span><span class="token punctuation">,</span>
  <span class="token property">"verbose_project_name"</span><span class="token operator">:</span> <span class="token string">"My Awesome Project"</span><span class="token punctuation">,</span>
  <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"Your Name"</span><span class="token punctuation">,</span>
  <span class="token property">"github_username"</span><span class="token operator">:</span> <span class="token string">"github_username"</span><span class="token punctuation">,</span>
  <span class="token property">"mastodon_handle"</span><span class="token operator">:</span> <span class="token string">"@your_name@mastodon.social"</span><span class="token punctuation">,</span>
  <span class="token property">"mastodon_url"</span><span class="token operator">:</span> <span class="token string">"https://mastodon.social/@your_name"</span><span class="token punctuation">,</span>
  <span class="token property">"project_description"</span><span class="token operator">:</span> <span class="token string">"this is a project"</span><span class="token punctuation">,</span>
  <span class="token property">"python_version"</span><span class="token operator">:</span> <span class="token string">"3.10.4"</span>
<span class="token punctuation">&#125;</span></code>`,Rr,Rn,sd,Hr,Ns,Fs,Mo,ad,Mr,qs,ed,Lo,nd,td,Lr,ve,Zb=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_generated_files</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""tests the generated files names make sense"""</span>
    re_bad <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"&#123;&#123;s?cookiecutter..*?&#125;&#125;"</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span>
        re_bad<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> file_path <span class="token keyword">in</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span></code>`,Or,Bs,od,Oo,pd,ld,Nr,ye,s_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_make_qa</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""runs tests on the generated dir"""</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    make_proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token string">"/usr/bin/make"</span><span class="token punctuation">,</span> <span class="token string">"lint-flake"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># noqa</span>
        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>
        cwd<span class="token operator">=</span>result<span class="token punctuation">.</span>project_path<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment"># stdout, stderr are for debuggin</span>
    stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> make_proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> make_proc<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span></code>`,Fr,Hn,rd,qr,Us,zs,No,cd,Br,Vs,id,Fo,kd,ud,Ur,be,a_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_env_file</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""ensures the .env file contains what I expect"""</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    env_path <span class="token operator">=</span> result<span class="token punctuation">.</span>project_path <span class="token operator">/</span> <span class="token string">".env"</span>
    <span class="token keyword">assert</span> env_path<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>env_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> <span class="token string-interpolation"><span class="token string">f"=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span>project_path<span class="token punctuation">&#125;</span></span><span class="token string">&#92;n"</span></span> <span class="token keyword">in</span> file_content</code>`,zr,Mn,fd,Vr,_e,e_=`<code class="language-sh"><span class="token assign-left variable">WORKSPACE_FOLDER</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter._output_dir<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.project_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/src<span class="token punctuation">;</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/tests</code>`,Gr,Gs,dd,qo,hd,md,Yr,Ys,vd,Bo,yd,bd,Wr,we,n_=`<code class="language-diff">&#123;
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  "python.defaultInterpreterPath": "/Users/fritz/Library/Caches/pypoetry/virtualenvs/cookiecutter-gotofritz-poetry-wyPgAlEH-py3.10/bin/python",
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  "python.defaultInterpreterPath": "&lt;interpreter_path>",
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "terminal.integrated.env.windows": &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   "PYTHONPATH": "$&#123;workspaceFolder&#125;/src;$&#123;workspaceFolder&#125;/tests"
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> "python.envFile": "$&#123;workspaceFolder&#125;/.env"
</span></span>&#125;</code>`,Kr,v,_d,Uo,wd,Ed,zo,gd,Id,Vo,Pd,xd,Go,Td,$d,Yo,jd,Sd,Jr,Ws,Cd,Wo,Ad,Dd,Qr,Ee,t_=`<code class="language-bash"><span class="token comment"># hooks/post_gen_project.sh</span>

<span class="token comment">#! /usr/bin/env bash</span>

pyenv <span class="token builtin class-name">local</span>
poetry <span class="token function">install</span>

<span class="token comment"># location of python executable</span>
<span class="token assign-left variable">EXECUTABLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>poetry <span class="token function">env</span> info <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/Executable/ &#123; print $2; exit &#125;'</span><span class="token variable">)</span></span>

<span class="token comment"># replace the placeholder in the json file</span>
<span class="token function">sed</span> <span class="token parameter variable">-i.bak</span> <span class="token string">"/&lt;interpreter_path>/ s#&lt;interpreter_path>#<span class="token variable">$EXECUTABLE</span>#"</span> <span class="token punctuation"></span>
  .vscode/settings.json

<span class="token comment"># the sed program created a backup (with the &#96;-i.bak&#96; part). Remove it</span>
<span class="token function">rm</span> .vscode/settings.json.bak

<span class="token comment"># create the first git commit</span>
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"generate project with cookiecutter"</span></code>`,Xr,Ks,Js,Ko,Rd,Zr,Ln,Hd,sc,ge,o_=`<code class="language-bash"><span class="token operator">></span> cookiecutter gh:gotofritz/cookiecutter-gotofritz-poetry --no-input
<span class="token number">3.10</span>.4
Updating dependencies
Resolving dependencies<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">0</span>.5s<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.

<span class="token operator">></span> <span class="token builtin class-name">cd</span> new-project/
<span class="token operator">></span> <span class="token function">make</span> qa
<span class="token punctuation">..</span>.</code>`,ac,On,Md,ec,Qs,Xs,Jo,Ld,nc,Zs,Od,Ie,Nd,Fd,tc,Pe,qd,xe,Bd,oc,Te,Ud,$e,zd,pc,je,Vd,Se,Gd,lc,Ce,Yd,Ae,Wd,rc,De,Kd,Re,Jd,cc,He,Qd,Me,Xd;return{c(){$=o("h2"),O=o("a"),Yn=o("span"),Tc=r("Creating a python project from scratch? How boring"),Zo=k(),_=o("p"),$c=r("Starting work on a new project involves many repetitive steps: setting up a virtual env, code quality tools, packages, etc. By the time I finish, I have lost half the motivation to start the project. There must be a better way. And there is - generate it all from a template! In JS-land, I used "),la=o("a"),jc=r("plop"),Sc=r(". But for Python projects, I use "),ra=o("a"),Cc=r("cookiecutter"),Ac=r(". Of course, that means starting a new project and going through the tedious steps "),Wn=o("em"),Dc=r("again"),Rc=r(", but it is the last time!"),sp=k(),N=o("h2"),F=o("a"),Kn=o("span"),Hc=r("Tl;DR: here\u2019s the template"),ap=k(),Le=o("p"),Mc=r("To use the template, just run"),ep=k(),ca=o("pre"),np=k(),q=o("h2"),B=o("a"),Jn=o("span"),Lc=r("The plan"),tp=k(),Oe=o("p"),Oc=r("This is my plan:"),op=k(),j=o("ol"),Qn=o("li"),Nc=r("Create a small project specimen manually and make sure it works."),Fc=k(),Xn=o("li"),qc=r("Duplicate it and transform the duplicate into a cookiecutter template."),Bc=k(),Zn=o("li"),Uc=r("Push to github, and use cookiecutter to generate a project with it."),pp=k(),U=o("h2"),z=o("a"),st=o("span"),zc=r("Step 0: Prerequisites"),lp=k(),S=o("p"),Vc=r("For this, you need python and pyenv (I have a post on "),Ne=o("a"),Gc=r("how I installed them on OS X"),Yc=r(")), plus "),ia=o("a"),Wc=r("poetry"),Kc=r(" and cookiecutter. On a mac, you can install most of them with homebrew."),rp=k(),V=o("h2"),G=o("a"),at=o("span"),Jc=r("Step 1: Create a project specimen"),cp=k(),Y=o("h3"),W=o("a"),et=o("span"),Qc=r("Specimen setup: poetry"),ip=k(),Fe=o("p"),Xc=r("This is a python project, so I will set it up with poetry. I already have python and pyenv installed, so I just need to make sure the expected version is there:"),kp=k(),ka=o("pre"),up=k(),qe=o("p"),Zc=r("I use poetry to control dependencies. It is good at managing versions and keeps most of the config in one central place. Here, I generate a minimal config file, pyproject.toml. There is no point in fine tuning it since it will be parametrised later."),fp=k(),ua=o("pre"),dp=k(),K=o("h3"),J=o("a"),nt=o("span"),si=r("Specimen setup: git"),hp=k(),w=o("p"),ai=r("I will set up git now, so I can commit code as I create it. I am not going to push this repo to github, this is just a local repo for safety. I download a .gitignore from "),fa=o("a"),ei=r("TopTal"),ni=r(" and add the project to git. I name my main branch \u2018trunk\u2019, like in the old SVN days. I find it more meaningful than either the fashionable "),tt=o("code"),ti=r("main"),oi=r(" or unfashionable "),ot=o("code"),pi=r("master"),li=r(". I also add a user name and email for each project, since they may be for different orgs."),mp=k(),da=o("pre"),vp=k(),Q=o("h3"),X=o("a"),pt=o("span"),ri=r("Specimen setup: initial folder structure"),yp=k(),E=o("p"),ci=r("I create the skeleton folder structure. The "),lt=o("code"),ii=r("__init__.py"),ki=r(" inside "),rt=o("code"),ui=r("src/specimen"),fi=r(" has a version number in it, and the "),ct=o("code"),di=r("__init__.py"),hi=r(" in tests is only there to make the tests folder a package."),bp=k(),ha=o("pre"),_p=k(),Z=o("h3"),ss=o("a"),it=o("span"),mi=r("Specimen setup: wire up VSCode to the poetry python environment"),wp=k(),C=o("p"),vi=r("Before going further, I will make sure VSCode knows about the environment and where the packages are. First, make sure the python executable from the virtual env is the one being used. The virtual env is created by poetry whenever you run any install or add command, if it doesn\u2019t yet exist. Or you can create it explicitly with "),kt=o("code"),yi=r("poetry shell"),bi=r(" (if the env already exists it will just say where it is). I will do that here to be safe. "),ut=o("code"),_i=r("poetry env info"),wi=r(" then gives some information about the shell."),Ep=k(),ma=o("pre"),gp=k(),A=o("p"),Ei=r("I want to extract the name of the python executable from that info. I could do that with "),ft=o("code"),gi=r("poetry env info --path"),Ii=r(", which is just the path to the shell, and then feed it into "),dt=o("code"),Pi=r('"$(poetry env info --path)/bin/python3.10"'),xi=r(" but that means I would need to hard code the python3.10 part. For a more solid solution, I turn to trusty awk."),Ip=k(),va=o("pre"),Pp=k(),Be=o("p"),Ti=r("The awk command breaks down as follows:"),xp=k(),f=o("dl"),ht=o("dt"),$i=r("poetry env info"),mt=o("dd"),ji=r("run that command, which prints a lot of text"),vt=o("dt"),Si=r("|"),yt=o("dd"),Ci=r("pass that text on to the next command"),bt=o("dt"),Ai=r("awk"),_t=o("dd"),Di=r("...which is awk. awk processes text one line at the time, as it passes through it, and splits it into columns"),wt=o("dt"),Ri=r("'"),Et=o("dd"),Hi=r("everything from now until the next ' is an awk program"),gt=o("dt"),Mi=r("/Executable/ {"),It=o("dd"),Li=r("if the current line contains 'Executable', do all those things until the next }"),Pt=o("dt"),Oi=r("print $2;"),T=o("dd"),Ni=r("awk will split "),xt=o("code"),Fi=r("Python:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03.10.6"),qi=r(" etc into two fields; "),Tt=o("code"),Bi=r("Python"),Ui=r(" and "),$t=o("code"),zi=r("3.10.6"),Vi=r(". I want the second one, i.e. $2"),jt=o("dt"),Gi=r("exit"),ya=o("dd"),Yi=r("if one looks at the output of "),St=o("code"),Wi=r("poetry env info"),Ki=r(', there are actually two lines with "Executable" in it. Luckily I want the first one, so I can simply stop after it is found'),Ct=o("dt"),Ji=r("}"),At=o("dd"),Qi=r('stop telling awk what to do if the line has "Executable" in it'),Dt=o("dt"),Xi=r("'"),Rt=o("dd"),Zi=r("stop telling awk what to do and run the script now"),Tp=k(),D=o("p"),sk=r("But what do I do with that path? The manual way is to add it to VSCode with the command "),Ht=o("code"),ak=r("CMD+SHIFT+P"),ek=r(" to open the command palette, and select "),Mt=o("code"),nk=r("Python: select interpreter"),tk=r(". In the textbox, I can then enter that path. To do it without a manual step, I add it to the VSCode workspace settings file. Note that I am using vim because VSCode does not let me treat settings.json as a normal file:"),$p=k(),ba=o("pre"),jp=k(),Ue=o("p"),ok=r("And this is the content of the settings.json file. It points to an .env file, which I will have to create. It\u2019s pretty convoluted if you ask me. But that\u2019s how it is:"),Sp=k(),ze=o("p"),Lt=o("em"),pk=r("(Project idea: a VSCode plugin which automatically sets this up for you)"),Cp=k(),_a=o("pre"),Ap=k(),Ve=o("p"),lk=r("and the .env file. NOTE: this will be ignored by most standard .gitignores, IDEs, and possibly CI/CD pipelines. Bear that in mind when creating the cookiecutter template:"),Dp=k(),wa=o("pre"),Rp=k(),g=o("p"),rk=r("Now I can open a file in the tests folder, type "),Ot=o("code"),ck=r("from specimen import"),ik=r(", and VSCode will autocomplete. If that does not work by default, it could be that VSCode has already picked a Python interpreter. That means it will ignore all the settings just created. If I then do "),Nt=o("code"),kk=r("CMD+SHIFT+P"),uk=r(" and "),Ft=o("code"),fk=r("select the python interpreter"),dk=r(", there should be the option to use the settings file I have just created."),Hp=k(),as=o("h3"),es=o("a"),qt=o("span"),hk=r("Specimen setup: tests"),Mp=k(),Ge=o("p"),mk=r("I write the first, trivial test:"),Lp=k(),Ea=o("pre"),Op=k(),Ye=o("p"),vk=r("Python comes with a test runner, but pytest is the most popular. Let\u2019s add it and run it:"),Np=k(),ga=o("pre"),Fp=k(),We=o("p"),yk=r("So far so good. Let\u2019s add coverage:"),qp=k(),Ia=o("pre"),Bp=k(),Ke=o("p"),bk=r("Coverage settings can be added to the pyproject.toml file:"),Up=k(),Pa=o("pre"),zp=k(),ns=o("p"),_k=r("I\u2019ll run the test again. Notice the "),Bt=o("code"),wk=r("--cov"),Ek=r(" flag to include test coverage:"),Vp=k(),xa=o("pre"),Gp=k(),Je=o("p"),gk=r("The test fails fast because I did not import the code. Fair enough. I will import the version number from the code and test it is in the right format. I did not hard code the version because this would mean changing, or getting rid of, the test every time the version goes up. Instead, I test that the version number validates. It is a simple validation, but there is no benefit in getting more complicated:"),Yp=k(),Ta=o("pre"),Wp=k(),R=o("p"),Ik=r("When I run the test, it breaks again. Poetry does not know how to make the test find the package "),Ut=o("code"),Pk=r("specimen"),xk=r(" from which to load "),zt=o("code"),Tk=r("__version__"),$k=r(". One would think it could work it out by itself\u2026 no."),Kp=k(),$a=o("pre"),Jp=k(),ts=o("p"),jk=r("The solution is to add this setting to the "),Vt=o("code"),Sk=r("pyproject.toml"),Ck=r(":"),Qp=k(),ja=o("pre"),Xp=k(),Qe=o("p"),Ak=r("Now it runs:"),Zp=k(),Sa=o("pre"),sl=k(),os=o("h4"),ps=o("a"),Gt=o("span"),Dk=r("Adding a Faker fixture to the template"),al=k(),Xe=o("p"),Rk=r("I don\u2019t always use mocks or patch in my tests, but I almost always need Faker. So I create a fixture for it:"),el=k(),Ca=o("pre"),nl=k(),ls=o("h3"),rs=o("a"),Yt=o("span"),Hk=r("Specimen setup: Makefile"),tl=k(),cs=o("p"),Mk=r("I use Makefiles for running my Python projects. I have a standard one I use when setting up a new project (see "),Aa=o("a"),Lk=r("gist"),Ok=r("). From that gist, I extract this:"),ol=k(),Da=o("pre"),pl=k(),Ze=o("p"),Nk=r("It has a command to show nicely formatted help, courtesy of awk:"),ll=k(),Ra=o("pre"),rl=k(),sn=o("p"),Fk=r("And, of course, it runs the tests:"),cl=k(),Ha=o("pre"),il=k(),is=o("h3"),ks=o("a"),Wt=o("span"),qk=r("Specimen setup: formatting with black and isort"),kl=k(),an=o("p"),Bk=r("First of all, I create commands in the Makefile."),ul=k(),us=o("p"),Uk=r("Now I can add all the code quality tools. I still find the JS ecosystem slicker than Python\u2019s. Python is still struggling with allowing static analysis tools to fix the code. But now I\u2019ll install the two python tools that do it right - Black and isort. "),Ma=o("a"),zk=r("isort can be controversial"),Vk=r(", but it has always worked for me."),fl=k(),en=o("p"),Gk=r("First, I create commands in the Makefile:"),dl=k(),La=o("pre"),hl=k(),nn=o("p"),Yk=r("The help rule shows what they all do:"),ml=k(),Oa=o("pre"),vl=k(),m=o("p"),Kt=o("code"),Wk=r("make format"),Kk=r(" is for local development before committing (a git pre-commit hook could also be useful). "),Jt=o("code"),Jk=r("make lint-black"),Qk=r(" is for code quality. Note that it is run with "),Qt=o("code"),Xk=r("black --check"),Zk=r(", so it doesn\u2019t rewrite code. "),Xt=o("code"),su=r("make lint"),au=r(" runs black and all the code quality tools I will add later. "),Zt=o("code"),eu=r("make qa-local"),nu=r(" is for local development, as a check before pushing. Whereas "),so=o("code"),tu=r("make qa"),ou=r(" is for CI/CD. Now I have to install\u2026"),yl=k(),Na=o("pre"),bl=k(),tn=o("p"),pu=r("\u2026configure\u2026"),_l=k(),Fa=o("pre"),wl=k(),on=o("p"),lu=r("\u2026and test those tools"),El=k(),qa=o("pre"),gl=k(),fs=o("h3"),ds=o("a"),ao=o("span"),ru=r("Specimen setup: add flake8 and plugins"),Il=k(),H=o("p"),cu=r("This is one of the main reasons why I need a template for my python projects. Who\u2019s got the time to remember and configure all of these every time? Anyway. I use "),Ba=o("a"),iu=r("flakeheaven"),ku=r(" to configure flake8 and its plugins from within the pyproject.toml file. It has the issue that "),Ua=o("a"),uu=r("it doesn\u2019t support flake8 5"),fu=r(", but then again neither do a lot of plugins, so\u2026 sticking to flake8 4 is fine for now."),Pl=k(),za=o("pre"),xl=k(),I=o("p"),du=r("Then, in pyproject.toml\u2026 Note that in the \u2018tool.flakeheaven.plugins\u2019 section, I list three plugins: mccabe, pycodestyle, and pyflake. This is actually what flake8: a wrapper around those three plugins. Plus a list of optional plugins one may want to add. "),eo=o("code"),hu=r('["+*"]'),mu=r(" is the notation for \u2018enable this plugin in its entirety\u2019 ("),no=o("code"),vu=r("+"),yu=r(" means enable, and "),to=o("code"),bu=r("*"),_u=r(" is a wildcard, i.e. \u2018anything\u2019)"),Tl=k(),Va=o("pre"),$l=k(),pn=o("p"),wu=r("And in the Makefile"),jl=k(),Ga=o("pre"),Sl=k(),ln=o("p"),Eu=r("Finally, the optional plugins and their configuration"),Cl=k(),hs=o("h4"),ms=o("a"),oo=o("span"),gu=r("flake8-bandit"),Al=k(),rn=o("p"),Iu=r("Provides automated security testing. I need to force version 3.0, as the latest version requires flake8 5"),Dl=k(),Ya=o("pre"),Rl=k(),P=o("p"),Pu=r("Here I allow everything "),po=o("em"),xu=r("except"),Tu=r(" rule 322, which is not relevant for python 3. Also note that there is an extra setting: "),lo=o("code"),$u=r('[tool.flakeheaven.exceptions."tests/"]'),ju=r(" which only applies to the tests/ folder. In this folder, I want to allow assert statement. In the src folder they shouldn\u2019t be - that\u2019s because asserts are stripped by the compiler when python run with the "),ro=o("code"),Su=r("-O"),Cu=r(" option (O stand for optimizer)"),Hl=k(),Wa=o("pre"),Ml=k(),vs=o("h4"),ys=o("a"),co=o("span"),Au=r("flake8-bugbear"),Ll=k(),cn=o("p"),Du=r("Adds more checks to the standard flake8 plugins"),Ol=k(),Ka=o("pre"),Nl=k(),kn=o("p"),Ru=r("I disable B950, the line length one. Bugbear does with a 10% tolerance, I prefer the standard hard limit."),Fl=k(),Ja=o("pre"),ql=k(),bs=o("h4"),_s=o("a"),io=o("span"),Hu=r("darglint and flake8-docstrings"),Bl=k(),L=o("p"),ko=o("strong"),Mu=r("Darglint"),Lu=r(" checks whether a docstring\u2019s description matches the actual function/method implementation. "),uo=o("strong"),Ou=r("flake8-docstrings"),Nu=r(" checks compliance with Python docstring conventions (most of PEP 257)"),Ul=k(),Qa=o("pre"),zl=k(),Xa=o("pre"),Vl=k(),ws=o("h4"),Es=o("a"),fo=o("span"),Fu=r("\u2026and many more"),Gl=k(),d=o("ul"),un=o("li"),ho=o("strong"),qu=r("flake8-builtins"),Bu=r(" checks for python builtins being used as variables or parameters"),Uu=k(),fn=o("li"),mo=o("strong"),zu=r("flake8-comprehension"),Vu=r(" helps write better list/set/dict comprehension"),Gu=k(),dn=o("li"),vo=o("strong"),Yu=r("flake8-isort"),Wu=r(" ensures I have run isort on the code before committing"),Ku=k(),gs=o("li"),yo=o("strong"),Ju=r("flake8-mutable"),Qu=r(" prevents issues when passing mutable default values to a function (for example, "),bo=o("code"),Xu=r("def fnc(a, b={}):"),Zu=r(")"),sf=k(),hn=o("li"),_o=o("strong"),af=r("flake8-pytest-style"),ef=r(" checks common style issues or inconsistencies with pytest-based tests"),nf=k(),mn=o("li"),wo=o("strong"),tf=r("flake8-simplify"),of=r(" gives hints for simplification"),pf=k(),vn=o("li"),Eo=o("strong"),lf=r("pep8-naming"),rf=r(" enforces basic capitalisation practices, as per PEP 8"),cf=k(),yn=o("li"),go=o("strong"),kf=r("pyflakes"),uf=r(" checks for unused imports"),Yl=k(),Za=o("pre"),Wl=k(),se=o("pre"),Kl=k(),Is=o("h3"),Ps=o("a"),Io=o("span"),ff=r("Specimen setup: safety"),Jl=k(),bn=o("p"),df=r("Safety checks third party packages against a database of known compromised ones."),Ql=k(),ae=o("pre"),Xl=k(),_n=o("p"),hf=r("I run it from the Makefile. It could also be useful in a git hook"),Zl=k(),ee=o("pre"),sr=k(),ne=o("pre"),ar=k(),xs=o("h3"),Ts=o("a"),Po=o("span"),mf=r("Specimen setup: mypy"),er=k(),wn=o("p"),vf=r("The last code quality tool: mypy, to check for type annotations."),nr=k(),te=o("pre"),tr=k(),En=o("p"),yf=r("and the pyproject.toml changes"),or=k(),oe=o("pre"),pr=k(),gn=o("p"),bf=r("Add to the Makefile"),lr=k(),pe=o("pre"),rr=k(),In=o("p"),_f=r("Check it works"),cr=k(),le=o("pre"),ir=k(),$s=o("h3"),js=o("a"),xo=o("span"),wf=r("Specimen setup: README, LICENCE and static documents"),kr=k(),Pn=o("p"),Ef=r("The last piece of the puzzle is various static documents."),ur=k(),Ss=o("ul"),xn=o("li"),gf=r("I adapted a README.md and a CHANGELOG.md from "),Tn=o("a"),If=r("https://github.com/othneildrew/Best-README-Template/"),Pf=k(),To=o("li"),xf=r("the LICENSE file is standard MIT"),fr=k(),$n=o("p"),Tf=r("That is all I need. Of course, I could keep adding and fine tuning stuff (and I probably will). But this is good enough to start."),dr=k(),Cs=o("h2"),As=o("a"),$o=o("span"),$f=r("Step 2: Creating the Cookiecutter template from the specimen project"),hr=k(),jn=o("p"),jf=r("With that out of the way, I make a copy of the whole directory and start turning it into a minimal cookiecutter template. For starters, just an exact copy of the project, with only the folder name changed:"),mr=k(),re=o("pre"),vr=k(),Sn=o("p"),Sf=r("That\u2019s it, it works. But that\u2019s not a real test, it\u2019s just a sanity check. I can do better."),yr=k(),Ds=o("h3"),Rs=o("a"),jo=o("span"),Cf=r("Testing a cookiecutter template with pytest-cookies"),br=k(),Hs=o("p"),Af=r("Before attempting testing, I should apply the same code quality tooling as in the template. I copy the Makefile, and cannibalize the bits of the pyproject.toml I need, then run poetry install. You can see the result "),ce=o("a"),Df=r("in the template repo"),Rf=r(". Now, on with the testing."),_r=k(),Ms=o("p"),Hf=r("Cookiecutter templates can, and should, be tested with "),So=o("code"),Mf=r("pytest-cookies"),Lf=r("."),wr=k(),ie=o("pre"),Er=k(),Cn=o("p"),Of=r("The initial test is simple, it checks that the template is created:"),gr=k(),ke=o("pre"),Ir=k(),Ls=o("p"),Nf=r("The pytest_cookies package injects a "),Co=o("code"),Ff=r("cookies"),qf=r(" fixture in all your tests. It is a wrapper around cookiecutter that makes it run in a private directory. The run returns an instance of the Result class, which includes almost all the properties in the example above. Here, I check the general idea of it and one of the generated files."),Pr=k(),M=o("p"),Bf=r("Now, I just need to go through each file and directory and see what can be parametrised and moved to "),Ao=o("code"),Uf=r("cookiecutter.json"),zf=r(". For example, replace the content of "),Do=o("code"),Vf=r("/.python-version"),Gf=r(" with:"),xr=k(),ue=o("pre"),Tr=k(),fe=o("p"),Yf=r("and then add it to the "),Ro=o("code"),Wf=r("cookiecutter.json"),$r=k(),de=o("pre"),jr=k(),An=o("p"),Kf=r("and so on."),Sr=k(),Dn=o("p"),Jf=r("At the end of this step I\u2019m left with this directory tree"),Cr=k(),he=o("pre"),Ar=k(),Os=o("p"),Qf=r("And a "),Ho=o("code"),Xf=r("cookiecutter.json"),Zf=r(" with"),Dr=k(),me=o("pre"),Rr=k(),Rn=o("p"),sd=r("I will not test every value. However, I will expand the existing test to add a few more values that should go in the same file. I can also get slightly fancier."),Hr=k(),Ns=o("h3"),Fs=o("a"),Mo=o("span"),ad=r("Automatically run tests in a generated cookiecutter template"),Mr=k(),qs=o("p"),ed=r("First, I can test the generated files to see if none of them have "),Lo=o("code"),nd=r("{{cookiecutter.xxxx}}"),td=r(" in them. That is easy. The Result object gives me a Posix path of the root of the generated project. So, I can call its glob method to get the whole folder tree below it."),Lr=k(),ve=o("pre"),Or=k(),Bs=o("p"),od=r("Second, I can run the project\u2019s own tests after it is generated. It doesn\u2019t get safer than that! Again, thanks to "),Oo=o("em"),pd=r("pytest-cookies"),ld=r(", which generates the project in a sandboxed folder and then provides a Posix object of its location."),Nr=k(),ye=o("pre"),Fr=k(),Hn=o("p"),rd=r("Almost there. Now I need to take care of the dynamically generated values."),qr=k(),Us=o("h3"),zs=o("a"),No=o("span"),cd=r("Using post generation hooks in Cookiecutter templates"),Br=k(),Vs=o("p"),id=r("First the easy one. The "),Fo=o("code"),kd=r(".env"),ud=r(" file need to include the path of the directory of the newly created project. I write a test for that."),Ur=k(),be=o("pre"),zr=k(),Mn=o("p"),fd=r("Luckily, the cwd is made available in cookiecutter as \u201D_output_dir\u201D. So the .env file in the template simply becomes"),Vr=k(),_e=o("pre"),Gr=k(),Gs=o("p"),dd=r("Now the python executable path. This is tricky. It can only be run once the project is generated and "),qo=o("code"),hd=r("poetry install"),md=r(" has run. But then the cookiecutter variables will no longer be available. So I have to come up with my own replacement engine. Not too happy about that, but it\u2019s only a small string fragment:"),Yr=k(),Ys=o("p"),vd=r("First I set up the json template. "),Bo=o("code"),yd=r("<interpreter_path>"),bd=r(" will be the variable I need to replace."),Wr=k(),we=o("pre"),Kr=k(),v=o("p"),_d=r("Then the cookiecutter hook installs the poetry dependencies, updates the settings file, and creates the first git commit. Cookiecutter offers two hooks: "),Uo=o("code"),wd=r("pre_gen_project.sh"),Ed=r(" and "),zo=o("code"),gd=r("post_gen_project.sh"),Id=r(". Both live in the hooks directory and can be either python or shell scripts. "),Vo=o("i"),Pd=r("pre_gen_project"),xd=r(" runs before generating the project. It is mostly used for validation. Since it cannot change the values loaded from "),Go=o("code"),Td=r("cookiecutter.json"),$d=r(", its usefulness is limited. "),Yo=o("i"),jd=r("post_gen_project"),Sd=r(" runs after the build."),Jr=k(),Ws=o("p"),Cd=r("I will use the "),Wo=o("em"),Ad=r("awk"),Dd=r(" command from earlier to determine the location of the python executable. This will be fed into a sed command, which will replace the string in the json file. Sed and awk are similar CLI programs. They both are stream based. Meaning you feed text into them, and they spit text out at the other end. You can manipulate the text before it is spit out. But there is only one pass. Awk assumes the input text is spreadsheet-like and tries to split it into columns. Then it gives access to the individual columns. Sed treats lines of text as lines and allows overwriting them before spitting them out again."),Qr=k(),Ee=o("pre"),Xr=k(),Ks=o("h2"),Js=o("a"),Ko=o("span"),Rd=r("Step 3: push to github and test"),Zr=k(),Ln=o("p"),Hd=r("The final test is to push the template to github and try to fetch it from there"),sc=k(),ge=o("pre"),ac=k(),On=o("p"),Md=r("And that\u2019s finally it. A basic Python project template. It\u2019s very bare - it has neither CLI framework nor DS tools nor a web server. Just the code quality tools and VSCode. But it\u2019s a starting point, and I\u2019ll be adding to it. Hope you find it useful."),ec=k(),Qs=o("h2"),Xs=o("a"),Jo=o("span"),Ld=r("Acknowledgements"),nc=k(),Zs=o("p"),Od=r("Half way through writing this post I came across a very similar one from PythonCheatSheet: "),Ie=o("a"),Nd=r("https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),Fd=r(". I carried on with mine, regardless."),tc=k(),Pe=o("p"),qd=r("The awk command comes from SO, of course "),xe=o("a"),Bd=r("https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),oc=k(),Te=o("p"),Ud=r("Discussion on how to fetch the executable path on the CLI for poetry env command "),$e=o("a"),zd=r("https://github.com/python-poetry/poetry/pull/731"),pc=k(),je=o("p"),Vd=r("More info on how the VSCode settings work "),Se=o("a"),Gd=r("https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),lc=k(),Ce=o("p"),Yd=r("Pytest coverage and code layout "),Ae=o("a"),Wd=r("https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),rc=k(),De=o("p"),Kd=r(`The article that showed me about Flakeheaven
`),Re=o("a"),Jd=r("https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),cc=k(),He=o("p"),Qd=r("A README file template "),Me=o("a"),Xd=r("https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),this.h()},l(s){$=p(s,"H2",{id:!0});var n=l($);O=p(n,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qh=l(O);Yn=p(qh,"SPAN",{class:!0}),l(Yn).forEach(a),qh.forEach(a),Tc=c(n,"Creating a python project from scratch? How boring"),n.forEach(a),Zo=u(s),_=p(s,"P",{});var sa=l(_);$c=c(sa,"Starting work on a new project involves many repetitive steps: setting up a virtual env, code quality tools, packages, etc. By the time I finish, I have lost half the motivation to start the project. There must be a better way. And there is - generate it all from a template! In JS-land, I used "),la=p(sa,"A",{href:!0,rel:!0});var Bh=l(la);jc=c(Bh,"plop"),Bh.forEach(a),Sc=c(sa,". But for Python projects, I use "),ra=p(sa,"A",{href:!0,rel:!0});var Uh=l(ra);Cc=c(Uh,"cookiecutter"),Uh.forEach(a),Ac=c(sa,". Of course, that means starting a new project and going through the tedious steps "),Wn=p(sa,"EM",{});var zh=l(Wn);Dc=c(zh,"again"),zh.forEach(a),Rc=c(sa,", but it is the last time!"),sa.forEach(a),sp=u(s),N=p(s,"H2",{id:!0});var Zd=l(N);F=p(Zd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vh=l(F);Kn=p(Vh,"SPAN",{class:!0}),l(Kn).forEach(a),Vh.forEach(a),Hc=c(Zd,"Tl;DR: here\u2019s the template"),Zd.forEach(a),ap=u(s),Le=p(s,"P",{});var Gh=l(Le);Mc=c(Gh,"To use the template, just run"),Gh.forEach(a),ep=u(s),ca=p(s,"PRE",{class:!0});var p_=l(ca);p_.forEach(a),np=u(s),q=p(s,"H2",{id:!0});var sh=l(q);B=p(sh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yh=l(B);Jn=p(Yh,"SPAN",{class:!0}),l(Jn).forEach(a),Yh.forEach(a),Lc=c(sh,"The plan"),sh.forEach(a),tp=u(s),Oe=p(s,"P",{});var Wh=l(Oe);Oc=c(Wh,"This is my plan:"),Wh.forEach(a),op=u(s),j=p(s,"OL",{});var Nn=l(j);Qn=p(Nn,"LI",{});var Kh=l(Qn);Nc=c(Kh,"Create a small project specimen manually and make sure it works."),Kh.forEach(a),Fc=u(Nn),Xn=p(Nn,"LI",{});var Jh=l(Xn);qc=c(Jh,"Duplicate it and transform the duplicate into a cookiecutter template."),Jh.forEach(a),Bc=u(Nn),Zn=p(Nn,"LI",{});var Qh=l(Zn);Uc=c(Qh,"Push to github, and use cookiecutter to generate a project with it."),Qh.forEach(a),Nn.forEach(a),pp=u(s),U=p(s,"H2",{id:!0});var ah=l(U);z=p(ah,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xh=l(z);st=p(Xh,"SPAN",{class:!0}),l(st).forEach(a),Xh.forEach(a),zc=c(ah,"Step 0: Prerequisites"),ah.forEach(a),lp=u(s),S=p(s,"P",{});var Fn=l(S);Vc=c(Fn,"For this, you need python and pyenv (I have a post on "),Ne=p(Fn,"A",{href:!0});var Zh=l(Ne);Gc=c(Zh,"how I installed them on OS X"),Zh.forEach(a),Yc=c(Fn,")), plus "),ia=p(Fn,"A",{href:!0,rel:!0});var sm=l(ia);Wc=c(sm,"poetry"),sm.forEach(a),Kc=c(Fn," and cookiecutter. On a mac, you can install most of them with homebrew."),Fn.forEach(a),rp=u(s),V=p(s,"H2",{id:!0});var eh=l(V);G=p(eh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var am=l(G);at=p(am,"SPAN",{class:!0}),l(at).forEach(a),am.forEach(a),Jc=c(eh,"Step 1: Create a project specimen"),eh.forEach(a),cp=u(s),Y=p(s,"H3",{id:!0});var nh=l(Y);W=p(nh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var em=l(W);et=p(em,"SPAN",{class:!0}),l(et).forEach(a),em.forEach(a),Qc=c(nh,"Specimen setup: poetry"),nh.forEach(a),ip=u(s),Fe=p(s,"P",{});var nm=l(Fe);Xc=c(nm,"This is a python project, so I will set it up with poetry. I already have python and pyenv installed, so I just need to make sure the expected version is there:"),nm.forEach(a),kp=u(s),ka=p(s,"PRE",{class:!0});var l_=l(ka);l_.forEach(a),up=u(s),qe=p(s,"P",{});var tm=l(qe);Zc=c(tm,"I use poetry to control dependencies. It is good at managing versions and keeps most of the config in one central place. Here, I generate a minimal config file, pyproject.toml. There is no point in fine tuning it since it will be parametrised later."),tm.forEach(a),fp=u(s),ua=p(s,"PRE",{class:!0});var r_=l(ua);r_.forEach(a),dp=u(s),K=p(s,"H3",{id:!0});var th=l(K);J=p(th,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var om=l(J);nt=p(om,"SPAN",{class:!0}),l(nt).forEach(a),om.forEach(a),si=c(th,"Specimen setup: git"),th.forEach(a),hp=u(s),w=p(s,"P",{});var aa=l(w);ai=c(aa,"I will set up git now, so I can commit code as I create it. I am not going to push this repo to github, this is just a local repo for safety. I download a .gitignore from "),fa=p(aa,"A",{href:!0,rel:!0});var pm=l(fa);ei=c(pm,"TopTal"),pm.forEach(a),ni=c(aa," and add the project to git. I name my main branch \u2018trunk\u2019, like in the old SVN days. I find it more meaningful than either the fashionable "),tt=p(aa,"CODE",{});var lm=l(tt);ti=c(lm,"main"),lm.forEach(a),oi=c(aa," or unfashionable "),ot=p(aa,"CODE",{});var rm=l(ot);pi=c(rm,"master"),rm.forEach(a),li=c(aa,". I also add a user name and email for each project, since they may be for different orgs."),aa.forEach(a),mp=u(s),da=p(s,"PRE",{class:!0});var c_=l(da);c_.forEach(a),vp=u(s),Q=p(s,"H3",{id:!0});var oh=l(Q);X=p(oh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cm=l(X);pt=p(cm,"SPAN",{class:!0}),l(pt).forEach(a),cm.forEach(a),ri=c(oh,"Specimen setup: initial folder structure"),oh.forEach(a),yp=u(s),E=p(s,"P",{});var ea=l(E);ci=c(ea,"I create the skeleton folder structure. The "),lt=p(ea,"CODE",{});var im=l(lt);ii=c(im,"__init__.py"),im.forEach(a),ki=c(ea," inside "),rt=p(ea,"CODE",{});var km=l(rt);ui=c(km,"src/specimen"),km.forEach(a),fi=c(ea," has a version number in it, and the "),ct=p(ea,"CODE",{});var um=l(ct);di=c(um,"__init__.py"),um.forEach(a),hi=c(ea," in tests is only there to make the tests folder a package."),ea.forEach(a),bp=u(s),ha=p(s,"PRE",{class:!0});var i_=l(ha);i_.forEach(a),_p=u(s),Z=p(s,"H3",{id:!0});var ph=l(Z);ss=p(ph,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fm=l(ss);it=p(fm,"SPAN",{class:!0}),l(it).forEach(a),fm.forEach(a),mi=c(ph,"Specimen setup: wire up VSCode to the poetry python environment"),ph.forEach(a),wp=u(s),C=p(s,"P",{});var qn=l(C);vi=c(qn,"Before going further, I will make sure VSCode knows about the environment and where the packages are. First, make sure the python executable from the virtual env is the one being used. The virtual env is created by poetry whenever you run any install or add command, if it doesn\u2019t yet exist. Or you can create it explicitly with "),kt=p(qn,"CODE",{});var dm=l(kt);yi=c(dm,"poetry shell"),dm.forEach(a),bi=c(qn," (if the env already exists it will just say where it is). I will do that here to be safe. "),ut=p(qn,"CODE",{});var hm=l(ut);_i=c(hm,"poetry env info"),hm.forEach(a),wi=c(qn," then gives some information about the shell."),qn.forEach(a),Ep=u(s),ma=p(s,"PRE",{class:!0});var k_=l(ma);k_.forEach(a),gp=u(s),A=p(s,"P",{});var Bn=l(A);Ei=c(Bn,"I want to extract the name of the python executable from that info. I could do that with "),ft=p(Bn,"CODE",{});var mm=l(ft);gi=c(mm,"poetry env info --path"),mm.forEach(a),Ii=c(Bn,", which is just the path to the shell, and then feed it into "),dt=p(Bn,"CODE",{});var vm=l(dt);Pi=c(vm,'"$(poetry env info --path)/bin/python3.10"'),vm.forEach(a),xi=c(Bn," but that means I would need to hard code the python3.10 part. For a more solid solution, I turn to trusty awk."),Bn.forEach(a),Ip=u(s),va=p(s,"PRE",{class:!0});var u_=l(va);u_.forEach(a),Pp=u(s),Be=p(s,"P",{});var ym=l(Be);Ti=c(ym,"The awk command breaks down as follows:"),ym.forEach(a),xp=u(s),f=p(s,"DL",{class:!0});var h=l(f);ht=p(h,"DT",{});var bm=l(ht);$i=c(bm,"poetry env info"),bm.forEach(a),mt=p(h,"DD",{});var _m=l(mt);ji=c(_m,"run that command, which prints a lot of text"),_m.forEach(a),vt=p(h,"DT",{});var wm=l(vt);Si=c(wm,"|"),wm.forEach(a),yt=p(h,"DD",{});var Em=l(yt);Ci=c(Em,"pass that text on to the next command"),Em.forEach(a),bt=p(h,"DT",{});var gm=l(bt);Ai=c(gm,"awk"),gm.forEach(a),_t=p(h,"DD",{});var Im=l(_t);Di=c(Im,"...which is awk. awk processes text one line at the time, as it passes through it, and splits it into columns"),Im.forEach(a),wt=p(h,"DT",{});var Pm=l(wt);Ri=c(Pm,"'"),Pm.forEach(a),Et=p(h,"DD",{});var xm=l(Et);Hi=c(xm,"everything from now until the next ' is an awk program"),xm.forEach(a),gt=p(h,"DT",{});var Tm=l(gt);Mi=c(Tm,"/Executable/ {"),Tm.forEach(a),It=p(h,"DD",{});var $m=l(It);Li=c($m,"if the current line contains 'Executable', do all those things until the next }"),$m.forEach(a),Pt=p(h,"DT",{});var jm=l(Pt);Oi=c(jm,"print $2;"),jm.forEach(a),T=p(h,"DD",{});var na=l(T);Ni=c(na,"awk will split "),xt=p(na,"CODE",{});var Sm=l(xt);Fi=c(Sm,"Python:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03.10.6"),Sm.forEach(a),qi=c(na," etc into two fields; "),Tt=p(na,"CODE",{});var Cm=l(Tt);Bi=c(Cm,"Python"),Cm.forEach(a),Ui=c(na," and "),$t=p(na,"CODE",{});var Am=l($t);zi=c(Am,"3.10.6"),Am.forEach(a),Vi=c(na,". I want the second one, i.e. $2"),na.forEach(a),jt=p(h,"DT",{});var Dm=l(jt);Gi=c(Dm,"exit"),Dm.forEach(a),ya=p(h,"DD",{});var ic=l(ya);Yi=c(ic,"if one looks at the output of "),St=p(ic,"CODE",{});var Rm=l(St);Wi=c(Rm,"poetry env info"),Rm.forEach(a),Ki=c(ic,', there are actually two lines with "Executable" in it. Luckily I want the first one, so I can simply stop after it is found'),ic.forEach(a),Ct=p(h,"DT",{});var Hm=l(Ct);Ji=c(Hm,"}"),Hm.forEach(a),At=p(h,"DD",{});var Mm=l(At);Qi=c(Mm,'stop telling awk what to do if the line has "Executable" in it'),Mm.forEach(a),Dt=p(h,"DT",{});var Lm=l(Dt);Xi=c(Lm,"'"),Lm.forEach(a),Rt=p(h,"DD",{});var Om=l(Rt);Zi=c(Om,"stop telling awk what to do and run the script now"),Om.forEach(a),h.forEach(a),Tp=u(s),D=p(s,"P",{});var Un=l(D);sk=c(Un,"But what do I do with that path? The manual way is to add it to VSCode with the command "),Ht=p(Un,"CODE",{});var Nm=l(Ht);ak=c(Nm,"CMD+SHIFT+P"),Nm.forEach(a),ek=c(Un," to open the command palette, and select "),Mt=p(Un,"CODE",{});var Fm=l(Mt);nk=c(Fm,"Python: select interpreter"),Fm.forEach(a),tk=c(Un,". In the textbox, I can then enter that path. To do it without a manual step, I add it to the VSCode workspace settings file. Note that I am using vim because VSCode does not let me treat settings.json as a normal file:"),Un.forEach(a),$p=u(s),ba=p(s,"PRE",{class:!0});var f_=l(ba);f_.forEach(a),jp=u(s),Ue=p(s,"P",{});var qm=l(Ue);ok=c(qm,"And this is the content of the settings.json file. It points to an .env file, which I will have to create. It\u2019s pretty convoluted if you ask me. But that\u2019s how it is:"),qm.forEach(a),Sp=u(s),ze=p(s,"P",{});var Bm=l(ze);Lt=p(Bm,"EM",{});var Um=l(Lt);pk=c(Um,"(Project idea: a VSCode plugin which automatically sets this up for you)"),Um.forEach(a),Bm.forEach(a),Cp=u(s),_a=p(s,"PRE",{class:!0});var d_=l(_a);d_.forEach(a),Ap=u(s),Ve=p(s,"P",{});var zm=l(Ve);lk=c(zm,"and the .env file. NOTE: this will be ignored by most standard .gitignores, IDEs, and possibly CI/CD pipelines. Bear that in mind when creating the cookiecutter template:"),zm.forEach(a),Dp=u(s),wa=p(s,"PRE",{class:!0});var h_=l(wa);h_.forEach(a),Rp=u(s),g=p(s,"P",{});var ta=l(g);rk=c(ta,"Now I can open a file in the tests folder, type "),Ot=p(ta,"CODE",{});var Vm=l(Ot);ck=c(Vm,"from specimen import"),Vm.forEach(a),ik=c(ta,", and VSCode will autocomplete. If that does not work by default, it could be that VSCode has already picked a Python interpreter. That means it will ignore all the settings just created. If I then do "),Nt=p(ta,"CODE",{});var Gm=l(Nt);kk=c(Gm,"CMD+SHIFT+P"),Gm.forEach(a),uk=c(ta," and "),Ft=p(ta,"CODE",{});var Ym=l(Ft);fk=c(Ym,"select the python interpreter"),Ym.forEach(a),dk=c(ta,", there should be the option to use the settings file I have just created."),ta.forEach(a),Hp=u(s),as=p(s,"H3",{id:!0});var lh=l(as);es=p(lh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wm=l(es);qt=p(Wm,"SPAN",{class:!0}),l(qt).forEach(a),Wm.forEach(a),hk=c(lh,"Specimen setup: tests"),lh.forEach(a),Mp=u(s),Ge=p(s,"P",{});var Km=l(Ge);mk=c(Km,"I write the first, trivial test:"),Km.forEach(a),Lp=u(s),Ea=p(s,"PRE",{class:!0});var m_=l(Ea);m_.forEach(a),Op=u(s),Ye=p(s,"P",{});var Jm=l(Ye);vk=c(Jm,"Python comes with a test runner, but pytest is the most popular. Let\u2019s add it and run it:"),Jm.forEach(a),Np=u(s),ga=p(s,"PRE",{class:!0});var v_=l(ga);v_.forEach(a),Fp=u(s),We=p(s,"P",{});var Qm=l(We);yk=c(Qm,"So far so good. Let\u2019s add coverage:"),Qm.forEach(a),qp=u(s),Ia=p(s,"PRE",{class:!0});var y_=l(Ia);y_.forEach(a),Bp=u(s),Ke=p(s,"P",{});var Xm=l(Ke);bk=c(Xm,"Coverage settings can be added to the pyproject.toml file:"),Xm.forEach(a),Up=u(s),Pa=p(s,"PRE",{class:!0});var b_=l(Pa);b_.forEach(a),zp=u(s),ns=p(s,"P",{});var kc=l(ns);_k=c(kc,"I\u2019ll run the test again. Notice the "),Bt=p(kc,"CODE",{});var Zm=l(Bt);wk=c(Zm,"--cov"),Zm.forEach(a),Ek=c(kc," flag to include test coverage:"),kc.forEach(a),Vp=u(s),xa=p(s,"PRE",{class:!0});var __=l(xa);__.forEach(a),Gp=u(s),Je=p(s,"P",{});var sv=l(Je);gk=c(sv,"The test fails fast because I did not import the code. Fair enough. I will import the version number from the code and test it is in the right format. I did not hard code the version because this would mean changing, or getting rid of, the test every time the version goes up. Instead, I test that the version number validates. It is a simple validation, but there is no benefit in getting more complicated:"),sv.forEach(a),Yp=u(s),Ta=p(s,"PRE",{class:!0});var w_=l(Ta);w_.forEach(a),Wp=u(s),R=p(s,"P",{});var zn=l(R);Ik=c(zn,"When I run the test, it breaks again. Poetry does not know how to make the test find the package "),Ut=p(zn,"CODE",{});var av=l(Ut);Pk=c(av,"specimen"),av.forEach(a),xk=c(zn," from which to load "),zt=p(zn,"CODE",{});var ev=l(zt);Tk=c(ev,"__version__"),ev.forEach(a),$k=c(zn,". One would think it could work it out by itself\u2026 no."),zn.forEach(a),Kp=u(s),$a=p(s,"PRE",{class:!0});var E_=l($a);E_.forEach(a),Jp=u(s),ts=p(s,"P",{});var uc=l(ts);jk=c(uc,"The solution is to add this setting to the "),Vt=p(uc,"CODE",{});var nv=l(Vt);Sk=c(nv,"pyproject.toml"),nv.forEach(a),Ck=c(uc,":"),uc.forEach(a),Qp=u(s),ja=p(s,"PRE",{class:!0});var g_=l(ja);g_.forEach(a),Xp=u(s),Qe=p(s,"P",{});var tv=l(Qe);Ak=c(tv,"Now it runs:"),tv.forEach(a),Zp=u(s),Sa=p(s,"PRE",{class:!0});var I_=l(Sa);I_.forEach(a),sl=u(s),os=p(s,"H4",{id:!0});var rh=l(os);ps=p(rh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ov=l(ps);Gt=p(ov,"SPAN",{class:!0}),l(Gt).forEach(a),ov.forEach(a),Dk=c(rh,"Adding a Faker fixture to the template"),rh.forEach(a),al=u(s),Xe=p(s,"P",{});var pv=l(Xe);Rk=c(pv,"I don\u2019t always use mocks or patch in my tests, but I almost always need Faker. So I create a fixture for it:"),pv.forEach(a),el=u(s),Ca=p(s,"PRE",{class:!0});var P_=l(Ca);P_.forEach(a),nl=u(s),ls=p(s,"H3",{id:!0});var ch=l(ls);rs=p(ch,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lv=l(rs);Yt=p(lv,"SPAN",{class:!0}),l(Yt).forEach(a),lv.forEach(a),Hk=c(ch,"Specimen setup: Makefile"),ch.forEach(a),tl=u(s),cs=p(s,"P",{});var fc=l(cs);Mk=c(fc,"I use Makefiles for running my Python projects. I have a standard one I use when setting up a new project (see "),Aa=p(fc,"A",{href:!0,rel:!0});var rv=l(Aa);Lk=c(rv,"gist"),rv.forEach(a),Ok=c(fc,"). From that gist, I extract this:"),fc.forEach(a),ol=u(s),Da=p(s,"PRE",{class:!0});var x_=l(Da);x_.forEach(a),pl=u(s),Ze=p(s,"P",{});var cv=l(Ze);Nk=c(cv,"It has a command to show nicely formatted help, courtesy of awk:"),cv.forEach(a),ll=u(s),Ra=p(s,"PRE",{class:!0});var T_=l(Ra);T_.forEach(a),rl=u(s),sn=p(s,"P",{});var iv=l(sn);Fk=c(iv,"And, of course, it runs the tests:"),iv.forEach(a),cl=u(s),Ha=p(s,"PRE",{class:!0});var $_=l(Ha);$_.forEach(a),il=u(s),is=p(s,"H3",{id:!0});var ih=l(is);ks=p(ih,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var kv=l(ks);Wt=p(kv,"SPAN",{class:!0}),l(Wt).forEach(a),kv.forEach(a),qk=c(ih,"Specimen setup: formatting with black and isort"),ih.forEach(a),kl=u(s),an=p(s,"P",{});var uv=l(an);Bk=c(uv,"First of all, I create commands in the Makefile."),uv.forEach(a),ul=u(s),us=p(s,"P",{});var dc=l(us);Uk=c(dc,"Now I can add all the code quality tools. I still find the JS ecosystem slicker than Python\u2019s. Python is still struggling with allowing static analysis tools to fix the code. But now I\u2019ll install the two python tools that do it right - Black and isort. "),Ma=p(dc,"A",{href:!0,rel:!0});var fv=l(Ma);zk=c(fv,"isort can be controversial"),fv.forEach(a),Vk=c(dc,", but it has always worked for me."),dc.forEach(a),fl=u(s),en=p(s,"P",{});var dv=l(en);Gk=c(dv,"First, I create commands in the Makefile:"),dv.forEach(a),dl=u(s),La=p(s,"PRE",{class:!0});var j_=l(La);j_.forEach(a),hl=u(s),nn=p(s,"P",{});var hv=l(nn);Yk=c(hv,"The help rule shows what they all do:"),hv.forEach(a),ml=u(s),Oa=p(s,"PRE",{class:!0});var S_=l(Oa);S_.forEach(a),vl=u(s),m=p(s,"P",{});var b=l(m);Kt=p(b,"CODE",{});var mv=l(Kt);Wk=c(mv,"make format"),mv.forEach(a),Kk=c(b," is for local development before committing (a git pre-commit hook could also be useful). "),Jt=p(b,"CODE",{});var vv=l(Jt);Jk=c(vv,"make lint-black"),vv.forEach(a),Qk=c(b," is for code quality. Note that it is run with "),Qt=p(b,"CODE",{});var yv=l(Qt);Xk=c(yv,"black --check"),yv.forEach(a),Zk=c(b,", so it doesn\u2019t rewrite code. "),Xt=p(b,"CODE",{});var bv=l(Xt);su=c(bv,"make lint"),bv.forEach(a),au=c(b," runs black and all the code quality tools I will add later. "),Zt=p(b,"CODE",{});var _v=l(Zt);eu=c(_v,"make qa-local"),_v.forEach(a),nu=c(b," is for local development, as a check before pushing. Whereas "),so=p(b,"CODE",{});var wv=l(so);tu=c(wv,"make qa"),wv.forEach(a),ou=c(b," is for CI/CD. Now I have to install\u2026"),b.forEach(a),yl=u(s),Na=p(s,"PRE",{class:!0});var C_=l(Na);C_.forEach(a),bl=u(s),tn=p(s,"P",{});var Ev=l(tn);pu=c(Ev,"\u2026configure\u2026"),Ev.forEach(a),_l=u(s),Fa=p(s,"PRE",{class:!0});var A_=l(Fa);A_.forEach(a),wl=u(s),on=p(s,"P",{});var gv=l(on);lu=c(gv,"\u2026and test those tools"),gv.forEach(a),El=u(s),qa=p(s,"PRE",{class:!0});var D_=l(qa);D_.forEach(a),gl=u(s),fs=p(s,"H3",{id:!0});var kh=l(fs);ds=p(kh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Iv=l(ds);ao=p(Iv,"SPAN",{class:!0}),l(ao).forEach(a),Iv.forEach(a),ru=c(kh,"Specimen setup: add flake8 and plugins"),kh.forEach(a),Il=u(s),H=p(s,"P",{});var Vn=l(H);cu=c(Vn,"This is one of the main reasons why I need a template for my python projects. Who\u2019s got the time to remember and configure all of these every time? Anyway. I use "),Ba=p(Vn,"A",{href:!0,rel:!0});var Pv=l(Ba);iu=c(Pv,"flakeheaven"),Pv.forEach(a),ku=c(Vn," to configure flake8 and its plugins from within the pyproject.toml file. It has the issue that "),Ua=p(Vn,"A",{href:!0,rel:!0});var xv=l(Ua);uu=c(xv,"it doesn\u2019t support flake8 5"),xv.forEach(a),fu=c(Vn,", but then again neither do a lot of plugins, so\u2026 sticking to flake8 4 is fine for now."),Vn.forEach(a),Pl=u(s),za=p(s,"PRE",{class:!0});var R_=l(za);R_.forEach(a),xl=u(s),I=p(s,"P",{});var oa=l(I);du=c(oa,"Then, in pyproject.toml\u2026 Note that in the \u2018tool.flakeheaven.plugins\u2019 section, I list three plugins: mccabe, pycodestyle, and pyflake. This is actually what flake8: a wrapper around those three plugins. Plus a list of optional plugins one may want to add. "),eo=p(oa,"CODE",{});var Tv=l(eo);hu=c(Tv,'["+*"]'),Tv.forEach(a),mu=c(oa," is the notation for \u2018enable this plugin in its entirety\u2019 ("),no=p(oa,"CODE",{});var $v=l(no);vu=c($v,"+"),$v.forEach(a),yu=c(oa," means enable, and "),to=p(oa,"CODE",{});var jv=l(to);bu=c(jv,"*"),jv.forEach(a),_u=c(oa," is a wildcard, i.e. \u2018anything\u2019)"),oa.forEach(a),Tl=u(s),Va=p(s,"PRE",{class:!0});var H_=l(Va);H_.forEach(a),$l=u(s),pn=p(s,"P",{});var Sv=l(pn);wu=c(Sv,"And in the Makefile"),Sv.forEach(a),jl=u(s),Ga=p(s,"PRE",{class:!0});var M_=l(Ga);M_.forEach(a),Sl=u(s),ln=p(s,"P",{});var Cv=l(ln);Eu=c(Cv,"Finally, the optional plugins and their configuration"),Cv.forEach(a),Cl=u(s),hs=p(s,"H4",{id:!0});var uh=l(hs);ms=p(uh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Av=l(ms);oo=p(Av,"SPAN",{class:!0}),l(oo).forEach(a),Av.forEach(a),gu=c(uh,"flake8-bandit"),uh.forEach(a),Al=u(s),rn=p(s,"P",{});var Dv=l(rn);Iu=c(Dv,"Provides automated security testing. I need to force version 3.0, as the latest version requires flake8 5"),Dv.forEach(a),Dl=u(s),Ya=p(s,"PRE",{class:!0});var L_=l(Ya);L_.forEach(a),Rl=u(s),P=p(s,"P",{});var pa=l(P);Pu=c(pa,"Here I allow everything "),po=p(pa,"EM",{});var Rv=l(po);xu=c(Rv,"except"),Rv.forEach(a),Tu=c(pa," rule 322, which is not relevant for python 3. Also note that there is an extra setting: "),lo=p(pa,"CODE",{});var Hv=l(lo);$u=c(Hv,'[tool.flakeheaven.exceptions."tests/"]'),Hv.forEach(a),ju=c(pa," which only applies to the tests/ folder. In this folder, I want to allow assert statement. In the src folder they shouldn\u2019t be - that\u2019s because asserts are stripped by the compiler when python run with the "),ro=p(pa,"CODE",{});var Mv=l(ro);Su=c(Mv,"-O"),Mv.forEach(a),Cu=c(pa," option (O stand for optimizer)"),pa.forEach(a),Hl=u(s),Wa=p(s,"PRE",{class:!0});var O_=l(Wa);O_.forEach(a),Ml=u(s),vs=p(s,"H4",{id:!0});var fh=l(vs);ys=p(fh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Lv=l(ys);co=p(Lv,"SPAN",{class:!0}),l(co).forEach(a),Lv.forEach(a),Au=c(fh,"flake8-bugbear"),fh.forEach(a),Ll=u(s),cn=p(s,"P",{});var Ov=l(cn);Du=c(Ov,"Adds more checks to the standard flake8 plugins"),Ov.forEach(a),Ol=u(s),Ka=p(s,"PRE",{class:!0});var N_=l(Ka);N_.forEach(a),Nl=u(s),kn=p(s,"P",{});var Nv=l(kn);Ru=c(Nv,"I disable B950, the line length one. Bugbear does with a 10% tolerance, I prefer the standard hard limit."),Nv.forEach(a),Fl=u(s),Ja=p(s,"PRE",{class:!0});var F_=l(Ja);F_.forEach(a),ql=u(s),bs=p(s,"H4",{id:!0});var dh=l(bs);_s=p(dh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fv=l(_s);io=p(Fv,"SPAN",{class:!0}),l(io).forEach(a),Fv.forEach(a),Hu=c(dh,"darglint and flake8-docstrings"),dh.forEach(a),Bl=u(s),L=p(s,"P",{});var Qo=l(L);ko=p(Qo,"STRONG",{});var qv=l(ko);Mu=c(qv,"Darglint"),qv.forEach(a),Lu=c(Qo," checks whether a docstring\u2019s description matches the actual function/method implementation. "),uo=p(Qo,"STRONG",{});var Bv=l(uo);Ou=c(Bv,"flake8-docstrings"),Bv.forEach(a),Nu=c(Qo," checks compliance with Python docstring conventions (most of PEP 257)"),Qo.forEach(a),Ul=u(s),Qa=p(s,"PRE",{class:!0});var q_=l(Qa);q_.forEach(a),zl=u(s),Xa=p(s,"PRE",{class:!0});var B_=l(Xa);B_.forEach(a),Vl=u(s),ws=p(s,"H4",{id:!0});var hh=l(ws);Es=p(hh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Uv=l(Es);fo=p(Uv,"SPAN",{class:!0}),l(fo).forEach(a),Uv.forEach(a),Fu=c(hh,"\u2026and many more"),hh.forEach(a),Gl=u(s),d=p(s,"UL",{});var y=l(d);un=p(y,"LI",{});var mh=l(un);ho=p(mh,"STRONG",{});var zv=l(ho);qu=c(zv,"flake8-builtins"),zv.forEach(a),Bu=c(mh," checks for python builtins being used as variables or parameters"),mh.forEach(a),Uu=u(y),fn=p(y,"LI",{});var vh=l(fn);mo=p(vh,"STRONG",{});var Vv=l(mo);zu=c(Vv,"flake8-comprehension"),Vv.forEach(a),Vu=c(vh," helps write better list/set/dict comprehension"),vh.forEach(a),Gu=u(y),dn=p(y,"LI",{});var yh=l(dn);vo=p(yh,"STRONG",{});var Gv=l(vo);Yu=c(Gv,"flake8-isort"),Gv.forEach(a),Wu=c(yh," ensures I have run isort on the code before committing"),yh.forEach(a),Ku=u(y),gs=p(y,"LI",{});var Xo=l(gs);yo=p(Xo,"STRONG",{});var Yv=l(yo);Ju=c(Yv,"flake8-mutable"),Yv.forEach(a),Qu=c(Xo," prevents issues when passing mutable default values to a function (for example, "),bo=p(Xo,"CODE",{});var Wv=l(bo);Xu=c(Wv,"def fnc(a, b={}):"),Wv.forEach(a),Zu=c(Xo,")"),Xo.forEach(a),sf=u(y),hn=p(y,"LI",{});var bh=l(hn);_o=p(bh,"STRONG",{});var Kv=l(_o);af=c(Kv,"flake8-pytest-style"),Kv.forEach(a),ef=c(bh," checks common style issues or inconsistencies with pytest-based tests"),bh.forEach(a),nf=u(y),mn=p(y,"LI",{});var _h=l(mn);wo=p(_h,"STRONG",{});var Jv=l(wo);tf=c(Jv,"flake8-simplify"),Jv.forEach(a),of=c(_h," gives hints for simplification"),_h.forEach(a),pf=u(y),vn=p(y,"LI",{});var wh=l(vn);Eo=p(wh,"STRONG",{});var Qv=l(Eo);lf=c(Qv,"pep8-naming"),Qv.forEach(a),rf=c(wh," enforces basic capitalisation practices, as per PEP 8"),wh.forEach(a),cf=u(y),yn=p(y,"LI",{});var Eh=l(yn);go=p(Eh,"STRONG",{});var Xv=l(go);kf=c(Xv,"pyflakes"),Xv.forEach(a),uf=c(Eh," checks for unused imports"),Eh.forEach(a),y.forEach(a),Yl=u(s),Za=p(s,"PRE",{class:!0});var U_=l(Za);U_.forEach(a),Wl=u(s),se=p(s,"PRE",{class:!0});var z_=l(se);z_.forEach(a),Kl=u(s),Is=p(s,"H3",{id:!0});var gh=l(Is);Ps=p(gh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Zv=l(Ps);Io=p(Zv,"SPAN",{class:!0}),l(Io).forEach(a),Zv.forEach(a),ff=c(gh,"Specimen setup: safety"),gh.forEach(a),Jl=u(s),bn=p(s,"P",{});var sy=l(bn);df=c(sy,"Safety checks third party packages against a database of known compromised ones."),sy.forEach(a),Ql=u(s),ae=p(s,"PRE",{class:!0});var V_=l(ae);V_.forEach(a),Xl=u(s),_n=p(s,"P",{});var ay=l(_n);hf=c(ay,"I run it from the Makefile. It could also be useful in a git hook"),ay.forEach(a),Zl=u(s),ee=p(s,"PRE",{class:!0});var G_=l(ee);G_.forEach(a),sr=u(s),ne=p(s,"PRE",{class:!0});var Y_=l(ne);Y_.forEach(a),ar=u(s),xs=p(s,"H3",{id:!0});var Ih=l(xs);Ts=p(Ih,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ey=l(Ts);Po=p(ey,"SPAN",{class:!0}),l(Po).forEach(a),ey.forEach(a),mf=c(Ih,"Specimen setup: mypy"),Ih.forEach(a),er=u(s),wn=p(s,"P",{});var ny=l(wn);vf=c(ny,"The last code quality tool: mypy, to check for type annotations."),ny.forEach(a),nr=u(s),te=p(s,"PRE",{class:!0});var W_=l(te);W_.forEach(a),tr=u(s),En=p(s,"P",{});var ty=l(En);yf=c(ty,"and the pyproject.toml changes"),ty.forEach(a),or=u(s),oe=p(s,"PRE",{class:!0});var K_=l(oe);K_.forEach(a),pr=u(s),gn=p(s,"P",{});var oy=l(gn);bf=c(oy,"Add to the Makefile"),oy.forEach(a),lr=u(s),pe=p(s,"PRE",{class:!0});var J_=l(pe);J_.forEach(a),rr=u(s),In=p(s,"P",{});var py=l(In);_f=c(py,"Check it works"),py.forEach(a),cr=u(s),le=p(s,"PRE",{class:!0});var Q_=l(le);Q_.forEach(a),ir=u(s),$s=p(s,"H3",{id:!0});var Ph=l($s);js=p(Ph,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ly=l(js);xo=p(ly,"SPAN",{class:!0}),l(xo).forEach(a),ly.forEach(a),wf=c(Ph,"Specimen setup: README, LICENCE and static documents"),Ph.forEach(a),kr=u(s),Pn=p(s,"P",{});var ry=l(Pn);Ef=c(ry,"The last piece of the puzzle is various static documents."),ry.forEach(a),ur=u(s),Ss=p(s,"UL",{});var hc=l(Ss);xn=p(hc,"LI",{});var xh=l(xn);gf=c(xh,"I adapted a README.md and a CHANGELOG.md from "),Tn=p(xh,"A",{href:!0});var cy=l(Tn);If=c(cy,"https://github.com/othneildrew/Best-README-Template/"),cy.forEach(a),xh.forEach(a),Pf=u(hc),To=p(hc,"LI",{});var iy=l(To);xf=c(iy,"the LICENSE file is standard MIT"),iy.forEach(a),hc.forEach(a),fr=u(s),$n=p(s,"P",{});var ky=l($n);Tf=c(ky,"That is all I need. Of course, I could keep adding and fine tuning stuff (and I probably will). But this is good enough to start."),ky.forEach(a),dr=u(s),Cs=p(s,"H2",{id:!0});var Th=l(Cs);As=p(Th,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var uy=l(As);$o=p(uy,"SPAN",{class:!0}),l($o).forEach(a),uy.forEach(a),$f=c(Th,"Step 2: Creating the Cookiecutter template from the specimen project"),Th.forEach(a),hr=u(s),jn=p(s,"P",{});var fy=l(jn);jf=c(fy,"With that out of the way, I make a copy of the whole directory and start turning it into a minimal cookiecutter template. For starters, just an exact copy of the project, with only the folder name changed:"),fy.forEach(a),mr=u(s),re=p(s,"PRE",{class:!0});var X_=l(re);X_.forEach(a),vr=u(s),Sn=p(s,"P",{});var dy=l(Sn);Sf=c(dy,"That\u2019s it, it works. But that\u2019s not a real test, it\u2019s just a sanity check. I can do better."),dy.forEach(a),yr=u(s),Ds=p(s,"H3",{id:!0});var $h=l(Ds);Rs=p($h,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hy=l(Rs);jo=p(hy,"SPAN",{class:!0}),l(jo).forEach(a),hy.forEach(a),Cf=c($h,"Testing a cookiecutter template with pytest-cookies"),$h.forEach(a),br=u(s),Hs=p(s,"P",{});var mc=l(Hs);Af=c(mc,"Before attempting testing, I should apply the same code quality tooling as in the template. I copy the Makefile, and cannibalize the bits of the pyproject.toml I need, then run poetry install. You can see the result "),ce=p(mc,"A",{href:!0,rel:!0});var my=l(ce);Df=c(my,"in the template repo"),my.forEach(a),Rf=c(mc,". Now, on with the testing."),mc.forEach(a),_r=u(s),Ms=p(s,"P",{});var vc=l(Ms);Hf=c(vc,"Cookiecutter templates can, and should, be tested with "),So=p(vc,"CODE",{});var vy=l(So);Mf=c(vy,"pytest-cookies"),vy.forEach(a),Lf=c(vc,"."),vc.forEach(a),wr=u(s),ie=p(s,"PRE",{class:!0});var Z_=l(ie);Z_.forEach(a),Er=u(s),Cn=p(s,"P",{});var yy=l(Cn);Of=c(yy,"The initial test is simple, it checks that the template is created:"),yy.forEach(a),gr=u(s),ke=p(s,"PRE",{class:!0});var sw=l(ke);sw.forEach(a),Ir=u(s),Ls=p(s,"P",{});var yc=l(Ls);Nf=c(yc,"The pytest_cookies package injects a "),Co=p(yc,"CODE",{});var by=l(Co);Ff=c(by,"cookies"),by.forEach(a),qf=c(yc," fixture in all your tests. It is a wrapper around cookiecutter that makes it run in a private directory. The run returns an instance of the Result class, which includes almost all the properties in the example above. Here, I check the general idea of it and one of the generated files."),yc.forEach(a),Pr=u(s),M=p(s,"P",{});var Gn=l(M);Bf=c(Gn,"Now, I just need to go through each file and directory and see what can be parametrised and moved to "),Ao=p(Gn,"CODE",{});var _y=l(Ao);Uf=c(_y,"cookiecutter.json"),_y.forEach(a),zf=c(Gn,". For example, replace the content of "),Do=p(Gn,"CODE",{});var wy=l(Do);Vf=c(wy,"/.python-version"),wy.forEach(a),Gf=c(Gn," with:"),Gn.forEach(a),xr=u(s),ue=p(s,"PRE",{class:!0});var aw=l(ue);aw.forEach(a),Tr=u(s),fe=p(s,"P",{});var jh=l(fe);Yf=c(jh,"and then add it to the "),Ro=p(jh,"CODE",{});var Ey=l(Ro);Wf=c(Ey,"cookiecutter.json"),Ey.forEach(a),jh.forEach(a),$r=u(s),de=p(s,"PRE",{class:!0});var ew=l(de);ew.forEach(a),jr=u(s),An=p(s,"P",{});var gy=l(An);Kf=c(gy,"and so on."),gy.forEach(a),Sr=u(s),Dn=p(s,"P",{});var Iy=l(Dn);Jf=c(Iy,"At the end of this step I\u2019m left with this directory tree"),Iy.forEach(a),Cr=u(s),he=p(s,"PRE",{class:!0});var nw=l(he);nw.forEach(a),Ar=u(s),Os=p(s,"P",{});var bc=l(Os);Qf=c(bc,"And a "),Ho=p(bc,"CODE",{});var Py=l(Ho);Xf=c(Py,"cookiecutter.json"),Py.forEach(a),Zf=c(bc," with"),bc.forEach(a),Dr=u(s),me=p(s,"PRE",{class:!0});var tw=l(me);tw.forEach(a),Rr=u(s),Rn=p(s,"P",{});var xy=l(Rn);sd=c(xy,"I will not test every value. However, I will expand the existing test to add a few more values that should go in the same file. I can also get slightly fancier."),xy.forEach(a),Hr=u(s),Ns=p(s,"H3",{id:!0});var Sh=l(Ns);Fs=p(Sh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ty=l(Fs);Mo=p(Ty,"SPAN",{class:!0}),l(Mo).forEach(a),Ty.forEach(a),ad=c(Sh,"Automatically run tests in a generated cookiecutter template"),Sh.forEach(a),Mr=u(s),qs=p(s,"P",{});var _c=l(qs);ed=c(_c,"First, I can test the generated files to see if none of them have "),Lo=p(_c,"CODE",{});var $y=l(Lo);nd=c($y,"{{cookiecutter.xxxx}}"),$y.forEach(a),td=c(_c," in them. That is easy. The Result object gives me a Posix path of the root of the generated project. So, I can call its glob method to get the whole folder tree below it."),_c.forEach(a),Lr=u(s),ve=p(s,"PRE",{class:!0});var ow=l(ve);ow.forEach(a),Or=u(s),Bs=p(s,"P",{});var wc=l(Bs);od=c(wc,"Second, I can run the project\u2019s own tests after it is generated. It doesn\u2019t get safer than that! Again, thanks to "),Oo=p(wc,"EM",{});var jy=l(Oo);pd=c(jy,"pytest-cookies"),jy.forEach(a),ld=c(wc,", which generates the project in a sandboxed folder and then provides a Posix object of its location."),wc.forEach(a),Nr=u(s),ye=p(s,"PRE",{class:!0});var pw=l(ye);pw.forEach(a),Fr=u(s),Hn=p(s,"P",{});var Sy=l(Hn);rd=c(Sy,"Almost there. Now I need to take care of the dynamically generated values."),Sy.forEach(a),qr=u(s),Us=p(s,"H3",{id:!0});var Ch=l(Us);zs=p(Ch,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cy=l(zs);No=p(Cy,"SPAN",{class:!0}),l(No).forEach(a),Cy.forEach(a),cd=c(Ch,"Using post generation hooks in Cookiecutter templates"),Ch.forEach(a),Br=u(s),Vs=p(s,"P",{});var Ec=l(Vs);id=c(Ec,"First the easy one. The "),Fo=p(Ec,"CODE",{});var Ay=l(Fo);kd=c(Ay,".env"),Ay.forEach(a),ud=c(Ec," file need to include the path of the directory of the newly created project. I write a test for that."),Ec.forEach(a),Ur=u(s),be=p(s,"PRE",{class:!0});var lw=l(be);lw.forEach(a),zr=u(s),Mn=p(s,"P",{});var Dy=l(Mn);fd=c(Dy,"Luckily, the cwd is made available in cookiecutter as \u201D_output_dir\u201D. So the .env file in the template simply becomes"),Dy.forEach(a),Vr=u(s),_e=p(s,"PRE",{class:!0});var rw=l(_e);rw.forEach(a),Gr=u(s),Gs=p(s,"P",{});var gc=l(Gs);dd=c(gc,"Now the python executable path. This is tricky. It can only be run once the project is generated and "),qo=p(gc,"CODE",{});var Ry=l(qo);hd=c(Ry,"poetry install"),Ry.forEach(a),md=c(gc," has run. But then the cookiecutter variables will no longer be available. So I have to come up with my own replacement engine. Not too happy about that, but it\u2019s only a small string fragment:"),gc.forEach(a),Yr=u(s),Ys=p(s,"P",{});var Ic=l(Ys);vd=c(Ic,"First I set up the json template. "),Bo=p(Ic,"CODE",{});var Hy=l(Bo);yd=c(Hy,"<interpreter_path>"),Hy.forEach(a),bd=c(Ic," will be the variable I need to replace."),Ic.forEach(a),Wr=u(s),we=p(s,"PRE",{class:!0});var cw=l(we);cw.forEach(a),Kr=u(s),v=p(s,"P",{});var x=l(v);_d=c(x,"Then the cookiecutter hook installs the poetry dependencies, updates the settings file, and creates the first git commit. Cookiecutter offers two hooks: "),Uo=p(x,"CODE",{});var My=l(Uo);wd=c(My,"pre_gen_project.sh"),My.forEach(a),Ed=c(x," and "),zo=p(x,"CODE",{});var Ly=l(zo);gd=c(Ly,"post_gen_project.sh"),Ly.forEach(a),Id=c(x,". Both live in the hooks directory and can be either python or shell scripts. "),Vo=p(x,"I",{});var Oy=l(Vo);Pd=c(Oy,"pre_gen_project"),Oy.forEach(a),xd=c(x," runs before generating the project. It is mostly used for validation. Since it cannot change the values loaded from "),Go=p(x,"CODE",{});var Ny=l(Go);Td=c(Ny,"cookiecutter.json"),Ny.forEach(a),$d=c(x,", its usefulness is limited. "),Yo=p(x,"I",{});var Fy=l(Yo);jd=c(Fy,"post_gen_project"),Fy.forEach(a),Sd=c(x," runs after the build."),x.forEach(a),Jr=u(s),Ws=p(s,"P",{});var Pc=l(Ws);Cd=c(Pc,"I will use the "),Wo=p(Pc,"EM",{});var qy=l(Wo);Ad=c(qy,"awk"),qy.forEach(a),Dd=c(Pc," command from earlier to determine the location of the python executable. This will be fed into a sed command, which will replace the string in the json file. Sed and awk are similar CLI programs. They both are stream based. Meaning you feed text into them, and they spit text out at the other end. You can manipulate the text before it is spit out. But there is only one pass. Awk assumes the input text is spreadsheet-like and tries to split it into columns. Then it gives access to the individual columns. Sed treats lines of text as lines and allows overwriting them before spitting them out again."),Pc.forEach(a),Qr=u(s),Ee=p(s,"PRE",{class:!0});var iw=l(Ee);iw.forEach(a),Xr=u(s),Ks=p(s,"H2",{id:!0});var Ah=l(Ks);Js=p(Ah,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var By=l(Js);Ko=p(By,"SPAN",{class:!0}),l(Ko).forEach(a),By.forEach(a),Rd=c(Ah,"Step 3: push to github and test"),Ah.forEach(a),Zr=u(s),Ln=p(s,"P",{});var Uy=l(Ln);Hd=c(Uy,"The final test is to push the template to github and try to fetch it from there"),Uy.forEach(a),sc=u(s),ge=p(s,"PRE",{class:!0});var kw=l(ge);kw.forEach(a),ac=u(s),On=p(s,"P",{});var zy=l(On);Md=c(zy,"And that\u2019s finally it. A basic Python project template. It\u2019s very bare - it has neither CLI framework nor DS tools nor a web server. Just the code quality tools and VSCode. But it\u2019s a starting point, and I\u2019ll be adding to it. Hope you find it useful."),zy.forEach(a),ec=u(s),Qs=p(s,"H2",{id:!0});var Dh=l(Qs);Xs=p(Dh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vy=l(Xs);Jo=p(Vy,"SPAN",{class:!0}),l(Jo).forEach(a),Vy.forEach(a),Ld=c(Dh,"Acknowledgements"),Dh.forEach(a),nc=u(s),Zs=p(s,"P",{});var xc=l(Zs);Od=c(xc,"Half way through writing this post I came across a very similar one from PythonCheatSheet: "),Ie=p(xc,"A",{href:!0,rel:!0});var Gy=l(Ie);Nd=c(Gy,"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),Gy.forEach(a),Fd=c(xc,". I carried on with mine, regardless."),xc.forEach(a),tc=u(s),Pe=p(s,"P",{});var Rh=l(Pe);qd=c(Rh,"The awk command comes from SO, of course "),xe=p(Rh,"A",{href:!0,rel:!0});var Yy=l(xe);Bd=c(Yy,"https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),Yy.forEach(a),Rh.forEach(a),oc=u(s),Te=p(s,"P",{});var Hh=l(Te);Ud=c(Hh,"Discussion on how to fetch the executable path on the CLI for poetry env command "),$e=p(Hh,"A",{href:!0,rel:!0});var Wy=l($e);zd=c(Wy,"https://github.com/python-poetry/poetry/pull/731"),Wy.forEach(a),Hh.forEach(a),pc=u(s),je=p(s,"P",{});var Mh=l(je);Vd=c(Mh,"More info on how the VSCode settings work "),Se=p(Mh,"A",{href:!0,rel:!0});var Ky=l(Se);Gd=c(Ky,"https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),Ky.forEach(a),Mh.forEach(a),lc=u(s),Ce=p(s,"P",{});var Lh=l(Ce);Yd=c(Lh,"Pytest coverage and code layout "),Ae=p(Lh,"A",{href:!0,rel:!0});var Jy=l(Ae);Wd=c(Jy,"https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),Jy.forEach(a),Lh.forEach(a),rc=u(s),De=p(s,"P",{});var Oh=l(De);Kd=c(Oh,`The article that showed me about Flakeheaven
`),Re=p(Oh,"A",{href:!0,rel:!0});var Qy=l(Re);Jd=c(Qy,"https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),Qy.forEach(a),Oh.forEach(a),cc=u(s),He=p(s,"P",{});var Nh=l(He);Qd=c(Nh,"A README file template "),Me=p(Nh,"A",{href:!0,rel:!0});var Xy=l(Me);Xd=c(Xy,"https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),Xy.forEach(a),Nh.forEach(a),this.h()},h(){i(Yn,"class","icon icon-link"),i(O,"aria-hidden","true"),i(O,"tabindex","-1"),i(O,"href","#creating-a-python-project-from-scratch-how-boring"),i($,"id","creating-a-python-project-from-scratch-how-boring"),i(la,"href","https://plopjs.com/"),i(la,"rel","nofollow"),i(ra,"href","https://cookiecutter.readthedocs.io/"),i(ra,"rel","nofollow"),i(Kn,"class","icon icon-link"),i(F,"aria-hidden","true"),i(F,"tabindex","-1"),i(F,"href","#tldr-heres-the-template"),i(N,"id","tldr-heres-the-template"),i(ca,"class","language-bash"),i(Jn,"class","icon icon-link"),i(B,"aria-hidden","true"),i(B,"tabindex","-1"),i(B,"href","#the-plan"),i(q,"id","the-plan"),i(st,"class","icon icon-link"),i(z,"aria-hidden","true"),i(z,"tabindex","-1"),i(z,"href","#step-0-prerequisites"),i(U,"id","step-0-prerequisites"),i(Ne,"href","installing-python-on-mac-os-x-in-2022"),i(ia,"href","https://python-poetry.org/"),i(ia,"rel","nofollow"),i(at,"class","icon icon-link"),i(G,"aria-hidden","true"),i(G,"tabindex","-1"),i(G,"href","#step-1-create-a-project-specimen"),i(V,"id","step-1-create-a-project-specimen"),i(et,"class","icon icon-link"),i(W,"aria-hidden","true"),i(W,"tabindex","-1"),i(W,"href","#specimen-setup-poetry"),i(Y,"id","specimen-setup-poetry"),i(ka,"class","language-bash"),i(ua,"class","language-bash"),i(nt,"class","icon icon-link"),i(J,"aria-hidden","true"),i(J,"tabindex","-1"),i(J,"href","#specimen-setup-git"),i(K,"id","specimen-setup-git"),i(fa,"href","https://www.toptal.com/"),i(fa,"rel","nofollow"),i(da,"class","language-bash"),i(pt,"class","icon icon-link"),i(X,"aria-hidden","true"),i(X,"tabindex","-1"),i(X,"href","#specimen-setup-initial-folder-structure"),i(Q,"id","specimen-setup-initial-folder-structure"),i(ha,"class","language-bash"),i(it,"class","icon icon-link"),i(ss,"aria-hidden","true"),i(ss,"tabindex","-1"),i(ss,"href","#specimen-setup-wire-up-vscode-to-the-poetry-python-environment"),i(Z,"id","specimen-setup-wire-up-vscode-to-the-poetry-python-environment"),i(ma,"class","language-bash"),i(va,"class","language-bash"),i(f,"class","code-breakdown"),i(ba,"class","language-bash"),i(_a,"class","language-json"),i(wa,"class","language-bash"),i(qt,"class","icon icon-link"),i(es,"aria-hidden","true"),i(es,"tabindex","-1"),i(es,"href","#specimen-setup-tests"),i(as,"id","specimen-setup-tests"),i(Ea,"class","language-python"),i(ga,"class","language-bash"),i(Ia,"class","language-bash"),i(Pa,"class","language-toml"),i(xa,"class","language-bash"),i(Ta,"class","language-python"),i($a,"class","language-bash"),i(ja,"class","language-toml"),i(Sa,"class","language-bash"),i(Gt,"class","icon icon-link"),i(ps,"aria-hidden","true"),i(ps,"tabindex","-1"),i(ps,"href","#adding-a-faker-fixture-to-the-template"),i(os,"id","adding-a-faker-fixture-to-the-template"),i(Ca,"class","language-python"),i(Yt,"class","icon icon-link"),i(rs,"aria-hidden","true"),i(rs,"tabindex","-1"),i(rs,"href","#specimen-setup-makefile"),i(ls,"id","specimen-setup-makefile"),i(Aa,"href","https://gist.github.com/gotofritz/62b58e89d2100448af5503940736bd1f"),i(Aa,"rel","nofollow"),i(Da,"class","language-makefile"),i(Ra,"class","language-bash"),i(Ha,"class","language-bash"),i(Wt,"class","icon icon-link"),i(ks,"aria-hidden","true"),i(ks,"tabindex","-1"),i(ks,"href","#specimen-setup-formatting-with-black-and-isort"),i(is,"id","specimen-setup-formatting-with-black-and-isort"),i(Ma,"href","https://github.com/psf/black/issues/333#issuecomment-414123095"),i(Ma,"rel","nofollow"),i(La,"class","language-diff"),i(Oa,"class","language-bash"),i(Na,"class","language-bash"),i(Fa,"class","language-diff"),i(qa,"class","language-bash"),i(ao,"class","icon icon-link"),i(ds,"aria-hidden","true"),i(ds,"tabindex","-1"),i(ds,"href","#specimen-setup-add-flake8-and-plugins"),i(fs,"id","specimen-setup-add-flake8-and-plugins"),i(Ba,"href","https://flakeheaven.readthedocs.io/"),i(Ba,"rel","nofollow"),i(Ua,"href","https://github.com/flakeheaven/flakeheaven/issues/132"),i(Ua,"rel","nofollow"),i(za,"class","language-bash"),i(Va,"class","language-diff"),i(Ga,"class","language-diff"),i(oo,"class","icon icon-link"),i(ms,"aria-hidden","true"),i(ms,"tabindex","-1"),i(ms,"href","#flake8-bandit"),i(hs,"id","flake8-bandit"),i(Ya,"class","language-bash"),i(Wa,"class","language-diff"),i(co,"class","icon icon-link"),i(ys,"aria-hidden","true"),i(ys,"tabindex","-1"),i(ys,"href","#flake8-bugbear"),i(vs,"id","flake8-bugbear"),i(Ka,"class","language-bash"),i(Ja,"class","language-diff"),i(io,"class","icon icon-link"),i(_s,"aria-hidden","true"),i(_s,"tabindex","-1"),i(_s,"href","#darglint-and-flake8-docstrings"),i(bs,"id","darglint-and-flake8-docstrings"),i(Qa,"class","language-bash"),i(Xa,"class","language-diff"),i(fo,"class","icon icon-link"),i(Es,"aria-hidden","true"),i(Es,"tabindex","-1"),i(Es,"href","#and-many-more"),i(ws,"id","and-many-more"),i(Za,"class","language-bash"),i(se,"class","language-diff"),i(Io,"class","icon icon-link"),i(Ps,"aria-hidden","true"),i(Ps,"tabindex","-1"),i(Ps,"href","#specimen-setup-safety"),i(Is,"id","specimen-setup-safety"),i(ae,"class","language-bash"),i(ee,"class","language-diff"),i(ne,"class","language-bash"),i(Po,"class","icon icon-link"),i(Ts,"aria-hidden","true"),i(Ts,"tabindex","-1"),i(Ts,"href","#specimen-setup-mypy"),i(xs,"id","specimen-setup-mypy"),i(te,"class","language-bash"),i(oe,"class","language-diff"),i(pe,"class","language-diff"),i(le,"class","language-bash"),i(xo,"class","icon icon-link"),i(js,"aria-hidden","true"),i(js,"tabindex","-1"),i(js,"href","#specimen-setup-readme-licence-and-static-documents"),i($s,"id","specimen-setup-readme-licence-and-static-documents"),i(Tn,"href","othneildrew/Best-README-Template"),i($o,"class","icon icon-link"),i(As,"aria-hidden","true"),i(As,"tabindex","-1"),i(As,"href","#step-2-creating-the-cookiecutter-template-from-the-specimen-project"),i(Cs,"id","step-2-creating-the-cookiecutter-template-from-the-specimen-project"),i(re,"class","language-bash"),i(jo,"class","icon icon-link"),i(Rs,"aria-hidden","true"),i(Rs,"tabindex","-1"),i(Rs,"href","#testing-a-cookiecutter-template-with-pytest-cookies"),i(Ds,"id","testing-a-cookiecutter-template-with-pytest-cookies"),i(ce,"href","https://github.com/gotofritz/cookiecutter-gotofritz-poetry"),i(ce,"rel","nofollow"),i(ie,"class","language-bash"),i(ke,"class","language-python"),i(ue,"class","language-json"),i(de,"class","language-json"),i(he,"class","language-bash"),i(me,"class","language-json"),i(Mo,"class","icon icon-link"),i(Fs,"aria-hidden","true"),i(Fs,"tabindex","-1"),i(Fs,"href","#automatically-run-tests-in-a-generated-cookiecutter-template"),i(Ns,"id","automatically-run-tests-in-a-generated-cookiecutter-template"),i(ve,"class","language-python"),i(ye,"class","language-python"),i(No,"class","icon icon-link"),i(zs,"aria-hidden","true"),i(zs,"tabindex","-1"),i(zs,"href","#using-post-generation-hooks-in-cookiecutter-templates"),i(Us,"id","using-post-generation-hooks-in-cookiecutter-templates"),i(be,"class","language-python"),i(_e,"class","language-sh"),i(we,"class","language-diff"),i(Ee,"class","language-bash"),i(Ko,"class","icon icon-link"),i(Js,"aria-hidden","true"),i(Js,"tabindex","-1"),i(Js,"href","#step-3-push-to-github-and-test"),i(Ks,"id","step-3-push-to-github-and-test"),i(ge,"class","language-bash"),i(Jo,"class","icon icon-link"),i(Xs,"aria-hidden","true"),i(Xs,"tabindex","-1"),i(Xs,"href","#acknowledgements"),i(Qs,"id","acknowledgements"),i(Ie,"href","https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),i(Ie,"rel","nofollow"),i(xe,"href","https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),i(xe,"rel","nofollow"),i($e,"href","https://github.com/python-poetry/poetry/pull/731"),i($e,"rel","nofollow"),i(Se,"href","https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),i(Se,"rel","nofollow"),i(Ae,"href","https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),i(Ae,"rel","nofollow"),i(Re,"href","https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),i(Re,"rel","nofollow"),i(Me,"href","https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),i(Me,"rel","nofollow")},m(s,n){t(s,$,n),e($,O),e(O,Yn),e($,Tc),t(s,Zo,n),t(s,_,n),e(_,$c),e(_,la),e(la,jc),e(_,Sc),e(_,ra),e(ra,Cc),e(_,Ac),e(_,Wn),e(Wn,Dc),e(_,Rc),t(s,sp,n),t(s,N,n),e(N,F),e(F,Kn),e(N,Hc),t(s,ap,n),t(s,Le,n),e(Le,Mc),t(s,ep,n),t(s,ca,n),ca.innerHTML=sb,t(s,np,n),t(s,q,n),e(q,B),e(B,Jn),e(q,Lc),t(s,tp,n),t(s,Oe,n),e(Oe,Oc),t(s,op,n),t(s,j,n),e(j,Qn),e(Qn,Nc),e(j,Fc),e(j,Xn),e(Xn,qc),e(j,Bc),e(j,Zn),e(Zn,Uc),t(s,pp,n),t(s,U,n),e(U,z),e(z,st),e(U,zc),t(s,lp,n),t(s,S,n),e(S,Vc),e(S,Ne),e(Ne,Gc),e(S,Yc),e(S,ia),e(ia,Wc),e(S,Kc),t(s,rp,n),t(s,V,n),e(V,G),e(G,at),e(V,Jc),t(s,cp,n),t(s,Y,n),e(Y,W),e(W,et),e(Y,Qc),t(s,ip,n),t(s,Fe,n),e(Fe,Xc),t(s,kp,n),t(s,ka,n),ka.innerHTML=ab,t(s,up,n),t(s,qe,n),e(qe,Zc),t(s,fp,n),t(s,ua,n),ua.innerHTML=eb,t(s,dp,n),t(s,K,n),e(K,J),e(J,nt),e(K,si),t(s,hp,n),t(s,w,n),e(w,ai),e(w,fa),e(fa,ei),e(w,ni),e(w,tt),e(tt,ti),e(w,oi),e(w,ot),e(ot,pi),e(w,li),t(s,mp,n),t(s,da,n),da.innerHTML=nb,t(s,vp,n),t(s,Q,n),e(Q,X),e(X,pt),e(Q,ri),t(s,yp,n),t(s,E,n),e(E,ci),e(E,lt),e(lt,ii),e(E,ki),e(E,rt),e(rt,ui),e(E,fi),e(E,ct),e(ct,di),e(E,hi),t(s,bp,n),t(s,ha,n),ha.innerHTML=tb,t(s,_p,n),t(s,Z,n),e(Z,ss),e(ss,it),e(Z,mi),t(s,wp,n),t(s,C,n),e(C,vi),e(C,kt),e(kt,yi),e(C,bi),e(C,ut),e(ut,_i),e(C,wi),t(s,Ep,n),t(s,ma,n),ma.innerHTML=ob,t(s,gp,n),t(s,A,n),e(A,Ei),e(A,ft),e(ft,gi),e(A,Ii),e(A,dt),e(dt,Pi),e(A,xi),t(s,Ip,n),t(s,va,n),va.innerHTML=pb,t(s,Pp,n),t(s,Be,n),e(Be,Ti),t(s,xp,n),t(s,f,n),e(f,ht),e(ht,$i),e(f,mt),e(mt,ji),e(f,vt),e(vt,Si),e(f,yt),e(yt,Ci),e(f,bt),e(bt,Ai),e(f,_t),e(_t,Di),e(f,wt),e(wt,Ri),e(f,Et),e(Et,Hi),e(f,gt),e(gt,Mi),e(f,It),e(It,Li),e(f,Pt),e(Pt,Oi),e(f,T),e(T,Ni),e(T,xt),e(xt,Fi),e(T,qi),e(T,Tt),e(Tt,Bi),e(T,Ui),e(T,$t),e($t,zi),e(T,Vi),e(f,jt),e(jt,Gi),e(f,ya),e(ya,Yi),e(ya,St),e(St,Wi),e(ya,Ki),e(f,Ct),e(Ct,Ji),e(f,At),e(At,Qi),e(f,Dt),e(Dt,Xi),e(f,Rt),e(Rt,Zi),t(s,Tp,n),t(s,D,n),e(D,sk),e(D,Ht),e(Ht,ak),e(D,ek),e(D,Mt),e(Mt,nk),e(D,tk),t(s,$p,n),t(s,ba,n),ba.innerHTML=lb,t(s,jp,n),t(s,Ue,n),e(Ue,ok),t(s,Sp,n),t(s,ze,n),e(ze,Lt),e(Lt,pk),t(s,Cp,n),t(s,_a,n),_a.innerHTML=rb,t(s,Ap,n),t(s,Ve,n),e(Ve,lk),t(s,Dp,n),t(s,wa,n),wa.innerHTML=cb,t(s,Rp,n),t(s,g,n),e(g,rk),e(g,Ot),e(Ot,ck),e(g,ik),e(g,Nt),e(Nt,kk),e(g,uk),e(g,Ft),e(Ft,fk),e(g,dk),t(s,Hp,n),t(s,as,n),e(as,es),e(es,qt),e(as,hk),t(s,Mp,n),t(s,Ge,n),e(Ge,mk),t(s,Lp,n),t(s,Ea,n),Ea.innerHTML=ib,t(s,Op,n),t(s,Ye,n),e(Ye,vk),t(s,Np,n),t(s,ga,n),ga.innerHTML=kb,t(s,Fp,n),t(s,We,n),e(We,yk),t(s,qp,n),t(s,Ia,n),Ia.innerHTML=ub,t(s,Bp,n),t(s,Ke,n),e(Ke,bk),t(s,Up,n),t(s,Pa,n),Pa.innerHTML=fb,t(s,zp,n),t(s,ns,n),e(ns,_k),e(ns,Bt),e(Bt,wk),e(ns,Ek),t(s,Vp,n),t(s,xa,n),xa.innerHTML=db,t(s,Gp,n),t(s,Je,n),e(Je,gk),t(s,Yp,n),t(s,Ta,n),Ta.innerHTML=hb,t(s,Wp,n),t(s,R,n),e(R,Ik),e(R,Ut),e(Ut,Pk),e(R,xk),e(R,zt),e(zt,Tk),e(R,$k),t(s,Kp,n),t(s,$a,n),$a.innerHTML=mb,t(s,Jp,n),t(s,ts,n),e(ts,jk),e(ts,Vt),e(Vt,Sk),e(ts,Ck),t(s,Qp,n),t(s,ja,n),ja.innerHTML=vb,t(s,Xp,n),t(s,Qe,n),e(Qe,Ak),t(s,Zp,n),t(s,Sa,n),Sa.innerHTML=yb,t(s,sl,n),t(s,os,n),e(os,ps),e(ps,Gt),e(os,Dk),t(s,al,n),t(s,Xe,n),e(Xe,Rk),t(s,el,n),t(s,Ca,n),Ca.innerHTML=bb,t(s,nl,n),t(s,ls,n),e(ls,rs),e(rs,Yt),e(ls,Hk),t(s,tl,n),t(s,cs,n),e(cs,Mk),e(cs,Aa),e(Aa,Lk),e(cs,Ok),t(s,ol,n),t(s,Da,n),Da.innerHTML=_b,t(s,pl,n),t(s,Ze,n),e(Ze,Nk),t(s,ll,n),t(s,Ra,n),Ra.innerHTML=wb,t(s,rl,n),t(s,sn,n),e(sn,Fk),t(s,cl,n),t(s,Ha,n),Ha.innerHTML=Eb,t(s,il,n),t(s,is,n),e(is,ks),e(ks,Wt),e(is,qk),t(s,kl,n),t(s,an,n),e(an,Bk),t(s,ul,n),t(s,us,n),e(us,Uk),e(us,Ma),e(Ma,zk),e(us,Vk),t(s,fl,n),t(s,en,n),e(en,Gk),t(s,dl,n),t(s,La,n),La.innerHTML=gb,t(s,hl,n),t(s,nn,n),e(nn,Yk),t(s,ml,n),t(s,Oa,n),Oa.innerHTML=Ib,t(s,vl,n),t(s,m,n),e(m,Kt),e(Kt,Wk),e(m,Kk),e(m,Jt),e(Jt,Jk),e(m,Qk),e(m,Qt),e(Qt,Xk),e(m,Zk),e(m,Xt),e(Xt,su),e(m,au),e(m,Zt),e(Zt,eu),e(m,nu),e(m,so),e(so,tu),e(m,ou),t(s,yl,n),t(s,Na,n),Na.innerHTML=Pb,t(s,bl,n),t(s,tn,n),e(tn,pu),t(s,_l,n),t(s,Fa,n),Fa.innerHTML=xb,t(s,wl,n),t(s,on,n),e(on,lu),t(s,El,n),t(s,qa,n),qa.innerHTML=Tb,t(s,gl,n),t(s,fs,n),e(fs,ds),e(ds,ao),e(fs,ru),t(s,Il,n),t(s,H,n),e(H,cu),e(H,Ba),e(Ba,iu),e(H,ku),e(H,Ua),e(Ua,uu),e(H,fu),t(s,Pl,n),t(s,za,n),za.innerHTML=$b,t(s,xl,n),t(s,I,n),e(I,du),e(I,eo),e(eo,hu),e(I,mu),e(I,no),e(no,vu),e(I,yu),e(I,to),e(to,bu),e(I,_u),t(s,Tl,n),t(s,Va,n),Va.innerHTML=jb,t(s,$l,n),t(s,pn,n),e(pn,wu),t(s,jl,n),t(s,Ga,n),Ga.innerHTML=Sb,t(s,Sl,n),t(s,ln,n),e(ln,Eu),t(s,Cl,n),t(s,hs,n),e(hs,ms),e(ms,oo),e(hs,gu),t(s,Al,n),t(s,rn,n),e(rn,Iu),t(s,Dl,n),t(s,Ya,n),Ya.innerHTML=Cb,t(s,Rl,n),t(s,P,n),e(P,Pu),e(P,po),e(po,xu),e(P,Tu),e(P,lo),e(lo,$u),e(P,ju),e(P,ro),e(ro,Su),e(P,Cu),t(s,Hl,n),t(s,Wa,n),Wa.innerHTML=Ab,t(s,Ml,n),t(s,vs,n),e(vs,ys),e(ys,co),e(vs,Au),t(s,Ll,n),t(s,cn,n),e(cn,Du),t(s,Ol,n),t(s,Ka,n),Ka.innerHTML=Db,t(s,Nl,n),t(s,kn,n),e(kn,Ru),t(s,Fl,n),t(s,Ja,n),Ja.innerHTML=Rb,t(s,ql,n),t(s,bs,n),e(bs,_s),e(_s,io),e(bs,Hu),t(s,Bl,n),t(s,L,n),e(L,ko),e(ko,Mu),e(L,Lu),e(L,uo),e(uo,Ou),e(L,Nu),t(s,Ul,n),t(s,Qa,n),Qa.innerHTML=Hb,t(s,zl,n),t(s,Xa,n),Xa.innerHTML=Mb,t(s,Vl,n),t(s,ws,n),e(ws,Es),e(Es,fo),e(ws,Fu),t(s,Gl,n),t(s,d,n),e(d,un),e(un,ho),e(ho,qu),e(un,Bu),e(d,Uu),e(d,fn),e(fn,mo),e(mo,zu),e(fn,Vu),e(d,Gu),e(d,dn),e(dn,vo),e(vo,Yu),e(dn,Wu),e(d,Ku),e(d,gs),e(gs,yo),e(yo,Ju),e(gs,Qu),e(gs,bo),e(bo,Xu),e(gs,Zu),e(d,sf),e(d,hn),e(hn,_o),e(_o,af),e(hn,ef),e(d,nf),e(d,mn),e(mn,wo),e(wo,tf),e(mn,of),e(d,pf),e(d,vn),e(vn,Eo),e(Eo,lf),e(vn,rf),e(d,cf),e(d,yn),e(yn,go),e(go,kf),e(yn,uf),t(s,Yl,n),t(s,Za,n),Za.innerHTML=Lb,t(s,Wl,n),t(s,se,n),se.innerHTML=Ob,t(s,Kl,n),t(s,Is,n),e(Is,Ps),e(Ps,Io),e(Is,ff),t(s,Jl,n),t(s,bn,n),e(bn,df),t(s,Ql,n),t(s,ae,n),ae.innerHTML=Nb,t(s,Xl,n),t(s,_n,n),e(_n,hf),t(s,Zl,n),t(s,ee,n),ee.innerHTML=Fb,t(s,sr,n),t(s,ne,n),ne.innerHTML=qb,t(s,ar,n),t(s,xs,n),e(xs,Ts),e(Ts,Po),e(xs,mf),t(s,er,n),t(s,wn,n),e(wn,vf),t(s,nr,n),t(s,te,n),te.innerHTML=Bb,t(s,tr,n),t(s,En,n),e(En,yf),t(s,or,n),t(s,oe,n),oe.innerHTML=Ub,t(s,pr,n),t(s,gn,n),e(gn,bf),t(s,lr,n),t(s,pe,n),pe.innerHTML=zb,t(s,rr,n),t(s,In,n),e(In,_f),t(s,cr,n),t(s,le,n),le.innerHTML=Vb,t(s,ir,n),t(s,$s,n),e($s,js),e(js,xo),e($s,wf),t(s,kr,n),t(s,Pn,n),e(Pn,Ef),t(s,ur,n),t(s,Ss,n),e(Ss,xn),e(xn,gf),e(xn,Tn),e(Tn,If),e(Ss,Pf),e(Ss,To),e(To,xf),t(s,fr,n),t(s,$n,n),e($n,Tf),t(s,dr,n),t(s,Cs,n),e(Cs,As),e(As,$o),e(Cs,$f),t(s,hr,n),t(s,jn,n),e(jn,jf),t(s,mr,n),t(s,re,n),re.innerHTML=Gb,t(s,vr,n),t(s,Sn,n),e(Sn,Sf),t(s,yr,n),t(s,Ds,n),e(Ds,Rs),e(Rs,jo),e(Ds,Cf),t(s,br,n),t(s,Hs,n),e(Hs,Af),e(Hs,ce),e(ce,Df),e(Hs,Rf),t(s,_r,n),t(s,Ms,n),e(Ms,Hf),e(Ms,So),e(So,Mf),e(Ms,Lf),t(s,wr,n),t(s,ie,n),ie.innerHTML=Yb,t(s,Er,n),t(s,Cn,n),e(Cn,Of),t(s,gr,n),t(s,ke,n),ke.innerHTML=Wb,t(s,Ir,n),t(s,Ls,n),e(Ls,Nf),e(Ls,Co),e(Co,Ff),e(Ls,qf),t(s,Pr,n),t(s,M,n),e(M,Bf),e(M,Ao),e(Ao,Uf),e(M,zf),e(M,Do),e(Do,Vf),e(M,Gf),t(s,xr,n),t(s,ue,n),ue.innerHTML=Kb,t(s,Tr,n),t(s,fe,n),e(fe,Yf),e(fe,Ro),e(Ro,Wf),t(s,$r,n),t(s,de,n),de.innerHTML=Jb,t(s,jr,n),t(s,An,n),e(An,Kf),t(s,Sr,n),t(s,Dn,n),e(Dn,Jf),t(s,Cr,n),t(s,he,n),he.innerHTML=Qb,t(s,Ar,n),t(s,Os,n),e(Os,Qf),e(Os,Ho),e(Ho,Xf),e(Os,Zf),t(s,Dr,n),t(s,me,n),me.innerHTML=Xb,t(s,Rr,n),t(s,Rn,n),e(Rn,sd),t(s,Hr,n),t(s,Ns,n),e(Ns,Fs),e(Fs,Mo),e(Ns,ad),t(s,Mr,n),t(s,qs,n),e(qs,ed),e(qs,Lo),e(Lo,nd),e(qs,td),t(s,Lr,n),t(s,ve,n),ve.innerHTML=Zb,t(s,Or,n),t(s,Bs,n),e(Bs,od),e(Bs,Oo),e(Oo,pd),e(Bs,ld),t(s,Nr,n),t(s,ye,n),ye.innerHTML=s_,t(s,Fr,n),t(s,Hn,n),e(Hn,rd),t(s,qr,n),t(s,Us,n),e(Us,zs),e(zs,No),e(Us,cd),t(s,Br,n),t(s,Vs,n),e(Vs,id),e(Vs,Fo),e(Fo,kd),e(Vs,ud),t(s,Ur,n),t(s,be,n),be.innerHTML=a_,t(s,zr,n),t(s,Mn,n),e(Mn,fd),t(s,Vr,n),t(s,_e,n),_e.innerHTML=e_,t(s,Gr,n),t(s,Gs,n),e(Gs,dd),e(Gs,qo),e(qo,hd),e(Gs,md),t(s,Yr,n),t(s,Ys,n),e(Ys,vd),e(Ys,Bo),e(Bo,yd),e(Ys,bd),t(s,Wr,n),t(s,we,n),we.innerHTML=n_,t(s,Kr,n),t(s,v,n),e(v,_d),e(v,Uo),e(Uo,wd),e(v,Ed),e(v,zo),e(zo,gd),e(v,Id),e(v,Vo),e(Vo,Pd),e(v,xd),e(v,Go),e(Go,Td),e(v,$d),e(v,Yo),e(Yo,jd),e(v,Sd),t(s,Jr,n),t(s,Ws,n),e(Ws,Cd),e(Ws,Wo),e(Wo,Ad),e(Ws,Dd),t(s,Qr,n),t(s,Ee,n),Ee.innerHTML=t_,t(s,Xr,n),t(s,Ks,n),e(Ks,Js),e(Js,Ko),e(Ks,Rd),t(s,Zr,n),t(s,Ln,n),e(Ln,Hd),t(s,sc,n),t(s,ge,n),ge.innerHTML=o_,t(s,ac,n),t(s,On,n),e(On,Md),t(s,ec,n),t(s,Qs,n),e(Qs,Xs),e(Xs,Jo),e(Qs,Ld),t(s,nc,n),t(s,Zs,n),e(Zs,Od),e(Zs,Ie),e(Ie,Nd),e(Zs,Fd),t(s,tc,n),t(s,Pe,n),e(Pe,qd),e(Pe,xe),e(xe,Bd),t(s,oc,n),t(s,Te,n),e(Te,Ud),e(Te,$e),e($e,zd),t(s,pc,n),t(s,je,n),e(je,Vd),e(je,Se),e(Se,Gd),t(s,lc,n),t(s,Ce,n),e(Ce,Yd),e(Ce,Ae),e(Ae,Wd),t(s,rc,n),t(s,De,n),e(De,Kd),e(De,Re),e(Re,Jd),t(s,cc,n),t(s,He,n),e(He,Qd),e(He,Me),e(Me,Xd)},p:Fh,i:Fh,o:Fh,d(s){s&&a($),s&&a(Zo),s&&a(_),s&&a(sp),s&&a(N),s&&a(ap),s&&a(Le),s&&a(ep),s&&a(ca),s&&a(np),s&&a(q),s&&a(tp),s&&a(Oe),s&&a(op),s&&a(j),s&&a(pp),s&&a(U),s&&a(lp),s&&a(S),s&&a(rp),s&&a(V),s&&a(cp),s&&a(Y),s&&a(ip),s&&a(Fe),s&&a(kp),s&&a(ka),s&&a(up),s&&a(qe),s&&a(fp),s&&a(ua),s&&a(dp),s&&a(K),s&&a(hp),s&&a(w),s&&a(mp),s&&a(da),s&&a(vp),s&&a(Q),s&&a(yp),s&&a(E),s&&a(bp),s&&a(ha),s&&a(_p),s&&a(Z),s&&a(wp),s&&a(C),s&&a(Ep),s&&a(ma),s&&a(gp),s&&a(A),s&&a(Ip),s&&a(va),s&&a(Pp),s&&a(Be),s&&a(xp),s&&a(f),s&&a(Tp),s&&a(D),s&&a($p),s&&a(ba),s&&a(jp),s&&a(Ue),s&&a(Sp),s&&a(ze),s&&a(Cp),s&&a(_a),s&&a(Ap),s&&a(Ve),s&&a(Dp),s&&a(wa),s&&a(Rp),s&&a(g),s&&a(Hp),s&&a(as),s&&a(Mp),s&&a(Ge),s&&a(Lp),s&&a(Ea),s&&a(Op),s&&a(Ye),s&&a(Np),s&&a(ga),s&&a(Fp),s&&a(We),s&&a(qp),s&&a(Ia),s&&a(Bp),s&&a(Ke),s&&a(Up),s&&a(Pa),s&&a(zp),s&&a(ns),s&&a(Vp),s&&a(xa),s&&a(Gp),s&&a(Je),s&&a(Yp),s&&a(Ta),s&&a(Wp),s&&a(R),s&&a(Kp),s&&a($a),s&&a(Jp),s&&a(ts),s&&a(Qp),s&&a(ja),s&&a(Xp),s&&a(Qe),s&&a(Zp),s&&a(Sa),s&&a(sl),s&&a(os),s&&a(al),s&&a(Xe),s&&a(el),s&&a(Ca),s&&a(nl),s&&a(ls),s&&a(tl),s&&a(cs),s&&a(ol),s&&a(Da),s&&a(pl),s&&a(Ze),s&&a(ll),s&&a(Ra),s&&a(rl),s&&a(sn),s&&a(cl),s&&a(Ha),s&&a(il),s&&a(is),s&&a(kl),s&&a(an),s&&a(ul),s&&a(us),s&&a(fl),s&&a(en),s&&a(dl),s&&a(La),s&&a(hl),s&&a(nn),s&&a(ml),s&&a(Oa),s&&a(vl),s&&a(m),s&&a(yl),s&&a(Na),s&&a(bl),s&&a(tn),s&&a(_l),s&&a(Fa),s&&a(wl),s&&a(on),s&&a(El),s&&a(qa),s&&a(gl),s&&a(fs),s&&a(Il),s&&a(H),s&&a(Pl),s&&a(za),s&&a(xl),s&&a(I),s&&a(Tl),s&&a(Va),s&&a($l),s&&a(pn),s&&a(jl),s&&a(Ga),s&&a(Sl),s&&a(ln),s&&a(Cl),s&&a(hs),s&&a(Al),s&&a(rn),s&&a(Dl),s&&a(Ya),s&&a(Rl),s&&a(P),s&&a(Hl),s&&a(Wa),s&&a(Ml),s&&a(vs),s&&a(Ll),s&&a(cn),s&&a(Ol),s&&a(Ka),s&&a(Nl),s&&a(kn),s&&a(Fl),s&&a(Ja),s&&a(ql),s&&a(bs),s&&a(Bl),s&&a(L),s&&a(Ul),s&&a(Qa),s&&a(zl),s&&a(Xa),s&&a(Vl),s&&a(ws),s&&a(Gl),s&&a(d),s&&a(Yl),s&&a(Za),s&&a(Wl),s&&a(se),s&&a(Kl),s&&a(Is),s&&a(Jl),s&&a(bn),s&&a(Ql),s&&a(ae),s&&a(Xl),s&&a(_n),s&&a(Zl),s&&a(ee),s&&a(sr),s&&a(ne),s&&a(ar),s&&a(xs),s&&a(er),s&&a(wn),s&&a(nr),s&&a(te),s&&a(tr),s&&a(En),s&&a(or),s&&a(oe),s&&a(pr),s&&a(gn),s&&a(lr),s&&a(pe),s&&a(rr),s&&a(In),s&&a(cr),s&&a(le),s&&a(ir),s&&a($s),s&&a(kr),s&&a(Pn),s&&a(ur),s&&a(Ss),s&&a(fr),s&&a($n),s&&a(dr),s&&a(Cs),s&&a(hr),s&&a(jn),s&&a(mr),s&&a(re),s&&a(vr),s&&a(Sn),s&&a(yr),s&&a(Ds),s&&a(br),s&&a(Hs),s&&a(_r),s&&a(Ms),s&&a(wr),s&&a(ie),s&&a(Er),s&&a(Cn),s&&a(gr),s&&a(ke),s&&a(Ir),s&&a(Ls),s&&a(Pr),s&&a(M),s&&a(xr),s&&a(ue),s&&a(Tr),s&&a(fe),s&&a($r),s&&a(de),s&&a(jr),s&&a(An),s&&a(Sr),s&&a(Dn),s&&a(Cr),s&&a(he),s&&a(Ar),s&&a(Os),s&&a(Dr),s&&a(me),s&&a(Rr),s&&a(Rn),s&&a(Hr),s&&a(Ns),s&&a(Mr),s&&a(qs),s&&a(Lr),s&&a(ve),s&&a(Or),s&&a(Bs),s&&a(Nr),s&&a(ye),s&&a(Fr),s&&a(Hn),s&&a(qr),s&&a(Us),s&&a(Br),s&&a(Vs),s&&a(Ur),s&&a(be),s&&a(zr),s&&a(Mn),s&&a(Vr),s&&a(_e),s&&a(Gr),s&&a(Gs),s&&a(Yr),s&&a(Ys),s&&a(Wr),s&&a(we),s&&a(Kr),s&&a(v),s&&a(Jr),s&&a(Ws),s&&a(Qr),s&&a(Ee),s&&a(Xr),s&&a(Ks),s&&a(Zr),s&&a(Ln),s&&a(sc),s&&a(ge),s&&a(ac),s&&a(On),s&&a(ec),s&&a(Qs),s&&a(nc),s&&a(Zs),s&&a(tc),s&&a(Pe),s&&a(oc),s&&a(Te),s&&a(pc),s&&a(je),s&&a(lc),s&&a(Ce),s&&a(rc),s&&a(De),s&&a(cc),s&&a(He)}}}const vw={excerpt:'My python toolchain for small projects does not change often. It makes sense to save it and then replicate it whenever I start a project. Or better, use <a href="https://cookiecutter.readthedocs.io/">cookiecutter</a> and a config file to generate it',date:"2022-09-12T00:00:00.000Z",draft:!1,archived:!1,title:"Poetry-driven python project template with cookiecutter",tags:["python"]};class yw extends uw{constructor($){super(),fw(this,$,null,hw,dw,{})}}export{yw as default,vw as metadata};
