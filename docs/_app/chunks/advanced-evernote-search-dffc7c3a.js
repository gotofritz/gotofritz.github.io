import{S as Bs,i as Rs,s as Ws,e as o,t as d,k as f,c as r,a as s,d as t,h as n,m as w,b as i,g as h,I as e,E as tr}from"./index-6e518972.js";function Os(Ls){let D,k,ve,ea,xt,F,ta,At,p,ye,aa,g,oa,Ee,ra,sa,M,da,na,be,ia,_e,la,De,ha,ge,ca,Te,ua,T,fa,ke,wa,ma,Me,pa,va,xe,ya,Ae,Ea,Nt,x,A,Ne,ba,It,N,_a,Ie,Da,ga,St,c,Se,Pe,Ta,Q,qe,ka,Ma,xa,He,Aa,Le,Na,Be,Ia,Re,Sa,We,Pa,Oe,qa,Ue,Ha,Ce,La,Ye,Ba,je,Ra,Je,Wa,Qe,Oa,Ge,Ua,ze,Ca,K,Ya,V,ja,Fe,Ja,Ke,Qa,Ve,Ga,Xe,za,X,Fa,Z,Ka,Ze,Va,$e,Xa,Pt,I,S,et,Za,qt,P,$a,tt,eo,to,Ht,$,ao,Lt,ee,oo,Bt,v,at,ro,ot,so,rt,no,st,io,te,lo,ae,ho,dt,co,nt,uo,oe,fo,re,wo,Rt,q,H,it,mo,Wt,se,po,Ot,L,B,lt,vo,Ut,R,yo,G,Eo,bo,Ct,E,ht,_o,ct,Do,de,go,ne,To,ie,ko,le,Mo,Yt,W,O,ut,xo,jt,he,Ao,Jt,U,ce,No,ue,Io,Qt,C,Y,ft,So,Gt,fe,Po,zt,m,wt,qo,mt,Ho,pt,Lo,vt,Bo,yt,Ro,Et,Wo,bt,Oo,_t,Uo,Dt,Co,gt,Yo,Tt,jo,kt,Jo,Ft,j,J,Mt,Qo,Kt,we,Go;return{c(){D=o("h2"),k=o("a"),ve=o("span"),ea=d("Basic Evernote search"),xt=f(),F=o("p"),ta=d("Evernote search is quite quirky. It is an \u2018all\u2019 search by default, and the order of the search operators matters."),At=f(),p=o("dl"),ye=o("dt"),aa=d("word"),g=o("dd"),oa=d("Searching for word will match any occurrences of word, obviously, but also those starting with word (e.g. 'wordpress'). In other words, think of it as the equivalent to word*. Note that this is "),Ee=o("i"),ra=d("not"),sa=d(" what it says in the "),M=o("a"),da=d("Evernote API documentation"),na=d(`, where it states "Words in the content of the note are split by whitespace or punctuation".  This is unfortunate, because sometimes you only want the exact match, but luckily you can use quotation marks in that case.
`),be=o("dt"),ia=d("word*"),_e=o("dd"),la=d("Wildcards are allowed only at the end, and in theory `potato*` should match both  'potatoes' and 'potato' whereas `potato` should only match the singular. But in the Evernote app at least, the wildcard seems to be implied so this is redundant.\n"),De=o("dt"),ha=d("strange word"),ge=o("dd"),ca=d('By default searches only returns notes that match all words, regardless of the order. `strange word` will match notes containing "this word is strange", "this is a strange word", and "Strange! [...15 pars later...] my word"\n'),Te=o("dt"),ua=d(`"strange word"
"word"`),T=o("dd"),fa=d('Quotation marks limit the search to an exact match, so this will only match "this is a strange word" in the previous example. You can also use quotation marks to remove the implied wildcard - `word` will also match '),ke=o("i"),wa=d("wordpress"),ma=d(" and "),Me=o("i"),pa=d("wording"),va=d(', but `"word"` (with the double quotes) will not.\n'),xe=o("dt"),ya=d("-word"),Ae=o("dd"),Ea=d('matches notes that do not contain words starting with "word"'),Nt=f(),x=o("h2"),A=o("a"),Ne=o("span"),ba=d("Advanced search options: tag and intitle"),It=f(),N=o("p"),_a=d("They normally take the form option:value. Note that in these cases, the wildcards works - i.e., option:value is different from option:value*. The former means \u201Cany note where [option] is "),Ie=o("em"),Da=d("exactly"),ga=d(" [value]\u201D, whereas the latter means \u201Cany note where [option] starts with [value]\u201C."),St=f(),c=o("dl"),Se=o("dt"),Pe=o("del"),Ta=d("nb:notebook "),Q=o("dd"),qe=o("del"),ka=d(`Only search notes assigned to notebook. This has to be the first search option.
`),Ma=o("br"),xa=d(`
this seems to have been removed in later versions
`),He=o("dt"),Aa=d("any:"),Le=o("dd"),Na=d(`match notes with any of the search terms instead of all. This has to be the first search option, or second if nb: is used.
`),Be=o("dt"),Ia=d("tag:theTag"),Re=o("dd"),Sa=d(`will match notes with tag theTag. Note that wildcards do work for tags, so this will match only theTag, not theTags
`),We=o("dt"),Pa=d("tag:theTag*"),Oe=o("dd"),qa=d(`use wildcards for looser matches. Note that you can only put them at the end of a word.
`),Ue=o("dt"),Ha=d("tag:*"),Ce=o("dd"),La=d(`any tagged note
`),Ye=o("dt"),Ba=d("-tag:theTag*"),je=o("dd"),Ra=d(`match notes that don't have tags starting with theTag.
`),Je=o("dt"),Wa=d("intitle:theTitle"),Qe=o("dd"),Oa=d(`a title search. Exact matches only
`),Ge=o("dt"),Ua=d("intitle:theTitle*"),ze=o("dd"),Ca=d(`title search using wildcards.
`),K=o("dt"),Ya=d("intitle:strange intitle:word"),V=o("dd"),ja=d(`Matches all words, in any order, within the title.
`),Fe=o("dt"),Ja=d('intitle:"strange word"'),Ke=o("dd"),Qa=d('exact match of sequence "strange word". The algorithm seems a bit buggy - a note with title "this is a strange word" will be matched by `intitle:"strange word"`, `intitle:"strange a word"`, `intitle:"strange that word"` but not `intitle:"strange b  word"` or `intitle:"word strange"`\n'),Ve=o("dt"),Ga=d("-intitle:word"),Xe=o("dd"),za=d(`Excludes notes with "word" in the title.
`),X=o("dt"),Fa=d("intitle:strange -intitle:word"),Z=o("dd"),Ka=d(`all notes with the word "strange" but not "word" in the title
`),Ze=o("dt"),Va=d("author:name"),$e=o("dd"),Xa=d("Notes with author equal to 'name'. Notes don't have authors unless you create one yourself."),Pt=f(),I=o("h2"),S=o("a"),et=o("span"),Za=d("Search evernote by date"),qt=f(),P=o("p"),$a=d("Evernote has some useful date searches capabilities. A date match means \u2018since that date (and time)\u201C. If you want to have a range of dates instead of just a starting point, use two dates, a positive one for the start and a negative one for the end - e.g. "),tt=o("code"),eo=d("created:2009 -created:2011"),to=d(" for dates between 2009 and 2010."),Ht=f(),$=o("p"),ao=d("Dates use either the ISO 8601 format or relative date format. ISO 8601 is either yyyyMMdd for dates or yyyyMMddTHHmmss for date times. The T is the actual capital \u2018T\u2019 to separate date and time, and the other letter stand for y=year, M=month etc."),Lt=f(),ee=o("p"),oo=d("The relative format is easier; the word \u201Cday\u201D stands for midnight of current day; \u201Cweek\u201D = midnight of the closest sunday, in the past, to current day; \u201Cmonth\u201D = midnight of 1st of current month; \u201Cyear\u201D = midnight of 1st of January of current year. You can also subtract an integer to refer to dates further back, e.g. day-2."),Bt=f(),v=o("dl"),at=o("dt"),ro=d("created:day"),ot=o("dd"),so=d(`matches notes created since last midnight
`),rt=o("dt"),no=d("updated:day-1"),st=o("dd"),io=d(`matches notes updated since midnight yesterday
`),te=o("dt"),lo=d("created:week-2 -created:week"),ae=o("dd"),ho=d(`matches notes created last week (but not this week, because of the -created:week)
`),dt=o("dt"),co=d("updated:20110411"),nt=o("dd"),uo=d(`matches notes updated since the 11th of April  2011
`),oe=o("dt"),fo=d("created:20110411T191500 -created:20110411T1202500"),re=o("dd"),wo=d("matches notes created between 19:15 and 20:25 of 11th of April  2011"),Rt=f(),q=o("h2"),H=o("a"),it=o("span"),mo=d("More advanced search options"),Wt=f(),se=o("p"),po=d("There are even more parameters some of which I had to dig out from the Thrift API files."),Ot=f(),L=o("h3"),B=o("a"),lt=o("span"),vo=d("Resource"),Ut=f(),R=o("p"),yo=d("Resources match notes which include at least one of the MIME types you list. Using MIME types is good news, because you can, say, use resource:image/gif for matchin gif files, or resource:image/* for matching any image. Note: here\u2019s the "),G=o("a"),Eo=d("official list of MIME types"),bo=d("."),Ct=f(),E=o("dl"),ht=o("dt"),_o=d("resource:audio/*"),ct=o("dd"),Do=d(`Match notes with audio files embedded in them.
`),de=o("dt"),go=d("resource:application/pdf"),ne=o("dd"),To=d(`Match notes with pdf files
`),ie=o("dt"),ko=d("resource:image/* -resource:image/gif"),le=o("dd"),Mo=d("Match notes with images which are not gifs"),Yt=f(),W=o("h3"),O=o("a"),ut=o("span"),xo=d("SourceURL"),jt=f(),he=o("p"),Ao=d("The URL the note comes from. Note that you need to include the http:// as well if using wildcards. This is not as useful as it may seem, because wildcards only work at the end of the string, so you need to write out all possible variations of a url to be sure:"),Jt=f(),U=o("dl"),ce=o("dt"),No=d("sourceurl:http://www.bbc* sourceurl:http://news.bbc* sourceurl:http://bbc*"),ue=o("dd"),Io=d("Match notes from BBC websites, including news"),Qt=f(),C=o("h3"),Y=o("a"),ft=o("span"),So=d("Source"),Gt=f(),fe=o("p"),Po=d("When you add a note, Evernote creates a \u2018source\u2019 attribute to keep track of where the note comes from - unless it was created from within Evernote itself."),zt=f(),m=o("dl"),wt=o("dt"),qo=d("source:app.ms.word"),mt=o("dd"),Ho=d(`Matches notes created with the MS Word plugin
`),pt=o("dt"),Lo=d("source:app.ms.*"),vt=o("dd"),Bo=d(`Matches notes created with any Microsoft plugin
`),yt=o("dt"),Ro=d("source:mail.smtp"),Et=o("dd"),Wo=d(`Matches notes which were created by sending an email to your evernote account
`),bt=o("dt"),Oo=d("source:web.clip"),_t=o("dd"),Uo=d(`Notes created with one of the browser plugins
`),Dt=o("dt"),Co=d("source:mobile.wn"),gt=o("dd"),Yo=d(`Notes created with the mobile app
`),Tt=o("dt"),jo=d("-source:*"),kt=o("dd"),Jo=d("Notes created within the Evernote app (i.e., with no source attribute)"),Ft=f(),j=o("h3"),J=o("a"),Mt=o("span"),Qo=d("Those are the useful Evernote search attributes."),Kt=f(),we=o("p"),Go=d("There are other, like latitude and longitude, but they are more useful for software connecting to the API."),this.h()},l(a){D=r(a,"H2",{id:!0});var l=s(D);k=r(l,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ar=s(k);ve=r(ar,"SPAN",{class:!0}),s(ve).forEach(t),ar.forEach(t),ea=n(l,"Basic Evernote search"),l.forEach(t),xt=w(a),F=r(a,"P",{});var or=s(F);ta=n(or,"Evernote search is quite quirky. It is an \u2018all\u2019 search by default, and the order of the search operators matters."),or.forEach(t),At=w(a),p=r(a,"DL",{class:!0});var b=s(p);ye=r(b,"DT",{});var rr=s(ye);aa=n(rr,"word"),rr.forEach(t),g=r(b,"DD",{});var me=s(g);oa=n(me,"Searching for word will match any occurrences of word, obviously, but also those starting with word (e.g. 'wordpress'). In other words, think of it as the equivalent to word*. Note that this is "),Ee=r(me,"I",{});var sr=s(Ee);ra=n(sr,"not"),sr.forEach(t),sa=n(me," what it says in the "),M=r(me,"A",{href:!0,title:!0,target:!0});var dr=s(M);da=n(dr,"Evernote API documentation"),dr.forEach(t),na=n(me,`, where it states "Words in the content of the note are split by whitespace or punctuation".  This is unfortunate, because sometimes you only want the exact match, but luckily you can use quotation marks in that case.
`),me.forEach(t),be=r(b,"DT",{});var nr=s(be);ia=n(nr,"word*"),nr.forEach(t),_e=r(b,"DD",{});var ir=s(_e);la=n(ir,"Wildcards are allowed only at the end, and in theory `potato*` should match both  'potatoes' and 'potato' whereas `potato` should only match the singular. But in the Evernote app at least, the wildcard seems to be implied so this is redundant.\n"),ir.forEach(t),De=r(b,"DT",{});var lr=s(De);ha=n(lr,"strange word"),lr.forEach(t),ge=r(b,"DD",{});var hr=s(ge);ca=n(hr,'By default searches only returns notes that match all words, regardless of the order. `strange word` will match notes containing "this word is strange", "this is a strange word", and "Strange! [...15 pars later...] my word"\n'),hr.forEach(t),Te=r(b,"DT",{});var cr=s(Te);ua=n(cr,`"strange word"
"word"`),cr.forEach(t),T=r(b,"DD",{});var pe=s(T);fa=n(pe,'Quotation marks limit the search to an exact match, so this will only match "this is a strange word" in the previous example. You can also use quotation marks to remove the implied wildcard - `word` will also match '),ke=r(pe,"I",{});var ur=s(ke);wa=n(ur,"wordpress"),ur.forEach(t),ma=n(pe," and "),Me=r(pe,"I",{});var fr=s(Me);pa=n(fr,"wording"),fr.forEach(t),va=n(pe,', but `"word"` (with the double quotes) will not.\n'),pe.forEach(t),xe=r(b,"DT",{});var wr=s(xe);ya=n(wr,"-word"),wr.forEach(t),Ae=r(b,"DD",{});var mr=s(Ae);Ea=n(mr,'matches notes that do not contain words starting with "word"'),mr.forEach(t),b.forEach(t),Nt=w(a),x=r(a,"H2",{id:!0});var zo=s(x);A=r(zo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pr=s(A);Ne=r(pr,"SPAN",{class:!0}),s(Ne).forEach(t),pr.forEach(t),ba=n(zo,"Advanced search options: tag and intitle"),zo.forEach(t),It=w(a),N=r(a,"P",{});var Vt=s(N);_a=n(Vt,"They normally take the form option:value. Note that in these cases, the wildcards works - i.e., option:value is different from option:value*. The former means \u201Cany note where [option] is "),Ie=r(Vt,"EM",{});var vr=s(Ie);Da=n(vr,"exactly"),vr.forEach(t),ga=n(Vt," [value]\u201D, whereas the latter means \u201Cany note where [option] starts with [value]\u201C."),Vt.forEach(t),St=w(a),c=r(a,"DL",{class:!0});var u=s(c);Se=r(u,"DT",{});var yr=s(Se);Pe=r(yr,"DEL",{});var Er=s(Pe);Ta=n(Er,"nb:notebook "),Er.forEach(t),yr.forEach(t),Q=r(u,"DD",{});var Xt=s(Q);qe=r(Xt,"DEL",{});var br=s(qe);ka=n(br,`Only search notes assigned to notebook. This has to be the first search option.
`),br.forEach(t),Ma=r(Xt,"BR",{}),xa=n(Xt,`
this seems to have been removed in later versions
`),Xt.forEach(t),He=r(u,"DT",{});var _r=s(He);Aa=n(_r,"any:"),_r.forEach(t),Le=r(u,"DD",{});var Dr=s(Le);Na=n(Dr,`match notes with any of the search terms instead of all. This has to be the first search option, or second if nb: is used.
`),Dr.forEach(t),Be=r(u,"DT",{});var gr=s(Be);Ia=n(gr,"tag:theTag"),gr.forEach(t),Re=r(u,"DD",{});var Tr=s(Re);Sa=n(Tr,`will match notes with tag theTag. Note that wildcards do work for tags, so this will match only theTag, not theTags
`),Tr.forEach(t),We=r(u,"DT",{});var kr=s(We);Pa=n(kr,"tag:theTag*"),kr.forEach(t),Oe=r(u,"DD",{});var Mr=s(Oe);qa=n(Mr,`use wildcards for looser matches. Note that you can only put them at the end of a word.
`),Mr.forEach(t),Ue=r(u,"DT",{});var xr=s(Ue);Ha=n(xr,"tag:*"),xr.forEach(t),Ce=r(u,"DD",{});var Ar=s(Ce);La=n(Ar,`any tagged note
`),Ar.forEach(t),Ye=r(u,"DT",{});var Nr=s(Ye);Ba=n(Nr,"-tag:theTag*"),Nr.forEach(t),je=r(u,"DD",{});var Ir=s(je);Ra=n(Ir,`match notes that don't have tags starting with theTag.
`),Ir.forEach(t),Je=r(u,"DT",{});var Sr=s(Je);Wa=n(Sr,"intitle:theTitle"),Sr.forEach(t),Qe=r(u,"DD",{});var Pr=s(Qe);Oa=n(Pr,`a title search. Exact matches only
`),Pr.forEach(t),Ge=r(u,"DT",{});var qr=s(Ge);Ua=n(qr,"intitle:theTitle*"),qr.forEach(t),ze=r(u,"DD",{});var Hr=s(ze);Ca=n(Hr,`title search using wildcards.
`),Hr.forEach(t),K=r(u,"DT",{class:!0});var Lr=s(K);Ya=n(Lr,"intitle:strange intitle:word"),Lr.forEach(t),V=r(u,"DD",{class:!0});var Br=s(V);ja=n(Br,`Matches all words, in any order, within the title.
`),Br.forEach(t),Fe=r(u,"DT",{});var Rr=s(Fe);Ja=n(Rr,'intitle:"strange word"'),Rr.forEach(t),Ke=r(u,"DD",{});var Wr=s(Ke);Qa=n(Wr,'exact match of sequence "strange word". The algorithm seems a bit buggy - a note with title "this is a strange word" will be matched by `intitle:"strange word"`, `intitle:"strange a word"`, `intitle:"strange that word"` but not `intitle:"strange b  word"` or `intitle:"word strange"`\n'),Wr.forEach(t),Ve=r(u,"DT",{});var Or=s(Ve);Ga=n(Or,"-intitle:word"),Or.forEach(t),Xe=r(u,"DD",{});var Ur=s(Xe);za=n(Ur,`Excludes notes with "word" in the title.
`),Ur.forEach(t),X=r(u,"DT",{class:!0});var Cr=s(X);Fa=n(Cr,"intitle:strange -intitle:word"),Cr.forEach(t),Z=r(u,"DD",{class:!0});var Yr=s(Z);Ka=n(Yr,`all notes with the word "strange" but not "word" in the title
`),Yr.forEach(t),Ze=r(u,"DT",{});var jr=s(Ze);Va=n(jr,"author:name"),jr.forEach(t),$e=r(u,"DD",{});var Jr=s($e);Xa=n(Jr,"Notes with author equal to 'name'. Notes don't have authors unless you create one yourself."),Jr.forEach(t),u.forEach(t),Pt=w(a),I=r(a,"H2",{id:!0});var Fo=s(I);S=r(Fo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qr=s(S);et=r(Qr,"SPAN",{class:!0}),s(et).forEach(t),Qr.forEach(t),Za=n(Fo,"Search evernote by date"),Fo.forEach(t),qt=w(a),P=r(a,"P",{});var Zt=s(P);$a=n(Zt,"Evernote has some useful date searches capabilities. A date match means \u2018since that date (and time)\u201C. If you want to have a range of dates instead of just a starting point, use two dates, a positive one for the start and a negative one for the end - e.g. "),tt=r(Zt,"CODE",{});var Gr=s(tt);eo=n(Gr,"created:2009 -created:2011"),Gr.forEach(t),to=n(Zt," for dates between 2009 and 2010."),Zt.forEach(t),Ht=w(a),$=r(a,"P",{});var zr=s($);ao=n(zr,"Dates use either the ISO 8601 format or relative date format. ISO 8601 is either yyyyMMdd for dates or yyyyMMddTHHmmss for date times. The T is the actual capital \u2018T\u2019 to separate date and time, and the other letter stand for y=year, M=month etc."),zr.forEach(t),Lt=w(a),ee=r(a,"P",{});var Fr=s(ee);oo=n(Fr,"The relative format is easier; the word \u201Cday\u201D stands for midnight of current day; \u201Cweek\u201D = midnight of the closest sunday, in the past, to current day; \u201Cmonth\u201D = midnight of 1st of current month; \u201Cyear\u201D = midnight of 1st of January of current year. You can also subtract an integer to refer to dates further back, e.g. day-2."),Fr.forEach(t),Bt=w(a),v=r(a,"DL",{class:!0});var _=s(v);at=r(_,"DT",{});var Kr=s(at);ro=n(Kr,"created:day"),Kr.forEach(t),ot=r(_,"DD",{});var Vr=s(ot);so=n(Vr,`matches notes created since last midnight
`),Vr.forEach(t),rt=r(_,"DT",{});var Xr=s(rt);no=n(Xr,"updated:day-1"),Xr.forEach(t),st=r(_,"DD",{});var Zr=s(st);io=n(Zr,`matches notes updated since midnight yesterday
`),Zr.forEach(t),te=r(_,"DT",{class:!0});var $r=s(te);lo=n($r,"created:week-2 -created:week"),$r.forEach(t),ae=r(_,"DD",{class:!0});var es=s(ae);ho=n(es,`matches notes created last week (but not this week, because of the -created:week)
`),es.forEach(t),dt=r(_,"DT",{});var ts=s(dt);co=n(ts,"updated:20110411"),ts.forEach(t),nt=r(_,"DD",{});var as=s(nt);uo=n(as,`matches notes updated since the 11th of April  2011
`),as.forEach(t),oe=r(_,"DT",{class:!0});var os=s(oe);fo=n(os,"created:20110411T191500 -created:20110411T1202500"),os.forEach(t),re=r(_,"DD",{class:!0});var rs=s(re);wo=n(rs,"matches notes created between 19:15 and 20:25 of 11th of April  2011"),rs.forEach(t),_.forEach(t),Rt=w(a),q=r(a,"H2",{id:!0});var Ko=s(q);H=r(Ko,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ss=s(H);it=r(ss,"SPAN",{class:!0}),s(it).forEach(t),ss.forEach(t),mo=n(Ko,"More advanced search options"),Ko.forEach(t),Wt=w(a),se=r(a,"P",{});var ds=s(se);po=n(ds,"There are even more parameters some of which I had to dig out from the Thrift API files."),ds.forEach(t),Ot=w(a),L=r(a,"H3",{id:!0});var Vo=s(L);B=r(Vo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ns=s(B);lt=r(ns,"SPAN",{class:!0}),s(lt).forEach(t),ns.forEach(t),vo=n(Vo,"Resource"),Vo.forEach(t),Ut=w(a),R=r(a,"P",{});var $t=s(R);yo=n($t,"Resources match notes which include at least one of the MIME types you list. Using MIME types is good news, because you can, say, use resource:image/gif for matchin gif files, or resource:image/* for matching any image. Note: here\u2019s the "),G=r($t,"A",{href:!0,rel:!0});var is=s(G);Eo=n(is,"official list of MIME types"),is.forEach(t),bo=n($t,"."),$t.forEach(t),Ct=w(a),E=r(a,"DL",{class:!0});var z=s(E);ht=r(z,"DT",{});var ls=s(ht);_o=n(ls,"resource:audio/*"),ls.forEach(t),ct=r(z,"DD",{});var hs=s(ct);Do=n(hs,`Match notes with audio files embedded in them.
`),hs.forEach(t),de=r(z,"DT",{class:!0});var cs=s(de);go=n(cs,"resource:application/pdf"),cs.forEach(t),ne=r(z,"DD",{class:!0});var us=s(ne);To=n(us,`Match notes with pdf files
`),us.forEach(t),ie=r(z,"DT",{class:!0});var fs=s(ie);ko=n(fs,"resource:image/* -resource:image/gif"),fs.forEach(t),le=r(z,"DD",{class:!0});var ws=s(le);Mo=n(ws,"Match notes with images which are not gifs"),ws.forEach(t),z.forEach(t),Yt=w(a),W=r(a,"H3",{id:!0});var Xo=s(W);O=r(Xo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ms=s(O);ut=r(ms,"SPAN",{class:!0}),s(ut).forEach(t),ms.forEach(t),xo=n(Xo,"SourceURL"),Xo.forEach(t),jt=w(a),he=r(a,"P",{});var ps=s(he);Ao=n(ps,"The URL the note comes from. Note that you need to include the http:// as well if using wildcards. This is not as useful as it may seem, because wildcards only work at the end of the string, so you need to write out all possible variations of a url to be sure:"),ps.forEach(t),Jt=w(a),U=r(a,"DL",{class:!0});var Zo=s(U);ce=r(Zo,"DT",{class:!0});var vs=s(ce);No=n(vs,"sourceurl:http://www.bbc* sourceurl:http://news.bbc* sourceurl:http://bbc*"),vs.forEach(t),ue=r(Zo,"DD",{class:!0});var ys=s(ue);Io=n(ys,"Match notes from BBC websites, including news"),ys.forEach(t),Zo.forEach(t),Qt=w(a),C=r(a,"H3",{id:!0});var $o=s(C);Y=r($o,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Es=s(Y);ft=r(Es,"SPAN",{class:!0}),s(ft).forEach(t),Es.forEach(t),So=n($o,"Source"),$o.forEach(t),Gt=w(a),fe=r(a,"P",{});var bs=s(fe);Po=n(bs,"When you add a note, Evernote creates a \u2018source\u2019 attribute to keep track of where the note comes from - unless it was created from within Evernote itself."),bs.forEach(t),zt=w(a),m=r(a,"DL",{class:!0});var y=s(m);wt=r(y,"DT",{});var _s=s(wt);qo=n(_s,"source:app.ms.word"),_s.forEach(t),mt=r(y,"DD",{});var Ds=s(mt);Ho=n(Ds,`Matches notes created with the MS Word plugin
`),Ds.forEach(t),pt=r(y,"DT",{});var gs=s(pt);Lo=n(gs,"source:app.ms.*"),gs.forEach(t),vt=r(y,"DD",{});var Ts=s(vt);Bo=n(Ts,`Matches notes created with any Microsoft plugin
`),Ts.forEach(t),yt=r(y,"DT",{});var ks=s(yt);Ro=n(ks,"source:mail.smtp"),ks.forEach(t),Et=r(y,"DD",{});var Ms=s(Et);Wo=n(Ms,`Matches notes which were created by sending an email to your evernote account
`),Ms.forEach(t),bt=r(y,"DT",{});var xs=s(bt);Oo=n(xs,"source:web.clip"),xs.forEach(t),_t=r(y,"DD",{});var As=s(_t);Uo=n(As,`Notes created with one of the browser plugins
`),As.forEach(t),Dt=r(y,"DT",{});var Ns=s(Dt);Co=n(Ns,"source:mobile.wn"),Ns.forEach(t),gt=r(y,"DD",{});var Is=s(gt);Yo=n(Is,`Notes created with the mobile app
`),Is.forEach(t),Tt=r(y,"DT",{});var Ss=s(Tt);jo=n(Ss,"-source:*"),Ss.forEach(t),kt=r(y,"DD",{});var Ps=s(kt);Jo=n(Ps,"Notes created within the Evernote app (i.e., with no source attribute)"),Ps.forEach(t),y.forEach(t),Ft=w(a),j=r(a,"H3",{id:!0});var er=s(j);J=r(er,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qs=s(J);Mt=r(qs,"SPAN",{class:!0}),s(Mt).forEach(t),qs.forEach(t),Qo=n(er,"Those are the useful Evernote search attributes."),er.forEach(t),Kt=w(a),we=r(a,"P",{});var Hs=s(we);Go=n(Hs,"There are other, like latitude and longitude, but they are more useful for software connecting to the API."),Hs.forEach(t),this.h()},h(){i(ve,"class","icon icon-link"),i(k,"aria-hidden","true"),i(k,"tabindex","-1"),i(k,"href","#basic-evernote-search"),i(D,"id","basic-evernote-search"),i(M,"href","http://dev.evernote.com/documentation/local/chapters/search_grammar.php"),i(M,"title","[new window] Evernote Search Grammar - Evernote Developers"),i(M,"target","_blank"),i(p,"class","code-breakdown"),i(Ne,"class","icon icon-link"),i(A,"aria-hidden","true"),i(A,"tabindex","-1"),i(A,"href","#advanced-search-options-tag-and-intitle"),i(x,"id","advanced-search-options-tag-and-intitle"),i(K,"class","long-line"),i(V,"class","long-line"),i(X,"class","long-line"),i(Z,"class","long-line"),i(c,"class","code-breakdown"),i(et,"class","icon icon-link"),i(S,"aria-hidden","true"),i(S,"tabindex","-1"),i(S,"href","#search-evernote-by-date"),i(I,"id","search-evernote-by-date"),i(te,"class","long-line"),i(ae,"class","long-line"),i(oe,"class","long-line"),i(re,"class","long-line"),i(v,"class","code-breakdown"),i(it,"class","icon icon-link"),i(H,"aria-hidden","true"),i(H,"tabindex","-1"),i(H,"href","#more-advanced-search-options"),i(q,"id","more-advanced-search-options"),i(lt,"class","icon icon-link"),i(B,"aria-hidden","true"),i(B,"tabindex","-1"),i(B,"href","#resource"),i(L,"id","resource"),i(G,"href","http://www.iana.org/assignments/media-types/index.html"),i(G,"rel","nofollow"),i(de,"class","long-line"),i(ne,"class","long-line"),i(ie,"class","long-line"),i(le,"class","long-line"),i(E,"class","code-breakdown"),i(ut,"class","icon icon-link"),i(O,"aria-hidden","true"),i(O,"tabindex","-1"),i(O,"href","#sourceurl"),i(W,"id","sourceurl"),i(ce,"class","long-line"),i(ue,"class","long-line"),i(U,"class","code-breakdown"),i(ft,"class","icon icon-link"),i(Y,"aria-hidden","true"),i(Y,"tabindex","-1"),i(Y,"href","#source"),i(C,"id","source"),i(m,"class","code-breakdown"),i(Mt,"class","icon icon-link"),i(J,"aria-hidden","true"),i(J,"tabindex","-1"),i(J,"href","#those-are-the-useful-evernote-search-attributes"),i(j,"id","those-are-the-useful-evernote-search-attributes")},m(a,l){h(a,D,l),e(D,k),e(k,ve),e(D,ea),h(a,xt,l),h(a,F,l),e(F,ta),h(a,At,l),h(a,p,l),e(p,ye),e(ye,aa),e(p,g),e(g,oa),e(g,Ee),e(Ee,ra),e(g,sa),e(g,M),e(M,da),e(g,na),e(p,be),e(be,ia),e(p,_e),e(_e,la),e(p,De),e(De,ha),e(p,ge),e(ge,ca),e(p,Te),e(Te,ua),e(p,T),e(T,fa),e(T,ke),e(ke,wa),e(T,ma),e(T,Me),e(Me,pa),e(T,va),e(p,xe),e(xe,ya),e(p,Ae),e(Ae,Ea),h(a,Nt,l),h(a,x,l),e(x,A),e(A,Ne),e(x,ba),h(a,It,l),h(a,N,l),e(N,_a),e(N,Ie),e(Ie,Da),e(N,ga),h(a,St,l),h(a,c,l),e(c,Se),e(Se,Pe),e(Pe,Ta),e(c,Q),e(Q,qe),e(qe,ka),e(Q,Ma),e(Q,xa),e(c,He),e(He,Aa),e(c,Le),e(Le,Na),e(c,Be),e(Be,Ia),e(c,Re),e(Re,Sa),e(c,We),e(We,Pa),e(c,Oe),e(Oe,qa),e(c,Ue),e(Ue,Ha),e(c,Ce),e(Ce,La),e(c,Ye),e(Ye,Ba),e(c,je),e(je,Ra),e(c,Je),e(Je,Wa),e(c,Qe),e(Qe,Oa),e(c,Ge),e(Ge,Ua),e(c,ze),e(ze,Ca),e(c,K),e(K,Ya),e(c,V),e(V,ja),e(c,Fe),e(Fe,Ja),e(c,Ke),e(Ke,Qa),e(c,Ve),e(Ve,Ga),e(c,Xe),e(Xe,za),e(c,X),e(X,Fa),e(c,Z),e(Z,Ka),e(c,Ze),e(Ze,Va),e(c,$e),e($e,Xa),h(a,Pt,l),h(a,I,l),e(I,S),e(S,et),e(I,Za),h(a,qt,l),h(a,P,l),e(P,$a),e(P,tt),e(tt,eo),e(P,to),h(a,Ht,l),h(a,$,l),e($,ao),h(a,Lt,l),h(a,ee,l),e(ee,oo),h(a,Bt,l),h(a,v,l),e(v,at),e(at,ro),e(v,ot),e(ot,so),e(v,rt),e(rt,no),e(v,st),e(st,io),e(v,te),e(te,lo),e(v,ae),e(ae,ho),e(v,dt),e(dt,co),e(v,nt),e(nt,uo),e(v,oe),e(oe,fo),e(v,re),e(re,wo),h(a,Rt,l),h(a,q,l),e(q,H),e(H,it),e(q,mo),h(a,Wt,l),h(a,se,l),e(se,po),h(a,Ot,l),h(a,L,l),e(L,B),e(B,lt),e(L,vo),h(a,Ut,l),h(a,R,l),e(R,yo),e(R,G),e(G,Eo),e(R,bo),h(a,Ct,l),h(a,E,l),e(E,ht),e(ht,_o),e(E,ct),e(ct,Do),e(E,de),e(de,go),e(E,ne),e(ne,To),e(E,ie),e(ie,ko),e(E,le),e(le,Mo),h(a,Yt,l),h(a,W,l),e(W,O),e(O,ut),e(W,xo),h(a,jt,l),h(a,he,l),e(he,Ao),h(a,Jt,l),h(a,U,l),e(U,ce),e(ce,No),e(U,ue),e(ue,Io),h(a,Qt,l),h(a,C,l),e(C,Y),e(Y,ft),e(C,So),h(a,Gt,l),h(a,fe,l),e(fe,Po),h(a,zt,l),h(a,m,l),e(m,wt),e(wt,qo),e(m,mt),e(mt,Ho),e(m,pt),e(pt,Lo),e(m,vt),e(vt,Bo),e(m,yt),e(yt,Ro),e(m,Et),e(Et,Wo),e(m,bt),e(bt,Oo),e(m,_t),e(_t,Uo),e(m,Dt),e(Dt,Co),e(m,gt),e(gt,Yo),e(m,Tt),e(Tt,jo),e(m,kt),e(kt,Jo),h(a,Ft,l),h(a,j,l),e(j,J),e(J,Mt),e(j,Qo),h(a,Kt,l),h(a,we,l),e(we,Go)},p:tr,i:tr,o:tr,d(a){a&&t(D),a&&t(xt),a&&t(F),a&&t(At),a&&t(p),a&&t(Nt),a&&t(x),a&&t(It),a&&t(N),a&&t(St),a&&t(c),a&&t(Pt),a&&t(I),a&&t(qt),a&&t(P),a&&t(Ht),a&&t($),a&&t(Lt),a&&t(ee),a&&t(Bt),a&&t(v),a&&t(Rt),a&&t(q),a&&t(Wt),a&&t(se),a&&t(Ot),a&&t(L),a&&t(Ut),a&&t(R),a&&t(Ct),a&&t(E),a&&t(Yt),a&&t(W),a&&t(jt),a&&t(he),a&&t(Jt),a&&t(U),a&&t(Qt),a&&t(C),a&&t(Gt),a&&t(fe),a&&t(zt),a&&t(m),a&&t(Ft),a&&t(j),a&&t(Kt),a&&t(we)}}}const Cs={date:"2011-09-04 13:55",title:"Advanced Evernote search",tags:["evernote"],excerpt:'It isn&#39;t immediately obvious, but <a href="http://evernote.com/">Evernote</a> offers advanced search operators.'};class Ys extends Bs{constructor(D){super(),Rs(this,D,null,Os,Ws,{})}}export{Ys as default,Cs as metadata};
