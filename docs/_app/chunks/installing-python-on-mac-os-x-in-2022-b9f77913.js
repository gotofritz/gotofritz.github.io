import{S as on,i as pn,s as ln,e as o,t as i,j as h,c as p,a as l,g as r,d as s,l as f,b as c,f as t,F as n,I as vs}from"./vendor-f15b48c1.js";function rn(Bs){let v,z,Se,te,y,xe,Q,Ce,Me,oe,_,D,je,pe,k,Re,ee,Le,Xe,le,E,F,Ue,ie,N,ze,re,T,Gs=`<code class="language-bash"><span class="token comment"># homebrew is still involved</span>
$ brew <span class="token function">install</span> pyenv

<span class="token comment"># check which versions are available</span>
$ pyenv <span class="token function">install</span> -l
Available versions:
  <span class="token number">2.1</span>.3
  <span class="token number">2.2</span>.3
  <span class="token punctuation">..</span>.
  stackless-3.7.5

<span class="token comment"># the latest at the time of writing</span>
$ pyenv <span class="token function">install</span> <span class="token number">3.10</span>.1
<span class="token punctuation">..</span>.

<span class="token comment"># make it the default version</span>
$ pyenv global <span class="token number">3.10</span>.1</code>`,ce,d,De,B,Fe,Ne,I,Be,Ge,he,P,Ws=`<code class="language-bash"><span class="token keyword">if</span> <span class="token builtin class-name">command</span> -v pyenv <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"</span>
<span class="token keyword">fi</span>

<span class="token comment"># This is actually a simplified version of what's in my .path file</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span>/shims:..OTHER STUFF...:<span class="token environment constant">$PATH</span>"</span></code>`,fe,w,We,se,Ye,qe,ue,A,Ys=`<code class="language-bash">$ python -V
<span class="token number">3.10</span>.1</code>`,de,H,G,Ve,me,W,Ze,ve,$,qs=`<code class="language-bash">$ pip <span class="token function">install</span> --user pipenv
Collecting pipenv
  Downloading pipenv-2021.11.23-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">3.6</span> MB<span class="token punctuation">)</span>
  <span class="token punctuation">..</span>.
  WARNING: The script virtualenv-clone is installed <span class="token keyword">in</span> <span class="token string">'/Users/fritz/.local/bin'</span> <span class="token function">which</span> is not on <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span>
  Consider adding this directory to <span class="token environment constant">PATH</span> or, <span class="token keyword">if</span> you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The script virtualenv is installed <span class="token keyword">in</span> <span class="token string">'/Users/fritz/.local/bin'</span> <span class="token function">which</span> is not on <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span>
  Consider adding this directory to <span class="token environment constant">PATH</span> or, <span class="token keyword">if</span> you prefer to suppress this warning, use --no-warn-script-location.
  WARNING: The scripts pipenv and pipenv-resolver are installed <span class="token keyword">in</span> <span class="token string">'/Users/fritz/.local/bin'</span> <span class="token function">which</span> is not on <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span>
  Consider adding this directory to <span class="token environment constant">PATH</span> or, <span class="token keyword">if</span> you prefer to suppress this warning, use --no-warn-script-location.
  Successfully installed certi<span class="token punctuation">..</span>.etc</code>`,ye,b,Je,ne,Ke,Qe,ke,O,Vs=`<code class="language-bash"><span class="token comment"># This is the .path file from my dotfile repo again</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.local/bin:<span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span>/shims:..OTHER STUFF...:<span class="token environment constant">$PATH</span>"</span></code>`,we,S,Y,es,be,m,ss,ae,ns,as,x,ts,os,ge,C,Zs=`<code class="language-bash"><span class="token comment"># .path</span>
<span class="token keyword">if</span> <span class="token builtin class-name">command</span> -v pyenv <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"</span>
+  <span class="token keyword">if</span> <span class="token builtin class-name">command</span> -v <span class="token function">npm</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
+    <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> python <span class="token punctuation">$(</span>pyenv root<span class="token punctuation">)</span>/shims/python<span class="token variable">)</span></span>"</span>
+  <span class="token keyword">fi</span>
<span class="token keyword">fi</span></code>`,_e,q,ps,Ee,M,Js=`<code class="language-bash"><span class="token comment"># this creates a new .bash_profile out of my dotfiles</span>
$ ./bootstrap -f
From github.com:gotofritz/dotfiles
 * branch            master     -<span class="token operator">></span> FETCH_HEAD
Already up to date.
building <span class="token function">file</span> list <span class="token punctuation">..</span>. <span class="token keyword">done</span>

sent <span class="token number">402</span> bytes  received <span class="token number">20</span> bytes  <span class="token number">844.00</span> bytes/sec
total size is <span class="token number">80123</span>  speedup is <span class="token number">189.86</span>

<span class="token comment"># did it work?</span>
$ <span class="token function">cat</span> ~/.nprmc
<span class="token assign-left variable">python</span><span class="token operator">=</span>/Users/fritz/.pyenv/shims/python</code>`,Te,j,V,ls,Ie,Z,is,Pe,u,R,rs,cs,L,hs,fs,X,us,ds,U,ms;return{c(){v=o("h2"),z=o("a"),Se=i("Ignore OS X\u2019s own python version(s)"),te=h(),y=o("p"),xe=i("Mac OS X comes with its own version of python; one which is deprecated since 2020. Given its age, it\u2019s better ignored; I treat it as an internal system tool, nothing to do with me. OS X also comes with python 3, which is available with the command "),Q=o("code"),Ce=i("$ python3"),Me=i(". I ignore that too"),oe=h(),_=o("h2"),D=o("a"),je=i("Homebrew can manage python versions"),pe=h(),k=o("p"),Re=i("You can also use homebrew to install python, with "),ee=o("code"),Le=i("brew install python"),Xe=i(". But I found aliasing different versions for different projects always tricky when doing it that way"),le=h(),E=o("h2"),F=o("a"),Ue=i("Using pyenv to manage different versions of python"),ie=h(),N=o("p"),ze=i("Pyenv is very versatile and simple. I install the main version with the following commands in Terminal"),re=h(),T=o("pre"),ce=h(),d=o("p"),De=i("Then I need to update my $PATH. I use the "),B=o("a"),Fe=i("dotfiles"),Ne=i(" concept to manage my CLI defaults. The "),I=o("a"),Be=i(".path"),Ge=i(" file from that project handles the $PATH variable. I made changes to it:"),he=h(),P=o("pre"),fe=h(),w=o("p"),We=i("The important part is the "),se=o("code"),Ye=i("$(pyenv root)/shims"),qe=i(" in the $PATH. This is what makes the terminal load the pyenv version on the CLI instead of the standard OS X one. To prove it works, open a new terminal window and type"),ue=h(),A=o("pre"),de=h(),H=o("h2"),G=o("a"),Ve=i("Install pipenv"),me=h(),W=o("p"),Ze=i("I use pipenv to manage python versions in my projects; for those coming from node, it\u2019s kind of a mixture of nvm and yarn. That is installed with a simple pip command. Installing python also installs pip, so it should be already on your system"),ve=h(),$=o("pre"),ye=h(),b=o("p"),Je=i("And yes, it creates yet another config directory, and I need to add that to the path too. I could move all the files to the "),ne=o("code"),Ke=i("~/bin "),Qe=i("directory, where I keep all this kind of stuff. But the benefits are minimal, compared to the risks when upgrading pipenv. So I do what pipenv asks and add the directory to the path."),ke=h(),O=o("pre"),we=h(),S=o("h2"),Y=o("a"),es=i("Trying to prevent python issues when installing node-gyp"),be=h(),m=o("p"),ss=i("I have had all sort of troubles trying to run node 17 on Mac OS X Monterey. "),ae=o("code"),ns=i("node-gyp"),as=i(", which has always been tricky, seems to be acting up again. It must be hard for those open source contributors to keep up with all the new versions of al the OSes\u2026 I don\u2019t envy them. To avoid issues, "),x=o("a"),ts=i("they suggest setting the path to the Python executable in the npm config"),os=i(". I do that in the same .path file, in the pyenv block created during the pyenv installation"),ge=h(),C=o("pre"),_e=h(),q=o("p"),ps=i("I reload the dotfiles and the .npmrc file does indeed contain the Python path"),Ee=h(),M=o("pre"),Te=h(),j=o("h2"),V=o("a"),ls=i("Prior art"),Ie=h(),Z=o("p"),is=i("I found these posts helpful:"),Pe=h(),u=o("p"),R=o("a"),rs=i("opensource.com/article/20/4/pyenv"),cs=h(),L=o("a"),hs=i("opensource.com/article/19/5/python-3-default-mac"),fs=h(),X=o("a"),us=i("www.freecodecamp.org/news/python-version-on-mac-update/"),ds=h(),U=o("a"),ms=i("github.com/nodejs/node-gyp"),this.h()},l(e){v=p(e,"H2",{id:!0});var a=l(v);z=p(a,"A",{href:!0});var ys=l(z);Se=r(ys,"Ignore OS X\u2019s own python version(s)"),ys.forEach(s),a.forEach(s),te=f(e),y=p(e,"P",{});var Ae=l(y);xe=r(Ae,"Mac OS X comes with its own version of python; one which is deprecated since 2020. Given its age, it\u2019s better ignored; I treat it as an internal system tool, nothing to do with me. OS X also comes with python 3, which is available with the command "),Q=p(Ae,"CODE",{});var ks=l(Q);Ce=r(ks,"$ python3"),ks.forEach(s),Me=r(Ae,". I ignore that too"),Ae.forEach(s),oe=f(e),_=p(e,"H2",{id:!0});var ws=l(_);D=p(ws,"A",{href:!0});var bs=l(D);je=r(bs,"Homebrew can manage python versions"),bs.forEach(s),ws.forEach(s),pe=f(e),k=p(e,"P",{});var He=l(k);Re=r(He,"You can also use homebrew to install python, with "),ee=p(He,"CODE",{});var gs=l(ee);Le=r(gs,"brew install python"),gs.forEach(s),Xe=r(He,". But I found aliasing different versions for different projects always tricky when doing it that way"),He.forEach(s),le=f(e),E=p(e,"H2",{id:!0});var _s=l(E);F=p(_s,"A",{href:!0});var Es=l(F);Ue=r(Es,"Using pyenv to manage different versions of python"),Es.forEach(s),_s.forEach(s),ie=f(e),N=p(e,"P",{});var Ts=l(N);ze=r(Ts,"Pyenv is very versatile and simple. I install the main version with the following commands in Terminal"),Ts.forEach(s),re=f(e),T=p(e,"PRE",{class:!0});var Ks=l(T);Ks.forEach(s),ce=f(e),d=p(e,"P",{});var J=l(d);De=r(J,"Then I need to update my $PATH. I use the "),B=p(J,"A",{href:!0});var Is=l(B);Fe=r(Is,"dotfiles"),Is.forEach(s),Ne=r(J," concept to manage my CLI defaults. The "),I=p(J,"A",{href:!0,rel:!0});var Ps=l(I);Be=r(Ps,".path"),Ps.forEach(s),Ge=r(J," file from that project handles the $PATH variable. I made changes to it:"),J.forEach(s),he=f(e),P=p(e,"PRE",{class:!0});var Qs=l(P);Qs.forEach(s),fe=f(e),w=p(e,"P",{});var $e=l(w);We=r($e,"The important part is the "),se=p($e,"CODE",{});var As=l(se);Ye=r(As,"$(pyenv root)/shims"),As.forEach(s),qe=r($e," in the $PATH. This is what makes the terminal load the pyenv version on the CLI instead of the standard OS X one. To prove it works, open a new terminal window and type"),$e.forEach(s),ue=f(e),A=p(e,"PRE",{class:!0});var en=l(A);en.forEach(s),de=f(e),H=p(e,"H2",{id:!0});var Hs=l(H);G=p(Hs,"A",{href:!0});var $s=l(G);Ve=r($s,"Install pipenv"),$s.forEach(s),Hs.forEach(s),me=f(e),W=p(e,"P",{});var Os=l(W);Ze=r(Os,"I use pipenv to manage python versions in my projects; for those coming from node, it\u2019s kind of a mixture of nvm and yarn. That is installed with a simple pip command. Installing python also installs pip, so it should be already on your system"),Os.forEach(s),ve=f(e),$=p(e,"PRE",{class:!0});var sn=l($);sn.forEach(s),ye=f(e),b=p(e,"P",{});var Oe=l(b);Je=r(Oe,"And yes, it creates yet another config directory, and I need to add that to the path too. I could move all the files to the "),ne=p(Oe,"CODE",{});var Ss=l(ne);Ke=r(Ss,"~/bin "),Ss.forEach(s),Qe=r(Oe,"directory, where I keep all this kind of stuff. But the benefits are minimal, compared to the risks when upgrading pipenv. So I do what pipenv asks and add the directory to the path."),Oe.forEach(s),ke=f(e),O=p(e,"PRE",{class:!0});var nn=l(O);nn.forEach(s),we=f(e),S=p(e,"H2",{id:!0});var xs=l(S);Y=p(xs,"A",{href:!0});var Cs=l(Y);es=r(Cs,"Trying to prevent python issues when installing node-gyp"),Cs.forEach(s),xs.forEach(s),be=f(e),m=p(e,"P",{});var K=l(m);ss=r(K,"I have had all sort of troubles trying to run node 17 on Mac OS X Monterey. "),ae=p(K,"CODE",{});var Ms=l(ae);ns=r(Ms,"node-gyp"),Ms.forEach(s),as=r(K,", which has always been tricky, seems to be acting up again. It must be hard for those open source contributors to keep up with all the new versions of al the OSes\u2026 I don\u2019t envy them. To avoid issues, "),x=p(K,"A",{href:!0,rel:!0});var js=l(x);ts=r(js,"they suggest setting the path to the Python executable in the npm config"),js.forEach(s),os=r(K,". I do that in the same .path file, in the pyenv block created during the pyenv installation"),K.forEach(s),ge=f(e),C=p(e,"PRE",{class:!0});var an=l(C);an.forEach(s),_e=f(e),q=p(e,"P",{});var Rs=l(q);ps=r(Rs,"I reload the dotfiles and the .npmrc file does indeed contain the Python path"),Rs.forEach(s),Ee=f(e),M=p(e,"PRE",{class:!0});var tn=l(M);tn.forEach(s),Te=f(e),j=p(e,"H2",{id:!0});var Ls=l(j);V=p(Ls,"A",{href:!0});var Xs=l(V);ls=r(Xs,"Prior art"),Xs.forEach(s),Ls.forEach(s),Ie=f(e),Z=p(e,"P",{});var Us=l(Z);is=r(Us,"I found these posts helpful:"),Us.forEach(s),Pe=f(e),u=p(e,"P",{});var g=l(u);R=p(g,"A",{href:!0,rel:!0});var zs=l(R);rs=r(zs,"opensource.com/article/20/4/pyenv"),zs.forEach(s),cs=f(g),L=p(g,"A",{href:!0,rel:!0});var Ds=l(L);hs=r(Ds,"opensource.com/article/19/5/python-3-default-mac"),Ds.forEach(s),fs=f(g),X=p(g,"A",{href:!0,rel:!0});var Fs=l(X);us=r(Fs,"www.freecodecamp.org/news/python-version-on-mac-update/"),Fs.forEach(s),ds=f(g),U=p(g,"A",{href:!0,rel:!0});var Ns=l(U);ms=r(Ns,"github.com/nodejs/node-gyp"),Ns.forEach(s),g.forEach(s),this.h()},h(){c(z,"href","#ignore-os-xs-own-python-versions"),c(v,"id","ignore-os-xs-own-python-versions"),c(D,"href","#homebrew-can-manage-python-versions"),c(_,"id","homebrew-can-manage-python-versions"),c(F,"href","#using-pyenv-to-manage-different-versions-of-python"),c(E,"id","using-pyenv-to-manage-different-versions-of-python"),c(T,"class","language-bash"),c(B,"href","/blog/storing-bash-profile-and-so-on-on-github/"),c(I,"href","https://github.com/gotofritz/dotfiles/blob/master/.path"),c(I,"rel","nofollow"),c(P,"class","language-bash"),c(A,"class","language-bash"),c(G,"href","#install-pipenv"),c(H,"id","install-pipenv"),c($,"class","language-bash"),c(O,"class","language-bash"),c(Y,"href","#trying-to-prevent-python-issues-when-installing-node-gyp"),c(S,"id","trying-to-prevent-python-issues-when-installing-node-gyp"),c(x,"href","https://github.com/nodejs/node-gyp#configuring-python-dependency"),c(x,"rel","nofollow"),c(C,"class","language-bash"),c(M,"class","language-bash"),c(V,"href","#prior-art"),c(j,"id","prior-art"),c(R,"href","https://opensource.com/article/20/4/pyenv"),c(R,"rel","nofollow"),c(L,"href","https://opensource.com/article/19/5/python-3-default-mac"),c(L,"rel","nofollow"),c(X,"href","https://www.freecodecamp.org/news/python-version-on-mac-update/"),c(X,"rel","nofollow"),c(U,"href","https://github.com/nodejs/node-gyp"),c(U,"rel","nofollow")},m(e,a){t(e,v,a),n(v,z),n(z,Se),t(e,te,a),t(e,y,a),n(y,xe),n(y,Q),n(Q,Ce),n(y,Me),t(e,oe,a),t(e,_,a),n(_,D),n(D,je),t(e,pe,a),t(e,k,a),n(k,Re),n(k,ee),n(ee,Le),n(k,Xe),t(e,le,a),t(e,E,a),n(E,F),n(F,Ue),t(e,ie,a),t(e,N,a),n(N,ze),t(e,re,a),t(e,T,a),T.innerHTML=Gs,t(e,ce,a),t(e,d,a),n(d,De),n(d,B),n(B,Fe),n(d,Ne),n(d,I),n(I,Be),n(d,Ge),t(e,he,a),t(e,P,a),P.innerHTML=Ws,t(e,fe,a),t(e,w,a),n(w,We),n(w,se),n(se,Ye),n(w,qe),t(e,ue,a),t(e,A,a),A.innerHTML=Ys,t(e,de,a),t(e,H,a),n(H,G),n(G,Ve),t(e,me,a),t(e,W,a),n(W,Ze),t(e,ve,a),t(e,$,a),$.innerHTML=qs,t(e,ye,a),t(e,b,a),n(b,Je),n(b,ne),n(ne,Ke),n(b,Qe),t(e,ke,a),t(e,O,a),O.innerHTML=Vs,t(e,we,a),t(e,S,a),n(S,Y),n(Y,es),t(e,be,a),t(e,m,a),n(m,ss),n(m,ae),n(ae,ns),n(m,as),n(m,x),n(x,ts),n(m,os),t(e,ge,a),t(e,C,a),C.innerHTML=Zs,t(e,_e,a),t(e,q,a),n(q,ps),t(e,Ee,a),t(e,M,a),M.innerHTML=Js,t(e,Te,a),t(e,j,a),n(j,V),n(V,ls),t(e,Ie,a),t(e,Z,a),n(Z,is),t(e,Pe,a),t(e,u,a),n(u,R),n(R,rs),n(u,cs),n(u,L),n(L,hs),n(u,fs),n(u,X),n(X,us),n(u,ds),n(u,U),n(U,ms)},p:vs,i:vs,o:vs,d(e){e&&s(v),e&&s(te),e&&s(y),e&&s(oe),e&&s(_),e&&s(pe),e&&s(k),e&&s(le),e&&s(E),e&&s(ie),e&&s(N),e&&s(re),e&&s(T),e&&s(ce),e&&s(d),e&&s(he),e&&s(P),e&&s(fe),e&&s(w),e&&s(ue),e&&s(A),e&&s(de),e&&s(H),e&&s(me),e&&s(W),e&&s(ve),e&&s($),e&&s(ye),e&&s(b),e&&s(ke),e&&s(O),e&&s(we),e&&s(S),e&&s(be),e&&s(m),e&&s(ge),e&&s(C),e&&s(_e),e&&s(q),e&&s(Ee),e&&s(M),e&&s(Te),e&&s(j),e&&s(Ie),e&&s(Z),e&&s(Pe),e&&s(u)}}}const hn={excerpt:"There are many different ways of doing it; my favourite involves using pyenv",date:"2022-01-04T00:00:00.000Z",published:!0,archived:!1,title:"How I install python on OS X in 2022",prev:"setting-up-thunderbird-for-gmail-on-os-x",next:"fixing-autoformatting-django-templates-in-visual-studio-code",tags:["os x","python"]};class fn extends on{constructor(v){super();pn(this,v,null,rn,ln,{})}}export{fn as default,hn as metadata};
