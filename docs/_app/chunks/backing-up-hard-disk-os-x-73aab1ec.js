import{S as jt,i as Gt,s as Ht,e as s,t as r,j as c,c as n,a as o,g as d,d as t,l as f,b as u,f as i,F as a,J as Ze}from"./vendor-e04e0de5.js";function Mt(Tt){let v,ke,te,k,S,be,ae,T,_e,se,b,Pt=`<code class="language-bash">$ <span class="token function">rsync</span> -aS --delete --progress <span class="token punctuation"></span>
  /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="token punctuation"></span> DISK/</code>`,ne,P,Ie,oe,h,j,Ee,G,ge,H,xe,M,De,F,Ae,$,Se,X,Te,q,Pe,z,Ke,J,Ce,Q,Le,W,Be,le,_,K,Re,ie,C,Ue,re,I,Kt=`<code class="language-bash">$ <span class="token function">rsync</span> -aS --delete --progress --exclude *.Trash* <span class="token punctuation"></span>
  --exclude /that_file.txt --exclude /other_file.jpg <span class="token punctuation"></span>
  /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="token punctuation"></span> DISK/</code>`,de,y,Ne,Y,Oe,Ve,Z,je,Ge,he,E,L,He,ce,B,Me,fe,g,Ct=`<code class="language-bash">$ <span class="token function">rsync</span> -aS --delete --progress <span class="token punctuation"></span>
  --exclude-from ~/.rsync_exclude_list <span class="token punctuation"></span>
  /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="token punctuation"></span> DISK/</code>`,ue,w,Fe,R,$e,Xe,pe,x,Lt=`<code class="language-bash"><span class="token comment"># list of files not to be included when running alias backupext</span>
*.Trash*
.TemporaryItems*
.DocumentRevisions-*
.Spotlight-*</code>`,ye,D,U,qe,me,m,ze,ee,Je,Qe,N,We,Ye,ve,A,Bt=`<code class="language-bash"><span class="token comment"># this will create it if it doesn't exist. Nano is a</span>
<span class="token comment"># text editor that runs inside</span>
<span class="token comment"># Terminal. It's simple and it shows the shortcuts at</span>
<span class="token comment"># the bottom (^ = control key)</span>
$ <span class="token function">nano</span> ~/.bash_profile

<span class="token comment"># or if you use vscode...</span>
$ code ~/.bash_profile

<span class="token comment"># then type this anywhere in the file, in a sincle line</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">backupext</span><span class="token operator">=</span><span class="token string">"rsync -aS --delete --progress <span class="token entity" title="\\">\\</span>
  --exclude-from ~/.rsync_exclude_list <span class="token entity" title="\\">\\</span>
  /Volumes/ORIGINAL/ /Volumes/BACKUP DISK/"</span>

<span class="token comment"># to save and quit in nano press CTRL-X:</span>
<span class="token comment"># it will ask you to save the file</span></code>`;return{c(){v=s("p"),ke=r("rsync is a utility you run by typing commands in Terminal. It was designed exactly for doing that one job: keeping folders or devices in sync (in Unix everything is a file or a folder, even an external hard disk). rsyinc looks at one source folder and all its subfolders, finds all the files in there, then looks at the destination folder and copies over only what needs to be copied, making it very fast. It\u2019s got a ton of options and can become very involved. But all you need is to find that one command that works for you and use it again and again as needed."),te=c(),k=s("h2"),S=s("a"),be=r("Syncing two hard disks with rsync"),ae=c(),T=s("p"),_e=r("Let\u2019s say you have two hard disks, \u201CORIGINAL\u201D and \u201CBACKUP DISK\u201D. For the first transfer, you may as well copy manually all the files from ORIGINAL to BACKUP DISK by dragging them, rsync doesn\u2019t do it any better or faster. From then on, whenever you want to backup the disk (every day, every week, whatever) you can start with this command:"),se=c(),b=s("pre"),ne=c(),P=s("p"),Ie=r("The command breaks down as follows:"),oe=c(),h=s("dl"),j=s("dt"),Ee=r("rsync"),G=s("dd"),ge=r("calls the utility"),H=s("dt"),xe=r("-a"),M=s("dd"),De=r("turns on archive mode, which basically ensures all subfolders, permissions and files parameters are copied "),F=s("dt"),Ae=r("S"),$=s("dd"),Se=r("if there wasn't already a dash for -a, this would be -S. This compacts sparse files for efficiency "),X=s("dt"),Te=r("--delete"),q=s("dd"),Pe=r("this ensures that any files in the destination that were not there in the source will be deleted"),z=s("dt"),Ke=r("/Volumes/ORIGINAL"),J=s("dd"),Ce=r("the original"),Q=s("dt"),Le=r("/Volumes/BACKUP\\ DISK"),W=s("dd"),Be=r("the destination. Note that I have typed a backslash before the space after BACKUP, BACKUP\\ DISK - that tells Terminal that the word isn't finish yet, and the space is part of the word"),le=c(),_=s("h3"),K=s("a"),Re=r("Excluding files from rsync"),ie=c(),C=s("p"),Ue=r("If you want to skip some files or folders, you can add their paths to the command:"),re=c(),I=s("pre"),de=c(),y=s("p"),Ne=r("Note that you have one "),Y=s("code"),Oe=r("--exclude"),Ve=r(" options for every patter you want to exclude. Also note the "),Z=s("code"),je=r("*"),Ge=r(" wildcards, which basically means \u201Canything here\u201D"),he=c(),E=s("h3"),L=s("a"),He=r("Creating a list of files to exclude from rsync"),ce=c(),B=s("p"),Me=r("If you have a lot of excludes it makes sense to put the list in a file, and then tell rsync to use that. It makes sense even if you only have a few files, because then you can easily add and remove things from there without having to change the command - as you start playing with rsync you soon find out there are a few system folders you don\u2019t want to backup, like Spotlight indices and so on."),fe=c(),g=s("pre"),ue=c(),w=s("p"),Fe=r("and .rsync_exclude_list can have all the patterns in there, one per line. The file can be named whatever you want - I have put it in the home folder (that\u2019s what ~/ at the beginning means) and used a name that starts with a dot because it works well with my "),R=s("a"),$e=r("dotfiles"),Xe=r("."),pe=c(),x=s("pre"),ye=c(),D=s("h2"),U=s("a"),qe=r("Making things easier with an alias"),me=c(),m=s("p"),ze=r("Instead of trying to remember that command every time you need to back up, you can create an alias, i.e. a shortcut to the command. Depending on your setup, you can just add it to your "),ee=s("code"),Je=r(".bash_profile"),Qe=r(" file. If you use "),N=s("a"),We=r("dotfiles"),Ye=r(", just add it to the .alias file and then run bootstrap.sh again."),ve=c(),A=s("pre"),this.h()},l(e){v=n(e,"P",{});var l=o(v);ke=d(l,"rsync is a utility you run by typing commands in Terminal. It was designed exactly for doing that one job: keeping folders or devices in sync (in Unix everything is a file or a folder, even an external hard disk). rsyinc looks at one source folder and all its subfolders, finds all the files in there, then looks at the destination folder and copies over only what needs to be copied, making it very fast. It\u2019s got a ton of options and can become very involved. But all you need is to find that one command that works for you and use it again and again as needed."),l.forEach(t),te=f(e),k=n(e,"H2",{id:!0});var et=o(k);S=n(et,"A",{href:!0});var tt=o(S);be=d(tt,"Syncing two hard disks with rsync"),tt.forEach(t),et.forEach(t),ae=f(e),T=n(e,"P",{});var at=o(T);_e=d(at,"Let\u2019s say you have two hard disks, \u201CORIGINAL\u201D and \u201CBACKUP DISK\u201D. For the first transfer, you may as well copy manually all the files from ORIGINAL to BACKUP DISK by dragging them, rsync doesn\u2019t do it any better or faster. From then on, whenever you want to backup the disk (every day, every week, whatever) you can start with this command:"),at.forEach(t),se=f(e),b=n(e,"PRE",{class:!0});var Rt=o(b);Rt.forEach(t),ne=f(e),P=n(e,"P",{});var st=o(P);Ie=d(st,"The command breaks down as follows:"),st.forEach(t),oe=f(e),h=n(e,"DL",{class:!0});var p=o(h);j=n(p,"DT",{});var nt=o(j);Ee=d(nt,"rsync"),nt.forEach(t),G=n(p,"DD",{});var ot=o(G);ge=d(ot,"calls the utility"),ot.forEach(t),H=n(p,"DT",{});var lt=o(H);xe=d(lt,"-a"),lt.forEach(t),M=n(p,"DD",{});var it=o(M);De=d(it,"turns on archive mode, which basically ensures all subfolders, permissions and files parameters are copied "),it.forEach(t),F=n(p,"DT",{});var rt=o(F);Ae=d(rt,"S"),rt.forEach(t),$=n(p,"DD",{});var dt=o($);Se=d(dt,"if there wasn't already a dash for -a, this would be -S. This compacts sparse files for efficiency "),dt.forEach(t),X=n(p,"DT",{});var ht=o(X);Te=d(ht,"--delete"),ht.forEach(t),q=n(p,"DD",{});var ct=o(q);Pe=d(ct,"this ensures that any files in the destination that were not there in the source will be deleted"),ct.forEach(t),z=n(p,"DT",{});var ft=o(z);Ke=d(ft,"/Volumes/ORIGINAL"),ft.forEach(t),J=n(p,"DD",{});var ut=o(J);Ce=d(ut,"the original"),ut.forEach(t),Q=n(p,"DT",{});var pt=o(Q);Le=d(pt,"/Volumes/BACKUP\\ DISK"),pt.forEach(t),W=n(p,"DD",{});var yt=o(W);Be=d(yt,"the destination. Note that I have typed a backslash before the space after BACKUP, BACKUP\\ DISK - that tells Terminal that the word isn't finish yet, and the space is part of the word"),yt.forEach(t),p.forEach(t),le=f(e),_=n(e,"H3",{id:!0});var mt=o(_);K=n(mt,"A",{href:!0});var vt=o(K);Re=d(vt,"Excluding files from rsync"),vt.forEach(t),mt.forEach(t),ie=f(e),C=n(e,"P",{});var wt=o(C);Ue=d(wt,"If you want to skip some files or folders, you can add their paths to the command:"),wt.forEach(t),re=f(e),I=n(e,"PRE",{class:!0});var Ut=o(I);Ut.forEach(t),de=f(e),y=n(e,"P",{});var O=o(y);Ne=d(O,"Note that you have one "),Y=n(O,"CODE",{});var kt=o(Y);Oe=d(kt,"--exclude"),kt.forEach(t),Ve=d(O," options for every patter you want to exclude. Also note the "),Z=n(O,"CODE",{});var bt=o(Z);je=d(bt,"*"),bt.forEach(t),Ge=d(O," wildcards, which basically means \u201Canything here\u201D"),O.forEach(t),he=f(e),E=n(e,"H3",{id:!0});var _t=o(E);L=n(_t,"A",{href:!0});var It=o(L);He=d(It,"Creating a list of files to exclude from rsync"),It.forEach(t),_t.forEach(t),ce=f(e),B=n(e,"P",{});var Et=o(B);Me=d(Et,"If you have a lot of excludes it makes sense to put the list in a file, and then tell rsync to use that. It makes sense even if you only have a few files, because then you can easily add and remove things from there without having to change the command - as you start playing with rsync you soon find out there are a few system folders you don\u2019t want to backup, like Spotlight indices and so on."),Et.forEach(t),fe=f(e),g=n(e,"PRE",{class:!0});var Nt=o(g);Nt.forEach(t),ue=f(e),w=n(e,"P",{});var we=o(w);Fe=d(we,"and .rsync_exclude_list can have all the patterns in there, one per line. The file can be named whatever you want - I have put it in the home folder (that\u2019s what ~/ at the beginning means) and used a name that starts with a dot because it works well with my "),R=n(we,"A",{href:!0});var gt=o(R);$e=d(gt,"dotfiles"),gt.forEach(t),Xe=d(we,"."),we.forEach(t),pe=f(e),x=n(e,"PRE",{class:!0});var Ot=o(x);Ot.forEach(t),ye=f(e),D=n(e,"H2",{id:!0});var xt=o(D);U=n(xt,"A",{href:!0});var Dt=o(U);qe=d(Dt,"Making things easier with an alias"),Dt.forEach(t),xt.forEach(t),me=f(e),m=n(e,"P",{});var V=o(m);ze=d(V,"Instead of trying to remember that command every time you need to back up, you can create an alias, i.e. a shortcut to the command. Depending on your setup, you can just add it to your "),ee=n(V,"CODE",{});var At=o(ee);Je=d(At,".bash_profile"),At.forEach(t),Qe=d(V," file. If you use "),N=n(V,"A",{href:!0});var St=o(N);We=d(St,"dotfiles"),St.forEach(t),Ye=d(V,", just add it to the .alias file and then run bootstrap.sh again."),V.forEach(t),ve=f(e),A=n(e,"PRE",{class:!0});var Vt=o(A);Vt.forEach(t),this.h()},h(){u(S,"href","#syncing-two-hard-disks-with-rsync"),u(k,"id","syncing-two-hard-disks-with-rsync"),u(b,"class","language-bash"),u(h,"class","code-breakdown"),u(K,"href","#excluding-files-from-rsync"),u(_,"id","excluding-files-from-rsync"),u(I,"class","language-bash"),u(L,"href","#creating-a-list-of-files-to-exclude-from-rsync"),u(E,"id","creating-a-list-of-files-to-exclude-from-rsync"),u(g,"class","language-bash"),u(R,"href","/blog/storing-bash-profile-and-so-on-on-github/"),u(x,"class","language-bash"),u(U,"href","#making-things-easier-with-an-alias"),u(D,"id","making-things-easier-with-an-alias"),u(N,"href","/blog/storing-bash-profile-and-so-on-on-github/"),u(A,"class","language-bash")},m(e,l){i(e,v,l),a(v,ke),i(e,te,l),i(e,k,l),a(k,S),a(S,be),i(e,ae,l),i(e,T,l),a(T,_e),i(e,se,l),i(e,b,l),b.innerHTML=Pt,i(e,ne,l),i(e,P,l),a(P,Ie),i(e,oe,l),i(e,h,l),a(h,j),a(j,Ee),a(h,G),a(G,ge),a(h,H),a(H,xe),a(h,M),a(M,De),a(h,F),a(F,Ae),a(h,$),a($,Se),a(h,X),a(X,Te),a(h,q),a(q,Pe),a(h,z),a(z,Ke),a(h,J),a(J,Ce),a(h,Q),a(Q,Le),a(h,W),a(W,Be),i(e,le,l),i(e,_,l),a(_,K),a(K,Re),i(e,ie,l),i(e,C,l),a(C,Ue),i(e,re,l),i(e,I,l),I.innerHTML=Kt,i(e,de,l),i(e,y,l),a(y,Ne),a(y,Y),a(Y,Oe),a(y,Ve),a(y,Z),a(Z,je),a(y,Ge),i(e,he,l),i(e,E,l),a(E,L),a(L,He),i(e,ce,l),i(e,B,l),a(B,Me),i(e,fe,l),i(e,g,l),g.innerHTML=Ct,i(e,ue,l),i(e,w,l),a(w,Fe),a(w,R),a(R,$e),a(w,Xe),i(e,pe,l),i(e,x,l),x.innerHTML=Lt,i(e,ye,l),i(e,D,l),a(D,U),a(U,qe),i(e,me,l),i(e,m,l),a(m,ze),a(m,ee),a(ee,Je),a(m,Qe),a(m,N),a(N,We),a(m,Ye),i(e,ve,l),i(e,A,l),A.innerHTML=Bt},p:Ze,i:Ze,o:Ze,d(e){e&&t(v),e&&t(te),e&&t(k),e&&t(ae),e&&t(T),e&&t(se),e&&t(b),e&&t(ne),e&&t(P),e&&t(oe),e&&t(h),e&&t(le),e&&t(_),e&&t(ie),e&&t(C),e&&t(re),e&&t(I),e&&t(de),e&&t(y),e&&t(he),e&&t(E),e&&t(ce),e&&t(B),e&&t(fe),e&&t(g),e&&t(ue),e&&t(w),e&&t(pe),e&&t(x),e&&t(ye),e&&t(D),e&&t(me),e&&t(m),e&&t(ve),e&&t(A)}}}const $t={title:"Backing up a hard disk to another in OS X",date:"2016-01-16 22:44",published:!0,excerpt:'<a href="https://en.wikipedia.org/wiki/Time_Machine_(OS_X)">Time Machine</a> does its own backup magic, but sometimes you just simply want two identical copies of the same hard disk. For that <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a> is the way to go',prev:"stop-chrome-navigating-back-when-swiping-horizontally",next:"osx-apps",tags:["backup","os x"]};class Xt extends jt{constructor(v){super();Gt(this,v,null,Mt,Ht,{})}}export{Xt as default,$t as metadata};
