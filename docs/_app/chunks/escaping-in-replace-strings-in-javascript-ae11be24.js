import{S as J,i as y,s as C,e as g,t as l,k as R,c as u,a as d,h as r,d as t,m as b,b as D,g as _,I as p,E as $}from"./index-e78f36eb.js";function O(w){let a,h,c,k,m,o,f,x,i,n,I=`<code class="language-js"><span class="token string">"I &amp;lt;feeling> that"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;lt;(.+?)></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//won't work - will produce ""I $1 that""</span>

<span class="token string">"I &amp;lt;feeling> that"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;lt;(.+?)></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$$$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//works - "I $feeling that"</span></code>`;return{c(){a=g("p"),h=l("I.e., "),c=g("code"),k=l("$$"),m=l(", not "),o=g("code"),f=l("\\$"),x=l(". In other words, the escape character for the RegExp \u201Clanguage\u201D is $, even within Javascript, not the standard slash \\"),i=R(),n=g("pre"),this.h()},l(s){a=u(s,"P",{});var e=d(a);h=r(e,"I.e., "),c=u(e,"CODE",{});var v=d(c);k=r(v,"$$"),v.forEach(t),m=r(e,", not "),o=u(e,"CODE",{});var E=d(o);f=r(E,"\\$"),E.forEach(t),x=r(e,". In other words, the escape character for the RegExp \u201Clanguage\u201D is $, even within Javascript, not the standard slash \\"),e.forEach(t),i=b(s),n=u(s,"PRE",{class:!0});var j=d(n);j.forEach(t),this.h()},h(){D(n,"class","language-js")},m(s,e){_(s,a,e),p(a,h),p(a,c),p(c,k),p(a,m),p(a,o),p(o,f),p(a,x),_(s,i,e),_(s,n,e),n.innerHTML=I},p:$,i:$,o:$,d(s){s&&t(a),s&&t(i),s&&t(n)}}}const S={date:"2012-03-28 20:52",title:"Escaping $ in replace strings in Javascript",excerpt:"To have a $ in your replace strings in Javascript regular expressions, it needs to be escaped with another $",tags:["js"],draft:!1};class T extends J{constructor(a){super(),y(this,a,null,O,C,{})}}export{T as default,S as metadata};
