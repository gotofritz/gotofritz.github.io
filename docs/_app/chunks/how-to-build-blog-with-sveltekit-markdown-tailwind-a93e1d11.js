import{S as xs,i as Os,s as js,e as n,t as a,k as d,c as l,a as i,d as t,h as o,m as h,b as c,g as p,I as s,E as Mt}from"./index-6e518972.js";function As(bs){let k,E,Z,He,be,u,Le,O,Be,Me,j,$e,qe,F,Ne,Ge,W,Ve,Je,ge,A,gs=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> gotofritz.github.io-redesign
<span class="token operator">></span> <span class="token function">cp</span> -r   gotofritz.github.io/.git gotofritz.github.io-redesign/
<span class="token operator">></span> <span class="token builtin class-name">cd</span> gotofritz.github.io-redesign/
<span class="token operator">></span> <span class="token function">git</span> checkout -b svelte-redesign
Switched to a new branch <span class="token string">'svelte-redesign'</span>
<span class="token operator">></span> npx degit mattjennings/sveltekit-blog-template --force
  destination directory is not empty. Using --force, continuing
  cloned mattjennings/sveltekit-blog-template<span class="token comment">#HEAD</span>

<span class="token comment"># i like semicolons, thank you very much</span>
<span class="token operator">></span> <span class="token function">cp</span> <span class="token punctuation">..</span>/gotofritz.github.io/.prettierrc .prettierrc

<span class="token comment"># Perfect - I also like pnpm. The same would work with npm</span>
<span class="token comment"># or yarn, of course</span>
<span class="token operator">></span> <span class="token function">pnpm</span> <span class="token function">install</span>
Packages: +321
<span class="token punctuation">..</span>.

<span class="token comment"># check that it runs</span>
<span class="token operator">></span> <span class="token function">pnpm</span> run dev
  sveltekit-blog-template@0.0.1 dev
  <span class="token punctuation">..</span>.
  local:   http://localhost:3000
  network: not exposed

  Use --host to expose server to other devices on this network

<span class="token comment"># it does</span>
  <span class="token operator">&lt;</span>CTRL-C<span class="token operator">></span>

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token operator">></span> <span class="token function">git</span> commit -m <span class="token string">"feature: clone mattjennings/sveltekit-blog-template"</span></code>`,_e,I,S,X,Ue,we,v,Qe,K,Ze,Fe,Y,We,Xe,ye,D,P,ee,Ye,Ee,M,et,Ie,$,tt,Se,C,_s=`<code class="language-bash"><span class="token assign-left variable">DIR_POSTS</span><span class="token operator">=</span>./posts
<span class="token assign-left variable">DIR_POSTS_BAK</span><span class="token operator">=~</span>/Dropbox/your site/posts</code>`,De,b,st,te,at,ot,se,nt,lt,Pe,R,ws=`<code class="language-json">...
<span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"sync"</span><span class="token operator">:</span> <span class="token string">"source .env; if [[ ! -z $DIR_POSTS_BAK ]]; then unison "$DIR_POSTS_BAK" "$DIR_POSTS" -batch; fi"</span>
  <span class="token punctuation">&#125;</span>
  ...</code>`,Te,q,it,xe,m,ae,rt,oe,pt,ne,ct,le,dt,ie,ht,re,ut,Oe,g,ft,pe,mt,kt,ce,vt,bt,je,z,ys=`<code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
 <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"npm run sync; svelte-kit dev"</span><span class="token punctuation">,</span>
 <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npm run sync; svelte-kit build"</span><span class="token punctuation">,</span>
 ...
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`,Ae,_,gt,de,_t,wt,he,yt,Et,Ke,H,Es=`<code class="language-bash">posts/*
<span class="token operator">!</span>posts/.gitkeep</code>`,Ce,f,It,ue,St,Dt,fe,Pt,Tt,me,xt,Ot,ke,jt,At,Re,T,x,ve,Kt,ze,N,G,L,Ct,Rt;return{c(){k=n("h2"),E=n("a"),Z=n("span"),He=a("Getting started"),be=d(),u=n("p"),Le=a("I use "),O=n("a"),Be=a("degit, a tool by the SvelteKit\u2019s creator"),Me=a(", to reproduce "),j=n("a"),$e=a("Matt Jennings\u2019s excellent SvelteKit blog template"),qe=a(" in a folder ("),F=n("code"),Ne=a("gotofritz.github.io-redesign/"),Ge=a(") parallel to my main branch ("),W=n("code"),Ve=a("gotofritz.github.io/"),Je=a(")"),ge=d(),A=n("pre"),_e=d(),I=n("h2"),S=n("a"),X=n("span"),Ue=a("Importing markdown posts from outside the SvelteKit project root"),we=d(),v=n("p"),Qe=a("\u2026cannot be done, at least not in Q2 of 2022. It\u2019s "),K=n("a"),Ze=a("a limitation of Vite"),Fe=a(", the bundler used by SvelteKit. And no, symbolic links don\u2019t help either. Vite is \u201Cclever\u201D enough to spot that you are trying to trick it.That is "),Y=n("em"),We=a("that"),Xe=a(" close to being a deal breaker. I like keeping the posts data and the code completely separate. I also prefer keeping posts in Dropbox, and then manage them with tools like Obsidian. That allows me to easily access them from my mobile phone when I am on the go. I came up with a workaround, but it\u2019s a hack."),ye=d(),D=n("h3"),P=n("a"),ee=n("span"),Ye=a("Synchronising posts inside SvelteKit with a folder outside the project using unison"),Ee=d(),M=n("p"),et=a("Since source files cannot exist outside the project in Vite, I only have two options: ignore it, or sync manually. I decided to go for the syncing. But not quite manual; I add a sync command to run before building the site, and before starting the local dev server. Or I can, indeed, run the sync manually as needed."),Ie=d(),$=n("p"),tt=a("I created an .env file with the path of the folder to sync to, and from"),Se=d(),C=n("pre"),De=d(),b=n("p"),st=a("I then install the CLI utility "),te=n("code"),at=a("unison"),ot=a(" with brew ("),se=n("code"),nt=a("brew install unison"),lt=a("). This is somewhat like rsync, but it allows to sync two directories bidirectionally. In my package json I add the command to load those .env variable and pass them to unison:"),Pe=d(),R=n("pre"),Te=d(),q=n("p"),it=a("which can be broken down as"),xe=d(),m=n("dl"),ae=n("dt"),rt=a("source .env;"),oe=n("dd"),pt=a("a _very_ basic way to load a .env file into memory. Note that it doesn't handle comments and a lot of other things. Only suitable for a quick hack"),ne=n("dt"),ct=a("if [[ ! -z $DIR_POSTS_BAK ]]; "),le=n("dd"),dt=a("only run if I have actually set that variable in the .env file"),ie=n("dt"),ht=a('unison \\"$DIR_POSTS_BAK\\" \\"$DIR_POSTS\\" -batch'),re=n("dd"),ut=a("this is where the syncing happens. `-batch` runs the command without asking the hundreds of impenetrable questions unison tends to ask"),Oe=d(),g=n("p"),ft=a("I then run the command manually once, to seed the CLI util (it keeps a local DB of what changed in the last run). I laso prepend that command to "),pe=n("code"),mt=a("dev"),kt=a(" and "),ce=n("code"),vt=a("build"),bt=a(" in npm scripts"),je=d(),z=n("pre"),Ae=d(),_=n("p"),gt=a("I can now remove the posts from Git (but not the filesystem!) with "),de=n("code"),_t=a("git rm --cached posts/*"),wt=a(". To make sure that folder doesn\u2019t disapper, I add a blank file to it with "),he=n("code"),yt=a("touch posts/.gitkeep"),Et=a(". I then amend the .gitignore file to reflect the latest changes"),Ke=d(),H=n("pre"),Ce=d(),f=n("p"),It=a("I also rename "),ue=n("code"),St=a("rss.xml"),Dt=a(" to "),fe=n("code"),Pt=a("feed.xml"),Tt=a(", and rename the output directory from "),me=n("code"),xt=a("public"),Ot=a(" to "),ke=n("code"),jt=a("docs"),At=a(", because this is what Git Pages demand."),Re=d(),T=n("h3"),x=n("a"),ve=n("span"),Kt=a("Prior art"),ze=d(),N=n("ul"),G=n("li"),L=n("a"),Ct=a("Matt Jennings"),Rt=a(" posts"),this.h()},l(e){k=l(e,"H2",{id:!0});var r=i(k);E=l(r,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $t=i(E);Z=l($t,"SPAN",{class:!0}),i(Z).forEach(t),$t.forEach(t),He=o(r,"Getting started"),r.forEach(t),be=h(e),u=l(e,"P",{});var w=i(u);Le=o(w,"I use "),O=l(w,"A",{href:!0,rel:!0});var qt=i(O);Be=o(qt,"degit, a tool by the SvelteKit\u2019s creator"),qt.forEach(t),Me=o(w,", to reproduce "),j=l(w,"A",{href:!0,rel:!0});var Nt=i(j);$e=o(Nt,"Matt Jennings\u2019s excellent SvelteKit blog template"),Nt.forEach(t),qe=o(w," in a folder ("),F=l(w,"CODE",{});var Gt=i(F);Ne=o(Gt,"gotofritz.github.io-redesign/"),Gt.forEach(t),Ge=o(w,") parallel to my main branch ("),W=l(w,"CODE",{});var Vt=i(W);Ve=o(Vt,"gotofritz.github.io/"),Vt.forEach(t),Je=o(w,")"),w.forEach(t),ge=h(e),A=l(e,"PRE",{class:!0});var Is=i(A);Is.forEach(t),_e=h(e),I=l(e,"H2",{id:!0});var zt=i(I);S=l(zt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Jt=i(S);X=l(Jt,"SPAN",{class:!0}),i(X).forEach(t),Jt.forEach(t),Ue=o(zt,"Importing markdown posts from outside the SvelteKit project root"),zt.forEach(t),we=h(e),v=l(e,"P",{});var V=i(v);Qe=o(V,"\u2026cannot be done, at least not in Q2 of 2022. It\u2019s "),K=l(V,"A",{href:!0,rel:!0});var Ut=i(K);Ze=o(Ut,"a limitation of Vite"),Ut.forEach(t),Fe=o(V,", the bundler used by SvelteKit. And no, symbolic links don\u2019t help either. Vite is \u201Cclever\u201D enough to spot that you are trying to trick it.That is "),Y=l(V,"EM",{});var Qt=i(Y);We=o(Qt,"that"),Qt.forEach(t),Xe=o(V," close to being a deal breaker. I like keeping the posts data and the code completely separate. I also prefer keeping posts in Dropbox, and then manage them with tools like Obsidian. That allows me to easily access them from my mobile phone when I am on the go. I came up with a workaround, but it\u2019s a hack."),V.forEach(t),ye=h(e),D=l(e,"H3",{id:!0});var Ht=i(D);P=l(Ht,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Zt=i(P);ee=l(Zt,"SPAN",{class:!0}),i(ee).forEach(t),Zt.forEach(t),Ye=o(Ht,"Synchronising posts inside SvelteKit with a folder outside the project using unison"),Ht.forEach(t),Ee=h(e),M=l(e,"P",{});var Ft=i(M);et=o(Ft,"Since source files cannot exist outside the project in Vite, I only have two options: ignore it, or sync manually. I decided to go for the syncing. But not quite manual; I add a sync command to run before building the site, and before starting the local dev server. Or I can, indeed, run the sync manually as needed."),Ft.forEach(t),Ie=h(e),$=l(e,"P",{});var Wt=i($);tt=o(Wt,"I created an .env file with the path of the folder to sync to, and from"),Wt.forEach(t),Se=h(e),C=l(e,"PRE",{class:!0});var Ss=i(C);Ss.forEach(t),De=h(e),b=l(e,"P",{});var J=i(b);st=o(J,"I then install the CLI utility "),te=l(J,"CODE",{});var Xt=i(te);at=o(Xt,"unison"),Xt.forEach(t),ot=o(J," with brew ("),se=l(J,"CODE",{});var Yt=i(se);nt=o(Yt,"brew install unison"),Yt.forEach(t),lt=o(J,"). This is somewhat like rsync, but it allows to sync two directories bidirectionally. In my package json I add the command to load those .env variable and pass them to unison:"),J.forEach(t),Pe=h(e),R=l(e,"PRE",{class:!0});var Ds=i(R);Ds.forEach(t),Te=h(e),q=l(e,"P",{});var es=i(q);it=o(es,"which can be broken down as"),es.forEach(t),xe=h(e),m=l(e,"DL",{class:!0});var B=i(m);ae=l(B,"DT",{});var ts=i(ae);rt=o(ts,"source .env;"),ts.forEach(t),oe=l(B,"DD",{});var ss=i(oe);pt=o(ss,"a _very_ basic way to load a .env file into memory. Note that it doesn't handle comments and a lot of other things. Only suitable for a quick hack"),ss.forEach(t),ne=l(B,"DT",{});var as=i(ne);ct=o(as,"if [[ ! -z $DIR_POSTS_BAK ]]; "),as.forEach(t),le=l(B,"DD",{});var os=i(le);dt=o(os,"only run if I have actually set that variable in the .env file"),os.forEach(t),ie=l(B,"DT",{});var ns=i(ie);ht=o(ns,'unison \\"$DIR_POSTS_BAK\\" \\"$DIR_POSTS\\" -batch'),ns.forEach(t),re=l(B,"DD",{});var ls=i(re);ut=o(ls,"this is where the syncing happens. `-batch` runs the command without asking the hundreds of impenetrable questions unison tends to ask"),ls.forEach(t),B.forEach(t),Oe=h(e),g=l(e,"P",{});var U=i(g);ft=o(U,"I then run the command manually once, to seed the CLI util (it keeps a local DB of what changed in the last run). I laso prepend that command to "),pe=l(U,"CODE",{});var is=i(pe);mt=o(is,"dev"),is.forEach(t),kt=o(U," and "),ce=l(U,"CODE",{});var rs=i(ce);vt=o(rs,"build"),rs.forEach(t),bt=o(U," in npm scripts"),U.forEach(t),je=h(e),z=l(e,"PRE",{class:!0});var Ps=i(z);Ps.forEach(t),Ae=h(e),_=l(e,"P",{});var Q=i(_);gt=o(Q,"I can now remove the posts from Git (but not the filesystem!) with "),de=l(Q,"CODE",{});var ps=i(de);_t=o(ps,"git rm --cached posts/*"),ps.forEach(t),wt=o(Q,". To make sure that folder doesn\u2019t disapper, I add a blank file to it with "),he=l(Q,"CODE",{});var cs=i(he);yt=o(cs,"touch posts/.gitkeep"),cs.forEach(t),Et=o(Q,". I then amend the .gitignore file to reflect the latest changes"),Q.forEach(t),Ke=h(e),H=l(e,"PRE",{class:!0});var Ts=i(H);Ts.forEach(t),Ce=h(e),f=l(e,"P",{});var y=i(f);It=o(y,"I also rename "),ue=l(y,"CODE",{});var ds=i(ue);St=o(ds,"rss.xml"),ds.forEach(t),Dt=o(y," to "),fe=l(y,"CODE",{});var hs=i(fe);Pt=o(hs,"feed.xml"),hs.forEach(t),Tt=o(y,", and rename the output directory from "),me=l(y,"CODE",{});var us=i(me);xt=o(us,"public"),us.forEach(t),Ot=o(y," to "),ke=l(y,"CODE",{});var fs=i(ke);jt=o(fs,"docs"),fs.forEach(t),At=o(y,", because this is what Git Pages demand."),y.forEach(t),Re=h(e),T=l(e,"H3",{id:!0});var Lt=i(T);x=l(Lt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ms=i(x);ve=l(ms,"SPAN",{class:!0}),i(ve).forEach(t),ms.forEach(t),Kt=o(Lt,"Prior art"),Lt.forEach(t),ze=h(e),N=l(e,"UL",{});var ks=i(N);G=l(ks,"LI",{});var Bt=i(G);L=l(Bt,"A",{href:!0,rel:!0});var vs=i(L);Ct=o(vs,"Matt Jennings"),vs.forEach(t),Rt=o(Bt," posts"),Bt.forEach(t),ks.forEach(t),this.h()},h(){c(Z,"class","icon icon-link"),c(E,"aria-hidden","true"),c(E,"tabindex","-1"),c(E,"href","#getting-started"),c(k,"id","getting-started"),c(O,"href","https://github.com/Rich-Harris/degit"),c(O,"rel","nofollow"),c(j,"href","https://github.com/mattjennings/sveltekit-blog-template"),c(j,"rel","nofollow"),c(A,"class","language-bash"),c(X,"class","icon icon-link"),c(S,"aria-hidden","true"),c(S,"tabindex","-1"),c(S,"href","#importing-markdown-posts-from-outside-the-sveltekit-project-root"),c(I,"id","importing-markdown-posts-from-outside-the-sveltekit-project-root"),c(K,"href","https://github.com/vitejs/vite/issues/4759"),c(K,"rel","nofollow"),c(ee,"class","icon icon-link"),c(P,"aria-hidden","true"),c(P,"tabindex","-1"),c(P,"href","#synchronising-posts-inside-sveltekit-with-a-folder-outside-the-project-using-unison"),c(D,"id","synchronising-posts-inside-sveltekit-with-a-folder-outside-the-project-using-unison"),c(C,"class","language-bash"),c(R,"class","language-json"),c(m,"class","code-breakdown"),c(z,"class","language-json"),c(H,"class","language-bash"),c(ve,"class","icon icon-link"),c(x,"aria-hidden","true"),c(x,"tabindex","-1"),c(x,"href","#prior-art"),c(T,"id","prior-art"),c(L,"href","https://mattjennings.io/blog/rewriting-my-website-in-sveltekit"),c(L,"rel","nofollow")},m(e,r){p(e,k,r),s(k,E),s(E,Z),s(k,He),p(e,be,r),p(e,u,r),s(u,Le),s(u,O),s(O,Be),s(u,Me),s(u,j),s(j,$e),s(u,qe),s(u,F),s(F,Ne),s(u,Ge),s(u,W),s(W,Ve),s(u,Je),p(e,ge,r),p(e,A,r),A.innerHTML=gs,p(e,_e,r),p(e,I,r),s(I,S),s(S,X),s(I,Ue),p(e,we,r),p(e,v,r),s(v,Qe),s(v,K),s(K,Ze),s(v,Fe),s(v,Y),s(Y,We),s(v,Xe),p(e,ye,r),p(e,D,r),s(D,P),s(P,ee),s(D,Ye),p(e,Ee,r),p(e,M,r),s(M,et),p(e,Ie,r),p(e,$,r),s($,tt),p(e,Se,r),p(e,C,r),C.innerHTML=_s,p(e,De,r),p(e,b,r),s(b,st),s(b,te),s(te,at),s(b,ot),s(b,se),s(se,nt),s(b,lt),p(e,Pe,r),p(e,R,r),R.innerHTML=ws,p(e,Te,r),p(e,q,r),s(q,it),p(e,xe,r),p(e,m,r),s(m,ae),s(ae,rt),s(m,oe),s(oe,pt),s(m,ne),s(ne,ct),s(m,le),s(le,dt),s(m,ie),s(ie,ht),s(m,re),s(re,ut),p(e,Oe,r),p(e,g,r),s(g,ft),s(g,pe),s(pe,mt),s(g,kt),s(g,ce),s(ce,vt),s(g,bt),p(e,je,r),p(e,z,r),z.innerHTML=ys,p(e,Ae,r),p(e,_,r),s(_,gt),s(_,de),s(de,_t),s(_,wt),s(_,he),s(he,yt),s(_,Et),p(e,Ke,r),p(e,H,r),H.innerHTML=Es,p(e,Ce,r),p(e,f,r),s(f,It),s(f,ue),s(ue,St),s(f,Dt),s(f,fe),s(fe,Pt),s(f,Tt),s(f,me),s(me,xt),s(f,Ot),s(f,ke),s(ke,jt),s(f,At),p(e,Re,r),p(e,T,r),s(T,x),s(x,ve),s(T,Kt),p(e,ze,r),p(e,N,r),s(N,G),s(G,L),s(L,Ct),s(G,Rt)},p:Mt,i:Mt,o:Mt,d(e){e&&t(k),e&&t(be),e&&t(u),e&&t(ge),e&&t(A),e&&t(_e),e&&t(I),e&&t(we),e&&t(v),e&&t(ye),e&&t(D),e&&t(Ee),e&&t(M),e&&t(Ie),e&&t($),e&&t(Se),e&&t(C),e&&t(De),e&&t(b),e&&t(Pe),e&&t(R),e&&t(Te),e&&t(q),e&&t(xe),e&&t(m),e&&t(Oe),e&&t(g),e&&t(je),e&&t(z),e&&t(Ae),e&&t(_),e&&t(Ke),e&&t(H),e&&t(Ce),e&&t(f),e&&t(Re),e&&t(T),e&&t(ze),e&&t(N)}}}const Cs={date:"2022-05-03T00:00:00.000Z",draft:!1,archived:!1,title:"How I built a markdown drive static website with SvelteKit and Tailwind",tags:["svelte","gotofritz"],excerpt:'In <a href="/blog/blog-with-sveltekit-and-markdown">my last post I ported my existing blog to SvelteKit</a>, to get to used to it. Now I am going to build a new version from scratch, using markdown and tailwind. I will use <a href="https://github.com/mattjennings/sveltekit-blog-template">Matt Jennings&#39;s excellent SvelteKit blog template</a> as seed.'};class Rs extends xs{constructor(k){super(),Os(this,k,null,As,js,{})}}export{Rs as default,Cs as metadata};
