import{S as Ua,i as Za,s as Ga,e as t,t as c,k,c as o,a as p,d as s,h as r,m as d,b as i,g as l,I as n,E as Ia}from"./index-6e518972.js";function Ja(ja){let f,h,T,aa,H,m,sa,x,na,ea,S,v,w,O,ta,M,y,oa,N,pa,la,R,E,qa=`<code class="language-python"><span class="token keyword">from</span> faker<span class="token punctuation">.</span>provider <span class="token keyword">import</span> BaseProvider
<span class="token keyword">from</span> models<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> Cloze

<span class="token keyword">class</span> <span class="token class-name">LanguageTrainingAppProvider</span><span class="token punctuation">(</span>BaseProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">cloze</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        text<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        obfuscated<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        guessed<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Model a Cloze entity"""</span>
        <span class="token keyword">return</span> Cloze<span class="token punctuation">(</span>
            text<span class="token operator">=</span>text <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            obfuscated<span class="token operator">=</span>obfuscated <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            guessed<span class="token operator">=</span>guessed<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">clozes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>Cloze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> etc
</code>`,X,b,ca,L,ra,ia,U,z,Ba=`<code class="language-python"><span class="token comment">#app/models/fakes/cloze.py</span>

cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='zTbJuPgkCvtGJtms', obfuscated='LkqKBZBNLRYbAvXj', guessed=False)</span>

cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"TEXT"</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='TEXT', obfuscated='pdyQXUBhSyflBXvZ', guessed=False)</span>

list_of_clozes <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># [</span>
<span class="token comment">#   Cloze(text='EQKHvVUIJFllEZUg', obfuscated='ymEaSvqcYPdsGeFw', guessed=False)</span>
<span class="token comment">#   Cloze(text='IvSMtFGVXEGdODoC', obfuscated='pPTkcmlvCOizEqZe', guessed=False)</span>
<span class="token comment"># ]</span></code>`,Z,_,g,j,ua,G,u,ka,q,da,fa,B,ha,ma,D,va,wa,J,F,Da=`<code class="language-python"><span class="token comment"># tests/conftest.py</span>
<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker

<span class="token keyword">from</span> app<span class="token punctuation">.</span>models<span class="token punctuation">.</span>fakes<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> LanguageTrainingAppProvider

fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>
A_RANDOM_SEED <span class="token operator">=</span> <span class="token number">1369</span>
Faker<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>A_RANDOM_SEED<span class="token punctuation">)</span>
fake<span class="token punctuation">.</span>add_provider<span class="token punctuation">(</span>LanguageTrainingAppProvider<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fake"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fixture_fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Pass a seeded Faker instance as a fixture"""</span>
    <span class="token keyword">return</span> fake</code>`,K,A,ya,Q,C,Ha=`<code class="language-python">
<span class="token keyword">def</span> <span class="token function">test_something</span><span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># fake.words is from a standard Faker provider</span>
  <span class="token keyword">assert</span> fake<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">123</span>

  <span class="token comment"># fake.clozes is the one I just created</span>
  <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">8</span></code>`,V,P,ba;return{c(){f=t("h2"),h=t("a"),T=t("span"),aa=c("Use case"),H=k(),m=t("p"),sa=c("For example, I am working on a small language training app. One of the data structures I use is what I call a \u201CCloze\u201D, inspired by "),x=t("a"),na=c("Anki"),ea=c(". It has two strings: a to-be-solved version, and a solved version. And a boolean flag to say whether it was solved or not. These Clozes appear all over the app. I could create a mock. And I will when I need to call its methods or check whether some of the code does. But most of the time, I just need data in the right shape to pass around. Faker is great for that."),S=k(),v=t("h2"),w=t("a"),O=t("span"),ta=c("Creating a provider in Faker"),M=k(),y=t("p"),oa=c("At the time of writing, the Faker doc doesn\u2019t quite explain how to create your own provider. Luckily reverse engineering some of the existing ones is not too hard. It boils down to extending the "),N=t("code"),pa=c("BaseProvider"),la=c(" class. Then every method becomes a generator. For example"),R=k(),E=t("pre"),X=k(),b=t("p"),ca=c("Note how I can use Faker\u2019s base provider\u2019s methods in my own provider. For example \u201Crandom_letters\u201D in "),L=t("code"),ra=c('obfuscated=obfuscated or "".join(self.random_letters()),'),ia=c(". Once I add the provider to Faker (more on that below), I can then use it in my tests. In the example above, I can create a single Cloze, or a list of them, with"),U=k(),z=t("pre"),Z=k(),_=t("h2"),g=t("a"),j=t("span"),ua=c("Adding a provider to Faker"),G=k(),u=t("p"),ka=c("I tend to save the providers together with the data they are mocking, but a level below. Cloze, for example, lives in "),q=t("code"),da=c("app/models/cloze.py"),fa=c(" and the fake lives in "),B=t("code"),ha=c("app/models/fakes/cloze.py"),ma=c(". That way the two go hand in hand and I won\u2019t forget to update one when I update the other. I then import them in my "),D=t("code"),va=c("conftest.py"),wa=c(" file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with"),J=k(),F=t("pre"),K=k(),A=t("p"),ya=c("Now I can add use them in my tests with"),Q=k(),C=t("pre"),V=k(),P=t("p"),ba=c("I find it keeps the code quite clean. Of course, I cannot call any of Cloze\u2019s methods. For that I would need to create mocks, but that is a different story."),this.h()},l(a){f=o(a,"H2",{id:!0});var e=p(f);h=o(e,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xa=p(h);T=o(xa,"SPAN",{class:!0}),p(T).forEach(s),xa.forEach(s),aa=r(e,"Use case"),e.forEach(s),H=d(a),m=o(a,"P",{});var Y=p(m);sa=r(Y,"For example, I am working on a small language training app. One of the data structures I use is what I call a \u201CCloze\u201D, inspired by "),x=o(Y,"A",{href:!0,rel:!0});var Ea=p(x);na=r(Ea,"Anki"),Ea.forEach(s),ea=r(Y,". It has two strings: a to-be-solved version, and a solved version. And a boolean flag to say whether it was solved or not. These Clozes appear all over the app. I could create a mock. And I will when I need to call its methods or check whether some of the code does. But most of the time, I just need data in the right shape to pass around. Faker is great for that."),Y.forEach(s),S=d(a),v=o(a,"H2",{id:!0});var _a=p(v);w=o(_a,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var za=p(w);O=o(za,"SPAN",{class:!0}),p(O).forEach(s),za.forEach(s),ta=r(_a,"Creating a provider in Faker"),_a.forEach(s),M=d(a),y=o(a,"P",{});var W=p(y);oa=r(W,"At the time of writing, the Faker doc doesn\u2019t quite explain how to create your own provider. Luckily reverse engineering some of the existing ones is not too hard. It boils down to extending the "),N=o(W,"CODE",{});var Fa=p(N);pa=r(Fa,"BaseProvider"),Fa.forEach(s),la=r(W," class. Then every method becomes a generator. For example"),W.forEach(s),R=d(a),E=o(a,"PRE",{class:!0});var Sa=p(E);Sa.forEach(s),X=d(a),b=o(a,"P",{});var $=p(b);ca=r($,"Note how I can use Faker\u2019s base provider\u2019s methods in my own provider. For example \u201Crandom_letters\u201D in "),L=o($,"CODE",{});var Ca=p(L);ra=r(Ca,'obfuscated=obfuscated or "".join(self.random_letters()),'),Ca.forEach(s),ia=r($,". Once I add the provider to Faker (more on that below), I can then use it in my tests. In the example above, I can create a single Cloze, or a list of them, with"),$.forEach(s),U=d(a),z=o(a,"PRE",{class:!0});var Ma=p(z);Ma.forEach(s),Z=d(a),_=o(a,"H2",{id:!0});var ga=p(_);g=o(ga,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Aa=p(g);j=o(Aa,"SPAN",{class:!0}),p(j).forEach(s),Aa.forEach(s),ua=r(ga,"Adding a provider to Faker"),ga.forEach(s),G=d(a),u=o(a,"P",{});var I=p(u);ka=r(I,"I tend to save the providers together with the data they are mocking, but a level below. Cloze, for example, lives in "),q=o(I,"CODE",{});var Pa=p(q);da=r(Pa,"app/models/cloze.py"),Pa.forEach(s),fa=r(I," and the fake lives in "),B=o(I,"CODE",{});var Ta=p(B);ha=r(Ta,"app/models/fakes/cloze.py"),Ta.forEach(s),ma=r(I,". That way the two go hand in hand and I won\u2019t forget to update one when I update the other. I then import them in my "),D=o(I,"CODE",{});var Oa=p(D);va=r(Oa,"conftest.py"),Oa.forEach(s),wa=r(I," file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with"),I.forEach(s),J=d(a),F=o(a,"PRE",{class:!0});var Ra=p(F);Ra.forEach(s),K=d(a),A=o(a,"P",{});var Na=p(A);ya=r(Na,"Now I can add use them in my tests with"),Na.forEach(s),Q=d(a),C=o(a,"PRE",{class:!0});var Xa=p(C);Xa.forEach(s),V=d(a),P=o(a,"P",{});var La=p(P);ba=r(La,"I find it keeps the code quite clean. Of course, I cannot call any of Cloze\u2019s methods. For that I would need to create mocks, but that is a different story."),La.forEach(s),this.h()},h(){i(T,"class","icon icon-link"),i(h,"aria-hidden","true"),i(h,"tabindex","-1"),i(h,"href","#use-case"),i(f,"id","use-case"),i(x,"href","https://docs.ankiweb.net/editing.html#cloze-deletion"),i(x,"rel","nofollow"),i(O,"class","icon icon-link"),i(w,"aria-hidden","true"),i(w,"tabindex","-1"),i(w,"href","#creating-a-provider-in-faker"),i(v,"id","creating-a-provider-in-faker"),i(E,"class","language-python"),i(z,"class","language-python"),i(j,"class","icon icon-link"),i(g,"aria-hidden","true"),i(g,"tabindex","-1"),i(g,"href","#adding-a-provider-to-faker"),i(_,"id","adding-a-provider-to-faker"),i(F,"class","language-python"),i(C,"class","language-python")},m(a,e){l(a,f,e),n(f,h),n(h,T),n(f,aa),l(a,H,e),l(a,m,e),n(m,sa),n(m,x),n(x,na),n(m,ea),l(a,S,e),l(a,v,e),n(v,w),n(w,O),n(v,ta),l(a,M,e),l(a,y,e),n(y,oa),n(y,N),n(N,pa),n(y,la),l(a,R,e),l(a,E,e),E.innerHTML=qa,l(a,X,e),l(a,b,e),n(b,ca),n(b,L),n(L,ra),n(b,ia),l(a,U,e),l(a,z,e),z.innerHTML=Ba,l(a,Z,e),l(a,_,e),n(_,g),n(g,j),n(_,ua),l(a,G,e),l(a,u,e),n(u,ka),n(u,q),n(q,da),n(u,fa),n(u,B),n(B,ha),n(u,ma),n(u,D),n(D,va),n(u,wa),l(a,J,e),l(a,F,e),F.innerHTML=Da,l(a,K,e),l(a,A,e),n(A,ya),l(a,Q,e),l(a,C,e),C.innerHTML=Ha,l(a,V,e),l(a,P,e),n(P,ba)},p:Ia,i:Ia,o:Ia,d(a){a&&s(f),a&&s(H),a&&s(m),a&&s(S),a&&s(v),a&&s(M),a&&s(y),a&&s(R),a&&s(E),a&&s(X),a&&s(b),a&&s(U),a&&s(z),a&&s(Z),a&&s(_),a&&s(G),a&&s(u),a&&s(J),a&&s(F),a&&s(K),a&&s(A),a&&s(Q),a&&s(C),a&&s(V),a&&s(P)}}}const Qa={excerpt:"I am a big fan of Faker for testing. I find having a random mock data generator keeps tests clean. In fact, I tend to extend Faker with project specific providers. Here's how",date:"2022-09-24T00:00:00.000Z",draft:!1,archived:!1,title:"How I create Faker providers for mocking project specific data",tags:["python","testing"]};class Va extends Ua{constructor(f){super(),Za(this,f,null,Ja,Ga,{})}}export{Va as default,Qa as metadata};
