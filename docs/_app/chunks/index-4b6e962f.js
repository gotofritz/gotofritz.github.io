import{S as $e,i as ap,s as np,e as p,t as c,k as u,c as o,a as l,h as r,d as n,m as k,b as i,Z as sp,g as e,I as s,E as At}from"./index-6e518972.js";var tp="/_app/assets/timeline-of-disco-0906f0a9.png";function ep(ve){let y,ss,an,w,v,Da,ts,nn,_,es,U,ps,os,sn,Y,_e=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> jupyter
<span class="token operator">></span> <span class="token builtin class-name">cd</span> jupyter
<span class="token operator">></span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://www.toptal.com/developers/gitignore/api/python,visualstudiocode,jupyter <span class="token operator">></span> .gitignore
<span class="token operator">></span> code README.md
<span class="token punctuation">[</span>writes some text<span class="token punctuation">]</span>
<span class="token operator">></span> <span class="token function">git</span> init
<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-a</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"initial commit"</span></code>`,tn,ha,ls,en,Z,ge=`<code class="language-bash"><span class="token operator">></span> python <span class="token parameter variable">-m</span> venv .venv
<span class="token operator">></span> pip <span class="token function">install</span> jupyter
<span class="token punctuation">..</span>.
<span class="token operator">></span> jupyter notebook</code>`,pn,ma,is,on,F,xe=`<code class="language-bash"><span class="token builtin class-name">.</span>
\u251C\u2500\u2500 History of disco and dance music
\u2502   \u2514\u2500\u2500 History of disco and dance music.ipynb
\u2514\u2500\u2500 README.md</code>`,ln,ba,cs,cn,g,x,ja,rs,rn,ya,us,un,K,Ee=`<code class="language-python"><span class="token keyword">import</span> wikipedia
wikipedia<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token string">"Disco music"</span><span class="token punctuation">,</span> sentences<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code>`,kn,Q,Ie=`<code class="language-text">"Disco is a genre of dance music and a subculture that emerged in the 1970s from the United States' urban nightlife scene. Its sound is typified by four-on-the-floor beats, syncopated basslines, string sections, horns, electric piano, synthesizers, and electric rhythm guitars."</code>`,dn,wa,ks,fn,E,I,La,ds,hn,va,fs,mn,V,Pe='<code class="language-bash"><span class="token operator">!</span>python <span class="token parameter variable">-m</span> spacy download en_core_web_sm <span class="token operator">></span> /dev/null</code>',bn,P,hs,Ra,ms,bs,yn,X,Te=`<code class="language-python"><span class="token keyword">import</span> wikipedia
<span class="token keyword">import</span> spacy
nlp <span class="token operator">=</span> spacy<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'en_core_web_sm'</span><span class="token punctuation">)</span>

text <span class="token operator">=</span> wikipedia<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token string">"Disco music"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content

<span class="token comment"># Parse the text using spaCy</span>
doc <span class="token operator">=</span> nlp<span class="token punctuation">(</span>text<span class="token punctuation">)</span>

<span class="token comment"># extraxt the actual year from the token</span>
re_year <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"([12][90]dd)"</span><span class="token punctuation">)</span>

<span class="token comment"># Iterate over the entities in the document</span>
<span class="token keyword">for</span> entity <span class="token keyword">in</span> doc<span class="token punctuation">.</span>ents<span class="token punctuation">:</span>
  <span class="token comment"># Check if the entity is a date</span>
  <span class="token keyword">if</span> entity<span class="token punctuation">.</span>label_ <span class="token operator">==</span> <span class="token string">'DATE'</span><span class="token punctuation">:</span>
    <span class="token comment"># Print the date and the associated text</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        year <span class="token operator">=</span> re_year<span class="token punctuation">.</span>search<span class="token punctuation">(</span>entity<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> BaseException<span class="token punctuation">:</span>
        year <span class="token operator">=</span> entity<span class="token punctuation">.</span>text
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>year<span class="token punctuation">&#125;</span></span><span class="token string">,1,1&#92;t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>entity<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token string">&#92;t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>entity<span class="token punctuation">.</span>sent<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------------------------------'</span><span class="token punctuation">)</span></code>`,wn,$,Ae=`<code class="language-text">1970,1,1 the 1970s Disco is a genre of dance music and a subculture that emerged in the 1970s from the United States' urban nightlife scene.-----------------------------------
1960,1,1 the late 1960s Disco started as a mixture of music from venues popular with Italian Americans, Hispanic and Latino Americans and Black Americans in Philadelphia and New York City during the late 1960s and early 1970s.
-----------------------------------
1970,1,1 early 1970s Disco started as a mixture of music from venues popular with Italian Americans, Hispanic and Latino Americans and Black Americans in Philadelphia and New York City during the late 1960s and early 1970s.
-----------------------------------
...
-----------------------------------
1964,1,1 July 12, 1964 The earliest known use for the abbreviated form "disco" described this dress and has been found in The Salt Lake Tribune on July 12, 1964, Playboy magazine used it in September of the same year to describe Los Angeles nightclubs.
-----------------------------------
...</code>`,vn,T,ys,aa,ws,vs,_n,A,H,Ja,_s,gn,_a,gs,xn,ga,xa,Ht,En,Ea,xs,In,na,He=`<code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token operator">%</span>matplotlib inline</code>`,Pn,Ia,Es,Tn,sa,Ce=`<code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./timeline.tsv'</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'&#92;t'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>`,An,Pa,Is,Hn,ta,Me=`<code class="language-python">sub_timelines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
    <span class="token string">"smaller_than"</span><span class="token punctuation">:</span> <span class="token string">"1971,06,01"</span><span class="token punctuation">,</span>
    <span class="token string">"larger_than"</span><span class="token punctuation">:</span> <span class="token string">"1900,06,01"</span><span class="token punctuation">,</span>
    <span class="token string">"figsize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
    <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"Before 1972&#92;n&#92;n"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
    <span class="token string">"smaller_than"</span><span class="token punctuation">:</span> <span class="token string">"2100,06,01"</span><span class="token punctuation">,</span>
    <span class="token string">"larger_than"</span><span class="token punctuation">:</span> <span class="token string">"1971,06,01"</span><span class="token punctuation">,</span>
    <span class="token string">"figsize"</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
    <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"From 1972 onwards"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>

<span class="token keyword">for</span> sub_timeline <span class="token keyword">in</span> sub_timelines<span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>`,Cn,h,Ps,za,Ts,As,Oa,Hs,Cs,Ba,Ms,Ss,Mn,ea,Se=`<code class="language-python"><span class="token keyword">for</span> sub_timeline <span class="token keyword">in</span> sub_timelines<span class="token punctuation">:</span>
    subset_df <span class="token operator">=</span> df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>
        sub_timeline<span class="token punctuation">[</span><span class="token string">"larger_than"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sub_timeline<span class="token punctuation">[</span><span class="token string">"smaller_than"</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">]</span>
    dates<span class="token operator">=</span><span class="token punctuation">[</span>date<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> cell<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> cell <span class="token keyword">in</span> subset_df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    min_date <span class="token operator">=</span> date<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>year <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>
    max_date <span class="token operator">=</span> date<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>year <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>
</code>`,Sn,C,Ds,Na,js,Ls,Dn,M,S,Ga,Rs,jn,Ta,Js,Ln,pa,De=`<code class="language-python"><span class="token comment"># manually wrap the text into lines of max_line_length</span>
    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> label <span class="token keyword">in</span> subset_df<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        words <span class="token operator">=</span> label<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
        line <span class="token operator">=</span> words<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> words<span class="token punctuation">:</span>
            next_word <span class="token operator">=</span> words<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            potential_next_line <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>line<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>next_word<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>potential_next_line<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> max_line_length<span class="token punctuation">:</span>
                line <span class="token operator">=</span> potential_next_line
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>
                line <span class="token operator">=</span> next_word
        <span class="token keyword">if</span> line<span class="token punctuation">:</span>
            lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>
        labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span>
    date_labels <span class="token operator">=</span> subset_df<span class="token punctuation">[</span><span class="token string">'date_label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_list<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># prepend label with display date</span>
    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>l<span class="token punctuation">&#125;</span></span><span class="token string">:&#92;n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> l<span class="token punctuation">,</span> t <span class="token keyword">in</span> <span class="token builtin">zip</span> <span class="token punctuation">(</span>date_labels<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">]</span></code>`,Rn,Aa,zs,Jn,D,j,Wa,Os,zn,m,Bs,qa,Ns,Gs,Ua,Ws,qs,On,oa,je=`<code class="language-python">    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> sub_timeline<span class="token punctuation">[</span><span class="token string">"figsize"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    _ <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span>max_date<span class="token punctuation">,</span> min_date<span class="token punctuation">)</span>
    _ <span class="token operator">=</span> ax<span class="token punctuation">.</span>axvline<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ymin<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> ymax<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'deeppink'</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    _ <span class="token operator">=</span> ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dates<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'palevioletred'</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    _ <span class="token operator">=</span> ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dates<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'darkmagenta'</span><span class="token punctuation">,</span> zorder<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code>`,Bn,L,R,Ya,Us,Nn,b,Ys,Za,Zs,Fs,Fa,Ks,Qs,Gn,la,Le=`<code class="language-python">    label_offsets <span class="token operator">=</span> np<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span>
    label_offsets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_line_length <span class="token operator">+</span> <span class="token number">2.0</span>
    label_offsets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_line_length <span class="token operator">+</span> <span class="token number">2.0</span>
    label_offsets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1.0</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>labels<span class="token punctuation">,</span> dates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        align <span class="token operator">=</span> <span class="token string">'right'</span>
        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            align <span class="token operator">=</span> <span class="token string">'left'</span>
        _ <span class="token operator">=</span> ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label_offsets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> l<span class="token punctuation">,</span> ha<span class="token operator">=</span>align<span class="token punctuation">,</span> fontfamily<span class="token operator">=</span><span class="token string">'serif'</span><span class="token punctuation">,</span>
                    bbox<span class="token operator">=</span>boxdic<span class="token punctuation">,</span> verticalalignment<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code>`,Wn,J,z,Ka,Vs,qn,O,Xs,Qa,$s,at,Un,ia,Re=`<code class="language-python">    <span class="token comment"># the lines joining the boxes to the main plot</span>
    stems <span class="token operator">=</span> np<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">)</span>
    stems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_line_length <span class="token operator">+</span> <span class="token number">4.0</span>
    stems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> max_line_length <span class="token operator">+</span> <span class="token number">4.0</span>
    stems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1.0</span>
    x <span class="token operator">=</span> ax<span class="token punctuation">.</span>hlines<span class="token punctuation">(</span>dates<span class="token punctuation">,</span> xmin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> xmax<span class="token operator">=</span>stems<span class="token punctuation">,</span> linestyles<span class="token operator">=</span><span class="token string">"dotted"</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'darkmagenta'</span><span class="token punctuation">)</span></code>`,Yn,B,N,Va,nt,Zn,Ha,st,Fn,G,W,Xa,tt,Kn,d,et,ca,pt,ot,ra,lt,it,ua,ct,rt,ka,ut,kt,da,dt,ft,$a,ht,mt,Qn,Ca,fa,bt;return{c(){y=p("p"),ss=c("I\u2019m not sure Jupyter notebooks are the best choice here because there\u2019s no data analysis, but I\u2019m not an AI so\u2026"),an=u(),w=p("h2"),v=p("a"),Da=p("span"),ts=c("Getting started"),nn=u(),_=p("p"),es=c("To get started, I create a folder for my Jupyter experiments, add a .gitignore from "),U=p("a"),ps=c("Toptal"),os=c(", and create a simple README. I also set the license as MIT."),sn=u(),Y=p("pre"),tn=u(),ha=p("p"),ls=c("Then I create a python virtual env, install jupyter and run it:"),en=u(),Z=p("pre"),pn=u(),ma=p("p"),is=c("That opens a web page in my browser. I click \u201CNew,\u201D and create a folder called \u201CHistory of disco and dance music.\u201D Inside the folder, I create a notebook called \u201CHistory of disco and dance music.ipynb\u201D and save it. My folder structure looks like this:"),on=u(),F=p("pre"),ln=u(),ba=p("p"),cs=c("I\u2019m ready to start coding."),cn=u(),g=p("h2"),x=p("a"),ja=p("span"),rs=c("Importing text from Wikipedia"),rn=u(),ya=p("p"),us=c("To add text from Wikipedia, I can install the Wikipedia package and put this code in a cell:"),un=u(),K=p("pre"),kn=u(),Q=p("pre"),dn=u(),wa=p("p"),ks=c("But I\u2019d rather copy and paste it as Markdown so I can format it."),fn=u(),E=p("h2"),I=p("a"),La=p("span"),ds=c("Extracting time information from text"),hn=u(),va=p("p"),fs=c("A better way to use the Wikipedia Python API is to generate timeline events. I struggled getting someting useful from ChatGPT (regular expressions?? \u{1F644}) but eventually we found a decent solution using SpaCy. But first, I have to download the language set with a bash command, something that ChatGPT had no idea about"),mn=u(),V=p("pre"),bn=u(),P=p("p"),hs=c("The "),Ra=p("code"),ms=c("> /dev/null"),bs=c(" is a way to ignore all the noise - it\u2019s a very noisy command. Now I can start using it."),yn=u(),X=p("pre"),wn=u(),$=p("pre"),vn=u(),T=p("p"),ys=c("This will need some manual cleaning up, but at least it makes sense in a Jupyter notebook. I go through all the lines in the texts, and selectively copy those that seem useful, cleaning up the text. I save it to a tsv file, timeline.csv, ready to be imported into the notebook. "),aa=p("a"),ws=c("It is available on github"),vs=c(", but it\u2019s rather short, as the futility of this task became quickly apparent."),_n=u(),A=p("h2"),H=p("a"),Ja=p("span"),_s=c("Displaying a timeline of events in Python with matplotlib"),gn=u(),_a=p("p"),gs=c("Creating a timeline of events in Python with matplotlib is a terrible idea. The best I could come up with was this, but getting there was painful."),xn=u(),ga=p("p"),xa=p("img"),En=u(),Ea=p("p"),xs=c("To run matplotlib in the notebook, I enabled it with %matplotlib inline:"),In=u(),na=p("pre"),Pn=u(),Ia=p("p"),Es=c("I load the tsv file with pandas:"),Tn=u(),sa=p("pre"),An=u(),Pa=p("p"),Is=c("When experimenting with the graph, I found that the events were not evenly spaced out. If I made the space too large, the start of the timeline looked empty, and if it was too small, all of the events overlapped. I solved this problem by generating separate timelines for different periods with different settings for each:"),Hn=u(),ta=p("pre"),Cn=u(),h=p("p"),Ps=c("At the start of each iteration, I need to create a pandas dataframe by extracting only the rows I\u2019m interested in. This is what the \u201Csmaller_than\u201D and \u201Clarger_than\u201D in the settings are for. It was tricky to do, and I couldn\u2019t get any help from ChatGPT. If you have a dataframe df, you can filter it by using a condition like "),za=p("code"),Ts=c("df[ df[date] < '2020,02,03' ]"),As=c(". But if you have multiple conditions with an \u2018and\u2019 or an \u2018or\u2019, like "),Oa=p("code"),Hs=c("df[ df[date] < '2020,02,03' and df[date] > '1800,02,03' ]"),Cs=c(", it breaks with the error message \u201CThe truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()\u201C. This means that pandas doesn\u2019t like \u2018and\u2019 and \u2018or\u2019 because it expects booleans on either side. Pandas is written in C under the hood, after all. Using bitwise \u2019&\u2019 should work, but it doesn\u2019t in this case because pandas doesn\u2019t treat the result of "),Ba=p("code"),Ms=c("df[date] > '1800,02,03'"),Ss=c(" as a boolean, but as a string. I don\u2019t understand it either. The solution is to wrap the conditions with numpy.logical_and:"),Mn=u(),ea=p("pre"),Sn=u(),C=p("p"),Ds=c("I convert the dates column to a list with "),Na=p("code"),js=c("df['date'].to_list()"),Ls=c(", and then convert it all to date objects. min_date and max_date are needed for working out the ranges of the graph."),Dn=u(),M=p("h3"),S=p("a"),Ga=p("span"),Rs=c("Wrapping text in text labels in matplotlib"),jn=u(),Ta=p("p"),Js=c("\u2026is not possible. Instead, it shrinks the text to fit it in the label. This is frustrating and limits the usefulness of the library. I had to create my own text wrapping function:"),Ln=u(),pa=p("pre"),Rn=u(),Aa=p("p"),zs=c("The source data fields are date, date_label, text, where date is a tuple that is used to generate a date object, and date_label is a human-friendly version of the date. I prepend the date_label to the text box, but there is no easy way to make it bold without also making the rest of the text bold. Overall, text wrapping in matplotlib is a major limitation of the library."),Jn=u(),D=p("h3"),j=p("a"),Wa=p("span"),Os=c("A simple scatter graph for a timeline"),zn=u(),m=p("p"),Bs=c("The graph itself is quite uneventful. It\u2019s a one dimensional scatter graph. Basically, a line ("),qa=p("code"),Ns=c("ax.axvline"),Gs=c(") with some dots along it ("),Ua=p("code"),Ws=c("ax.scatter"),qs=c(")"),On=u(),oa=p("pre"),Bn=u(),L=p("h3"),R=p("a"),Ya=p("span"),Us=c("Adding labels to the timeline graph"),Nn=u(),b=p("p"),Ys=c("The most important part of the graph, the text, is not really a graph, it\u2019s just some labels that appear at the right place. They are all offset with respect to the line in the middle. It alternates between far from the line and near the line, on either side of it, making it a cycle of four. I use the "),Za=p("code"),Zs=c(".text"),Fs=c(" component for it, but the "),Fa=p("code"),Ks=c(".annotation"),Qs=c(" works equally well."),Gn=u(),la=p("pre"),Wn=u(),J=p("h3"),z=p("a"),Ka=p("span"),Vs=c("Joining the labels to the graph with lines"),qn=u(),O=p("p"),Xs=c("Matplotlib suggests using stems in its example, but they don\u2019t seem to work for horizontal lines. I followed Brad\u2019s advice and used "),Qa=p("code"),$s=c(".hlines"),at=c(" instead"),Un=u(),ia=p("pre"),Yn=u(),B=p("h3"),N=p("a"),Va=p("span"),nt=c("Adding images to the timeline"),Zn=u(),Ha=p("p"),st=c("I decided to stop here. I have suffered enough."),Fn=u(),G=p("h2"),W=p("a"),Xa=p("span"),tt=c("Conclusion"),Kn=u(),d=p("p"),et=c("Python is not well-suited for creating timelines of events. Of the main graph packages used with Jupyter, "),ca=p("a"),pt=c("plotly"),ot=c(", "),ra=p("a"),lt=c("seaborn"),it=c(" and "),ua=p("a"),ct=c("bokeh"),rt=c(" do not have this functionality built in. "),ka=p("a"),ut=c("Matplotlib can be used to create a timeline"),kt=c(". It is not so hard to flip to vertical - someone called "),da=p("a"),dt=c("Brad had blogged something similar"),ft=c(", and that was a very useful starting point. Still, it is better to use Javascript or CSS flex for this task. This was supposed to be a "),$a=p("em"),ht=c("beginner"),mt=c(" exercise, and integrating JS is way too complicated for that level. Overall, the suggestion to use Python for creating timelines of events is a terrible idea."),Qn=u(),Ca=p("p"),fa=p("a"),bt=c("The notebook is available on Github"),this.h()},l(a){y=o(a,"P",{});var t=l(y);ss=r(t,"I\u2019m not sure Jupyter notebooks are the best choice here because there\u2019s no data analysis, but I\u2019m not an AI so\u2026"),t.forEach(n),an=k(a),w=o(a,"H2",{id:!0});var yt=l(w);v=o(yt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ct=l(v);Da=o(Ct,"SPAN",{class:!0}),l(Da).forEach(n),Ct.forEach(n),ts=r(yt,"Getting started"),yt.forEach(n),nn=k(a),_=o(a,"P",{});var Vn=l(_);es=r(Vn,"To get started, I create a folder for my Jupyter experiments, add a .gitignore from "),U=o(Vn,"A",{href:!0,rel:!0});var Mt=l(U);ps=r(Mt,"Toptal"),Mt.forEach(n),os=r(Vn,", and create a simple README. I also set the license as MIT."),Vn.forEach(n),sn=k(a),Y=o(a,"PRE",{class:!0});var Je=l(Y);Je.forEach(n),tn=k(a),ha=o(a,"P",{});var St=l(ha);ls=r(St,"Then I create a python virtual env, install jupyter and run it:"),St.forEach(n),en=k(a),Z=o(a,"PRE",{class:!0});var ze=l(Z);ze.forEach(n),pn=k(a),ma=o(a,"P",{});var Dt=l(ma);is=r(Dt,"That opens a web page in my browser. I click \u201CNew,\u201D and create a folder called \u201CHistory of disco and dance music.\u201D Inside the folder, I create a notebook called \u201CHistory of disco and dance music.ipynb\u201D and save it. My folder structure looks like this:"),Dt.forEach(n),on=k(a),F=o(a,"PRE",{class:!0});var Oe=l(F);Oe.forEach(n),ln=k(a),ba=o(a,"P",{});var jt=l(ba);cs=r(jt,"I\u2019m ready to start coding."),jt.forEach(n),cn=k(a),g=o(a,"H2",{id:!0});var wt=l(g);x=o(wt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Lt=l(x);ja=o(Lt,"SPAN",{class:!0}),l(ja).forEach(n),Lt.forEach(n),rs=r(wt,"Importing text from Wikipedia"),wt.forEach(n),rn=k(a),ya=o(a,"P",{});var Rt=l(ya);us=r(Rt,"To add text from Wikipedia, I can install the Wikipedia package and put this code in a cell:"),Rt.forEach(n),un=k(a),K=o(a,"PRE",{class:!0});var Be=l(K);Be.forEach(n),kn=k(a),Q=o(a,"PRE",{class:!0});var Ne=l(Q);Ne.forEach(n),dn=k(a),wa=o(a,"P",{});var Jt=l(wa);ks=r(Jt,"But I\u2019d rather copy and paste it as Markdown so I can format it."),Jt.forEach(n),fn=k(a),E=o(a,"H2",{id:!0});var vt=l(E);I=o(vt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zt=l(I);La=o(zt,"SPAN",{class:!0}),l(La).forEach(n),zt.forEach(n),ds=r(vt,"Extracting time information from text"),vt.forEach(n),hn=k(a),va=o(a,"P",{});var Ot=l(va);fs=r(Ot,"A better way to use the Wikipedia Python API is to generate timeline events. I struggled getting someting useful from ChatGPT (regular expressions?? \u{1F644}) but eventually we found a decent solution using SpaCy. But first, I have to download the language set with a bash command, something that ChatGPT had no idea about"),Ot.forEach(n),mn=k(a),V=o(a,"PRE",{class:!0});var Ge=l(V);Ge.forEach(n),bn=k(a),P=o(a,"P",{});var Xn=l(P);hs=r(Xn,"The "),Ra=o(Xn,"CODE",{});var Bt=l(Ra);ms=r(Bt,"> /dev/null"),Bt.forEach(n),bs=r(Xn," is a way to ignore all the noise - it\u2019s a very noisy command. Now I can start using it."),Xn.forEach(n),yn=k(a),X=o(a,"PRE",{class:!0});var We=l(X);We.forEach(n),wn=k(a),$=o(a,"PRE",{class:!0});var qe=l($);qe.forEach(n),vn=k(a),T=o(a,"P",{});var $n=l(T);ys=r($n,"This will need some manual cleaning up, but at least it makes sense in a Jupyter notebook. I go through all the lines in the texts, and selectively copy those that seem useful, cleaning up the text. I save it to a tsv file, timeline.csv, ready to be imported into the notebook. "),aa=o($n,"A",{href:!0,rel:!0});var Nt=l(aa);ws=r(Nt,"It is available on github"),Nt.forEach(n),vs=r($n,", but it\u2019s rather short, as the futility of this task became quickly apparent."),$n.forEach(n),_n=k(a),A=o(a,"H2",{id:!0});var _t=l(A);H=o(_t,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gt=l(H);Ja=o(Gt,"SPAN",{class:!0}),l(Ja).forEach(n),Gt.forEach(n),_s=r(_t,"Displaying a timeline of events in Python with matplotlib"),_t.forEach(n),gn=k(a),_a=o(a,"P",{});var Wt=l(_a);gs=r(Wt,"Creating a timeline of events in Python with matplotlib is a terrible idea. The best I could come up with was this, but getting there was painful."),Wt.forEach(n),xn=k(a),ga=o(a,"P",{});var qt=l(ga);xa=o(qt,"IMG",{src:!0,alt:!0}),qt.forEach(n),En=k(a),Ea=o(a,"P",{});var Ut=l(Ea);xs=r(Ut,"To run matplotlib in the notebook, I enabled it with %matplotlib inline:"),Ut.forEach(n),In=k(a),na=o(a,"PRE",{class:!0});var Ue=l(na);Ue.forEach(n),Pn=k(a),Ia=o(a,"P",{});var Yt=l(Ia);Es=r(Yt,"I load the tsv file with pandas:"),Yt.forEach(n),Tn=k(a),sa=o(a,"PRE",{class:!0});var Ye=l(sa);Ye.forEach(n),An=k(a),Pa=o(a,"P",{});var Zt=l(Pa);Is=r(Zt,"When experimenting with the graph, I found that the events were not evenly spaced out. If I made the space too large, the start of the timeline looked empty, and if it was too small, all of the events overlapped. I solved this problem by generating separate timelines for different periods with different settings for each:"),Zt.forEach(n),Hn=k(a),ta=o(a,"PRE",{class:!0});var Ze=l(ta);Ze.forEach(n),Cn=k(a),h=o(a,"P",{});var q=l(h);Ps=r(q,"At the start of each iteration, I need to create a pandas dataframe by extracting only the rows I\u2019m interested in. This is what the \u201Csmaller_than\u201D and \u201Clarger_than\u201D in the settings are for. It was tricky to do, and I couldn\u2019t get any help from ChatGPT. If you have a dataframe df, you can filter it by using a condition like "),za=o(q,"CODE",{});var Ft=l(za);Ts=r(Ft,"df[ df[date] < '2020,02,03' ]"),Ft.forEach(n),As=r(q,". But if you have multiple conditions with an \u2018and\u2019 or an \u2018or\u2019, like "),Oa=o(q,"CODE",{});var Kt=l(Oa);Hs=r(Kt,"df[ df[date] < '2020,02,03' and df[date] > '1800,02,03' ]"),Kt.forEach(n),Cs=r(q,", it breaks with the error message \u201CThe truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()\u201C. This means that pandas doesn\u2019t like \u2018and\u2019 and \u2018or\u2019 because it expects booleans on either side. Pandas is written in C under the hood, after all. Using bitwise \u2019&\u2019 should work, but it doesn\u2019t in this case because pandas doesn\u2019t treat the result of "),Ba=o(q,"CODE",{});var Qt=l(Ba);Ms=r(Qt,"df[date] > '1800,02,03'"),Qt.forEach(n),Ss=r(q," as a boolean, but as a string. I don\u2019t understand it either. The solution is to wrap the conditions with numpy.logical_and:"),q.forEach(n),Mn=k(a),ea=o(a,"PRE",{class:!0});var Fe=l(ea);Fe.forEach(n),Sn=k(a),C=o(a,"P",{});var as=l(C);Ds=r(as,"I convert the dates column to a list with "),Na=o(as,"CODE",{});var Vt=l(Na);js=r(Vt,"df['date'].to_list()"),Vt.forEach(n),Ls=r(as,", and then convert it all to date objects. min_date and max_date are needed for working out the ranges of the graph."),as.forEach(n),Dn=k(a),M=o(a,"H3",{id:!0});var gt=l(M);S=o(gt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xt=l(S);Ga=o(Xt,"SPAN",{class:!0}),l(Ga).forEach(n),Xt.forEach(n),Rs=r(gt,"Wrapping text in text labels in matplotlib"),gt.forEach(n),jn=k(a),Ta=o(a,"P",{});var $t=l(Ta);Js=r($t,"\u2026is not possible. Instead, it shrinks the text to fit it in the label. This is frustrating and limits the usefulness of the library. I had to create my own text wrapping function:"),$t.forEach(n),Ln=k(a),pa=o(a,"PRE",{class:!0});var Ke=l(pa);Ke.forEach(n),Rn=k(a),Aa=o(a,"P",{});var ae=l(Aa);zs=r(ae,"The source data fields are date, date_label, text, where date is a tuple that is used to generate a date object, and date_label is a human-friendly version of the date. I prepend the date_label to the text box, but there is no easy way to make it bold without also making the rest of the text bold. Overall, text wrapping in matplotlib is a major limitation of the library."),ae.forEach(n),Jn=k(a),D=o(a,"H3",{id:!0});var xt=l(D);j=o(xt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ne=l(j);Wa=o(ne,"SPAN",{class:!0}),l(Wa).forEach(n),ne.forEach(n),Os=r(xt,"A simple scatter graph for a timeline"),xt.forEach(n),zn=k(a),m=o(a,"P",{});var Ma=l(m);Bs=r(Ma,"The graph itself is quite uneventful. It\u2019s a one dimensional scatter graph. Basically, a line ("),qa=o(Ma,"CODE",{});var se=l(qa);Ns=r(se,"ax.axvline"),se.forEach(n),Gs=r(Ma,") with some dots along it ("),Ua=o(Ma,"CODE",{});var te=l(Ua);Ws=r(te,"ax.scatter"),te.forEach(n),qs=r(Ma,")"),Ma.forEach(n),On=k(a),oa=o(a,"PRE",{class:!0});var Qe=l(oa);Qe.forEach(n),Bn=k(a),L=o(a,"H3",{id:!0});var Et=l(L);R=o(Et,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ee=l(R);Ya=o(ee,"SPAN",{class:!0}),l(Ya).forEach(n),ee.forEach(n),Us=r(Et,"Adding labels to the timeline graph"),Et.forEach(n),Nn=k(a),b=o(a,"P",{});var Sa=l(b);Ys=r(Sa,"The most important part of the graph, the text, is not really a graph, it\u2019s just some labels that appear at the right place. They are all offset with respect to the line in the middle. It alternates between far from the line and near the line, on either side of it, making it a cycle of four. I use the "),Za=o(Sa,"CODE",{});var pe=l(Za);Zs=r(pe,".text"),pe.forEach(n),Fs=r(Sa," component for it, but the "),Fa=o(Sa,"CODE",{});var oe=l(Fa);Ks=r(oe,".annotation"),oe.forEach(n),Qs=r(Sa," works equally well."),Sa.forEach(n),Gn=k(a),la=o(a,"PRE",{class:!0});var Ve=l(la);Ve.forEach(n),Wn=k(a),J=o(a,"H3",{id:!0});var It=l(J);z=o(It,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var le=l(z);Ka=o(le,"SPAN",{class:!0}),l(Ka).forEach(n),le.forEach(n),Vs=r(It,"Joining the labels to the graph with lines"),It.forEach(n),qn=k(a),O=o(a,"P",{});var ns=l(O);Xs=r(ns,"Matplotlib suggests using stems in its example, but they don\u2019t seem to work for horizontal lines. I followed Brad\u2019s advice and used "),Qa=o(ns,"CODE",{});var ie=l(Qa);$s=r(ie,".hlines"),ie.forEach(n),at=r(ns," instead"),ns.forEach(n),Un=k(a),ia=o(a,"PRE",{class:!0});var Xe=l(ia);Xe.forEach(n),Yn=k(a),B=o(a,"H3",{id:!0});var Pt=l(B);N=o(Pt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ce=l(N);Va=o(ce,"SPAN",{class:!0}),l(Va).forEach(n),ce.forEach(n),nt=r(Pt,"Adding images to the timeline"),Pt.forEach(n),Zn=k(a),Ha=o(a,"P",{});var re=l(Ha);st=r(re,"I decided to stop here. I have suffered enough."),re.forEach(n),Fn=k(a),G=o(a,"H2",{id:!0});var Tt=l(G);W=o(Tt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ue=l(W);Xa=o(ue,"SPAN",{class:!0}),l(Xa).forEach(n),ue.forEach(n),tt=r(Tt,"Conclusion"),Tt.forEach(n),Kn=k(a),d=o(a,"P",{});var f=l(d);et=r(f,"Python is not well-suited for creating timelines of events. Of the main graph packages used with Jupyter, "),ca=o(f,"A",{href:!0,rel:!0});var ke=l(ca);pt=r(ke,"plotly"),ke.forEach(n),ot=r(f,", "),ra=o(f,"A",{href:!0,rel:!0});var de=l(ra);lt=r(de,"seaborn"),de.forEach(n),it=r(f," and "),ua=o(f,"A",{href:!0,rel:!0});var fe=l(ua);ct=r(fe,"bokeh"),fe.forEach(n),rt=r(f," do not have this functionality built in. "),ka=o(f,"A",{href:!0,rel:!0});var he=l(ka);ut=r(he,"Matplotlib can be used to create a timeline"),he.forEach(n),kt=r(f,". It is not so hard to flip to vertical - someone called "),da=o(f,"A",{href:!0,rel:!0});var me=l(da);dt=r(me,"Brad had blogged something similar"),me.forEach(n),ft=r(f,", and that was a very useful starting point. Still, it is better to use Javascript or CSS flex for this task. This was supposed to be a "),$a=o(f,"EM",{});var be=l($a);ht=r(be,"beginner"),be.forEach(n),mt=r(f," exercise, and integrating JS is way too complicated for that level. Overall, the suggestion to use Python for creating timelines of events is a terrible idea."),f.forEach(n),Qn=k(a),Ca=o(a,"P",{});var ye=l(Ca);fa=o(ye,"A",{href:!0,rel:!0});var we=l(fa);bt=r(we,"The notebook is available on Github"),we.forEach(n),ye.forEach(n),this.h()},h(){i(Da,"class","icon icon-link"),i(v,"aria-hidden","true"),i(v,"tabindex","-1"),i(v,"href","#getting-started"),i(w,"id","getting-started"),i(U,"href","https://www.toptal.com/"),i(U,"rel","nofollow"),i(Y,"class","language-bash"),i(Z,"class","language-bash"),i(F,"class","language-bash"),i(ja,"class","icon icon-link"),i(x,"aria-hidden","true"),i(x,"tabindex","-1"),i(x,"href","#importing-text-from-wikipedia"),i(g,"id","importing-text-from-wikipedia"),i(K,"class","language-python"),i(Q,"class","language-text"),i(La,"class","icon icon-link"),i(I,"aria-hidden","true"),i(I,"tabindex","-1"),i(I,"href","#extracting-time-information-from-text"),i(E,"id","extracting-time-information-from-text"),i(V,"class","language-bash"),i(X,"class","language-python"),i($,"class","language-text"),i(aa,"href","https://github.com/gotofritz/jupyter/blob/trunk/History%20of%20disco%20and%20dance%20music/timeline.tsv"),i(aa,"rel","nofollow"),i(Ja,"class","icon icon-link"),i(H,"aria-hidden","true"),i(H,"tabindex","-1"),i(H,"href","#displaying-a-timeline-of-events-in-python-with-matplotlib"),i(A,"id","displaying-a-timeline-of-events-in-python-with-matplotlib"),sp(xa.src,Ht=tp)||i(xa,"src",Ht),i(xa,"alt","A very basic timeline interface, not accessible and not slick"),i(na,"class","language-python"),i(sa,"class","language-python"),i(ta,"class","language-python"),i(ea,"class","language-python"),i(Ga,"class","icon icon-link"),i(S,"aria-hidden","true"),i(S,"tabindex","-1"),i(S,"href","#wrapping-text-in-text-labels-in-matplotlib"),i(M,"id","wrapping-text-in-text-labels-in-matplotlib"),i(pa,"class","language-python"),i(Wa,"class","icon icon-link"),i(j,"aria-hidden","true"),i(j,"tabindex","-1"),i(j,"href","#a-simple-scatter-graph-for-a-timeline"),i(D,"id","a-simple-scatter-graph-for-a-timeline"),i(oa,"class","language-python"),i(Ya,"class","icon icon-link"),i(R,"aria-hidden","true"),i(R,"tabindex","-1"),i(R,"href","#adding-labels-to-the-timeline-graph"),i(L,"id","adding-labels-to-the-timeline-graph"),i(la,"class","language-python"),i(Ka,"class","icon icon-link"),i(z,"aria-hidden","true"),i(z,"tabindex","-1"),i(z,"href","#joining-the-labels-to-the-graph-with-lines"),i(J,"id","joining-the-labels-to-the-graph-with-lines"),i(ia,"class","language-python"),i(Va,"class","icon icon-link"),i(N,"aria-hidden","true"),i(N,"tabindex","-1"),i(N,"href","#adding-images-to-the-timeline"),i(B,"id","adding-images-to-the-timeline"),i(Xa,"class","icon icon-link"),i(W,"aria-hidden","true"),i(W,"tabindex","-1"),i(W,"href","#conclusion"),i(G,"id","conclusion"),i(ca,"href","https://plotly.com/python-api-reference/index.html"),i(ca,"rel","nofollow"),i(ra,"href","http://seaborn.pydata.org/index.html"),i(ra,"rel","nofollow"),i(ua,"href","https://docs.bokeh.org/en/latest/index.html"),i(ua,"rel","nofollow"),i(ka,"href","https://matplotlib.org/stable/gallery/lines_bars_and_markers/timeline.html"),i(ka,"rel","nofollow"),i(da,"href","https://dadoverflow.com/2021/08/17/making-timelines-with-python/"),i(da,"rel","nofollow"),i(fa,"href","https://github.com/gotofritz/jupyter/blob/trunk/History%20of%20disco%20and%20dance%20music/History%20of%20disco%20and%20dance%20music.ipynb"),i(fa,"rel","nofollow")},m(a,t){e(a,y,t),s(y,ss),e(a,an,t),e(a,w,t),s(w,v),s(v,Da),s(w,ts),e(a,nn,t),e(a,_,t),s(_,es),s(_,U),s(U,ps),s(_,os),e(a,sn,t),e(a,Y,t),Y.innerHTML=_e,e(a,tn,t),e(a,ha,t),s(ha,ls),e(a,en,t),e(a,Z,t),Z.innerHTML=ge,e(a,pn,t),e(a,ma,t),s(ma,is),e(a,on,t),e(a,F,t),F.innerHTML=xe,e(a,ln,t),e(a,ba,t),s(ba,cs),e(a,cn,t),e(a,g,t),s(g,x),s(x,ja),s(g,rs),e(a,rn,t),e(a,ya,t),s(ya,us),e(a,un,t),e(a,K,t),K.innerHTML=Ee,e(a,kn,t),e(a,Q,t),Q.innerHTML=Ie,e(a,dn,t),e(a,wa,t),s(wa,ks),e(a,fn,t),e(a,E,t),s(E,I),s(I,La),s(E,ds),e(a,hn,t),e(a,va,t),s(va,fs),e(a,mn,t),e(a,V,t),V.innerHTML=Pe,e(a,bn,t),e(a,P,t),s(P,hs),s(P,Ra),s(Ra,ms),s(P,bs),e(a,yn,t),e(a,X,t),X.innerHTML=Te,e(a,wn,t),e(a,$,t),$.innerHTML=Ae,e(a,vn,t),e(a,T,t),s(T,ys),s(T,aa),s(aa,ws),s(T,vs),e(a,_n,t),e(a,A,t),s(A,H),s(H,Ja),s(A,_s),e(a,gn,t),e(a,_a,t),s(_a,gs),e(a,xn,t),e(a,ga,t),s(ga,xa),e(a,En,t),e(a,Ea,t),s(Ea,xs),e(a,In,t),e(a,na,t),na.innerHTML=He,e(a,Pn,t),e(a,Ia,t),s(Ia,Es),e(a,Tn,t),e(a,sa,t),sa.innerHTML=Ce,e(a,An,t),e(a,Pa,t),s(Pa,Is),e(a,Hn,t),e(a,ta,t),ta.innerHTML=Me,e(a,Cn,t),e(a,h,t),s(h,Ps),s(h,za),s(za,Ts),s(h,As),s(h,Oa),s(Oa,Hs),s(h,Cs),s(h,Ba),s(Ba,Ms),s(h,Ss),e(a,Mn,t),e(a,ea,t),ea.innerHTML=Se,e(a,Sn,t),e(a,C,t),s(C,Ds),s(C,Na),s(Na,js),s(C,Ls),e(a,Dn,t),e(a,M,t),s(M,S),s(S,Ga),s(M,Rs),e(a,jn,t),e(a,Ta,t),s(Ta,Js),e(a,Ln,t),e(a,pa,t),pa.innerHTML=De,e(a,Rn,t),e(a,Aa,t),s(Aa,zs),e(a,Jn,t),e(a,D,t),s(D,j),s(j,Wa),s(D,Os),e(a,zn,t),e(a,m,t),s(m,Bs),s(m,qa),s(qa,Ns),s(m,Gs),s(m,Ua),s(Ua,Ws),s(m,qs),e(a,On,t),e(a,oa,t),oa.innerHTML=je,e(a,Bn,t),e(a,L,t),s(L,R),s(R,Ya),s(L,Us),e(a,Nn,t),e(a,b,t),s(b,Ys),s(b,Za),s(Za,Zs),s(b,Fs),s(b,Fa),s(Fa,Ks),s(b,Qs),e(a,Gn,t),e(a,la,t),la.innerHTML=Le,e(a,Wn,t),e(a,J,t),s(J,z),s(z,Ka),s(J,Vs),e(a,qn,t),e(a,O,t),s(O,Xs),s(O,Qa),s(Qa,$s),s(O,at),e(a,Un,t),e(a,ia,t),ia.innerHTML=Re,e(a,Yn,t),e(a,B,t),s(B,N),s(N,Va),s(B,nt),e(a,Zn,t),e(a,Ha,t),s(Ha,st),e(a,Fn,t),e(a,G,t),s(G,W),s(W,Xa),s(G,tt),e(a,Kn,t),e(a,d,t),s(d,et),s(d,ca),s(ca,pt),s(d,ot),s(d,ra),s(ra,lt),s(d,it),s(d,ua),s(ua,ct),s(d,rt),s(d,ka),s(ka,ut),s(d,kt),s(d,da),s(da,dt),s(d,ft),s(d,$a),s($a,ht),s(d,mt),e(a,Qn,t),e(a,Ca,t),s(Ca,fa),s(fa,bt)},p:At,i:At,o:At,d(a){a&&n(y),a&&n(an),a&&n(w),a&&n(nn),a&&n(_),a&&n(sn),a&&n(Y),a&&n(tn),a&&n(ha),a&&n(en),a&&n(Z),a&&n(pn),a&&n(ma),a&&n(on),a&&n(F),a&&n(ln),a&&n(ba),a&&n(cn),a&&n(g),a&&n(rn),a&&n(ya),a&&n(un),a&&n(K),a&&n(kn),a&&n(Q),a&&n(dn),a&&n(wa),a&&n(fn),a&&n(E),a&&n(hn),a&&n(va),a&&n(mn),a&&n(V),a&&n(bn),a&&n(P),a&&n(yn),a&&n(X),a&&n(wn),a&&n($),a&&n(vn),a&&n(T),a&&n(_n),a&&n(A),a&&n(gn),a&&n(_a),a&&n(xn),a&&n(ga),a&&n(En),a&&n(Ea),a&&n(In),a&&n(na),a&&n(Pn),a&&n(Ia),a&&n(Tn),a&&n(sa),a&&n(An),a&&n(Pa),a&&n(Hn),a&&n(ta),a&&n(Cn),a&&n(h),a&&n(Mn),a&&n(ea),a&&n(Sn),a&&n(C),a&&n(Dn),a&&n(M),a&&n(jn),a&&n(Ta),a&&n(Ln),a&&n(pa),a&&n(Rn),a&&n(Aa),a&&n(Jn),a&&n(D),a&&n(zn),a&&n(m),a&&n(On),a&&n(oa),a&&n(Bn),a&&n(L),a&&n(Nn),a&&n(b),a&&n(Gn),a&&n(la),a&&n(Wn),a&&n(J),a&&n(qn),a&&n(O),a&&n(Un),a&&n(ia),a&&n(Yn),a&&n(B),a&&n(Zn),a&&n(Ha),a&&n(Fn),a&&n(G),a&&n(Kn),a&&n(d),a&&n(Qn),a&&n(Ca)}}}const op={excerpt:"I wanted to see how well OpenAI's ChatGPT would work for teaching, so I asked it to design a Jupyter course. The first assignment it gave me was to explore the history of disco and dance music. I need to use both text and images to describe the key developments and important figures in the genre.",date:"2022-12-11T00:00:00.000Z",title:"History of Disco and Dance Music: a Jupyter notebook",tags:["DataScience","Jupyter","ChatGPT"]};class lp extends $e{constructor(y){super(),ap(this,y,null,ep,np,{})}}export{lp as default,op as metadata};
