import{S as Tw,i as jw,s as Sw,e as t,t as r,k,c as o,a as p,d as a,h as c,m as u,b as i,g as l,I as e,E as Zh}from"./index-6e518972.js";function Cw(hb){let j,B,Jn,Cc,lp,_,Ac,ca,Dc,Rc,ia,Hc,Mc,Qn,Oc,Lc,rp,U,z,Xn,Nc,cp,qe,qc,ip,ka,mb='<code class="language-bash"><span class="token operator">></span> cookiecutter gh:gotofritz/cookiecutter-gotofritz-poetry</code>',kp,V,G,Zn,Fc,up,Fe,Bc,fp,S,st,Uc,zc,at,Vc,Gc,et,Yc,dp,Y,W,nt,Wc,hp,w,Kc,Be,Jc,Qc,ua,Xc,Zc,fa,si,ai,mp,K,J,tt,ei,yp,Q,X,ot,ni,vp,Z,ti,Ue,oi,pi,bp,da,yb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> specimen <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> specimen
<span class="token operator">></span> python -V
<span class="token number">3.8</span>.5
<span class="token operator">></span> pyenv <span class="token builtin class-name">local</span> <span class="token number">3.10</span>.1
<span class="token punctuation">..</span>.
<span class="token operator">></span> python -V
<span class="token number">3.10</span>.4

<span class="token comment"># this was created by pyenv local</span>
<span class="token operator">></span> <span class="token function">cat</span> .python-version
<span class="token number">3.10</span>.4</code>`,_p,ze,li,wp,ha,vb=`<code class="language-bash"><span class="token operator">></span> poetry init --no-interaction
<span class="token operator">></span> <span class="token function">cat</span> pyproject.toml
<span class="token punctuation">[</span>tool.poetry<span class="token punctuation">]</span>
name <span class="token operator">=</span> <span class="token string">"specimen"</span>
version <span class="token operator">=</span> <span class="token string">"0.1.0"</span>
description <span class="token operator">=</span> <span class="token string">""</span>
authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Your Name &lt;you@example.com>"</span><span class="token punctuation">]</span>
readme <span class="token operator">=</span> <span class="token string">"README.md"</span>
description <span class="token operator">=</span> <span class="token string">"blah blah"</span>
license <span class="token operator">=</span> <span class="token string">"MIT"</span>
readme <span class="token operator">=</span> <span class="token string">"README.md"</span>
homepage <span class="token operator">=</span> <span class="token string">"https://github.com/blah"</span>
repository <span class="token operator">=</span> <span class="token string">"https://github.com/blah"</span>

<span class="token punctuation">[</span>tool.poetry.dependencies<span class="token punctuation">]</span>
python <span class="token operator">=</span> <span class="token string">"^3.10"</span>

<span class="token punctuation">[</span>build-system<span class="token punctuation">]</span>
requires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"poetry-core"</span><span class="token punctuation">]</span>
build-backend <span class="token operator">=</span> <span class="token string">"poetry.core.masonry.api"</span></code>`,Ep,ss,as,pt,ri,gp,C,ci,lt,ii,ki,rt,ui,fi,Ip,ma,bb=`<code class="language-bash"> <span class="token comment"># toptal.com offers a free, comprehensive .gitignore generator</span>
 <span class="token operator">></span> <span class="token function">curl</span> -L https://www.toptal.com/developers/gitignore/api/python,visualstudiocode <span class="token operator">></span> <span class="token punctuation"></span><span class="token punctuation"></span>
  .gitignore
 <span class="token operator">></span> <span class="token function">git</span> init --initial-branch<span class="token operator">=</span>trunk
 Initialized empty Git repository <span class="token keyword">in</span> /Users/ <span class="token punctuation">..</span>. etc
 <span class="token operator">></span> <span class="token function">git</span> config user.email <span class="token string">"gotofritz@users.noreply.github.com"</span>
 <span class="token operator">></span> <span class="token function">git</span> config user.name <span class="token string">"gotofritz"</span>
 <span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
 <span class="token operator">></span> <span class="token function">git</span> commit -m <span class="token string">"initial commit"</span>
<span class="token punctuation">[</span>trunk <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> <span class="token number">5299312</span><span class="token punctuation">]</span> initial commit
 <span class="token number">3</span> files changed, <span class="token number">647</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> .gitignore
 create mode <span class="token number">100644</span> poetry.lock
 create mode <span class="token number">100644</span> pyproject.toml</code>`,Pp,es,ns,ct,di,xp,E,hi,it,mi,yi,kt,vi,bi,ut,_i,wi,$p,ya,_b=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> -p src/specimen
<span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">'__version__ = "0.1.0"'</span> <span class="token operator">>></span> src/specimen/__init__.py
<span class="token operator">></span> <span class="token function">mkdir</span> tests
<span class="token operator">></span> <span class="token function">touch</span> tests/__init__.py
<span class="token operator">></span> tree <span class="token builtin class-name">.</span>
<span class="token builtin class-name">.</span>
\u251C\u2500\u2500 pyproject.toml
\u251C\u2500\u2500 src
\u2502   \u2514\u2500\u2500 specimen
\u2502       \u2514\u2500\u2500 __init__.py
\u2514\u2500\u2500 tests
    \u2514\u2500\u2500 __init__.py</code>`,Tp,ts,os,ft,Ei,jp,A,gi,dt,Ii,Pi,ht,xi,$i,Sp,va,wb=`<code class="language-bash"><span class="token operator">></span> poetry shell
Spawning shell within /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-xQlBT47A-py3.10
<span class="token builtin class-name">.</span> /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-xQlBT47A-py3.10/bin/activate

<span class="token operator">></span> poetry <span class="token function">env</span> info
Virtualenv
Python:         <span class="token number">3.10</span>.6
Implementation: CPython
Path:           /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10
Executable:     /Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python
Valid:          True

System
Platform:   darwin
OS:         posix
Python:     <span class="token number">3.10</span>.6
Path:       /opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10
Executable: /opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10/bin/python3.10</code>`,Cp,g,Ti,mt,ji,Si,yt,Ci,Ai,vt,Di,Ri,Ap,ba,Eb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">env</span> info <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/Executable/ &#123; print $2; exit &#125;'</span>
/Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python</code>`,Dp,Ve,Hi,Rp,f,bt,Mi,_t,Oi,wt,Li,Et,Ni,gt,qi,It,Fi,Pt,Bi,xt,Ui,$t,zi,Tt,Vi,jt,Gi,T,Yi,St,Wi,Ki,Ct,Ji,Qi,At,Xi,Zi,Dt,sk,_a,ak,Rt,ek,nk,Ht,tk,Mt,ok,Ot,pk,Lt,lk,Hp,D,rk,Nt,ck,ik,qt,kk,uk,Mp,wa,gb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> .vscode
<span class="token operator">></span> <span class="token function">vim</span> .vscode/settings.json
<span class="token punctuation">[</span>opens editor<span class="token punctuation">]</span></code>`,Op,Ge,fk,Lp,Ye,Ft,dk,Np,Ea,Ib=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"python.defaultInterpreterPath"</span><span class="token operator">:</span> <span class="token string">"/Users/fritz/Library/Caches/pypoetry/virtualenvs/specimen-jsQemb2j-py3.10/bin/python"</span><span class="token punctuation">,</span>
  <span class="token property">"terminal.integrated.env.windows"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"PYTHONPATH"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/src;$&#123;workspaceFolder&#125;/tests"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"python.envFile"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/.env"</span>
<span class="token punctuation">&#125;</span></code>`,qp,We,hk,Fp,ga,Pb=`<code class="language-bash"><span class="token comment"># .env</span>
<span class="token assign-left variable">WORKSPACE_FOLDER</span><span class="token operator">=</span>/Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
<span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/src<span class="token punctuation">;</span><span class="token variable">$&#123;WORKSPACE_FOLDER&#125;</span>/tests</code>`,Bp,I,mk,Bt,yk,vk,Ut,bk,_k,zt,wk,Ek,Up,ps,ls,Vt,gk,zp,Ke,Ik,Vp,Ia,xb=`<code class="language-python"><span class="token comment"># tests/test_setup.py</span>
<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span></code>`,Gp,Je,Pk,Yp,Pa,$b=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev pytest
Using version ^7.1.3 <span class="token keyword">for</span> pytest

Updating dependencies
Resolving dependencies<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">0</span>.1s<span class="token punctuation">)</span>

<span class="token punctuation">..</span>.etc
<span class="token operator">></span> poetry run pytest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.00s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span></code>`,Wp,Qe,xk,Kp,xa,Tb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev coverage<span class="token punctuation">[</span>toml<span class="token punctuation">]</span> pytest-cov
<span class="token punctuation">..</span>.</code>`,Jp,rs,$k,Gt,Tk,jk,Qp,$a,jb=`<code class="language-toml"><span class="token comment"># pyproject.toml</span>
<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.paths</span><span class="token punctuation">]</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.run</span><span class="token punctuation">]</span>
<span class="token key property">branch</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"specimen"</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">tool.coverage.report</span><span class="token punctuation">]</span>
<span class="token key property">fail_under</span> <span class="token punctuation">=</span> <span class="token number">100</span>
<span class="token key property">show_missing</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></code>`,Xp,cs,Sk,Yt,Ck,Ak,Zp,Ta,Sb=`<code class="language-bash"><span class="token operator">></span> poetry run pytest --cov
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                                                                                                                           <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>/Users/fritz/L<span class="token punctuation">..</span><span class="token punctuation">..</span>etc<span class="token punctuation">..</span>.
WARNING: Failed to generate report: No data to report.
<span class="token punctuation">..</span>.</code>`,sl,Xe,Dk,al,ja,Cb=`<code class="language-python"><span class="token comment"># tests/test_setup.py</span>
<span class="token keyword">import</span> re
<span class="token keyword">from</span> specimen <span class="token keyword">import</span> __version__ <span class="token keyword">as</span> version


<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"^d+.d+.d+$"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span></code>`,el,R,Rk,Wt,Hk,Mk,Kt,Ok,Lk,nl,Sa,Ab=`<code class="language-bash"><span class="token punctuation">..</span>.
ImportError <span class="token keyword">while</span> importing <span class="token builtin class-name">test</span> module <span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
tests/test_setup.py:2: <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    from specimen <span class="token function">import</span> __version__ as version
E   ModuleNotFoundError: No module named <span class="token string">'specimen'</span>
<span class="token punctuation">..</span>.</code>`,tl,Ca,Nk,Jt,qk,ol,Aa,Db=`<code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">tool.pytest.ini_options</span><span class="token punctuation">]</span>
<span class="token key property">pythonpath</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span></code>`,pl,Ze,Fk,ll,Da,Rb=`<code class="language-bash"><span class="token operator">></span> poetry run pytest --cov
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen, configfile: pyproject.toml
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                               <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

---------- coverage: platform darwin, python <span class="token number">3.10</span>.6-final-0 ----------
Name                       Stmts   Miss Branch BrPart  Cover   Missing
----------------------------------------------------------------------
src/specimen/__init__.py       <span class="token number">1</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
----------------------------------------------------------------------
TOTAL                          <span class="token number">1</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%

Required <span class="token builtin class-name">test</span> coverage of <span class="token number">100.0</span>% reached. Total coverage: <span class="token number">100.00</span>%

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.01s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add trivial test to prove test+coverage works"</span></code>`,rl,is,ks,Qt,Bk,cl,sn,Uk,il,Ra,Hb=`<code class="language-python"><span class="token comment"># tests/conftest.py</span>
<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker
<span class="token keyword">import</span> pytest

fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>
Faker<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1369</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fake"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fixture_fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Pass a seeded Faker instance as a fixture"""</span>
    <span class="token keyword">return</span> fake


&#96;&#96;&#96;
And add it to the current test

&#96;&#96;&#96;python
<span class="token keyword">def</span> <span class="token function">test_version</span><span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Sanity check that there is a version in the right place"""</span>
    <span class="token keyword">assert</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"^d+.d+.d+$"</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> fake<span class="token punctuation">.</span>pystr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> version</code>`,kl,us,fs,Xt,zk,ul,ds,Vk,Ha,Gk,Yk,fl,Ma,Mb=`<code class="language-makefile">PYTHON_VERSION <span class="token operator">?=</span> 3.10.4
CMD <span class="token operator">:=</span> poetry run
SRC_DIR <span class="token operator">:=</span> src
TESTS_DIR <span class="token operator">:=</span> tests

<span class="token target symbol">help</span><span class="token punctuation">:</span>  <span class="token comment">## Display this help</span>
	<span class="token operator">@</span>awk <span class="token string">'BEGIN &#123;FS = ":.*##"; printf "&#92;nUsage:&#92;n  make \\033[36m\\033[0m&#92;n"&#125; /^[a-zA-Z0-9_-]+:.*?##/ &#123; printf "  \\033[36m%-15s\\033[0m %s&#92;n", $$1, $$2 &#125; /^##@/ &#123; printf "&#92;n\\033[1m%s\\033[0m&#92;n", substr($$0, 5) &#125; '</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKEFILE_LIST<span class="token punctuation">)</span>
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> help

<span class="token target symbol">test</span><span class="token punctuation">:</span> <span class="token comment">## runs tests in the tests/ directory, with coverage</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CMD<span class="token punctuation">)</span> pytest --cov <span class="token variable">$</span><span class="token punctuation">(</span>TESTS_DIR<span class="token punctuation">)</span>
<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test</code>`,dl,an,Wk,hl,Oa,Ob=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">help</span>

Usage:
  <span class="token function">make</span>
  <span class="token builtin class-name">help</span>             Display this <span class="token builtin class-name">help</span>
  <span class="token builtin class-name">test</span>             runs tests <span class="token keyword">in</span> the tests/ directory, with coverage</code>`,ml,en,Kk,yl,La,Lb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">test</span>
poetry run pytest --cov tests
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform darwin -- Python <span class="token number">3.10</span>.6, pytest-7.1.3, pluggy-1.0.0
rootdir: /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen, configfile: pyproject.toml
plugins: cov-3.0.0
collected <span class="token number">1</span> item

tests/test_setup.py <span class="token builtin class-name">.</span>                                                                                                                                                                                <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

---------- coverage: platform darwin, python <span class="token number">3.10</span>.6-final-0 ----------
Name                  Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------
tests/__init__.py         <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
tests/test_setup.py       <span class="token number">4</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%
-----------------------------------------------------------------
TOTAL                     <span class="token number">4</span>      <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span>   <span class="token number">100</span>%

Required <span class="token builtin class-name">test</span> coverage of <span class="token number">100.0</span>% reached. Total coverage: <span class="token number">100.00</span>%

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.02s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add tests and Makefile to run them"</span>
<span class="token punctuation">[</span>trunk c15e669<span class="token punctuation">]</span> <span class="token function">add</span> tests and Makefile to run them
 <span class="token number">4</span> files changed, <span class="token number">263</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">3</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> Makefile
 create mode <span class="token number">100644</span> poetry.lock</code>`,vl,hs,ms,Zt,Jk,bl,H,Qk,so,Xk,Zk,Na,su,au,_l,nn,eu,wl,qa,Nb=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">format: ## rewrites code with black and isort
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) black $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) isort $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: format
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-black: ## checks src and tests with mypy
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) black --check --fast $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-black
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black ## runs all static analysis tools
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint
</span></span>
test: ## runs tests
	$(CMD) pytest $(TESTS_DIR)
.PHONY: test

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa: lint test ## for CI/CD. Runs all code quality tools
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: qa
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa-local: format qa ## for local development (before checking in). Formats code and runs qa
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: qa-local</span></span></code>`,El,tn,nu,gl,Fa,qb=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token builtin class-name">help</span>

Usage:
  <span class="token function">make</span>
  <span class="token builtin class-name">help</span>             Display this <span class="token builtin class-name">help</span>
  <span class="token function">format</span>           rewrites code with black and isort
  lint-black       checks src and tests with mypy
  lint             runs all static analysis tools
  <span class="token builtin class-name">test</span>             runs tests
  qa               <span class="token keyword">for</span> CI/CD. Runs all code quality tools
  qa-local         <span class="token keyword">for</span> <span class="token builtin class-name">local</span> development <span class="token punctuation">(</span>before checking <span class="token keyword">in</span><span class="token punctuation">)</span>. Formats code and runs qa</code>`,Il,m,ao,tu,ou,eo,pu,lu,no,ru,cu,to,iu,ku,oo,uu,fu,po,du,hu,Pl,Ba,Fb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev black isort
Using version ^22.8.0 <span class="token keyword">for</span> black
Using version ^5.10.1 <span class="token keyword">for</span> isort
<span class="token punctuation">..</span>.</code>`,xl,on,mu,$l,Ua,Bb=`<code class="language-diff"># pyproject.toml

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.black]
</span><span class="token prefix inserted">+</span><span class="token line">line-length = 88
</span><span class="token prefix inserted">+</span><span class="token line">target-version = ['py310']
</span><span class="token prefix inserted">+</span><span class="token line">include = '.pyi?$'
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.isort]
</span><span class="token prefix inserted">+</span><span class="token line">multi_line_output = 3
</span><span class="token prefix inserted">+</span><span class="token line">line_length = 88
</span><span class="token prefix inserted">+</span><span class="token line">include_trailing_comma = true</span></span></code>`,Tl,pn,yu,jl,za,Ub=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> <span class="token function">format</span>
poetry run black src tests
All done<span class="token operator">!</span> \u2728 \u{1F370} \u2728
<span class="token number">3</span> files left unchanged.
poetry run isort src tests
Fixing /Users/fritz/work/cookiecutter-gotofritz-poetry/specimen/tests/test_setup.py

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add black and isort and amend Makefile"</span>
<span class="token number">4</span> files changed, <span class="token number">146</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">6</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,Sl,ys,vs,lo,vu,Cl,M,bu,Va,_u,wu,Ga,Eu,gu,Al,Ya,zb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev flake8@^4 flakeheaven
Using version ^5.0.4 <span class="token keyword">for</span> flake8
Using version ^0.9.0 <span class="token keyword">for</span> flakeheaven
<span class="token punctuation">..</span>.</code>`,Dl,P,Iu,ro,Pu,xu,co,$u,Tu,io,ju,Su,Rl,Wa,Vb=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven]
</span><span class="token prefix inserted">+</span><span class="token line">exclude = ["*.md", ".env", ".git", ".gitignore"]
</span><span class="token prefix inserted">+</span><span class="token line">format = "colored"
</span><span class="token prefix inserted">+</span><span class="token line">max_line_length = 88
</span><span class="token prefix inserted">+</span><span class="token line">show_source = true
</span><span class="token prefix inserted">+</span><span class="token line">format = "grouped"
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven.plugins]
</span><span class="token prefix inserted">+</span><span class="token line">mccabe = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pycodestyle = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pyflake = ["+*"]</span></span></code>`,Hl,ln,Cu,Ml,Ka,Gb=`<code class="language-diff">lint-black: ## checks src and tests with mypy
	$(CMD) black --check --fast $(SRC_DIR) $(TESTS_DIR)
.PHONY: lint-black

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-flake: ## checks src and tests with mypy
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) flakeheaven lint $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-flake
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">lint: lint-black ## runs all static analysis tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black lint-flake ## runs all static analysis tools
</span></span>.PHONY: lint</code>`,Ol,rn,Au,Ll,bs,_s,ko,Du,Nl,cn,Ru,ql,Ja,Yb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev flake8-bandit@^3.0
Updating dependencies
<span class="token punctuation">..</span>.</code>`,Fl,x,Hu,uo,Mu,Ou,fo,Lu,Nu,ho,qu,Fu,Bl,Qa,Wb=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-bandit = ["+*", "-S322"]
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.flakeheaven.exceptions."tests/"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-bandit = ["+*", "-S322", "-S101"]
</span></span></code>`,Ul,ws,Es,mo,Bu,zl,kn,Uu,Vl,Xa,Kb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev flake8-bugbear
Using version ^22.8.23 <span class="token keyword">for</span> flake8-bugbear
<span class="token punctuation">..</span>.</code>`,Gl,un,zu,Yl,Za,Jb=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-bugbear = ["+*", "-B950"]</span></span></code>`,Wl,gs,Is,yo,Vu,Kl,F,vo,Gu,Yu,bo,Wu,Ku,Jl,se,Qb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev darglint flake8-docstrings
Using version ^1.8.1 <span class="token keyword">for</span> darglint
Using version ^1.6.0 <span class="token keyword">for</span> flake8-docstrings
<span class="token punctuation">..</span>.</code>`,Ql,ae,Xb=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">darglint = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-docstrings = ["+*"]</span></span></code>`,Xl,Ps,xs,_o,Ju,Zl,h,fn,wo,Qu,Xu,Zu,dn,Eo,sf,af,ef,hn,go,nf,tf,of,$s,Io,pf,lf,Po,rf,cf,kf,mn,xo,uf,ff,df,yn,$o,hf,mf,yf,vn,To,vf,bf,sr,ee,Zb=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev flake8-comprehensions flake8-isort flake8-mutable flake8-simplify pep8-naming
Using version ^22.8.23 <span class="token keyword">for</span> flake8-builtins
Using version ^3.10.0 <span class="token keyword">for</span> flake8-comprehensions
Using version ^4.2.0 <span class="token keyword">for</span> flake8-isort
Using version ^1.2.0 <span class="token keyword">for</span> flake8-mutable
Using version ^1.6.0 <span class="token keyword">for</span> flake8-pytest-style
Using version ^0.19.3 <span class="token keyword">for</span> flake8-simplify
Using version ^0.13.2 <span class="token keyword">for</span> pep8-naming
<span class="token punctuation">..</span>.

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add flake8 plugins"</span>
<span class="token number">3</span> files changed, <span class="token number">539</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">13</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,ar,ne,s_=`<code class="language-diff">[tool.flakeheaven.plugins]
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">flake8-builtins = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-isort = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-comprehensions = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-mutable = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-pytest-style = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">flake8-simplify = ["+*"]
</span><span class="token prefix inserted">+</span><span class="token line">pep8-naming = ["+*"]</span></span></code>`,er,Ts,js,jo,_f,nr,bn,wf,tr,te,a_=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev safety
Using version ^2.1.1 <span class="token keyword">for</span> safety
<span class="token punctuation">..</span>.</code>`,or,_n,Ef,pr,oe,e_=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">safety: ## tests third part packages against a database of known compromised ones
</span><span class="token prefix inserted">+</span><span class="token line"> poetry export --with dev --format=requirements.txt --without-hashes | poetry run safety check --stdin
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">qa: lint test ## for CI/CD. Runs all code quality tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">qa: safety lint test ## for CI/CD. Runs all code quality tools
</span></span>.PHONY: qa</code>`,lr,pe,n_=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> safety
error: No such remote <span class="token string">'origin'</span>
<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

                               /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>            /<span class="token variable">$$</span>
                              /<span class="token variable">$$</span>__  <span class="token variable">$$</span>          <span class="token operator">|</span> <span class="token variable">$$</span>
           /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$  /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span> <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token punctuation"></span>__//<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>  /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span>   /<span class="token variable">$$</span>
          /<span class="token variable">$$</span>_____/ <span class="token operator">|</span>____  <span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span>__  <span class="token variable">$$</span><span class="token operator">|</span>_  <span class="token variable">$$</span>_/  <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
         <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>   /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$<span class="token operator">|</span> <span class="token variable">$$</span>_/  <span class="token operator">|</span> <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
          <span class="token punctuation"></span>____  <span class="token variable">$$</span> /<span class="token variable">$$</span>__  <span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span> <span class="token variable">$$</span>_____/  <span class="token operator">|</span> <span class="token variable">$$</span> /<span class="token variable">$$</span><span class="token operator">|</span> <span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
          /<span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$/<span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$<span class="token operator">|</span> <span class="token variable">$$</span>    <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$  <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span>/<span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>$
         <span class="token operator">|</span>_______/  <span class="token punctuation"></span>_______/<span class="token operator">|</span>__/     <span class="token punctuation"></span>_______/   <span class="token punctuation"></span>___/   <span class="token punctuation"></span>____  <span class="token variable">$$</span>
                                                          /<span class="token variable">$$</span>  <span class="token operator">|</span> <span class="token variable">$$</span>
                                                         <span class="token operator">|</span>  <span class="token variable">$$</span><span class="token variable">$$</span><span class="token variable">$$</span>/
  by pyup.io                                              <span class="token punctuation"></span>______/

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

 REPORT
<span class="token punctuation">..</span>.
<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

 No known security vulnerabilities found.

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

  You are using Safety's <span class="token function">free</span> vulnerability database. This data
is outdated, limited, and
  licensed <span class="token keyword">for</span> non-commercial use only.
  All commercial projects must sign up and get an API key at
https://pyup.io

<span class="token operator">+=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>+

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add safety"</span>
 <span class="token number">4</span> files changed, <span class="token number">242</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">2</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> requirements.txt</code>`,rr,Ss,Cs,So,gf,cr,wn,If,ir,le,t_=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> --group dev mypy
Using version ^0.971 <span class="token keyword">for</span> mypy
<span class="token punctuation">..</span>.</code>`,kr,En,Pf,ur,re,o_=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">[tool.mypy]
</span><span class="token prefix inserted">+</span><span class="token line">warn_return_any = true
</span><span class="token prefix inserted">+</span><span class="token line">warn_unused_configs = true</span></span></code>`,fr,gn,xf,dr,ce,p_=`<code class="language-diff">lint-flake: ## checks src and tests with mypy
	$(CMD) flakeheaven lint $(SRC_DIR) $(TESTS_DIR)
.PHONY: lint-flake

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint-mypy: ## checks type annotation
</span><span class="token prefix inserted">+</span><span class="token line">	$(CMD) mypy $(SRC_DIR) $(TESTS_DIR)
</span><span class="token prefix inserted">+</span><span class="token line">.PHONY: lint-mypy
</span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">lint: lint-black lint-flake ## runs all static analysis tools
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">lint: lint-black lint-flake lint-mypy ## runs all static analysis tools
</span></span>.PHONY: lint
</code>`,hr,In,$f,mr,ie,l_=`<code class="language-bash"><span class="token operator">></span> <span class="token function">make</span> lint-mypy
poetry run mypy src tests
Success: no issues found <span class="token keyword">in</span> <span class="token number">3</span> <span class="token builtin class-name">source</span> files

<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"add mypy"</span>
 <span class="token number">3</span> files changed, <span class="token number">67</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">3</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span></code>`,yr,As,Ds,Co,Tf,vr,Pn,jf,br,Rs,xn,Sf,$n,Cf,Af,Ao,Df,_r,Tn,Rf,wr,Hs,Ms,Do,Hf,Er,jn,Mf,gr,ke,r_=`<code class="language-bash"><span class="token comment"># copy somewhere out of the way</span>
<span class="token operator">></span> <span class="token function">cp</span> -r specimen <span class="token punctuation">..</span>/

<span class="token comment"># remove all git info</span>
<span class="token operator">></span> <span class="token function">rm</span> -rf specimen/.git

<span class="token comment"># remove all caches</span>
<span class="token operator">></span> <span class="token function">find</span> <span class="token builtin class-name">.</span> -type d -name __pycache__ -exec <span class="token function">rm</span> -rf <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation"></span><span class="token punctuation">;</span>
find: ./tests/__pycache__: No such <span class="token function">file</span> or directory
find: ./src/specimen/__pycache__: No such <span class="token function">file</span> or directory
<span class="token operator">></span> <span class="token function">rm</span> -rf .pytest_cache .mypy_cache .coverage

<span class="token comment"># start turning it into a template</span>
<span class="token operator">></span> <span class="token function">mv</span> specimen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.project_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token comment"># initial settings, just to test</span>
<span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">'&#123; "project_name": "new-project" &#125;'</span> <span class="token operator">></span> cookiecutter.json

<span class="token comment"># go somewhere new</span>
<span class="token operator">></span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/test

<span class="token comment"># try to run it</span>
<span class="token operator">></span> cookiecutter <span class="token punctuation">..</span>/cookiecutter-gotofritz-poetry/
project_name <span class="token punctuation">[</span>new-project<span class="token punctuation">]</span>:

<span class="token comment"># test it</span>
<span class="token operator">></span> tree -a
<span class="token builtin class-name">.</span>
\u2514\u2500\u2500 new-project
    \u251C\u2500\u2500 .env
    \u251C\u2500\u2500 .gitignore
    \u251C\u2500\u2500 .python-version
    \u251C\u2500\u2500 .vscode
    \u2502   \u2514\u2500\u2500 settings.json
    \u251C\u2500\u2500 CHANGELOG.md
    \u251C\u2500\u2500 LICENSE.md
    \u251C\u2500\u2500 Makefile
    \u251C\u2500\u2500 README.md
    \u251C\u2500\u2500 poetry.lock
    \u251C\u2500\u2500 pyproject.toml
    \u251C\u2500\u2500 requirements.txt
    \u251C\u2500\u2500 src
    \u2502   \u2514\u2500\u2500 specimen
    \u2502       \u2514\u2500\u2500 __init__.py
    \u2514\u2500\u2500 tests
        \u251C\u2500\u2500 __init__.py
        \u2514\u2500\u2500 test_setup.py

<span class="token number">5</span> directories, <span class="token number">14</span> files</code>`,Ir,Sn,Of,Pr,Os,Ls,Ro,Lf,xr,O,Nf,Ho,qf,Ff,ue,Bf,Uf,$r,Ns,zf,Mo,Vf,Gf,Tr,fe,c_=`<code class="language-bash"><span class="token operator">></span> <span class="token function">cp</span> <span class="token punctuation">..</span>
<span class="token operator">></span> poetry <span class="token function">add</span> -D pytest-cookies
Using version ^0.6.1 <span class="token keyword">for</span> pytest-cookies
<span class="token punctuation">..</span>.
<span class="token operator">></span> <span class="token function">mkdir</span> tests
<span class="token operator">></span> code tests/test_create_template.py
<span class="token punctuation">[</span>opens editor<span class="token punctuation">]</span></code>`,jr,Cn,Yf,Sr,de,i_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_run_cookiecutter_result</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Create a new plugin via cookiecutter and run its tests."""</span>
    project_name <span class="token operator">=</span> <span class="token string">"sancho panza"</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span>
        extra_context<span class="token operator">=</span><span class="token punctuation">&#123;</span>
            <span class="token string">"project_name"</span><span class="token punctuation">:</span> project_name<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exit_code <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>exception <span class="token keyword">is</span> <span class="token boolean">None</span>
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>name <span class="token operator">==</span> project_name
    <span class="token keyword">assert</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>

    readme_path <span class="token operator">=</span> result<span class="token punctuation">.</span>project_path <span class="token operator">/</span> <span class="token string">"README.md"</span>
    <span class="token keyword">assert</span> readme_path<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span>

    readme <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>readme_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> project_name <span class="token keyword">in</span> readme
    <span class="token keyword">assert</span> <span class="token string">"project_name"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> readme
</code>`,Cr,qs,Wf,Oo,Kf,Jf,Ar,L,Qf,Lo,Xf,Zf,No,sd,ad,Dr,he,k_='<code class="language-json"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.python_version<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code>',Rr,me,ed,qo,nd,Hr,ye,u_='<code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"project_name"</span><span class="token operator">:</span> <span class="token string">"new-project"</span><span class="token punctuation">,</span> <span class="token property">"python_version"</span><span class="token operator">:</span> <span class="token string">"3.10.4"</span> <span class="token punctuation">&#125;</span></code>',Mr,An,td,Or,Dn,od,Lr,ve,f_=`<code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">cd</span> tree <span class="token punctuation">..</span>
\u251C\u2500\u2500 cookiecutter.json
\u251C\u2500\u2500 pyproject.toml
\u251C\u2500\u2500 specimen
\u2514\u2500\u2500 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>cookiecutter.project_name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    \u251C\u2500\u2500 CHANGELOG.md
    \u251C\u2500\u2500 LICENSE.md
    \u251C\u2500\u2500 Makefile
    \u251C\u2500\u2500 README.md
    \u251C\u2500\u2500 poetry.lock
    \u251C\u2500\u2500 pyproject.toml
    \u251C\u2500\u2500 requirements.txt
    \u251C\u2500\u2500 src
    \u2502   \u2514\u2500\u2500 specimen
    \u2502       \u2514\u2500\u2500 __init__.py
    \u2514\u2500\u2500 tests
        \u251C\u2500\u2500 __init__.py
        \u2514\u2500\u2500 test_setup.py</code>`,Nr,Fs,pd,Fo,ld,rd,qr,be,d_=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"project_name"</span><span class="token operator">:</span> <span class="token string">"new-project"</span><span class="token punctuation">,</span>
  <span class="token property">"verbose_project_name"</span><span class="token operator">:</span> <span class="token string">"My Awesome Project"</span><span class="token punctuation">,</span>
  <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"Your Name"</span><span class="token punctuation">,</span>
  <span class="token property">"github_username"</span><span class="token operator">:</span> <span class="token string">"github_username"</span><span class="token punctuation">,</span>
  <span class="token property">"mastodon_handle"</span><span class="token operator">:</span> <span class="token string">"@your_name@mastodon.social"</span><span class="token punctuation">,</span>
  <span class="token property">"mastodon_url"</span><span class="token operator">:</span> <span class="token string">"https://mastodon.social/@your_name"</span><span class="token punctuation">,</span>
  <span class="token property">"project_description"</span><span class="token operator">:</span> <span class="token string">"this is a project"</span><span class="token punctuation">,</span>
  <span class="token property">"python_version"</span><span class="token operator">:</span> <span class="token string">"3.10.4"</span>
<span class="token punctuation">&#125;</span></code>`,Fr,Rn,cd,Br,Bs,Us,Bo,id,Ur,N,kd,Uo,ud,fd,zo,dd,hd,zr,_e,h_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_generated_files</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""tests the generated files names make sense"""</span>
    re_bad <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"&#123;&#123;s?cookiecutter..*?&#125;&#125;"</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span>
        re_bad<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> file_path <span class="token keyword">in</span> result<span class="token punctuation">.</span>project_path<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span></code>`,Vr,zs,md,Vo,yd,vd,Gr,we,m_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_make_qa</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""runs tests on the generated dir"""</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    make_proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token string">"/usr/bin/make"</span><span class="token punctuation">,</span> <span class="token string">"lint-flake"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># noqa</span>
        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span>
        cwd<span class="token operator">=</span>result<span class="token punctuation">.</span>project_path<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment"># stdout, stderr are for debuggin</span>
    stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> make_proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> make_proc<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span></code>`,Yr,Hn,bd,Wr,Vs,Gs,Go,_d,Kr,Ys,wd,Yo,Ed,gd,Jr,Ee,y_=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">test_cookiecutter_env_file</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""ensures the .env file contains what I expect"""</span>
    result <span class="token operator">=</span> cookies<span class="token punctuation">.</span>bake<span class="token punctuation">(</span><span class="token punctuation">)</span>

    env_path <span class="token operator">=</span> result<span class="token punctuation">.</span>project_path <span class="token operator">/</span> <span class="token string">".env"</span>
    <span class="token keyword">assert</span> env_path<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>env_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> <span class="token string-interpolation"><span class="token string">f"=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span>project_path<span class="token punctuation">&#125;</span></span><span class="token string">&#92;n"</span></span> <span class="token keyword">in</span> file_content</code>`,Qr,Mn,Id,Xr,ge,v_=`<code class="language-sh">WORKSPACE_FOLDER=&#123;&#123;cookiecutter._output_dir&#125;&#125;/&#123;&#123;cookiecutter.project_name&#125;&#125;
PYTHONPATH=$&#123;WORKSPACE_FOLDER&#125;/src;$&#123;WORKSPACE_FOLDER&#125;/tests</code>`,Zr,Ws,Pd,Wo,xd,$d,sc,Ks,Td,Ko,jd,Sd,ac,Ie,b_=`<code class="language-diff">&#123;
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  "python.defaultInterpreterPath": "/Users/fritz/Library/Caches/pypoetry/virtualenvs/cookiecutter-gotofritz-poetry-wyPgAlEH-py3.10/bin/python",
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  "python.defaultInterpreterPath": "&lt;interpreter_path>",
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "terminal.integrated.env.windows": &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">   "PYTHONPATH": "$&#123;workspaceFolder&#125;/src;$&#123;workspaceFolder&#125;/tests"
</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line"> "python.envFile": "$&#123;workspaceFolder&#125;/.env"
</span></span>&#125;</code>`,ec,y,Cd,Jo,Ad,Dd,Qo,Rd,Hd,Xo,Md,Od,Zo,Ld,Nd,sp,qd,Fd,nc,q,Bd,ap,Ud,zd,ep,Vd,Gd,tc,Pe,__=`<code class="language-bash"><span class="token comment"># hooks/post_gen_project.sh</span>

<span class="token comment">#! /usr/bin/env bash</span>

pyenv <span class="token builtin class-name">local</span>
poetry <span class="token function">install</span>

<span class="token comment"># location of python executable</span>
<span class="token assign-left variable">EXECUTABLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>poetry <span class="token function">env</span> info <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/Executable/ &#123; print $2; exit &#125;'</span><span class="token variable">)</span></span>

<span class="token comment"># replace the placeholder in the json file</span>
<span class="token function">sed</span> -i.bak <span class="token string">"/&lt;interpreter_path>/ s#&lt;interpreter_path>#<span class="token variable">$EXECUTABLE</span>#"</span> <span class="token punctuation"></span>
  .vscode/settings.json

<span class="token comment"># the sed program created a backup (with the &#96;-i.bak&#96; part). Remove it</span>
<span class="token function">rm</span> .vscode/settings.json.bak

<span class="token comment"># create the first git commit</span>
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit -m <span class="token string">"generate project with cookiecutter"</span></code>`,oc,Js,Qs,np,Yd,pc,On,Wd,lc,xe,w_=`<code class="language-bash"><span class="token operator">></span> cookiecutter gh:gotofritz/cookiecutter-gotofritz-poetry --no-input
<span class="token number">3.10</span>.4
Updating dependencies
Resolving dependencies<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">0</span>.5s<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.

<span class="token operator">></span> <span class="token builtin class-name">cd</span> new-project/
<span class="token operator">></span> <span class="token function">make</span> qa
<span class="token punctuation">..</span>.</code>`,rc,Ln,Kd,cc,Xs,Zs,tp,Jd,ic,sa,Qd,$e,Xd,Zd,kc,Te,sh,je,ah,uc,Se,eh,Ce,nh,fc,Ae,th,De,oh,dc,Re,ph,He,lh,hc,Me,rh,Oe,ch,mc,Le,ih,Ne,kh;return{c(){j=t("h2"),B=t("a"),Jn=t("span"),Cc=r("Creating a python project from scratch? How boring"),lp=k(),_=t("p"),Ac=r("Starting work on a new project involves a lot of repetitive steps: setting up a virtual env, code quality tools, packages, etc etc. By the time I have finished with that I have already lost half the motivation that made me want to start work on the little project. There must be a better way. And there is - generate it all from a template! In JS-land I used "),ca=t("a"),Dc=r("plop"),Rc=r(", but since I started developing with Python projects I use "),ia=t("a"),Hc=r("cookiecutter"),Mc=r(". Of course that means starting a new project and going through all the tedious steps "),Qn=t("em"),Oc=r("again"),Lc=r(", but it\u2019s the last time!"),rp=k(),U=t("h2"),z=t("a"),Xn=t("span"),Nc=r("Tl;DR: here\u2019s the template"),cp=k(),qe=t("p"),qc=r("If you want to use the template, just run"),ip=k(),ka=t("pre"),kp=k(),V=t("h2"),G=t("a"),Zn=t("span"),Fc=r("The plan"),up=k(),Fe=t("p"),Bc=r("This is how I\u2019m planning to tackle this:"),fp=k(),S=t("ol"),st=t("li"),Uc=r("Create a small project specimen (A) manually and make sure it all works"),zc=k(),at=t("li"),Vc=r("Duplicate it and transform the duplicate (B) into a cookiecutter template"),Gc=k(),et=t("li"),Yc=r("Push to github, and use cookiecutter to generate a project (C) with it"),dp=k(),Y=t("h2"),W=t("a"),nt=t("span"),Wc=r("Step 0: Prerequisites"),hp=k(),w=t("p"),Kc=r("For this python and pyenv are needed (I have a post on "),Be=t("a"),Jc=r("how I installed them on OS X"),Qc=r("), plus "),ua=t("a"),Xc=r("poetry"),Zc=r(" and of course "),fa=t("a"),si=r("cookiecutter"),ai=r(". On a mac one could install most of them with homebrew."),mp=k(),K=t("h2"),J=t("a"),tt=t("span"),ei=r("Step 1: Create a project specimen"),yp=k(),Q=t("h3"),X=t("a"),ot=t("span"),ni=r("Specimen setup: poetry"),vp=k(),Z=t("p"),ti=r("Since this is a python project, I will do the usual and set it up with poetry. I already have "),Ue=t("a"),oi=r("python and pyenv installed"),pi=r(", so it\u2019s just a matter of making sure the expected version is there"),bp=k(),da=t("pre"),_p=k(),ze=t("p"),li=r("I use poetry for controlling dependencies. It\u2019s good at managing versions and it keeps most of the config in one centralised place. Here I generate a minimal config file, pyproject.toml. There is no point in fine tuning it since it will be parametrised later."),wp=k(),ha=t("pre"),Ep=k(),ss=t("h3"),as=t("a"),pt=t("span"),ri=r("Specimen setup: git"),gp=k(),C=t("p"),ci=r("I better set up git now, so that I can commit code as I create it. I\u2019m not actually going to push this repo to github, this is just a local repo for safety. I download a .gitignore from TopTal, and add the project to git. I name my main branch \u2018trunk\u2019, like in the old SVN days. I find it more meaningful than either the fashionable "),lt=t("code"),ii=r("main"),ki=r(" or unfashionable "),rt=t("code"),ui=r("master"),fi=r(". I also add a user name and email for each project, since they may be for different orgs."),Ip=k(),ma=t("pre"),Pp=k(),es=t("h3"),ns=t("a"),ct=t("span"),di=r("Specimen setup: initial folder structure"),xp=k(),E=t("p"),hi=r("Then I create the skeleton folder structure. The "),it=t("code"),mi=r("__init__.py"),yi=r(" inside "),kt=t("code"),vi=r("src/specimen"),bi=r(" has a version number in it, and the "),ut=t("code"),_i=r("__init__.py"),wi=r(" in tests is only there to make the tests folder a package."),$p=k(),ya=t("pre"),Tp=k(),ts=t("h3"),os=t("a"),ft=t("span"),Ei=r("Specimen setup: wire up VSCode to the poetry python environment"),jp=k(),A=t("p"),gi=r("Before going further I will make sure VSCode knows about the environment and where the packages are. First of all, make sure the python executable from the virtual env is the one being used. The virtual env is created by poetry whenever one runs any install or add command, if it doesn\u2019t yet exist. Or one can create it explicitly with "),dt=t("code"),Ii=r("poetry shell"),Pi=r(" (if the env already exists it will just say where it is). I\u2019ll do that here, just to be on the safe side. "),ht=t("code"),xi=r("poetry env info"),$i=r(" then gives some information about the shell"),Sp=k(),va=t("pre"),Cp=k(),g=t("p"),Ti=r("I want to be able to extract the name of the python executable from that info. I could do that with "),mt=t("code"),ji=r("poetry env info --path"),Si=r(" which is just the path to the shell, and then feed it into "),yt=t("code"),Ci=r('"$(poetry env info --path)/bin/python3.10"'),Ai=r(" but that means I would need to hard code the "),vt=t("code"),Di=r("python3.10"),Ri=r(" part. For a more solid solution, I turn to trusty awk"),Ap=k(),ba=t("pre"),Dp=k(),Ve=t("p"),Hi=r("The awk command breaks down as"),Rp=k(),f=t("dl"),bt=t("dt"),Mi=r("poetry env info"),_t=t("dd"),Oi=r("run that command, which prints a whole load of text"),wt=t("dt"),Li=r("|"),Et=t("dd"),Ni=r("pass that text on to the next command"),gt=t("dt"),qi=r("awk"),It=t("dd"),Fi=r("...which is awk. awk processes text one line at the time, as it passes through it, and splits it into columns"),Pt=t("dt"),Bi=r("'"),xt=t("dd"),Ui=r("everything from now until the next ' is an awk program"),$t=t("dt"),zi=r("/Executable/ {"),Tt=t("dd"),Vi=r("if the current line contains 'Executable', do all those things until the next }"),jt=t("dt"),Gi=r("print $2;"),T=t("dd"),Yi=r("awk will split "),St=t("code"),Wi=r("Python:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03.10.6"),Ki=r(" etc into two fields; "),Ct=t("code"),Ji=r("Python"),Qi=r(" and "),At=t("code"),Xi=r("3.10.6"),Zi=r(". I want the second one, i.e. $2"),Dt=t("dt"),sk=r("exit"),_a=t("dd"),ak=r("if one looks at the output of "),Rt=t("code"),ek=r("poetry env info"),nk=r(', there are actually two lines with "Executable" in it. Luckily I want the first one, so I can simply stop after it is found'),Ht=t("dt"),tk=r("}"),Mt=t("dd"),ok=r('stop telling awk what to do if the line has "Executable" in it'),Ot=t("dt"),pk=r("'"),Lt=t("dd"),lk=r("stop telling awk what to do and do it"),Hp=k(),D=t("p"),rk=r("But what do I do with that path? The manual way is to add it to VSCode with the command "),Nt=t("code"),ck=r("CMD+SHIFT+P"),ik=r(" to open the command palette, and selecting "),qt=t("code"),kk=r("Python: select interpreter"),uk=r(". In the textbox I can then enter that path. To do it without a manual step, I add it to VSCode workspace settings file. Note that I am using vim because VSCode doesn\u2019t let me treat settings.json as a normal file"),Mp=k(),wa=t("pre"),Op=k(),Ge=t("p"),fk=r("And this is the content of the settings.json file. It points to an .env file, which I will have to create. It\u2019s pretty convoluted if you ask me. But that\u2019s how it is."),Lp=k(),Ye=t("p"),Ft=t("em"),dk=r("(Project idea: a VSCode plugin which automatically sets this up for you)"),Np=k(),Ea=t("pre"),qp=k(),We=t("p"),hk=r("and the .env file. NOTE: this will be ignored by most standard .gitignores, IDEs and possibly CI/CD pipelines. Bear that in mind when creating the cookiecutter template"),Fp=k(),ga=t("pre"),Bp=k(),I=t("p"),mk=r("Now I can finally open a file in the tests folder, type "),Bt=t("code"),yk=r("from specimen import"),vk=r(" and VSCode will autocomplete. If that doesn\u2019t work by default, it could be that VSCode has already picked a Python interpreter. Which means, it will ignore all the settings just created. If I then do "),Ut=t("code"),bk=r("CMD+SHIT+P"),_k=r(" and do "),zt=t("code"),wk=r("select python interpreter"),Ek=r(", there should be the option to use the settings file I have just created."),Up=k(),ps=t("h3"),ls=t("a"),Vt=t("span"),gk=r("Specimen setup: tests"),zp=k(),Ke=t("p"),Ik=r("I write the first, trivial test"),Vp=k(),Ia=t("pre"),Gp=k(),Je=t("p"),Pk=r("Although Python does come with a test runner, pytest is by far the most popular runner. Lets\u2019 add it and run it"),Yp=k(),Pa=t("pre"),Wp=k(),Qe=t("p"),xk=r("So far so good. Let\u2019s add coverage"),Kp=k(),xa=t("pre"),Jp=k(),rs=t("p"),$k=r("Coverage settings can be added to the "),Gt=t("code"),Tk=r("pyproject.toml"),jk=r(" file."),Qp=k(),$a=t("pre"),Xp=k(),cs=t("p"),Sk=r("I\u2019ll run the test again. Notice the "),Yt=t("code"),Ck=r("--cov"),Ak=r(" flag to include test coverage"),Zp=k(),Ta=t("pre"),sl=k(),Xe=t("p"),Dk=r("The test fails fast because I didn\u2019t import the code at all. Fair enough. I will import the version number from the code, and test it is in the right format. I didn\u2019t hard code the version because this would mean changing, or getting rid of, the test every time the version goes up. Instead, I test that the version number validates. With a rather simple validation, but there is no benefit in getting more complicated."),al=k(),ja=t("pre"),el=k(),R=t("p"),Rk=r("When I run the test, it breaks again. Poetry doesn\u2019t know how to make the test find the package "),Wt=t("code"),Hk=r("specimen"),Mk=r(" from which to load "),Kt=t("code"),Ok=r("__version__"),Lk=r(". One would think it\u2019d be able to work it out by itself\u2026 nope."),nl=k(),Sa=t("pre"),tl=k(),Ca=t("p"),Nk=r("The solution is to add this setting to the "),Jt=t("code"),qk=r("pyproject.toml"),ol=k(),Aa=t("pre"),pl=k(),Ze=t("p"),Fk=r("Now it runs"),ll=k(),Da=t("pre"),rl=k(),is=t("h4"),ks=t("a"),Qt=t("span"),Bk=r("Adding a Faker fixture to the template"),cl=k(),sn=t("p"),Uk=r("I don\u2019t always use mocks or patch in my tests, but I pretty much always need Faker. So I create a fixture for it"),il=k(),Ra=t("pre"),kl=k(),us=t("h3"),fs=t("a"),Xt=t("span"),zk=r("Specimen setup: Makefile"),ul=k(),ds=t("p"),Vk=r("I use Makefiles for running my Python projects. I have a standard one I cannibalise when setting up a new project (see "),Ha=t("a"),Gk=r("gist"),Yk=r("). From that gist I extract this"),fl=k(),Ma=t("pre"),dl=k(),an=t("p"),Wk=r("It has a command to show nicely formatted help, courtesy of awk"),hl=k(),Oa=t("pre"),ml=k(),en=t("p"),Kk=r("And, of course, it runs the tests"),yl=k(),La=t("pre"),vl=k(),hs=t("h3"),ms=t("a"),Zt=t("span"),Jk=r("Specimen setup: formatting with black and isort"),bl=k(),H=t("p"),Qk=r("And now the tantalising task of adding all the code quality tools. I still find the JS ecosystem much slicker than Python\u2019s. Python is still struggling with the concept of allowing static analysis tools fix the code. But now let\u2019s install the two python tools that "),so=t("em"),Xk=r("do"),Zk=r(" get it right - Black and isort. I know that "),Na=t("a"),su=r("isort can be controversial"),au=r(", but to be honest it\u2019s always served me right."),_l=k(),nn=t("p"),eu=r("First of all, I create commands in the Makefile."),wl=k(),qa=t("pre"),El=k(),tn=t("p"),nu=r("The help rule shows what they all do"),gl=k(),Fa=t("pre"),Il=k(),m=t("p"),ao=t("code"),tu=r("make format"),ou=r(" is meant for local development, before committing (a git pre-commit hook could also be useful). "),eo=t("code"),pu=r("make lint-black"),lu=r(" instead is meant as a code quality tool. Note that it is run with "),no=t("code"),ru=r("black --check"),cu=r(", so it doesn\u2019t rewrite code. "),to=t("code"),iu=r("make lint"),ku=r(" runs black and all the code quality tools I will add later. "),oo=t("code"),uu=r("make qa-local"),fu=r(" is also meant for local development, as a check before pushing. Whereas "),po=t("code"),du=r("make qa"),hu=r(" is for CI/CD. Now I have to actually install\u2026"),Pl=k(),Ba=t("pre"),xl=k(),on=t("p"),mu=r("\u2026configure\u2026"),$l=k(),Ua=t("pre"),Tl=k(),pn=t("p"),yu=r("\u2026and test those tools"),jl=k(),za=t("pre"),Sl=k(),ys=t("h3"),vs=t("a"),lo=t("span"),vu=r("Specimen setup: add flake8 and plugins"),Cl=k(),M=t("p"),bu=r("This is one of the main reasons why I need a template for my python projects. Who\u2019s got the time to remember and configure all of these every time? Anyway. I use "),Va=t("a"),_u=r("flakeheaven"),wu=r(" to configure flake8 and its plugins from within the pyproject.toml file. It has the issue that "),Ga=t("a"),Eu=r("it doesn\u2019t support flake8 5"),gu=r(", but then again neither do a lot of plugins, so\u2026 sticking to flake8 4 is fine for now."),Al=k(),Ya=t("pre"),Dl=k(),P=t("p"),Iu=r("Then, in pyproject.toml\u2026 Note that in the \u2018tool.flakeheaven.plugins\u2019 section, I list three plugins: mccabe, pycodestyle, and pyflake. This is actually what flake8: a wrapper around those three plugins. Plus a list of optional plugins one may want to add. "),ro=t("code"),Pu=r('["+*"]'),xu=r(" is the notation for \u2018enable this plugin in its entirety\u2019 ("),co=t("code"),$u=r("+"),Tu=r(" means enable, and "),io=t("code"),ju=r("*"),Su=r(" is a wildcard, i.e. \u2018anything\u2019)"),Rl=k(),Wa=t("pre"),Hl=k(),ln=t("p"),Cu=r("And in the Makefile"),Ml=k(),Ka=t("pre"),Ol=k(),rn=t("p"),Au=r("Finally, the optional plugins and their configuration"),Ll=k(),bs=t("h4"),_s=t("a"),ko=t("span"),Du=r("flake8-bandit"),Nl=k(),cn=t("p"),Ru=r("Provides automated security testing. I need to force version 3.0, as the latest version requires flake8 5"),ql=k(),Ja=t("pre"),Fl=k(),x=t("p"),Hu=r("Here I allow everything "),uo=t("em"),Mu=r("except"),Ou=r(" rule 322, which is not relevant for python 3. Also note that there is an extra setting: "),fo=t("code"),Lu=r('[tool.flakeheaven.exceptions."tests/"]'),Nu=r(" which only applies to the tests/ folder. In this folder, I want to allow assert statement. In the src folder they shouldn\u2019t be - that\u2019s because asserts are stripped by the compiler when python run with the "),ho=t("code"),qu=r("-O"),Fu=r(" option (O stand for optimizer)"),Bl=k(),Qa=t("pre"),Ul=k(),ws=t("h4"),Es=t("a"),mo=t("span"),Bu=r("flake8-bugbear"),zl=k(),kn=t("p"),Uu=r("Adds more checks to the standard flake8 plugins"),Vl=k(),Xa=t("pre"),Gl=k(),un=t("p"),zu=r("I disable B950, the line length one. Bugbear does with a 10% tolerance, I prefer the standard hard limit."),Yl=k(),Za=t("pre"),Wl=k(),gs=t("h4"),Is=t("a"),yo=t("span"),Vu=r("darglint and flake8-docstrings"),Kl=k(),F=t("p"),vo=t("strong"),Gu=r("Darglint"),Yu=r(" checks whether a docstring\u2019s description matches the actual function/method implementation. "),bo=t("strong"),Wu=r("flake8-docstrings"),Ku=r(" checks compliance with Python docstring conventions (most of PEP 257)"),Jl=k(),se=t("pre"),Ql=k(),ae=t("pre"),Xl=k(),Ps=t("h4"),xs=t("a"),_o=t("span"),Ju=r("\u2026and many more"),Zl=k(),h=t("ul"),fn=t("li"),wo=t("strong"),Qu=r("flake8-builtins"),Xu=r(" checks for python builtins being used as variables or parameters"),Zu=k(),dn=t("li"),Eo=t("strong"),sf=r("flake8-comprehension"),af=r(" helps write better list/set/dict comprehension"),ef=k(),hn=t("li"),go=t("strong"),nf=r("flake8-isort"),tf=r(" ensures I have run isort on the code before committing"),of=k(),$s=t("li"),Io=t("strong"),pf=r("flake8-mutable"),lf=r(" prevents issues when passing mutable default values to a function (for example, "),Po=t("code"),rf=r("def fnc(a, b={}):"),cf=r(")"),kf=k(),mn=t("li"),xo=t("strong"),uf=r("flake8-pytest-style"),ff=r(" checks common style issues or inconsistencies with pytest-based tests"),df=k(),yn=t("li"),$o=t("strong"),hf=r("flake8-simplify"),mf=r(" gives hints for simplification"),yf=k(),vn=t("li"),To=t("strong"),vf=r("pep8-naming"),bf=r(" enforces basic capitalisation practices, as per PEP 8"),sr=k(),ee=t("pre"),ar=k(),ne=t("pre"),er=k(),Ts=t("h3"),js=t("a"),jo=t("span"),_f=r("Specimen setup: safety"),nr=k(),bn=t("p"),wf=r("Safety checks third party packages against a database of known compromised ones."),tr=k(),te=t("pre"),or=k(),_n=t("p"),Ef=r("I run it from the Makefile. It could also be useful in a git hook"),pr=k(),oe=t("pre"),lr=k(),pe=t("pre"),rr=k(),Ss=t("h3"),Cs=t("a"),So=t("span"),gf=r("Specimen setup: mypy"),cr=k(),wn=t("p"),If=r("The last code quality tool: mypy, to check for type annotations."),ir=k(),le=t("pre"),kr=k(),En=t("p"),Pf=r("and the pyproject.toml changes"),ur=k(),re=t("pre"),fr=k(),gn=t("p"),xf=r("Add to the Makefile"),dr=k(),ce=t("pre"),hr=k(),In=t("p"),$f=r("Check it works"),mr=k(),ie=t("pre"),yr=k(),As=t("h3"),Ds=t("a"),Co=t("span"),Tf=r("Specimen setup: README, LICENCE and static documents"),vr=k(),Pn=t("p"),jf=r("The last piece of the puzzle is various static documents."),br=k(),Rs=t("ul"),xn=t("li"),Sf=r("I adapted a README.md and a CHANGELOG.md from "),$n=t("a"),Cf=r("https://github.com/othneildrew/Best-README-Template/"),Af=k(),Ao=t("li"),Df=r("the LICENSE file is standard MIT"),_r=k(),Tn=t("p"),Rf=r("Finally, that\u2019s all I need. Of course I could keep adding and fine tuning stuff (and I probably will). But this is good enough to get started."),wr=k(),Hs=t("h2"),Ms=t("a"),Do=t("span"),Hf=r("Step 2: Creating the Cookiecutter template from the specimen project"),Er=k(),jn=t("p"),Mf=r("With that out of the way, I make a copy of the whole directory and start turning it into a minimal cookiecutter template. For starters, just an exact copy of the project, with only the folder name changed"),gr=k(),ke=t("pre"),Ir=k(),Sn=t("p"),Of=r("So that\u2019s it, it works. But that\u2019s not real a test, it\u2019s just sanity check. I can do better."),Pr=k(),Os=t("h3"),Ls=t("a"),Ro=t("span"),Lf=r("Testing a cookiecutter template with pytest-cookies"),xr=k(),O=t("p"),Nf=r("One thing I should do before attempting testing is to apply the same code quality tooling as in the template. I copy the Makefile, and cannibalise the bits of the pyproject.toml I need, then run "),Ho=t("code"),qf=r("poetry install"),Ff=r(". One can see the result "),ue=t("a"),Bf=r("in the template repo"),Uf=r(". Now on with the testing"),$r=k(),Ns=t("p"),zf=r("Cookiecutter templates can, and should, be tested with "),Mo=t("code"),Vf=r("pytest-cookies"),Gf=r("."),Tr=k(),fe=t("pre"),jr=k(),Cn=t("p"),Yf=r("The initial test is fairly simple, it merely checks the template is created"),Sr=k(),de=t("pre"),Cr=k(),qs=t("p"),Wf=r("The pytest_cookies package injects a "),Oo=t("code"),Kf=r("cookies"),Jf=r(" fixture in all of your tests. It\u2019s a wrapper around cookiecutter, that makes it run in a private directory. The run returns an instance of the Result class, which includes pretty much all of the properties in the example above. Here I check the general gist of it and one of the generated files."),Ar=k(),L=t("p"),Qf=r("Now it\u2019s simply a matter of going through each file and directory and seeing what can be parametrised and moved to "),Lo=t("code"),Xf=r("cookiecutter.json"),Zf=r(". For example, replace the content of "),No=t("code"),sd=r("/.python-version"),ad=r(" with"),Dr=k(),he=t("pre"),Rr=k(),me=t("p"),ed=r("and then add it to the "),qo=t("code"),nd=r("cookiecutter.json"),Hr=k(),ye=t("pre"),Mr=k(),An=t("p"),td=r("and so on."),Or=k(),Dn=t("p"),od=r("At the end of this step I\u2019m left with this directory tree"),Lr=k(),ve=t("pre"),Nr=k(),Fs=t("p"),pd=r("And a "),Fo=t("code"),ld=r("cookiecutter.json"),rd=r(" with"),qr=k(),be=t("pre"),Fr=k(),Rn=t("p"),cd=r("I\u2019m not going to test every single value of course. I will, however, expand the existing test to add a couple more values that should go in the same file. But I can get slightly fancier."),Br=k(),Bs=t("h3"),Us=t("a"),Bo=t("span"),id=r("Automatically run tests in a generated cookiecutter template"),Ur=k(),N=t("p"),kd=r("First, I can test the generated files to see none of them have "),Uo=t("code"),ud=r("{{cookiecutter.xxxx}}"),fd=r(" in them. That\u2019s pretty easy. The Result object gives me a Posix path of the root of the generated project. So I can just call its "),zo=t("em"),dd=r("glob"),hd=r(" method to get the whole folder tree below it."),zr=k(),_e=t("pre"),Vr=k(),zs=t("p"),md=r("Second, I can run the project\u2019s own tests after it\u2019s generated. It doesn\u2019t get safer than that! Again, thanks to the magic of "),Vo=t("em"),yd=r("pytest-cookies"),vd=r(" which generates the project in a sandboxed folder and then provides a Posix object of its location."),Gr=k(),we=t("pre"),Yr=k(),Hn=t("p"),bd=r("Almost there. Now I need to take care of the dynamically generated values."),Wr=k(),Vs=t("h3"),Gs=t("a"),Go=t("span"),_d=r("Using post generation hooks in Cookiecutter templates"),Kr=k(),Ys=t("p"),wd=r("First the easy one. The "),Yo=t("code"),Ed=r(".env"),gd=r(" file need to include the path of the directory of the newly created project. I write a test for that"),Jr=k(),Ee=t("pre"),Qr=k(),Mn=t("p"),Id=r("Luckily, the cwd is made available in cookiecutter as \u201D_output_dir\u201D. So the .env file in the template simply becomes"),Xr=k(),ge=t("pre"),Zr=k(),Ws=t("p"),Pd=r("Now the python executable path. This is tricky. It can only be run once the project is generated and "),Wo=t("code"),xd=r("poetry install"),$d=r(" has run. But then the cookiecutter variables will no longer be available. So I have to come up with my own replacement engine. Not too happy about that, but what the heck. It\u2019s only a small string fragment"),sc=k(),Ks=t("p"),Td=r("First I set up the json template. "),Ko=t("code"),jd=r("<interpreter_path>"),Sd=r(" will be the variable I need to replace."),ac=k(),Ie=t("pre"),ec=k(),y=t("p"),Cd=r("And then the cookiecutter hook that installs the poetry dependencies, updates the settings file, and creates the first git commit. Cookiecutter offers two hooks: "),Jo=t("code"),Ad=r("pre_gen_project.sh"),Dd=r(" and "),Qo=t("code"),Rd=r("post_gen_project.sh"),Hd=r(". Both live in the hooks directory and can be either python or shell scripts. "),Xo=t("i"),Md=r("pre_gen_project"),Od=r(" runs before generating the project. It is mostly used for validation. Since it cannot change the values loaded from "),Zo=t("code"),Ld=r("cookiecutter.json"),Nd=r(" its usefulness is limited. "),sp=t("i"),qd=r("post_gen_project"),Fd=r(" runs after the build."),nc=k(),q=t("p"),Bd=r("I will use the "),ap=t("em"),Ud=r("awk"),zd=r(" command from early on to determine the location of the python executable. This will be then fed into a "),ep=t("em"),Vd=r("sed"),Gd=r(" command, which will replace the string in the json file. Sed and awk are similar CLI programs, they both are stream based. Meaning that you feed text into them, and they spit text out at the other end. One can manipulate text before it\u2019s spat out. But there is only one pass. Awk assumes the input text is spreadsheet-like, and tries to split it into columns. Then it gives access to the individual columns. Sed simply treats lines of text as lines, and allows to overwrite them before spitting them out again."),tc=k(),Pe=t("pre"),oc=k(),Js=t("h2"),Qs=t("a"),np=t("span"),Yd=r("Step 3: push to github and test"),pc=k(),On=t("p"),Wd=r("The final test is to push the template to github and try to fetch it from there"),lc=k(),xe=t("pre"),rc=k(),Ln=t("p"),Kd=r("And that\u2019s finally it. A basic Python project template. It\u2019s very bare - it has neither CLI framework nor DS tools nor a web server. Just the code quality tools and VSCode. But it\u2019s a starting point, and I\u2019ll be adding to it. Hope you find it useful."),cc=k(),Xs=t("h2"),Zs=t("a"),tp=t("span"),Jd=r("Acknowledgements"),ic=k(),sa=t("p"),Qd=r("Half way through writing this post I came across a very similar one from PythonCheatSheet: "),$e=t("a"),Xd=r("https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),Zd=r(". I carried on with mine, regardless."),kc=k(),Te=t("p"),sh=r("The awk command comes from SO, of course "),je=t("a"),ah=r("https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),uc=k(),Se=t("p"),eh=r("Discussion on how to fetch the executable path on the CLI for poetry env command "),Ce=t("a"),nh=r("https://github.com/python-poetry/poetry/pull/731"),fc=k(),Ae=t("p"),th=r("More info on how the VSCode settings work "),De=t("a"),oh=r("https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),dc=k(),Re=t("p"),ph=r("Pytest coverage and code layout "),He=t("a"),lh=r("https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),hc=k(),Me=t("p"),rh=r(`The article that showed me about Flakeheaven
`),Oe=t("a"),ch=r("https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),mc=k(),Le=t("p"),ih=r("A README file template "),Ne=t("a"),kh=r("https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),this.h()},l(s){j=o(s,"H2",{id:!0});var n=p(j);B=o(n,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sm=p(B);Jn=o(sm,"SPAN",{class:!0}),p(Jn).forEach(a),sm.forEach(a),Cc=c(n,"Creating a python project from scratch? How boring"),n.forEach(a),lp=u(s),_=o(s,"P",{});var aa=p(_);Ac=c(aa,"Starting work on a new project involves a lot of repetitive steps: setting up a virtual env, code quality tools, packages, etc etc. By the time I have finished with that I have already lost half the motivation that made me want to start work on the little project. There must be a better way. And there is - generate it all from a template! In JS-land I used "),ca=o(aa,"A",{href:!0,rel:!0});var am=p(ca);Dc=c(am,"plop"),am.forEach(a),Rc=c(aa,", but since I started developing with Python projects I use "),ia=o(aa,"A",{href:!0,rel:!0});var em=p(ia);Hc=c(em,"cookiecutter"),em.forEach(a),Mc=c(aa,". Of course that means starting a new project and going through all the tedious steps "),Qn=o(aa,"EM",{});var nm=p(Qn);Oc=c(nm,"again"),nm.forEach(a),Lc=c(aa,", but it\u2019s the last time!"),aa.forEach(a),rp=u(s),U=o(s,"H2",{id:!0});var uh=p(U);z=o(uh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var tm=p(z);Xn=o(tm,"SPAN",{class:!0}),p(Xn).forEach(a),tm.forEach(a),Nc=c(uh,"Tl;DR: here\u2019s the template"),uh.forEach(a),cp=u(s),qe=o(s,"P",{});var om=p(qe);qc=c(om,"If you want to use the template, just run"),om.forEach(a),ip=u(s),ka=o(s,"PRE",{class:!0});var E_=p(ka);E_.forEach(a),kp=u(s),V=o(s,"H2",{id:!0});var fh=p(V);G=o(fh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pm=p(G);Zn=o(pm,"SPAN",{class:!0}),p(Zn).forEach(a),pm.forEach(a),Fc=c(fh,"The plan"),fh.forEach(a),up=u(s),Fe=o(s,"P",{});var lm=p(Fe);Bc=c(lm,"This is how I\u2019m planning to tackle this:"),lm.forEach(a),fp=u(s),S=o(s,"OL",{});var Nn=p(S);st=o(Nn,"LI",{});var rm=p(st);Uc=c(rm,"Create a small project specimen (A) manually and make sure it all works"),rm.forEach(a),zc=u(Nn),at=o(Nn,"LI",{});var cm=p(at);Vc=c(cm,"Duplicate it and transform the duplicate (B) into a cookiecutter template"),cm.forEach(a),Gc=u(Nn),et=o(Nn,"LI",{});var im=p(et);Yc=c(im,"Push to github, and use cookiecutter to generate a project (C) with it"),im.forEach(a),Nn.forEach(a),dp=u(s),Y=o(s,"H2",{id:!0});var dh=p(Y);W=o(dh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var km=p(W);nt=o(km,"SPAN",{class:!0}),p(nt).forEach(a),km.forEach(a),Wc=c(dh,"Step 0: Prerequisites"),dh.forEach(a),hp=u(s),w=o(s,"P",{});var ea=p(w);Kc=c(ea,"For this python and pyenv are needed (I have a post on "),Be=o(ea,"A",{href:!0});var um=p(Be);Jc=c(um,"how I installed them on OS X"),um.forEach(a),Qc=c(ea,"), plus "),ua=o(ea,"A",{href:!0,rel:!0});var fm=p(ua);Xc=c(fm,"poetry"),fm.forEach(a),Zc=c(ea," and of course "),fa=o(ea,"A",{href:!0,rel:!0});var dm=p(fa);si=c(dm,"cookiecutter"),dm.forEach(a),ai=c(ea,". On a mac one could install most of them with homebrew."),ea.forEach(a),mp=u(s),K=o(s,"H2",{id:!0});var hh=p(K);J=o(hh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hm=p(J);tt=o(hm,"SPAN",{class:!0}),p(tt).forEach(a),hm.forEach(a),ei=c(hh,"Step 1: Create a project specimen"),hh.forEach(a),yp=u(s),Q=o(s,"H3",{id:!0});var mh=p(Q);X=o(mh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mm=p(X);ot=o(mm,"SPAN",{class:!0}),p(ot).forEach(a),mm.forEach(a),ni=c(mh,"Specimen setup: poetry"),mh.forEach(a),vp=u(s),Z=o(s,"P",{});var yc=p(Z);ti=c(yc,"Since this is a python project, I will do the usual and set it up with poetry. I already have "),Ue=o(yc,"A",{href:!0});var ym=p(Ue);oi=c(ym,"python and pyenv installed"),ym.forEach(a),pi=c(yc,", so it\u2019s just a matter of making sure the expected version is there"),yc.forEach(a),bp=u(s),da=o(s,"PRE",{class:!0});var g_=p(da);g_.forEach(a),_p=u(s),ze=o(s,"P",{});var vm=p(ze);li=c(vm,"I use poetry for controlling dependencies. It\u2019s good at managing versions and it keeps most of the config in one centralised place. Here I generate a minimal config file, pyproject.toml. There is no point in fine tuning it since it will be parametrised later."),vm.forEach(a),wp=u(s),ha=o(s,"PRE",{class:!0});var I_=p(ha);I_.forEach(a),Ep=u(s),ss=o(s,"H3",{id:!0});var yh=p(ss);as=o(yh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bm=p(as);pt=o(bm,"SPAN",{class:!0}),p(pt).forEach(a),bm.forEach(a),ri=c(yh,"Specimen setup: git"),yh.forEach(a),gp=u(s),C=o(s,"P",{});var qn=p(C);ci=c(qn,"I better set up git now, so that I can commit code as I create it. I\u2019m not actually going to push this repo to github, this is just a local repo for safety. I download a .gitignore from TopTal, and add the project to git. I name my main branch \u2018trunk\u2019, like in the old SVN days. I find it more meaningful than either the fashionable "),lt=o(qn,"CODE",{});var _m=p(lt);ii=c(_m,"main"),_m.forEach(a),ki=c(qn," or unfashionable "),rt=o(qn,"CODE",{});var wm=p(rt);ui=c(wm,"master"),wm.forEach(a),fi=c(qn,". I also add a user name and email for each project, since they may be for different orgs."),qn.forEach(a),Ip=u(s),ma=o(s,"PRE",{class:!0});var P_=p(ma);P_.forEach(a),Pp=u(s),es=o(s,"H3",{id:!0});var vh=p(es);ns=o(vh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Em=p(ns);ct=o(Em,"SPAN",{class:!0}),p(ct).forEach(a),Em.forEach(a),di=c(vh,"Specimen setup: initial folder structure"),vh.forEach(a),xp=u(s),E=o(s,"P",{});var na=p(E);hi=c(na,"Then I create the skeleton folder structure. The "),it=o(na,"CODE",{});var gm=p(it);mi=c(gm,"__init__.py"),gm.forEach(a),yi=c(na," inside "),kt=o(na,"CODE",{});var Im=p(kt);vi=c(Im,"src/specimen"),Im.forEach(a),bi=c(na," has a version number in it, and the "),ut=o(na,"CODE",{});var Pm=p(ut);_i=c(Pm,"__init__.py"),Pm.forEach(a),wi=c(na," in tests is only there to make the tests folder a package."),na.forEach(a),$p=u(s),ya=o(s,"PRE",{class:!0});var x_=p(ya);x_.forEach(a),Tp=u(s),ts=o(s,"H3",{id:!0});var bh=p(ts);os=o(bh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xm=p(os);ft=o(xm,"SPAN",{class:!0}),p(ft).forEach(a),xm.forEach(a),Ei=c(bh,"Specimen setup: wire up VSCode to the poetry python environment"),bh.forEach(a),jp=u(s),A=o(s,"P",{});var Fn=p(A);gi=c(Fn,"Before going further I will make sure VSCode knows about the environment and where the packages are. First of all, make sure the python executable from the virtual env is the one being used. The virtual env is created by poetry whenever one runs any install or add command, if it doesn\u2019t yet exist. Or one can create it explicitly with "),dt=o(Fn,"CODE",{});var $m=p(dt);Ii=c($m,"poetry shell"),$m.forEach(a),Pi=c(Fn," (if the env already exists it will just say where it is). I\u2019ll do that here, just to be on the safe side. "),ht=o(Fn,"CODE",{});var Tm=p(ht);xi=c(Tm,"poetry env info"),Tm.forEach(a),$i=c(Fn," then gives some information about the shell"),Fn.forEach(a),Sp=u(s),va=o(s,"PRE",{class:!0});var $_=p(va);$_.forEach(a),Cp=u(s),g=o(s,"P",{});var ta=p(g);Ti=c(ta,"I want to be able to extract the name of the python executable from that info. I could do that with "),mt=o(ta,"CODE",{});var jm=p(mt);ji=c(jm,"poetry env info --path"),jm.forEach(a),Si=c(ta," which is just the path to the shell, and then feed it into "),yt=o(ta,"CODE",{});var Sm=p(yt);Ci=c(Sm,'"$(poetry env info --path)/bin/python3.10"'),Sm.forEach(a),Ai=c(ta," but that means I would need to hard code the "),vt=o(ta,"CODE",{});var Cm=p(vt);Di=c(Cm,"python3.10"),Cm.forEach(a),Ri=c(ta," part. For a more solid solution, I turn to trusty awk"),ta.forEach(a),Ap=u(s),ba=o(s,"PRE",{class:!0});var T_=p(ba);T_.forEach(a),Dp=u(s),Ve=o(s,"P",{});var Am=p(Ve);Hi=c(Am,"The awk command breaks down as"),Am.forEach(a),Rp=u(s),f=o(s,"DL",{class:!0});var d=p(f);bt=o(d,"DT",{});var Dm=p(bt);Mi=c(Dm,"poetry env info"),Dm.forEach(a),_t=o(d,"DD",{});var Rm=p(_t);Oi=c(Rm,"run that command, which prints a whole load of text"),Rm.forEach(a),wt=o(d,"DT",{});var Hm=p(wt);Li=c(Hm,"|"),Hm.forEach(a),Et=o(d,"DD",{});var Mm=p(Et);Ni=c(Mm,"pass that text on to the next command"),Mm.forEach(a),gt=o(d,"DT",{});var Om=p(gt);qi=c(Om,"awk"),Om.forEach(a),It=o(d,"DD",{});var Lm=p(It);Fi=c(Lm,"...which is awk. awk processes text one line at the time, as it passes through it, and splits it into columns"),Lm.forEach(a),Pt=o(d,"DT",{});var Nm=p(Pt);Bi=c(Nm,"'"),Nm.forEach(a),xt=o(d,"DD",{});var qm=p(xt);Ui=c(qm,"everything from now until the next ' is an awk program"),qm.forEach(a),$t=o(d,"DT",{});var Fm=p($t);zi=c(Fm,"/Executable/ {"),Fm.forEach(a),Tt=o(d,"DD",{});var Bm=p(Tt);Vi=c(Bm,"if the current line contains 'Executable', do all those things until the next }"),Bm.forEach(a),jt=o(d,"DT",{});var Um=p(jt);Gi=c(Um,"print $2;"),Um.forEach(a),T=o(d,"DD",{});var oa=p(T);Yi=c(oa,"awk will split "),St=o(oa,"CODE",{});var zm=p(St);Wi=c(zm,"Python:\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA03.10.6"),zm.forEach(a),Ki=c(oa," etc into two fields; "),Ct=o(oa,"CODE",{});var Vm=p(Ct);Ji=c(Vm,"Python"),Vm.forEach(a),Qi=c(oa," and "),At=o(oa,"CODE",{});var Gm=p(At);Xi=c(Gm,"3.10.6"),Gm.forEach(a),Zi=c(oa,". I want the second one, i.e. $2"),oa.forEach(a),Dt=o(d,"DT",{});var Ym=p(Dt);sk=c(Ym,"exit"),Ym.forEach(a),_a=o(d,"DD",{});var vc=p(_a);ak=c(vc,"if one looks at the output of "),Rt=o(vc,"CODE",{});var Wm=p(Rt);ek=c(Wm,"poetry env info"),Wm.forEach(a),nk=c(vc,', there are actually two lines with "Executable" in it. Luckily I want the first one, so I can simply stop after it is found'),vc.forEach(a),Ht=o(d,"DT",{});var Km=p(Ht);tk=c(Km,"}"),Km.forEach(a),Mt=o(d,"DD",{});var Jm=p(Mt);ok=c(Jm,'stop telling awk what to do if the line has "Executable" in it'),Jm.forEach(a),Ot=o(d,"DT",{});var Qm=p(Ot);pk=c(Qm,"'"),Qm.forEach(a),Lt=o(d,"DD",{});var Xm=p(Lt);lk=c(Xm,"stop telling awk what to do and do it"),Xm.forEach(a),d.forEach(a),Hp=u(s),D=o(s,"P",{});var Bn=p(D);rk=c(Bn,"But what do I do with that path? The manual way is to add it to VSCode with the command "),Nt=o(Bn,"CODE",{});var Zm=p(Nt);ck=c(Zm,"CMD+SHIFT+P"),Zm.forEach(a),ik=c(Bn," to open the command palette, and selecting "),qt=o(Bn,"CODE",{});var sy=p(qt);kk=c(sy,"Python: select interpreter"),sy.forEach(a),uk=c(Bn,". In the textbox I can then enter that path. To do it without a manual step, I add it to VSCode workspace settings file. Note that I am using vim because VSCode doesn\u2019t let me treat settings.json as a normal file"),Bn.forEach(a),Mp=u(s),wa=o(s,"PRE",{class:!0});var j_=p(wa);j_.forEach(a),Op=u(s),Ge=o(s,"P",{});var ay=p(Ge);fk=c(ay,"And this is the content of the settings.json file. It points to an .env file, which I will have to create. It\u2019s pretty convoluted if you ask me. But that\u2019s how it is."),ay.forEach(a),Lp=u(s),Ye=o(s,"P",{});var ey=p(Ye);Ft=o(ey,"EM",{});var ny=p(Ft);dk=c(ny,"(Project idea: a VSCode plugin which automatically sets this up for you)"),ny.forEach(a),ey.forEach(a),Np=u(s),Ea=o(s,"PRE",{class:!0});var S_=p(Ea);S_.forEach(a),qp=u(s),We=o(s,"P",{});var ty=p(We);hk=c(ty,"and the .env file. NOTE: this will be ignored by most standard .gitignores, IDEs and possibly CI/CD pipelines. Bear that in mind when creating the cookiecutter template"),ty.forEach(a),Fp=u(s),ga=o(s,"PRE",{class:!0});var C_=p(ga);C_.forEach(a),Bp=u(s),I=o(s,"P",{});var pa=p(I);mk=c(pa,"Now I can finally open a file in the tests folder, type "),Bt=o(pa,"CODE",{});var oy=p(Bt);yk=c(oy,"from specimen import"),oy.forEach(a),vk=c(pa," and VSCode will autocomplete. If that doesn\u2019t work by default, it could be that VSCode has already picked a Python interpreter. Which means, it will ignore all the settings just created. If I then do "),Ut=o(pa,"CODE",{});var py=p(Ut);bk=c(py,"CMD+SHIT+P"),py.forEach(a),_k=c(pa," and do "),zt=o(pa,"CODE",{});var ly=p(zt);wk=c(ly,"select python interpreter"),ly.forEach(a),Ek=c(pa,", there should be the option to use the settings file I have just created."),pa.forEach(a),Up=u(s),ps=o(s,"H3",{id:!0});var _h=p(ps);ls=o(_h,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ry=p(ls);Vt=o(ry,"SPAN",{class:!0}),p(Vt).forEach(a),ry.forEach(a),gk=c(_h,"Specimen setup: tests"),_h.forEach(a),zp=u(s),Ke=o(s,"P",{});var cy=p(Ke);Ik=c(cy,"I write the first, trivial test"),cy.forEach(a),Vp=u(s),Ia=o(s,"PRE",{class:!0});var A_=p(Ia);A_.forEach(a),Gp=u(s),Je=o(s,"P",{});var iy=p(Je);Pk=c(iy,"Although Python does come with a test runner, pytest is by far the most popular runner. Lets\u2019 add it and run it"),iy.forEach(a),Yp=u(s),Pa=o(s,"PRE",{class:!0});var D_=p(Pa);D_.forEach(a),Wp=u(s),Qe=o(s,"P",{});var ky=p(Qe);xk=c(ky,"So far so good. Let\u2019s add coverage"),ky.forEach(a),Kp=u(s),xa=o(s,"PRE",{class:!0});var R_=p(xa);R_.forEach(a),Jp=u(s),rs=o(s,"P",{});var bc=p(rs);$k=c(bc,"Coverage settings can be added to the "),Gt=o(bc,"CODE",{});var uy=p(Gt);Tk=c(uy,"pyproject.toml"),uy.forEach(a),jk=c(bc," file."),bc.forEach(a),Qp=u(s),$a=o(s,"PRE",{class:!0});var H_=p($a);H_.forEach(a),Xp=u(s),cs=o(s,"P",{});var _c=p(cs);Sk=c(_c,"I\u2019ll run the test again. Notice the "),Yt=o(_c,"CODE",{});var fy=p(Yt);Ck=c(fy,"--cov"),fy.forEach(a),Ak=c(_c," flag to include test coverage"),_c.forEach(a),Zp=u(s),Ta=o(s,"PRE",{class:!0});var M_=p(Ta);M_.forEach(a),sl=u(s),Xe=o(s,"P",{});var dy=p(Xe);Dk=c(dy,"The test fails fast because I didn\u2019t import the code at all. Fair enough. I will import the version number from the code, and test it is in the right format. I didn\u2019t hard code the version because this would mean changing, or getting rid of, the test every time the version goes up. Instead, I test that the version number validates. With a rather simple validation, but there is no benefit in getting more complicated."),dy.forEach(a),al=u(s),ja=o(s,"PRE",{class:!0});var O_=p(ja);O_.forEach(a),el=u(s),R=o(s,"P",{});var Un=p(R);Rk=c(Un,"When I run the test, it breaks again. Poetry doesn\u2019t know how to make the test find the package "),Wt=o(Un,"CODE",{});var hy=p(Wt);Hk=c(hy,"specimen"),hy.forEach(a),Mk=c(Un," from which to load "),Kt=o(Un,"CODE",{});var my=p(Kt);Ok=c(my,"__version__"),my.forEach(a),Lk=c(Un,". One would think it\u2019d be able to work it out by itself\u2026 nope."),Un.forEach(a),nl=u(s),Sa=o(s,"PRE",{class:!0});var L_=p(Sa);L_.forEach(a),tl=u(s),Ca=o(s,"P",{});var wh=p(Ca);Nk=c(wh,"The solution is to add this setting to the "),Jt=o(wh,"CODE",{});var yy=p(Jt);qk=c(yy,"pyproject.toml"),yy.forEach(a),wh.forEach(a),ol=u(s),Aa=o(s,"PRE",{class:!0});var N_=p(Aa);N_.forEach(a),pl=u(s),Ze=o(s,"P",{});var vy=p(Ze);Fk=c(vy,"Now it runs"),vy.forEach(a),ll=u(s),Da=o(s,"PRE",{class:!0});var q_=p(Da);q_.forEach(a),rl=u(s),is=o(s,"H4",{id:!0});var Eh=p(is);ks=o(Eh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var by=p(ks);Qt=o(by,"SPAN",{class:!0}),p(Qt).forEach(a),by.forEach(a),Bk=c(Eh,"Adding a Faker fixture to the template"),Eh.forEach(a),cl=u(s),sn=o(s,"P",{});var _y=p(sn);Uk=c(_y,"I don\u2019t always use mocks or patch in my tests, but I pretty much always need Faker. So I create a fixture for it"),_y.forEach(a),il=u(s),Ra=o(s,"PRE",{class:!0});var F_=p(Ra);F_.forEach(a),kl=u(s),us=o(s,"H3",{id:!0});var gh=p(us);fs=o(gh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wy=p(fs);Xt=o(wy,"SPAN",{class:!0}),p(Xt).forEach(a),wy.forEach(a),zk=c(gh,"Specimen setup: Makefile"),gh.forEach(a),ul=u(s),ds=o(s,"P",{});var wc=p(ds);Vk=c(wc,"I use Makefiles for running my Python projects. I have a standard one I cannibalise when setting up a new project (see "),Ha=o(wc,"A",{href:!0,rel:!0});var Ey=p(Ha);Gk=c(Ey,"gist"),Ey.forEach(a),Yk=c(wc,"). From that gist I extract this"),wc.forEach(a),fl=u(s),Ma=o(s,"PRE",{class:!0});var B_=p(Ma);B_.forEach(a),dl=u(s),an=o(s,"P",{});var gy=p(an);Wk=c(gy,"It has a command to show nicely formatted help, courtesy of awk"),gy.forEach(a),hl=u(s),Oa=o(s,"PRE",{class:!0});var U_=p(Oa);U_.forEach(a),ml=u(s),en=o(s,"P",{});var Iy=p(en);Kk=c(Iy,"And, of course, it runs the tests"),Iy.forEach(a),yl=u(s),La=o(s,"PRE",{class:!0});var z_=p(La);z_.forEach(a),vl=u(s),hs=o(s,"H3",{id:!0});var Ih=p(hs);ms=o(Ih,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Py=p(ms);Zt=o(Py,"SPAN",{class:!0}),p(Zt).forEach(a),Py.forEach(a),Jk=c(Ih,"Specimen setup: formatting with black and isort"),Ih.forEach(a),bl=u(s),H=o(s,"P",{});var zn=p(H);Qk=c(zn,"And now the tantalising task of adding all the code quality tools. I still find the JS ecosystem much slicker than Python\u2019s. Python is still struggling with the concept of allowing static analysis tools fix the code. But now let\u2019s install the two python tools that "),so=o(zn,"EM",{});var xy=p(so);Xk=c(xy,"do"),xy.forEach(a),Zk=c(zn," get it right - Black and isort. I know that "),Na=o(zn,"A",{href:!0,rel:!0});var $y=p(Na);su=c($y,"isort can be controversial"),$y.forEach(a),au=c(zn,", but to be honest it\u2019s always served me right."),zn.forEach(a),_l=u(s),nn=o(s,"P",{});var Ty=p(nn);eu=c(Ty,"First of all, I create commands in the Makefile."),Ty.forEach(a),wl=u(s),qa=o(s,"PRE",{class:!0});var V_=p(qa);V_.forEach(a),El=u(s),tn=o(s,"P",{});var jy=p(tn);nu=c(jy,"The help rule shows what they all do"),jy.forEach(a),gl=u(s),Fa=o(s,"PRE",{class:!0});var G_=p(Fa);G_.forEach(a),Il=u(s),m=o(s,"P",{});var b=p(m);ao=o(b,"CODE",{});var Sy=p(ao);tu=c(Sy,"make format"),Sy.forEach(a),ou=c(b," is meant for local development, before committing (a git pre-commit hook could also be useful). "),eo=o(b,"CODE",{});var Cy=p(eo);pu=c(Cy,"make lint-black"),Cy.forEach(a),lu=c(b," instead is meant as a code quality tool. Note that it is run with "),no=o(b,"CODE",{});var Ay=p(no);ru=c(Ay,"black --check"),Ay.forEach(a),cu=c(b,", so it doesn\u2019t rewrite code. "),to=o(b,"CODE",{});var Dy=p(to);iu=c(Dy,"make lint"),Dy.forEach(a),ku=c(b," runs black and all the code quality tools I will add later. "),oo=o(b,"CODE",{});var Ry=p(oo);uu=c(Ry,"make qa-local"),Ry.forEach(a),fu=c(b," is also meant for local development, as a check before pushing. Whereas "),po=o(b,"CODE",{});var Hy=p(po);du=c(Hy,"make qa"),Hy.forEach(a),hu=c(b," is for CI/CD. Now I have to actually install\u2026"),b.forEach(a),Pl=u(s),Ba=o(s,"PRE",{class:!0});var Y_=p(Ba);Y_.forEach(a),xl=u(s),on=o(s,"P",{});var My=p(on);mu=c(My,"\u2026configure\u2026"),My.forEach(a),$l=u(s),Ua=o(s,"PRE",{class:!0});var W_=p(Ua);W_.forEach(a),Tl=u(s),pn=o(s,"P",{});var Oy=p(pn);yu=c(Oy,"\u2026and test those tools"),Oy.forEach(a),jl=u(s),za=o(s,"PRE",{class:!0});var K_=p(za);K_.forEach(a),Sl=u(s),ys=o(s,"H3",{id:!0});var Ph=p(ys);vs=o(Ph,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ly=p(vs);lo=o(Ly,"SPAN",{class:!0}),p(lo).forEach(a),Ly.forEach(a),vu=c(Ph,"Specimen setup: add flake8 and plugins"),Ph.forEach(a),Cl=u(s),M=o(s,"P",{});var Vn=p(M);bu=c(Vn,"This is one of the main reasons why I need a template for my python projects. Who\u2019s got the time to remember and configure all of these every time? Anyway. I use "),Va=o(Vn,"A",{href:!0,rel:!0});var Ny=p(Va);_u=c(Ny,"flakeheaven"),Ny.forEach(a),wu=c(Vn," to configure flake8 and its plugins from within the pyproject.toml file. It has the issue that "),Ga=o(Vn,"A",{href:!0,rel:!0});var qy=p(Ga);Eu=c(qy,"it doesn\u2019t support flake8 5"),qy.forEach(a),gu=c(Vn,", but then again neither do a lot of plugins, so\u2026 sticking to flake8 4 is fine for now."),Vn.forEach(a),Al=u(s),Ya=o(s,"PRE",{class:!0});var J_=p(Ya);J_.forEach(a),Dl=u(s),P=o(s,"P",{});var la=p(P);Iu=c(la,"Then, in pyproject.toml\u2026 Note that in the \u2018tool.flakeheaven.plugins\u2019 section, I list three plugins: mccabe, pycodestyle, and pyflake. This is actually what flake8: a wrapper around those three plugins. Plus a list of optional plugins one may want to add. "),ro=o(la,"CODE",{});var Fy=p(ro);Pu=c(Fy,'["+*"]'),Fy.forEach(a),xu=c(la," is the notation for \u2018enable this plugin in its entirety\u2019 ("),co=o(la,"CODE",{});var By=p(co);$u=c(By,"+"),By.forEach(a),Tu=c(la," means enable, and "),io=o(la,"CODE",{});var Uy=p(io);ju=c(Uy,"*"),Uy.forEach(a),Su=c(la," is a wildcard, i.e. \u2018anything\u2019)"),la.forEach(a),Rl=u(s),Wa=o(s,"PRE",{class:!0});var Q_=p(Wa);Q_.forEach(a),Hl=u(s),ln=o(s,"P",{});var zy=p(ln);Cu=c(zy,"And in the Makefile"),zy.forEach(a),Ml=u(s),Ka=o(s,"PRE",{class:!0});var X_=p(Ka);X_.forEach(a),Ol=u(s),rn=o(s,"P",{});var Vy=p(rn);Au=c(Vy,"Finally, the optional plugins and their configuration"),Vy.forEach(a),Ll=u(s),bs=o(s,"H4",{id:!0});var xh=p(bs);_s=o(xh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gy=p(_s);ko=o(Gy,"SPAN",{class:!0}),p(ko).forEach(a),Gy.forEach(a),Du=c(xh,"flake8-bandit"),xh.forEach(a),Nl=u(s),cn=o(s,"P",{});var Yy=p(cn);Ru=c(Yy,"Provides automated security testing. I need to force version 3.0, as the latest version requires flake8 5"),Yy.forEach(a),ql=u(s),Ja=o(s,"PRE",{class:!0});var Z_=p(Ja);Z_.forEach(a),Fl=u(s),x=o(s,"P",{});var ra=p(x);Hu=c(ra,"Here I allow everything "),uo=o(ra,"EM",{});var Wy=p(uo);Mu=c(Wy,"except"),Wy.forEach(a),Ou=c(ra," rule 322, which is not relevant for python 3. Also note that there is an extra setting: "),fo=o(ra,"CODE",{});var Ky=p(fo);Lu=c(Ky,'[tool.flakeheaven.exceptions."tests/"]'),Ky.forEach(a),Nu=c(ra," which only applies to the tests/ folder. In this folder, I want to allow assert statement. In the src folder they shouldn\u2019t be - that\u2019s because asserts are stripped by the compiler when python run with the "),ho=o(ra,"CODE",{});var Jy=p(ho);qu=c(Jy,"-O"),Jy.forEach(a),Fu=c(ra," option (O stand for optimizer)"),ra.forEach(a),Bl=u(s),Qa=o(s,"PRE",{class:!0});var sw=p(Qa);sw.forEach(a),Ul=u(s),ws=o(s,"H4",{id:!0});var $h=p(ws);Es=o($h,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qy=p(Es);mo=o(Qy,"SPAN",{class:!0}),p(mo).forEach(a),Qy.forEach(a),Bu=c($h,"flake8-bugbear"),$h.forEach(a),zl=u(s),kn=o(s,"P",{});var Xy=p(kn);Uu=c(Xy,"Adds more checks to the standard flake8 plugins"),Xy.forEach(a),Vl=u(s),Xa=o(s,"PRE",{class:!0});var aw=p(Xa);aw.forEach(a),Gl=u(s),un=o(s,"P",{});var Zy=p(un);zu=c(Zy,"I disable B950, the line length one. Bugbear does with a 10% tolerance, I prefer the standard hard limit."),Zy.forEach(a),Yl=u(s),Za=o(s,"PRE",{class:!0});var ew=p(Za);ew.forEach(a),Wl=u(s),gs=o(s,"H4",{id:!0});var Th=p(gs);Is=o(Th,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sv=p(Is);yo=o(sv,"SPAN",{class:!0}),p(yo).forEach(a),sv.forEach(a),Vu=c(Th,"darglint and flake8-docstrings"),Th.forEach(a),Kl=u(s),F=o(s,"P",{});var op=p(F);vo=o(op,"STRONG",{});var av=p(vo);Gu=c(av,"Darglint"),av.forEach(a),Yu=c(op," checks whether a docstring\u2019s description matches the actual function/method implementation. "),bo=o(op,"STRONG",{});var ev=p(bo);Wu=c(ev,"flake8-docstrings"),ev.forEach(a),Ku=c(op," checks compliance with Python docstring conventions (most of PEP 257)"),op.forEach(a),Jl=u(s),se=o(s,"PRE",{class:!0});var nw=p(se);nw.forEach(a),Ql=u(s),ae=o(s,"PRE",{class:!0});var tw=p(ae);tw.forEach(a),Xl=u(s),Ps=o(s,"H4",{id:!0});var jh=p(Ps);xs=o(jh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nv=p(xs);_o=o(nv,"SPAN",{class:!0}),p(_o).forEach(a),nv.forEach(a),Ju=c(jh,"\u2026and many more"),jh.forEach(a),Zl=u(s),h=o(s,"UL",{});var v=p(h);fn=o(v,"LI",{});var Sh=p(fn);wo=o(Sh,"STRONG",{});var tv=p(wo);Qu=c(tv,"flake8-builtins"),tv.forEach(a),Xu=c(Sh," checks for python builtins being used as variables or parameters"),Sh.forEach(a),Zu=u(v),dn=o(v,"LI",{});var Ch=p(dn);Eo=o(Ch,"STRONG",{});var ov=p(Eo);sf=c(ov,"flake8-comprehension"),ov.forEach(a),af=c(Ch," helps write better list/set/dict comprehension"),Ch.forEach(a),ef=u(v),hn=o(v,"LI",{});var Ah=p(hn);go=o(Ah,"STRONG",{});var pv=p(go);nf=c(pv,"flake8-isort"),pv.forEach(a),tf=c(Ah," ensures I have run isort on the code before committing"),Ah.forEach(a),of=u(v),$s=o(v,"LI",{});var pp=p($s);Io=o(pp,"STRONG",{});var lv=p(Io);pf=c(lv,"flake8-mutable"),lv.forEach(a),lf=c(pp," prevents issues when passing mutable default values to a function (for example, "),Po=o(pp,"CODE",{});var rv=p(Po);rf=c(rv,"def fnc(a, b={}):"),rv.forEach(a),cf=c(pp,")"),pp.forEach(a),kf=u(v),mn=o(v,"LI",{});var Dh=p(mn);xo=o(Dh,"STRONG",{});var cv=p(xo);uf=c(cv,"flake8-pytest-style"),cv.forEach(a),ff=c(Dh," checks common style issues or inconsistencies with pytest-based tests"),Dh.forEach(a),df=u(v),yn=o(v,"LI",{});var Rh=p(yn);$o=o(Rh,"STRONG",{});var iv=p($o);hf=c(iv,"flake8-simplify"),iv.forEach(a),mf=c(Rh," gives hints for simplification"),Rh.forEach(a),yf=u(v),vn=o(v,"LI",{});var Hh=p(vn);To=o(Hh,"STRONG",{});var kv=p(To);vf=c(kv,"pep8-naming"),kv.forEach(a),bf=c(Hh," enforces basic capitalisation practices, as per PEP 8"),Hh.forEach(a),v.forEach(a),sr=u(s),ee=o(s,"PRE",{class:!0});var ow=p(ee);ow.forEach(a),ar=u(s),ne=o(s,"PRE",{class:!0});var pw=p(ne);pw.forEach(a),er=u(s),Ts=o(s,"H3",{id:!0});var Mh=p(Ts);js=o(Mh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var uv=p(js);jo=o(uv,"SPAN",{class:!0}),p(jo).forEach(a),uv.forEach(a),_f=c(Mh,"Specimen setup: safety"),Mh.forEach(a),nr=u(s),bn=o(s,"P",{});var fv=p(bn);wf=c(fv,"Safety checks third party packages against a database of known compromised ones."),fv.forEach(a),tr=u(s),te=o(s,"PRE",{class:!0});var lw=p(te);lw.forEach(a),or=u(s),_n=o(s,"P",{});var dv=p(_n);Ef=c(dv,"I run it from the Makefile. It could also be useful in a git hook"),dv.forEach(a),pr=u(s),oe=o(s,"PRE",{class:!0});var rw=p(oe);rw.forEach(a),lr=u(s),pe=o(s,"PRE",{class:!0});var cw=p(pe);cw.forEach(a),rr=u(s),Ss=o(s,"H3",{id:!0});var Oh=p(Ss);Cs=o(Oh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hv=p(Cs);So=o(hv,"SPAN",{class:!0}),p(So).forEach(a),hv.forEach(a),gf=c(Oh,"Specimen setup: mypy"),Oh.forEach(a),cr=u(s),wn=o(s,"P",{});var mv=p(wn);If=c(mv,"The last code quality tool: mypy, to check for type annotations."),mv.forEach(a),ir=u(s),le=o(s,"PRE",{class:!0});var iw=p(le);iw.forEach(a),kr=u(s),En=o(s,"P",{});var yv=p(En);Pf=c(yv,"and the pyproject.toml changes"),yv.forEach(a),ur=u(s),re=o(s,"PRE",{class:!0});var kw=p(re);kw.forEach(a),fr=u(s),gn=o(s,"P",{});var vv=p(gn);xf=c(vv,"Add to the Makefile"),vv.forEach(a),dr=u(s),ce=o(s,"PRE",{class:!0});var uw=p(ce);uw.forEach(a),hr=u(s),In=o(s,"P",{});var bv=p(In);$f=c(bv,"Check it works"),bv.forEach(a),mr=u(s),ie=o(s,"PRE",{class:!0});var fw=p(ie);fw.forEach(a),yr=u(s),As=o(s,"H3",{id:!0});var Lh=p(As);Ds=o(Lh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _v=p(Ds);Co=o(_v,"SPAN",{class:!0}),p(Co).forEach(a),_v.forEach(a),Tf=c(Lh,"Specimen setup: README, LICENCE and static documents"),Lh.forEach(a),vr=u(s),Pn=o(s,"P",{});var wv=p(Pn);jf=c(wv,"The last piece of the puzzle is various static documents."),wv.forEach(a),br=u(s),Rs=o(s,"UL",{});var Ec=p(Rs);xn=o(Ec,"LI",{});var Nh=p(xn);Sf=c(Nh,"I adapted a README.md and a CHANGELOG.md from "),$n=o(Nh,"A",{href:!0});var Ev=p($n);Cf=c(Ev,"https://github.com/othneildrew/Best-README-Template/"),Ev.forEach(a),Nh.forEach(a),Af=u(Ec),Ao=o(Ec,"LI",{});var gv=p(Ao);Df=c(gv,"the LICENSE file is standard MIT"),gv.forEach(a),Ec.forEach(a),_r=u(s),Tn=o(s,"P",{});var Iv=p(Tn);Rf=c(Iv,"Finally, that\u2019s all I need. Of course I could keep adding and fine tuning stuff (and I probably will). But this is good enough to get started."),Iv.forEach(a),wr=u(s),Hs=o(s,"H2",{id:!0});var qh=p(Hs);Ms=o(qh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Pv=p(Ms);Do=o(Pv,"SPAN",{class:!0}),p(Do).forEach(a),Pv.forEach(a),Hf=c(qh,"Step 2: Creating the Cookiecutter template from the specimen project"),qh.forEach(a),Er=u(s),jn=o(s,"P",{});var xv=p(jn);Mf=c(xv,"With that out of the way, I make a copy of the whole directory and start turning it into a minimal cookiecutter template. For starters, just an exact copy of the project, with only the folder name changed"),xv.forEach(a),gr=u(s),ke=o(s,"PRE",{class:!0});var dw=p(ke);dw.forEach(a),Ir=u(s),Sn=o(s,"P",{});var $v=p(Sn);Of=c($v,"So that\u2019s it, it works. But that\u2019s not real a test, it\u2019s just sanity check. I can do better."),$v.forEach(a),Pr=u(s),Os=o(s,"H3",{id:!0});var Fh=p(Os);Ls=o(Fh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Tv=p(Ls);Ro=o(Tv,"SPAN",{class:!0}),p(Ro).forEach(a),Tv.forEach(a),Lf=c(Fh,"Testing a cookiecutter template with pytest-cookies"),Fh.forEach(a),xr=u(s),O=o(s,"P",{});var Gn=p(O);Nf=c(Gn,"One thing I should do before attempting testing is to apply the same code quality tooling as in the template. I copy the Makefile, and cannibalise the bits of the pyproject.toml I need, then run "),Ho=o(Gn,"CODE",{});var jv=p(Ho);qf=c(jv,"poetry install"),jv.forEach(a),Ff=c(Gn,". One can see the result "),ue=o(Gn,"A",{href:!0,rel:!0});var Sv=p(ue);Bf=c(Sv,"in the template repo"),Sv.forEach(a),Uf=c(Gn,". Now on with the testing"),Gn.forEach(a),$r=u(s),Ns=o(s,"P",{});var gc=p(Ns);zf=c(gc,"Cookiecutter templates can, and should, be tested with "),Mo=o(gc,"CODE",{});var Cv=p(Mo);Vf=c(Cv,"pytest-cookies"),Cv.forEach(a),Gf=c(gc,"."),gc.forEach(a),Tr=u(s),fe=o(s,"PRE",{class:!0});var hw=p(fe);hw.forEach(a),jr=u(s),Cn=o(s,"P",{});var Av=p(Cn);Yf=c(Av,"The initial test is fairly simple, it merely checks the template is created"),Av.forEach(a),Sr=u(s),de=o(s,"PRE",{class:!0});var mw=p(de);mw.forEach(a),Cr=u(s),qs=o(s,"P",{});var Ic=p(qs);Wf=c(Ic,"The pytest_cookies package injects a "),Oo=o(Ic,"CODE",{});var Dv=p(Oo);Kf=c(Dv,"cookies"),Dv.forEach(a),Jf=c(Ic," fixture in all of your tests. It\u2019s a wrapper around cookiecutter, that makes it run in a private directory. The run returns an instance of the Result class, which includes pretty much all of the properties in the example above. Here I check the general gist of it and one of the generated files."),Ic.forEach(a),Ar=u(s),L=o(s,"P",{});var Yn=p(L);Qf=c(Yn,"Now it\u2019s simply a matter of going through each file and directory and seeing what can be parametrised and moved to "),Lo=o(Yn,"CODE",{});var Rv=p(Lo);Xf=c(Rv,"cookiecutter.json"),Rv.forEach(a),Zf=c(Yn,". For example, replace the content of "),No=o(Yn,"CODE",{});var Hv=p(No);sd=c(Hv,"/.python-version"),Hv.forEach(a),ad=c(Yn," with"),Yn.forEach(a),Dr=u(s),he=o(s,"PRE",{class:!0});var yw=p(he);yw.forEach(a),Rr=u(s),me=o(s,"P",{});var Bh=p(me);ed=c(Bh,"and then add it to the "),qo=o(Bh,"CODE",{});var Mv=p(qo);nd=c(Mv,"cookiecutter.json"),Mv.forEach(a),Bh.forEach(a),Hr=u(s),ye=o(s,"PRE",{class:!0});var vw=p(ye);vw.forEach(a),Mr=u(s),An=o(s,"P",{});var Ov=p(An);td=c(Ov,"and so on."),Ov.forEach(a),Or=u(s),Dn=o(s,"P",{});var Lv=p(Dn);od=c(Lv,"At the end of this step I\u2019m left with this directory tree"),Lv.forEach(a),Lr=u(s),ve=o(s,"PRE",{class:!0});var bw=p(ve);bw.forEach(a),Nr=u(s),Fs=o(s,"P",{});var Pc=p(Fs);pd=c(Pc,"And a "),Fo=o(Pc,"CODE",{});var Nv=p(Fo);ld=c(Nv,"cookiecutter.json"),Nv.forEach(a),rd=c(Pc," with"),Pc.forEach(a),qr=u(s),be=o(s,"PRE",{class:!0});var _w=p(be);_w.forEach(a),Fr=u(s),Rn=o(s,"P",{});var qv=p(Rn);cd=c(qv,"I\u2019m not going to test every single value of course. I will, however, expand the existing test to add a couple more values that should go in the same file. But I can get slightly fancier."),qv.forEach(a),Br=u(s),Bs=o(s,"H3",{id:!0});var Uh=p(Bs);Us=o(Uh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fv=p(Us);Bo=o(Fv,"SPAN",{class:!0}),p(Bo).forEach(a),Fv.forEach(a),id=c(Uh,"Automatically run tests in a generated cookiecutter template"),Uh.forEach(a),Ur=u(s),N=o(s,"P",{});var Wn=p(N);kd=c(Wn,"First, I can test the generated files to see none of them have "),Uo=o(Wn,"CODE",{});var Bv=p(Uo);ud=c(Bv,"{{cookiecutter.xxxx}}"),Bv.forEach(a),fd=c(Wn," in them. That\u2019s pretty easy. The Result object gives me a Posix path of the root of the generated project. So I can just call its "),zo=o(Wn,"EM",{});var Uv=p(zo);dd=c(Uv,"glob"),Uv.forEach(a),hd=c(Wn," method to get the whole folder tree below it."),Wn.forEach(a),zr=u(s),_e=o(s,"PRE",{class:!0});var ww=p(_e);ww.forEach(a),Vr=u(s),zs=o(s,"P",{});var xc=p(zs);md=c(xc,"Second, I can run the project\u2019s own tests after it\u2019s generated. It doesn\u2019t get safer than that! Again, thanks to the magic of "),Vo=o(xc,"EM",{});var zv=p(Vo);yd=c(zv,"pytest-cookies"),zv.forEach(a),vd=c(xc," which generates the project in a sandboxed folder and then provides a Posix object of its location."),xc.forEach(a),Gr=u(s),we=o(s,"PRE",{class:!0});var Ew=p(we);Ew.forEach(a),Yr=u(s),Hn=o(s,"P",{});var Vv=p(Hn);bd=c(Vv,"Almost there. Now I need to take care of the dynamically generated values."),Vv.forEach(a),Wr=u(s),Vs=o(s,"H3",{id:!0});var zh=p(Vs);Gs=o(zh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gv=p(Gs);Go=o(Gv,"SPAN",{class:!0}),p(Go).forEach(a),Gv.forEach(a),_d=c(zh,"Using post generation hooks in Cookiecutter templates"),zh.forEach(a),Kr=u(s),Ys=o(s,"P",{});var $c=p(Ys);wd=c($c,"First the easy one. The "),Yo=o($c,"CODE",{});var Yv=p(Yo);Ed=c(Yv,".env"),Yv.forEach(a),gd=c($c," file need to include the path of the directory of the newly created project. I write a test for that"),$c.forEach(a),Jr=u(s),Ee=o(s,"PRE",{class:!0});var gw=p(Ee);gw.forEach(a),Qr=u(s),Mn=o(s,"P",{});var Wv=p(Mn);Id=c(Wv,"Luckily, the cwd is made available in cookiecutter as \u201D_output_dir\u201D. So the .env file in the template simply becomes"),Wv.forEach(a),Xr=u(s),ge=o(s,"PRE",{class:!0});var Iw=p(ge);Iw.forEach(a),Zr=u(s),Ws=o(s,"P",{});var Tc=p(Ws);Pd=c(Tc,"Now the python executable path. This is tricky. It can only be run once the project is generated and "),Wo=o(Tc,"CODE",{});var Kv=p(Wo);xd=c(Kv,"poetry install"),Kv.forEach(a),$d=c(Tc," has run. But then the cookiecutter variables will no longer be available. So I have to come up with my own replacement engine. Not too happy about that, but what the heck. It\u2019s only a small string fragment"),Tc.forEach(a),sc=u(s),Ks=o(s,"P",{});var jc=p(Ks);Td=c(jc,"First I set up the json template. "),Ko=o(jc,"CODE",{});var Jv=p(Ko);jd=c(Jv,"<interpreter_path>"),Jv.forEach(a),Sd=c(jc," will be the variable I need to replace."),jc.forEach(a),ac=u(s),Ie=o(s,"PRE",{class:!0});var Pw=p(Ie);Pw.forEach(a),ec=u(s),y=o(s,"P",{});var $=p(y);Cd=c($,"And then the cookiecutter hook that installs the poetry dependencies, updates the settings file, and creates the first git commit. Cookiecutter offers two hooks: "),Jo=o($,"CODE",{});var Qv=p(Jo);Ad=c(Qv,"pre_gen_project.sh"),Qv.forEach(a),Dd=c($," and "),Qo=o($,"CODE",{});var Xv=p(Qo);Rd=c(Xv,"post_gen_project.sh"),Xv.forEach(a),Hd=c($,". Both live in the hooks directory and can be either python or shell scripts. "),Xo=o($,"I",{});var Zv=p(Xo);Md=c(Zv,"pre_gen_project"),Zv.forEach(a),Od=c($," runs before generating the project. It is mostly used for validation. Since it cannot change the values loaded from "),Zo=o($,"CODE",{});var sb=p(Zo);Ld=c(sb,"cookiecutter.json"),sb.forEach(a),Nd=c($," its usefulness is limited. "),sp=o($,"I",{});var ab=p(sp);qd=c(ab,"post_gen_project"),ab.forEach(a),Fd=c($," runs after the build."),$.forEach(a),nc=u(s),q=o(s,"P",{});var Kn=p(q);Bd=c(Kn,"I will use the "),ap=o(Kn,"EM",{});var eb=p(ap);Ud=c(eb,"awk"),eb.forEach(a),zd=c(Kn," command from early on to determine the location of the python executable. This will be then fed into a "),ep=o(Kn,"EM",{});var nb=p(ep);Vd=c(nb,"sed"),nb.forEach(a),Gd=c(Kn," command, which will replace the string in the json file. Sed and awk are similar CLI programs, they both are stream based. Meaning that you feed text into them, and they spit text out at the other end. One can manipulate text before it\u2019s spat out. But there is only one pass. Awk assumes the input text is spreadsheet-like, and tries to split it into columns. Then it gives access to the individual columns. Sed simply treats lines of text as lines, and allows to overwrite them before spitting them out again."),Kn.forEach(a),tc=u(s),Pe=o(s,"PRE",{class:!0});var xw=p(Pe);xw.forEach(a),oc=u(s),Js=o(s,"H2",{id:!0});var Vh=p(Js);Qs=o(Vh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var tb=p(Qs);np=o(tb,"SPAN",{class:!0}),p(np).forEach(a),tb.forEach(a),Yd=c(Vh,"Step 3: push to github and test"),Vh.forEach(a),pc=u(s),On=o(s,"P",{});var ob=p(On);Wd=c(ob,"The final test is to push the template to github and try to fetch it from there"),ob.forEach(a),lc=u(s),xe=o(s,"PRE",{class:!0});var $w=p(xe);$w.forEach(a),rc=u(s),Ln=o(s,"P",{});var pb=p(Ln);Kd=c(pb,"And that\u2019s finally it. A basic Python project template. It\u2019s very bare - it has neither CLI framework nor DS tools nor a web server. Just the code quality tools and VSCode. But it\u2019s a starting point, and I\u2019ll be adding to it. Hope you find it useful."),pb.forEach(a),cc=u(s),Xs=o(s,"H2",{id:!0});var Gh=p(Xs);Zs=o(Gh,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lb=p(Zs);tp=o(lb,"SPAN",{class:!0}),p(tp).forEach(a),lb.forEach(a),Jd=c(Gh,"Acknowledgements"),Gh.forEach(a),ic=u(s),sa=o(s,"P",{});var Sc=p(sa);Qd=c(Sc,"Half way through writing this post I came across a very similar one from PythonCheatSheet: "),$e=o(Sc,"A",{href:!0,rel:!0});var rb=p($e);Xd=c(rb,"https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),rb.forEach(a),Zd=c(Sc,". I carried on with mine, regardless."),Sc.forEach(a),kc=u(s),Te=o(s,"P",{});var Yh=p(Te);sh=c(Yh,"The awk command comes from SO, of course "),je=o(Yh,"A",{href:!0,rel:!0});var cb=p(je);ah=c(cb,"https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),cb.forEach(a),Yh.forEach(a),uc=u(s),Se=o(s,"P",{});var Wh=p(Se);eh=c(Wh,"Discussion on how to fetch the executable path on the CLI for poetry env command "),Ce=o(Wh,"A",{href:!0,rel:!0});var ib=p(Ce);nh=c(ib,"https://github.com/python-poetry/poetry/pull/731"),ib.forEach(a),Wh.forEach(a),fc=u(s),Ae=o(s,"P",{});var Kh=p(Ae);th=c(Kh,"More info on how the VSCode settings work "),De=o(Kh,"A",{href:!0,rel:!0});var kb=p(De);oh=c(kb,"https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),kb.forEach(a),Kh.forEach(a),dc=u(s),Re=o(s,"P",{});var Jh=p(Re);ph=c(Jh,"Pytest coverage and code layout "),He=o(Jh,"A",{href:!0,rel:!0});var ub=p(He);lh=c(ub,"https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),ub.forEach(a),Jh.forEach(a),hc=u(s),Me=o(s,"P",{});var Qh=p(Me);rh=c(Qh,`The article that showed me about Flakeheaven
`),Oe=o(Qh,"A",{href:!0,rel:!0});var fb=p(Oe);ch=c(fb,"https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),fb.forEach(a),Qh.forEach(a),mc=u(s),Le=o(s,"P",{});var Xh=p(Le);ih=c(Xh,"A README file template "),Ne=o(Xh,"A",{href:!0,rel:!0});var db=p(Ne);kh=c(db,"https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),db.forEach(a),Xh.forEach(a),this.h()},h(){i(Jn,"class","icon icon-link"),i(B,"aria-hidden","true"),i(B,"tabindex","-1"),i(B,"href","#creating-a-python-project-from-scratch-how-boring"),i(j,"id","creating-a-python-project-from-scratch-how-boring"),i(ca,"href","https://plopjs.com/"),i(ca,"rel","nofollow"),i(ia,"href","https://cookiecutter.readthedocs.io/"),i(ia,"rel","nofollow"),i(Xn,"class","icon icon-link"),i(z,"aria-hidden","true"),i(z,"tabindex","-1"),i(z,"href","#tldr-heres-the-template"),i(U,"id","tldr-heres-the-template"),i(ka,"class","language-bash"),i(Zn,"class","icon icon-link"),i(G,"aria-hidden","true"),i(G,"tabindex","-1"),i(G,"href","#the-plan"),i(V,"id","the-plan"),i(nt,"class","icon icon-link"),i(W,"aria-hidden","true"),i(W,"tabindex","-1"),i(W,"href","#step-0-prerequisites"),i(Y,"id","step-0-prerequisites"),i(Be,"href","installing-python-on-mac-os-x-in-2022"),i(ua,"href","https://python-poetry.org/"),i(ua,"rel","nofollow"),i(fa,"href","https://cookiecutter.readthedocs.io/"),i(fa,"rel","nofollow"),i(tt,"class","icon icon-link"),i(J,"aria-hidden","true"),i(J,"tabindex","-1"),i(J,"href","#step-1-create-a-project-specimen"),i(K,"id","step-1-create-a-project-specimen"),i(ot,"class","icon icon-link"),i(X,"aria-hidden","true"),i(X,"tabindex","-1"),i(X,"href","#specimen-setup-poetry"),i(Q,"id","specimen-setup-poetry"),i(Ue,"href","/blog/installing-python-on-mac-os-x-in-2022"),i(da,"class","language-bash"),i(ha,"class","language-bash"),i(pt,"class","icon icon-link"),i(as,"aria-hidden","true"),i(as,"tabindex","-1"),i(as,"href","#specimen-setup-git"),i(ss,"id","specimen-setup-git"),i(ma,"class","language-bash"),i(ct,"class","icon icon-link"),i(ns,"aria-hidden","true"),i(ns,"tabindex","-1"),i(ns,"href","#specimen-setup-initial-folder-structure"),i(es,"id","specimen-setup-initial-folder-structure"),i(ya,"class","language-bash"),i(ft,"class","icon icon-link"),i(os,"aria-hidden","true"),i(os,"tabindex","-1"),i(os,"href","#specimen-setup-wire-up-vscode-to-the-poetry-python-environment"),i(ts,"id","specimen-setup-wire-up-vscode-to-the-poetry-python-environment"),i(va,"class","language-bash"),i(ba,"class","language-bash"),i(f,"class","code-breakdown"),i(wa,"class","language-bash"),i(Ea,"class","language-json"),i(ga,"class","language-bash"),i(Vt,"class","icon icon-link"),i(ls,"aria-hidden","true"),i(ls,"tabindex","-1"),i(ls,"href","#specimen-setup-tests"),i(ps,"id","specimen-setup-tests"),i(Ia,"class","language-python"),i(Pa,"class","language-bash"),i(xa,"class","language-bash"),i($a,"class","language-toml"),i(Ta,"class","language-bash"),i(ja,"class","language-python"),i(Sa,"class","language-bash"),i(Aa,"class","language-toml"),i(Da,"class","language-bash"),i(Qt,"class","icon icon-link"),i(ks,"aria-hidden","true"),i(ks,"tabindex","-1"),i(ks,"href","#adding-a-faker-fixture-to-the-template"),i(is,"id","adding-a-faker-fixture-to-the-template"),i(Ra,"class","language-python"),i(Xt,"class","icon icon-link"),i(fs,"aria-hidden","true"),i(fs,"tabindex","-1"),i(fs,"href","#specimen-setup-makefile"),i(us,"id","specimen-setup-makefile"),i(Ha,"href","https://gist.github.com/gotofritz/62b58e89d2100448af5503940736bd1f"),i(Ha,"rel","nofollow"),i(Ma,"class","language-makefile"),i(Oa,"class","language-bash"),i(La,"class","language-bash"),i(Zt,"class","icon icon-link"),i(ms,"aria-hidden","true"),i(ms,"tabindex","-1"),i(ms,"href","#specimen-setup-formatting-with-black-and-isort"),i(hs,"id","specimen-setup-formatting-with-black-and-isort"),i(Na,"href","https://github.com/psf/black/issues/333#issuecomment-414123095"),i(Na,"rel","nofollow"),i(qa,"class","language-diff"),i(Fa,"class","language-bash"),i(Ba,"class","language-bash"),i(Ua,"class","language-diff"),i(za,"class","language-bash"),i(lo,"class","icon icon-link"),i(vs,"aria-hidden","true"),i(vs,"tabindex","-1"),i(vs,"href","#specimen-setup-add-flake8-and-plugins"),i(ys,"id","specimen-setup-add-flake8-and-plugins"),i(Va,"href","https://flakeheaven.readthedocs.io/"),i(Va,"rel","nofollow"),i(Ga,"href","https://github.com/flakeheaven/flakeheaven/issues/132"),i(Ga,"rel","nofollow"),i(Ya,"class","language-bash"),i(Wa,"class","language-diff"),i(Ka,"class","language-diff"),i(ko,"class","icon icon-link"),i(_s,"aria-hidden","true"),i(_s,"tabindex","-1"),i(_s,"href","#flake8-bandit"),i(bs,"id","flake8-bandit"),i(Ja,"class","language-bash"),i(Qa,"class","language-diff"),i(mo,"class","icon icon-link"),i(Es,"aria-hidden","true"),i(Es,"tabindex","-1"),i(Es,"href","#flake8-bugbear"),i(ws,"id","flake8-bugbear"),i(Xa,"class","language-bash"),i(Za,"class","language-diff"),i(yo,"class","icon icon-link"),i(Is,"aria-hidden","true"),i(Is,"tabindex","-1"),i(Is,"href","#darglint-and-flake8-docstrings"),i(gs,"id","darglint-and-flake8-docstrings"),i(se,"class","language-bash"),i(ae,"class","language-diff"),i(_o,"class","icon icon-link"),i(xs,"aria-hidden","true"),i(xs,"tabindex","-1"),i(xs,"href","#and-many-more"),i(Ps,"id","and-many-more"),i(ee,"class","language-bash"),i(ne,"class","language-diff"),i(jo,"class","icon icon-link"),i(js,"aria-hidden","true"),i(js,"tabindex","-1"),i(js,"href","#specimen-setup-safety"),i(Ts,"id","specimen-setup-safety"),i(te,"class","language-bash"),i(oe,"class","language-diff"),i(pe,"class","language-bash"),i(So,"class","icon icon-link"),i(Cs,"aria-hidden","true"),i(Cs,"tabindex","-1"),i(Cs,"href","#specimen-setup-mypy"),i(Ss,"id","specimen-setup-mypy"),i(le,"class","language-bash"),i(re,"class","language-diff"),i(ce,"class","language-diff"),i(ie,"class","language-bash"),i(Co,"class","icon icon-link"),i(Ds,"aria-hidden","true"),i(Ds,"tabindex","-1"),i(Ds,"href","#specimen-setup-readme-licence-and-static-documents"),i(As,"id","specimen-setup-readme-licence-and-static-documents"),i($n,"href","othneildrew/Best-README-Template"),i(Do,"class","icon icon-link"),i(Ms,"aria-hidden","true"),i(Ms,"tabindex","-1"),i(Ms,"href","#step-2-creating-the-cookiecutter-template-from-the-specimen-project"),i(Hs,"id","step-2-creating-the-cookiecutter-template-from-the-specimen-project"),i(ke,"class","language-bash"),i(Ro,"class","icon icon-link"),i(Ls,"aria-hidden","true"),i(Ls,"tabindex","-1"),i(Ls,"href","#testing-a-cookiecutter-template-with-pytest-cookies"),i(Os,"id","testing-a-cookiecutter-template-with-pytest-cookies"),i(ue,"href","https://github.com/gotofritz/cookiecutter-gotofritz-poetry"),i(ue,"rel","nofollow"),i(fe,"class","language-bash"),i(de,"class","language-python"),i(he,"class","language-json"),i(ye,"class","language-json"),i(ve,"class","language-bash"),i(be,"class","language-json"),i(Bo,"class","icon icon-link"),i(Us,"aria-hidden","true"),i(Us,"tabindex","-1"),i(Us,"href","#automatically-run-tests-in-a-generated-cookiecutter-template"),i(Bs,"id","automatically-run-tests-in-a-generated-cookiecutter-template"),i(_e,"class","language-python"),i(we,"class","language-python"),i(Go,"class","icon icon-link"),i(Gs,"aria-hidden","true"),i(Gs,"tabindex","-1"),i(Gs,"href","#using-post-generation-hooks-in-cookiecutter-templates"),i(Vs,"id","using-post-generation-hooks-in-cookiecutter-templates"),i(Ee,"class","language-python"),i(ge,"class","language-sh"),i(Ie,"class","language-diff"),i(Pe,"class","language-bash"),i(np,"class","icon icon-link"),i(Qs,"aria-hidden","true"),i(Qs,"tabindex","-1"),i(Qs,"href","#step-3-push-to-github-and-test"),i(Js,"id","step-3-push-to-github-and-test"),i(xe,"class","language-bash"),i(tp,"class","icon icon-link"),i(Zs,"aria-hidden","true"),i(Zs,"tabindex","-1"),i(Zs,"href","#acknowledgements"),i(Xs,"id","acknowledgements"),i($e,"href","https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2"),i($e,"rel","nofollow"),i(je,"href","https://stackoverflow.com/questions/15331259/use-awk-to-find-first-occurrence-only-of-string-after-a-delimiter"),i(je,"rel","nofollow"),i(Ce,"href","https://github.com/python-poetry/poetry/pull/731"),i(Ce,"rel","nofollow"),i(De,"href","https://stackoverflow.com/questions/53653083/how-to-correctly-set-pythonpath-for-visual-studio-code"),i(De,"rel","nofollow"),i(He,"href","https://browniebroke.com/blog/convert-existing-poetry-to-src-layout/"),i(He,"rel","nofollow"),i(Oe,"href","https://dev.to/bowmanjd/using-flake8-and-pyproject-toml-with-flakehell-1cn1"),i(Oe,"rel","nofollow"),i(Ne,"href","https://github.com/othneildrew/Best-README-Template/blob/master/CHANGELOG.md"),i(Ne,"rel","nofollow")},m(s,n){l(s,j,n),e(j,B),e(B,Jn),e(j,Cc),l(s,lp,n),l(s,_,n),e(_,Ac),e(_,ca),e(ca,Dc),e(_,Rc),e(_,ia),e(ia,Hc),e(_,Mc),e(_,Qn),e(Qn,Oc),e(_,Lc),l(s,rp,n),l(s,U,n),e(U,z),e(z,Xn),e(U,Nc),l(s,cp,n),l(s,qe,n),e(qe,qc),l(s,ip,n),l(s,ka,n),ka.innerHTML=mb,l(s,kp,n),l(s,V,n),e(V,G),e(G,Zn),e(V,Fc),l(s,up,n),l(s,Fe,n),e(Fe,Bc),l(s,fp,n),l(s,S,n),e(S,st),e(st,Uc),e(S,zc),e(S,at),e(at,Vc),e(S,Gc),e(S,et),e(et,Yc),l(s,dp,n),l(s,Y,n),e(Y,W),e(W,nt),e(Y,Wc),l(s,hp,n),l(s,w,n),e(w,Kc),e(w,Be),e(Be,Jc),e(w,Qc),e(w,ua),e(ua,Xc),e(w,Zc),e(w,fa),e(fa,si),e(w,ai),l(s,mp,n),l(s,K,n),e(K,J),e(J,tt),e(K,ei),l(s,yp,n),l(s,Q,n),e(Q,X),e(X,ot),e(Q,ni),l(s,vp,n),l(s,Z,n),e(Z,ti),e(Z,Ue),e(Ue,oi),e(Z,pi),l(s,bp,n),l(s,da,n),da.innerHTML=yb,l(s,_p,n),l(s,ze,n),e(ze,li),l(s,wp,n),l(s,ha,n),ha.innerHTML=vb,l(s,Ep,n),l(s,ss,n),e(ss,as),e(as,pt),e(ss,ri),l(s,gp,n),l(s,C,n),e(C,ci),e(C,lt),e(lt,ii),e(C,ki),e(C,rt),e(rt,ui),e(C,fi),l(s,Ip,n),l(s,ma,n),ma.innerHTML=bb,l(s,Pp,n),l(s,es,n),e(es,ns),e(ns,ct),e(es,di),l(s,xp,n),l(s,E,n),e(E,hi),e(E,it),e(it,mi),e(E,yi),e(E,kt),e(kt,vi),e(E,bi),e(E,ut),e(ut,_i),e(E,wi),l(s,$p,n),l(s,ya,n),ya.innerHTML=_b,l(s,Tp,n),l(s,ts,n),e(ts,os),e(os,ft),e(ts,Ei),l(s,jp,n),l(s,A,n),e(A,gi),e(A,dt),e(dt,Ii),e(A,Pi),e(A,ht),e(ht,xi),e(A,$i),l(s,Sp,n),l(s,va,n),va.innerHTML=wb,l(s,Cp,n),l(s,g,n),e(g,Ti),e(g,mt),e(mt,ji),e(g,Si),e(g,yt),e(yt,Ci),e(g,Ai),e(g,vt),e(vt,Di),e(g,Ri),l(s,Ap,n),l(s,ba,n),ba.innerHTML=Eb,l(s,Dp,n),l(s,Ve,n),e(Ve,Hi),l(s,Rp,n),l(s,f,n),e(f,bt),e(bt,Mi),e(f,_t),e(_t,Oi),e(f,wt),e(wt,Li),e(f,Et),e(Et,Ni),e(f,gt),e(gt,qi),e(f,It),e(It,Fi),e(f,Pt),e(Pt,Bi),e(f,xt),e(xt,Ui),e(f,$t),e($t,zi),e(f,Tt),e(Tt,Vi),e(f,jt),e(jt,Gi),e(f,T),e(T,Yi),e(T,St),e(St,Wi),e(T,Ki),e(T,Ct),e(Ct,Ji),e(T,Qi),e(T,At),e(At,Xi),e(T,Zi),e(f,Dt),e(Dt,sk),e(f,_a),e(_a,ak),e(_a,Rt),e(Rt,ek),e(_a,nk),e(f,Ht),e(Ht,tk),e(f,Mt),e(Mt,ok),e(f,Ot),e(Ot,pk),e(f,Lt),e(Lt,lk),l(s,Hp,n),l(s,D,n),e(D,rk),e(D,Nt),e(Nt,ck),e(D,ik),e(D,qt),e(qt,kk),e(D,uk),l(s,Mp,n),l(s,wa,n),wa.innerHTML=gb,l(s,Op,n),l(s,Ge,n),e(Ge,fk),l(s,Lp,n),l(s,Ye,n),e(Ye,Ft),e(Ft,dk),l(s,Np,n),l(s,Ea,n),Ea.innerHTML=Ib,l(s,qp,n),l(s,We,n),e(We,hk),l(s,Fp,n),l(s,ga,n),ga.innerHTML=Pb,l(s,Bp,n),l(s,I,n),e(I,mk),e(I,Bt),e(Bt,yk),e(I,vk),e(I,Ut),e(Ut,bk),e(I,_k),e(I,zt),e(zt,wk),e(I,Ek),l(s,Up,n),l(s,ps,n),e(ps,ls),e(ls,Vt),e(ps,gk),l(s,zp,n),l(s,Ke,n),e(Ke,Ik),l(s,Vp,n),l(s,Ia,n),Ia.innerHTML=xb,l(s,Gp,n),l(s,Je,n),e(Je,Pk),l(s,Yp,n),l(s,Pa,n),Pa.innerHTML=$b,l(s,Wp,n),l(s,Qe,n),e(Qe,xk),l(s,Kp,n),l(s,xa,n),xa.innerHTML=Tb,l(s,Jp,n),l(s,rs,n),e(rs,$k),e(rs,Gt),e(Gt,Tk),e(rs,jk),l(s,Qp,n),l(s,$a,n),$a.innerHTML=jb,l(s,Xp,n),l(s,cs,n),e(cs,Sk),e(cs,Yt),e(Yt,Ck),e(cs,Ak),l(s,Zp,n),l(s,Ta,n),Ta.innerHTML=Sb,l(s,sl,n),l(s,Xe,n),e(Xe,Dk),l(s,al,n),l(s,ja,n),ja.innerHTML=Cb,l(s,el,n),l(s,R,n),e(R,Rk),e(R,Wt),e(Wt,Hk),e(R,Mk),e(R,Kt),e(Kt,Ok),e(R,Lk),l(s,nl,n),l(s,Sa,n),Sa.innerHTML=Ab,l(s,tl,n),l(s,Ca,n),e(Ca,Nk),e(Ca,Jt),e(Jt,qk),l(s,ol,n),l(s,Aa,n),Aa.innerHTML=Db,l(s,pl,n),l(s,Ze,n),e(Ze,Fk),l(s,ll,n),l(s,Da,n),Da.innerHTML=Rb,l(s,rl,n),l(s,is,n),e(is,ks),e(ks,Qt),e(is,Bk),l(s,cl,n),l(s,sn,n),e(sn,Uk),l(s,il,n),l(s,Ra,n),Ra.innerHTML=Hb,l(s,kl,n),l(s,us,n),e(us,fs),e(fs,Xt),e(us,zk),l(s,ul,n),l(s,ds,n),e(ds,Vk),e(ds,Ha),e(Ha,Gk),e(ds,Yk),l(s,fl,n),l(s,Ma,n),Ma.innerHTML=Mb,l(s,dl,n),l(s,an,n),e(an,Wk),l(s,hl,n),l(s,Oa,n),Oa.innerHTML=Ob,l(s,ml,n),l(s,en,n),e(en,Kk),l(s,yl,n),l(s,La,n),La.innerHTML=Lb,l(s,vl,n),l(s,hs,n),e(hs,ms),e(ms,Zt),e(hs,Jk),l(s,bl,n),l(s,H,n),e(H,Qk),e(H,so),e(so,Xk),e(H,Zk),e(H,Na),e(Na,su),e(H,au),l(s,_l,n),l(s,nn,n),e(nn,eu),l(s,wl,n),l(s,qa,n),qa.innerHTML=Nb,l(s,El,n),l(s,tn,n),e(tn,nu),l(s,gl,n),l(s,Fa,n),Fa.innerHTML=qb,l(s,Il,n),l(s,m,n),e(m,ao),e(ao,tu),e(m,ou),e(m,eo),e(eo,pu),e(m,lu),e(m,no),e(no,ru),e(m,cu),e(m,to),e(to,iu),e(m,ku),e(m,oo),e(oo,uu),e(m,fu),e(m,po),e(po,du),e(m,hu),l(s,Pl,n),l(s,Ba,n),Ba.innerHTML=Fb,l(s,xl,n),l(s,on,n),e(on,mu),l(s,$l,n),l(s,Ua,n),Ua.innerHTML=Bb,l(s,Tl,n),l(s,pn,n),e(pn,yu),l(s,jl,n),l(s,za,n),za.innerHTML=Ub,l(s,Sl,n),l(s,ys,n),e(ys,vs),e(vs,lo),e(ys,vu),l(s,Cl,n),l(s,M,n),e(M,bu),e(M,Va),e(Va,_u),e(M,wu),e(M,Ga),e(Ga,Eu),e(M,gu),l(s,Al,n),l(s,Ya,n),Ya.innerHTML=zb,l(s,Dl,n),l(s,P,n),e(P,Iu),e(P,ro),e(ro,Pu),e(P,xu),e(P,co),e(co,$u),e(P,Tu),e(P,io),e(io,ju),e(P,Su),l(s,Rl,n),l(s,Wa,n),Wa.innerHTML=Vb,l(s,Hl,n),l(s,ln,n),e(ln,Cu),l(s,Ml,n),l(s,Ka,n),Ka.innerHTML=Gb,l(s,Ol,n),l(s,rn,n),e(rn,Au),l(s,Ll,n),l(s,bs,n),e(bs,_s),e(_s,ko),e(bs,Du),l(s,Nl,n),l(s,cn,n),e(cn,Ru),l(s,ql,n),l(s,Ja,n),Ja.innerHTML=Yb,l(s,Fl,n),l(s,x,n),e(x,Hu),e(x,uo),e(uo,Mu),e(x,Ou),e(x,fo),e(fo,Lu),e(x,Nu),e(x,ho),e(ho,qu),e(x,Fu),l(s,Bl,n),l(s,Qa,n),Qa.innerHTML=Wb,l(s,Ul,n),l(s,ws,n),e(ws,Es),e(Es,mo),e(ws,Bu),l(s,zl,n),l(s,kn,n),e(kn,Uu),l(s,Vl,n),l(s,Xa,n),Xa.innerHTML=Kb,l(s,Gl,n),l(s,un,n),e(un,zu),l(s,Yl,n),l(s,Za,n),Za.innerHTML=Jb,l(s,Wl,n),l(s,gs,n),e(gs,Is),e(Is,yo),e(gs,Vu),l(s,Kl,n),l(s,F,n),e(F,vo),e(vo,Gu),e(F,Yu),e(F,bo),e(bo,Wu),e(F,Ku),l(s,Jl,n),l(s,se,n),se.innerHTML=Qb,l(s,Ql,n),l(s,ae,n),ae.innerHTML=Xb,l(s,Xl,n),l(s,Ps,n),e(Ps,xs),e(xs,_o),e(Ps,Ju),l(s,Zl,n),l(s,h,n),e(h,fn),e(fn,wo),e(wo,Qu),e(fn,Xu),e(h,Zu),e(h,dn),e(dn,Eo),e(Eo,sf),e(dn,af),e(h,ef),e(h,hn),e(hn,go),e(go,nf),e(hn,tf),e(h,of),e(h,$s),e($s,Io),e(Io,pf),e($s,lf),e($s,Po),e(Po,rf),e($s,cf),e(h,kf),e(h,mn),e(mn,xo),e(xo,uf),e(mn,ff),e(h,df),e(h,yn),e(yn,$o),e($o,hf),e(yn,mf),e(h,yf),e(h,vn),e(vn,To),e(To,vf),e(vn,bf),l(s,sr,n),l(s,ee,n),ee.innerHTML=Zb,l(s,ar,n),l(s,ne,n),ne.innerHTML=s_,l(s,er,n),l(s,Ts,n),e(Ts,js),e(js,jo),e(Ts,_f),l(s,nr,n),l(s,bn,n),e(bn,wf),l(s,tr,n),l(s,te,n),te.innerHTML=a_,l(s,or,n),l(s,_n,n),e(_n,Ef),l(s,pr,n),l(s,oe,n),oe.innerHTML=e_,l(s,lr,n),l(s,pe,n),pe.innerHTML=n_,l(s,rr,n),l(s,Ss,n),e(Ss,Cs),e(Cs,So),e(Ss,gf),l(s,cr,n),l(s,wn,n),e(wn,If),l(s,ir,n),l(s,le,n),le.innerHTML=t_,l(s,kr,n),l(s,En,n),e(En,Pf),l(s,ur,n),l(s,re,n),re.innerHTML=o_,l(s,fr,n),l(s,gn,n),e(gn,xf),l(s,dr,n),l(s,ce,n),ce.innerHTML=p_,l(s,hr,n),l(s,In,n),e(In,$f),l(s,mr,n),l(s,ie,n),ie.innerHTML=l_,l(s,yr,n),l(s,As,n),e(As,Ds),e(Ds,Co),e(As,Tf),l(s,vr,n),l(s,Pn,n),e(Pn,jf),l(s,br,n),l(s,Rs,n),e(Rs,xn),e(xn,Sf),e(xn,$n),e($n,Cf),e(Rs,Af),e(Rs,Ao),e(Ao,Df),l(s,_r,n),l(s,Tn,n),e(Tn,Rf),l(s,wr,n),l(s,Hs,n),e(Hs,Ms),e(Ms,Do),e(Hs,Hf),l(s,Er,n),l(s,jn,n),e(jn,Mf),l(s,gr,n),l(s,ke,n),ke.innerHTML=r_,l(s,Ir,n),l(s,Sn,n),e(Sn,Of),l(s,Pr,n),l(s,Os,n),e(Os,Ls),e(Ls,Ro),e(Os,Lf),l(s,xr,n),l(s,O,n),e(O,Nf),e(O,Ho),e(Ho,qf),e(O,Ff),e(O,ue),e(ue,Bf),e(O,Uf),l(s,$r,n),l(s,Ns,n),e(Ns,zf),e(Ns,Mo),e(Mo,Vf),e(Ns,Gf),l(s,Tr,n),l(s,fe,n),fe.innerHTML=c_,l(s,jr,n),l(s,Cn,n),e(Cn,Yf),l(s,Sr,n),l(s,de,n),de.innerHTML=i_,l(s,Cr,n),l(s,qs,n),e(qs,Wf),e(qs,Oo),e(Oo,Kf),e(qs,Jf),l(s,Ar,n),l(s,L,n),e(L,Qf),e(L,Lo),e(Lo,Xf),e(L,Zf),e(L,No),e(No,sd),e(L,ad),l(s,Dr,n),l(s,he,n),he.innerHTML=k_,l(s,Rr,n),l(s,me,n),e(me,ed),e(me,qo),e(qo,nd),l(s,Hr,n),l(s,ye,n),ye.innerHTML=u_,l(s,Mr,n),l(s,An,n),e(An,td),l(s,Or,n),l(s,Dn,n),e(Dn,od),l(s,Lr,n),l(s,ve,n),ve.innerHTML=f_,l(s,Nr,n),l(s,Fs,n),e(Fs,pd),e(Fs,Fo),e(Fo,ld),e(Fs,rd),l(s,qr,n),l(s,be,n),be.innerHTML=d_,l(s,Fr,n),l(s,Rn,n),e(Rn,cd),l(s,Br,n),l(s,Bs,n),e(Bs,Us),e(Us,Bo),e(Bs,id),l(s,Ur,n),l(s,N,n),e(N,kd),e(N,Uo),e(Uo,ud),e(N,fd),e(N,zo),e(zo,dd),e(N,hd),l(s,zr,n),l(s,_e,n),_e.innerHTML=h_,l(s,Vr,n),l(s,zs,n),e(zs,md),e(zs,Vo),e(Vo,yd),e(zs,vd),l(s,Gr,n),l(s,we,n),we.innerHTML=m_,l(s,Yr,n),l(s,Hn,n),e(Hn,bd),l(s,Wr,n),l(s,Vs,n),e(Vs,Gs),e(Gs,Go),e(Vs,_d),l(s,Kr,n),l(s,Ys,n),e(Ys,wd),e(Ys,Yo),e(Yo,Ed),e(Ys,gd),l(s,Jr,n),l(s,Ee,n),Ee.innerHTML=y_,l(s,Qr,n),l(s,Mn,n),e(Mn,Id),l(s,Xr,n),l(s,ge,n),ge.innerHTML=v_,l(s,Zr,n),l(s,Ws,n),e(Ws,Pd),e(Ws,Wo),e(Wo,xd),e(Ws,$d),l(s,sc,n),l(s,Ks,n),e(Ks,Td),e(Ks,Ko),e(Ko,jd),e(Ks,Sd),l(s,ac,n),l(s,Ie,n),Ie.innerHTML=b_,l(s,ec,n),l(s,y,n),e(y,Cd),e(y,Jo),e(Jo,Ad),e(y,Dd),e(y,Qo),e(Qo,Rd),e(y,Hd),e(y,Xo),e(Xo,Md),e(y,Od),e(y,Zo),e(Zo,Ld),e(y,Nd),e(y,sp),e(sp,qd),e(y,Fd),l(s,nc,n),l(s,q,n),e(q,Bd),e(q,ap),e(ap,Ud),e(q,zd),e(q,ep),e(ep,Vd),e(q,Gd),l(s,tc,n),l(s,Pe,n),Pe.innerHTML=__,l(s,oc,n),l(s,Js,n),e(Js,Qs),e(Qs,np),e(Js,Yd),l(s,pc,n),l(s,On,n),e(On,Wd),l(s,lc,n),l(s,xe,n),xe.innerHTML=w_,l(s,rc,n),l(s,Ln,n),e(Ln,Kd),l(s,cc,n),l(s,Xs,n),e(Xs,Zs),e(Zs,tp),e(Xs,Jd),l(s,ic,n),l(s,sa,n),e(sa,Qd),e(sa,$e),e($e,Xd),e(sa,Zd),l(s,kc,n),l(s,Te,n),e(Te,sh),e(Te,je),e(je,ah),l(s,uc,n),l(s,Se,n),e(Se,eh),e(Se,Ce),e(Ce,nh),l(s,fc,n),l(s,Ae,n),e(Ae,th),e(Ae,De),e(De,oh),l(s,dc,n),l(s,Re,n),e(Re,ph),e(Re,He),e(He,lh),l(s,hc,n),l(s,Me,n),e(Me,rh),e(Me,Oe),e(Oe,ch),l(s,mc,n),l(s,Le,n),e(Le,ih),e(Le,Ne),e(Ne,kh)},p:Zh,i:Zh,o:Zh,d(s){s&&a(j),s&&a(lp),s&&a(_),s&&a(rp),s&&a(U),s&&a(cp),s&&a(qe),s&&a(ip),s&&a(ka),s&&a(kp),s&&a(V),s&&a(up),s&&a(Fe),s&&a(fp),s&&a(S),s&&a(dp),s&&a(Y),s&&a(hp),s&&a(w),s&&a(mp),s&&a(K),s&&a(yp),s&&a(Q),s&&a(vp),s&&a(Z),s&&a(bp),s&&a(da),s&&a(_p),s&&a(ze),s&&a(wp),s&&a(ha),s&&a(Ep),s&&a(ss),s&&a(gp),s&&a(C),s&&a(Ip),s&&a(ma),s&&a(Pp),s&&a(es),s&&a(xp),s&&a(E),s&&a($p),s&&a(ya),s&&a(Tp),s&&a(ts),s&&a(jp),s&&a(A),s&&a(Sp),s&&a(va),s&&a(Cp),s&&a(g),s&&a(Ap),s&&a(ba),s&&a(Dp),s&&a(Ve),s&&a(Rp),s&&a(f),s&&a(Hp),s&&a(D),s&&a(Mp),s&&a(wa),s&&a(Op),s&&a(Ge),s&&a(Lp),s&&a(Ye),s&&a(Np),s&&a(Ea),s&&a(qp),s&&a(We),s&&a(Fp),s&&a(ga),s&&a(Bp),s&&a(I),s&&a(Up),s&&a(ps),s&&a(zp),s&&a(Ke),s&&a(Vp),s&&a(Ia),s&&a(Gp),s&&a(Je),s&&a(Yp),s&&a(Pa),s&&a(Wp),s&&a(Qe),s&&a(Kp),s&&a(xa),s&&a(Jp),s&&a(rs),s&&a(Qp),s&&a($a),s&&a(Xp),s&&a(cs),s&&a(Zp),s&&a(Ta),s&&a(sl),s&&a(Xe),s&&a(al),s&&a(ja),s&&a(el),s&&a(R),s&&a(nl),s&&a(Sa),s&&a(tl),s&&a(Ca),s&&a(ol),s&&a(Aa),s&&a(pl),s&&a(Ze),s&&a(ll),s&&a(Da),s&&a(rl),s&&a(is),s&&a(cl),s&&a(sn),s&&a(il),s&&a(Ra),s&&a(kl),s&&a(us),s&&a(ul),s&&a(ds),s&&a(fl),s&&a(Ma),s&&a(dl),s&&a(an),s&&a(hl),s&&a(Oa),s&&a(ml),s&&a(en),s&&a(yl),s&&a(La),s&&a(vl),s&&a(hs),s&&a(bl),s&&a(H),s&&a(_l),s&&a(nn),s&&a(wl),s&&a(qa),s&&a(El),s&&a(tn),s&&a(gl),s&&a(Fa),s&&a(Il),s&&a(m),s&&a(Pl),s&&a(Ba),s&&a(xl),s&&a(on),s&&a($l),s&&a(Ua),s&&a(Tl),s&&a(pn),s&&a(jl),s&&a(za),s&&a(Sl),s&&a(ys),s&&a(Cl),s&&a(M),s&&a(Al),s&&a(Ya),s&&a(Dl),s&&a(P),s&&a(Rl),s&&a(Wa),s&&a(Hl),s&&a(ln),s&&a(Ml),s&&a(Ka),s&&a(Ol),s&&a(rn),s&&a(Ll),s&&a(bs),s&&a(Nl),s&&a(cn),s&&a(ql),s&&a(Ja),s&&a(Fl),s&&a(x),s&&a(Bl),s&&a(Qa),s&&a(Ul),s&&a(ws),s&&a(zl),s&&a(kn),s&&a(Vl),s&&a(Xa),s&&a(Gl),s&&a(un),s&&a(Yl),s&&a(Za),s&&a(Wl),s&&a(gs),s&&a(Kl),s&&a(F),s&&a(Jl),s&&a(se),s&&a(Ql),s&&a(ae),s&&a(Xl),s&&a(Ps),s&&a(Zl),s&&a(h),s&&a(sr),s&&a(ee),s&&a(ar),s&&a(ne),s&&a(er),s&&a(Ts),s&&a(nr),s&&a(bn),s&&a(tr),s&&a(te),s&&a(or),s&&a(_n),s&&a(pr),s&&a(oe),s&&a(lr),s&&a(pe),s&&a(rr),s&&a(Ss),s&&a(cr),s&&a(wn),s&&a(ir),s&&a(le),s&&a(kr),s&&a(En),s&&a(ur),s&&a(re),s&&a(fr),s&&a(gn),s&&a(dr),s&&a(ce),s&&a(hr),s&&a(In),s&&a(mr),s&&a(ie),s&&a(yr),s&&a(As),s&&a(vr),s&&a(Pn),s&&a(br),s&&a(Rs),s&&a(_r),s&&a(Tn),s&&a(wr),s&&a(Hs),s&&a(Er),s&&a(jn),s&&a(gr),s&&a(ke),s&&a(Ir),s&&a(Sn),s&&a(Pr),s&&a(Os),s&&a(xr),s&&a(O),s&&a($r),s&&a(Ns),s&&a(Tr),s&&a(fe),s&&a(jr),s&&a(Cn),s&&a(Sr),s&&a(de),s&&a(Cr),s&&a(qs),s&&a(Ar),s&&a(L),s&&a(Dr),s&&a(he),s&&a(Rr),s&&a(me),s&&a(Hr),s&&a(ye),s&&a(Mr),s&&a(An),s&&a(Or),s&&a(Dn),s&&a(Lr),s&&a(ve),s&&a(Nr),s&&a(Fs),s&&a(qr),s&&a(be),s&&a(Fr),s&&a(Rn),s&&a(Br),s&&a(Bs),s&&a(Ur),s&&a(N),s&&a(zr),s&&a(_e),s&&a(Vr),s&&a(zs),s&&a(Gr),s&&a(we),s&&a(Yr),s&&a(Hn),s&&a(Wr),s&&a(Vs),s&&a(Kr),s&&a(Ys),s&&a(Jr),s&&a(Ee),s&&a(Qr),s&&a(Mn),s&&a(Xr),s&&a(ge),s&&a(Zr),s&&a(Ws),s&&a(sc),s&&a(Ks),s&&a(ac),s&&a(Ie),s&&a(ec),s&&a(y),s&&a(nc),s&&a(q),s&&a(tc),s&&a(Pe),s&&a(oc),s&&a(Js),s&&a(pc),s&&a(On),s&&a(lc),s&&a(xe),s&&a(rc),s&&a(Ln),s&&a(cc),s&&a(Xs),s&&a(ic),s&&a(sa),s&&a(kc),s&&a(Te),s&&a(uc),s&&a(Se),s&&a(fc),s&&a(Ae),s&&a(dc),s&&a(Re),s&&a(hc),s&&a(Me),s&&a(mc),s&&a(Le)}}}const Dw={excerpt:`The python toolchain I use for my small projects doesn't change very often. It makes sense to save it somewhere and the then replicate it whenever I start a project. Or even better, use <a href="https://cookiecutter.readthedocs.io/">cookiecutter</a> and a config file to generate it.`,date:"2022-09-12T00:00:00.000Z",draft:!1,archived:!1,title:"Creating a Poetry-driven python project template with cookiecutter",tags:["python"]};class Rw extends Tw{constructor(j){super(),jw(this,j,null,Cw,Sw,{})}}export{Rw as default,Dw as metadata};
