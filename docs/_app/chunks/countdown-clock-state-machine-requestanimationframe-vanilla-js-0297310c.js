import{S as ks,i as ds,s as hs,e as o,j as r,t,c as p,a as c,d as a,l as k,g as e,a5 as ms,b as u,a6 as ln,f as i,F as s,J as Ca}from"./vendor-e04e0de5.js";function fs(ts){let m,Ua,un,S,v,G,jn,rn,y,Pn,U,An,Mn,X,Dn,Nn,kn,E,I,z,On,dn,D,Fn,hn,j,es=`<code class="language-js"><span class="token keyword">let</span> state<span class="token punctuation">;</span>
<span class="token keyword">const</span> entities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> StateMachine <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// states could be anything at all, but it only really</span>
  <span class="token comment">// makes sense to use strings or symbols. Maybe numbers.</span>
  <span class="token comment">// States need to be added before they can be triggered,</span>
  <span class="token comment">// just so that the engine knows which ones to reject.</span>
  <span class="token comment">// state can be either an array or a scalar</span>
  <span class="token function-variable function">addStates</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">stateOrStates</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>stateOrStates<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> states<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// all methods are chainable</span>
    <span class="token keyword">return</span> StateMachine<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">addEntity</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">entity</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// entities can be anything that has methods</span>
    entities<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If an entity needs to trigger states, it needs</span>
    <span class="token comment">// to implement a linkStateMachine method and</span>
    <span class="token comment">// save a reference to StateMachine.setState for</span>
    <span class="token comment">// later use</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span>linkStateMachine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      entity<span class="token punctuation">.</span><span class="token function">linkStateMachine</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span>setState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> StateMachine<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// only states previously added with addState can be set.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>states<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">!==</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state <span class="token operator">=</span> s<span class="token punctuation">;</span>
      entities<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entity</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// if an entity wants to respond to a state, it needs</span>
        <span class="token comment">// to implement a method by the same name as the state.</span>
        <span class="token comment">// If not there, nothing happens</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token keyword">in</span> entity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          entity<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> StateMachine<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,mn,d,Rn,B,Ln,qn,J,Hn,Gn,W,Xn,zn,V,Bn,Jn,Z,Wn,Vn,K,Zn,Kn,fn,N,Qn,wn,P,os=`<code class="language-js">StateMachine<span class="token punctuation">.</span><span class="token function">addStates</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">IS_PAUSED</span><span class="token punctuation">,</span> <span class="token constant">IS_RUNNING</span><span class="token punctuation">,</span> <span class="token constant">IS_COMPLETE</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addEntity</span><span class="token punctuation">(</span><span class="token constant">UI</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addEntity</span><span class="token punctuation">(</span>CountDownTimer<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">IS_PAUSED</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,yn,b,Yn,Q,$n,na,Y,aa,sa,bn,h,ta,$,ea,oa,nn,pa,ca,an,la,ia,sn,ua,ra,tn,ka,da,en,ha,ma,Sn,O,fa,vn,F,wa,En,_,g,on,ya,In,R,ba,_n,A,ps=`<code class="language-js"><span class="token keyword">const</span> component <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".Header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"js-time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"js-button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> lastTime<span class="token punctuation">;</span>
<span class="token keyword">let</span> setState<span class="token punctuation">;</span>

<span class="token keyword">let</span> nextState<span class="token punctuation">;</span>
<span class="token comment">// assigning handleClick to a var so that I can remove it</span>
<span class="token keyword">let</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">UI</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">linkStateMachine</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ss</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    setState <span class="token operator">=</span> ss<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> <span class="token literal-property property">onClick</span><span class="token operator">:</span> clickHandler<span class="token punctuation">,</span> time <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">updateTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".App"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token comment">// this to avoid memory leaks, although I don't need it in this app</span>
  <span class="token function-variable function">destroy</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> button<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span><span class="token constant">IS_RUNNING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"PAUSE"</span><span class="token punctuation">;</span>
    nextState <span class="token operator">=</span> <span class="token constant">IS_PAUSED</span><span class="token punctuation">;</span>
    <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">updateTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span><span class="token constant">IS_COMPLETE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    button<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">updateTime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    component<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span><span class="token constant">IS_PAUSED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"RUN"</span><span class="token punctuation">;</span>
    nextState <span class="token operator">=</span> <span class="token constant">IS_RUNNING</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">updateTime</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> newTime <span class="token operator">=</span> <span class="token function">formatTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTime <span class="token operator">===</span> lastTime<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    timer<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newTime<span class="token punctuation">;</span>
    lastTime <span class="token operator">=</span> newTime<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,gn,T,Sa,pn,va,Ea,Tn,x,C,cn,Ia,xn,L,_a,Cn,M,cs=`<code class="language-js"><span class="token keyword">let</span> latestStartTime<span class="token punctuation">;</span>
<span class="token keyword">let</span> animationRef<span class="token punctuation">;</span>
<span class="token keyword">let</span> isFinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> remainingTime<span class="token punctuation">;</span>
<span class="token keyword">let</span> callback <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">let</span> setState<span class="token punctuation">;</span>

<span class="token comment">// this is the heart of the animation.</span>
<span class="token keyword">const</span> <span class="token function-variable function">animate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// is it the first iteration in this cycle?</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>latestStartTime <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// make a note of the start time</span>
    latestStartTime <span class="token operator">=</span> timestamp <span class="token operator">+</span> remainingTime<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// the time to display now</span>
  <span class="token keyword">const</span> currentTime <span class="token operator">=</span> latestStartTime <span class="token operator">-</span> timestamp<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>animationRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// trigger a state event in the rest of the app</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">IS_COMPLETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// this is an internal state</span>
    isFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">callback</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// keep animating recursively</span>
  animationRef <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> currentTime<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> CountDownTimer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">linkStateMachine</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ss</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    setState <span class="token operator">=</span> ss<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> countdownFrom<span class="token punctuation">,</span> <span class="token literal-property property">callback</span><span class="token operator">:</span> cb <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    remainingTime <span class="token operator">=</span> countdownFrom<span class="token punctuation">;</span>
    callback <span class="token operator">=</span> cb<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span><span class="token constant">IS_RUNNING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFinished<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    animationRef <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

  <span class="token punctuation">[</span><span class="token constant">IS_PAUSED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>animationRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>latestStartTime <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// prepare for the next cycle</span>
      remainingTime <span class="token operator">=</span> latestStartTime <span class="token operator">-</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      latestStartTime <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`;return{c(){m=o("iframe"),un=r(),S=o("h2"),v=o("a"),G=o("span"),jn=t("Setting up the project with Parcel @ CodeSandbox.io"),rn=r(),y=o("p"),Pn=t("I am doing this in CodeSandbox, which has a lot of nice project starters with Babel and Parcel. With that I don\u2019t need to worry about bundles and using the "),U=o("a"),An=t("revealing module pattern"),Mn=t(" and all that jazz - I can just use standard ES6 modules and CSS files. The UI is built in basic HTML with CSS, all updated as needed by the javascript code, which is organised in modules. The main js file, "),X=o("code"),Dn=t("index.js"),Nn=t(", orchestrates all the modules and connects them together. The heart of the app is a state machine"),kn=r(),E=o("h2"),I=o("a"),z=o("span"),On=t("The State Machine"),dn=r(),D=o("p"),Fn=t("State machines are a neat way to organise apps; they encapsulate behaviour and I like the way they make us approach problems in terms of state. The implementation I came up with is very simple, basically a pub / sub pattern in which subscribers are able to trigger state changes as well. The state machine source file lives in the modules/ folder and exports a singleton. It\u2019s generic enough it could be dropped in another project"),hn=r(),j=o("pre"),mn=r(),d=o("p"),Rn=t("The state machine offers three methods: "),B=o("code"),Ln=t("addStates"),qn=t(", "),J=o("code"),Hn=t("addEntity"),Gn=t(", "),W=o("code"),Xn=t("setState"),zn=t(", all chainable. \u2018States\u2019 can technically be anything at all, but it only really make sense to use strings or symbols. Maybe numbers or Date objects if you are so inclined. "),V=o("code"),Bn=t("addStates"),Jn=t(" simply stores a list of these states, and the state machine will not set a state with "),Z=o("code"),Wn=t("setState"),Vn=t(" event unless the state was previously added with "),K=o("code"),Zn=t("addStates"),Kn=t(" (it will fail silently)."),fn=r(),N=o("p"),Qn=t("An \u2018entity\u2019 here is anything that is expected to respond to, or trigger, state changes. It can be any type of JS variable which is not undefine or null. Entities can respond to state changes by implementing a method with the same name as the state, and if they do not need to respond to a specific state change they simply do not implement the corresponding method; the state handling methods are basically mixed in into a \u2018normal\u2019 object. Additionally, they can have other methods of their own. For example, this is how it is used in this countdown example (IS_PAUSED, IS_RUNNING, IS_COMPLETE are symbols imported from a constants.js file):"),wn=r(),P=o("pre"),yn=r(),b=o("p"),Yn=t("If "),Q=o("code"),$n=t("UI"),na=t(" has a method called "),Y=o("code"),aa=t("[IS_PAUSED]"),sa=t(" (it does) then it will be called when the app starts up, and the same for CountDownTimer."),bn=r(),h=o("p"),ta=t("Additionally if a module needs to trigger a state change, it can implement a "),$=o("code"),ea=t("linkStateMachine"),oa=t(" method, which takes a reference to the state machine\u2019s "),nn=o("code"),pa=t("setState"),ca=t(" method as its sole argument. "),an=o("code"),la=t("linkStateMachine"),ia=t(" will be called when a reference to the module is added to the state machine with "),sn=o("code"),ua=t("addEntity"),ra=t("; the module can then store that reference internally, so that it can call it whenever it needs. For example, the countdown module will call "),tn=o("code"),ka=t("setState(IS_COMPLETE)"),da=t(" when the countdown reaches 0, and the UI will change accordindly. The button in the UI also calls "),en=o("code"),ha=t("setState"),ma=t(" whenever it\u2019s clicked."),Sn=r(),O=o("p"),fa=t("The state machine is used to orchestrate changes among its subscribers, it doesn\u2019t really know anything about the states at all except for keeping a list of what states are allowed. It is the entities which encapsulate the logic and know what to do."),vn=r(),F=o("p"),wa=t("Note that the actual countdown \u201Canimation\u201D doesn\u2019t actually go through the state machine - rather, it feeds directly into the UI module. This is done to avoid the extra overhead and increase performance. Conceptually it also makes sense: when changing the time in the UI, the app is always in the same state, \u2018IS_RUNNING\u2019. One could instead see each seconds passing as a different state - this may make sense, for example, if you have a few components all animating in sync. But the current code works well for the case at hand."),En=r(),_=o("h2"),g=o("a"),on=o("span"),ya=t("The UI module"),In=r(),R=o("p"),ba=t("The UI is actually built in HTML; the UI module simply finds the DOM elements it needs (the time and the button) and updates them as needed in response to state changes. It implements methods for each state, and it can trigger a state change when the button is clicked on"),_n=r(),A=o("pre"),gn=r(),T=o("p"),Sa=t("The module uses a util function, "),pn=o("code"),va=t("formatDate"),Ea=t(", to convert the time it gets from the countdown timer into the \u2018XX:XX\u2019 format. To avoid touching the DOM unless needed, it stores a copy of the last formatted time it has set, and will stop unless it has changed"),Tn=r(),x=o("h2"),C=o("a"),cn=o("span"),Ia=t("The Countdown timer"),xn=r(),L=o("p"),_a=t("The timer only responds to the IS_RUNNING and IS_PAUSED states. It uses requestAnimationFrame calling itself recursively to do the counting, and since requestAnimationFrame passes on an unknown timestamp to its method, a few variables are needed to keep track of where we are."),Cn=r(),M=o("pre"),this.h()},l(n){m=p(n,"IFRAME",{src:!0,style:!0,title:!0,sandbox:!0}),c(m).forEach(a),un=k(n),S=p(n,"H2",{id:!0});var l=c(S);v=p(l,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ja=c(v);G=p(ja,"SPAN",{class:!0}),c(G).forEach(a),ja.forEach(a),jn=e(l,"Setting up the project with Parcel @ CodeSandbox.io"),l.forEach(a),rn=k(n),y=p(n,"P",{});var q=c(y);Pn=e(q,"I am doing this in CodeSandbox, which has a lot of nice project starters with Babel and Parcel. With that I don\u2019t need to worry about bundles and using the "),U=p(q,"A",{href:!0,rel:!0});var Pa=c(U);An=e(Pa,"revealing module pattern"),Pa.forEach(a),Mn=e(q," and all that jazz - I can just use standard ES6 modules and CSS files. The UI is built in basic HTML with CSS, all updated as needed by the javascript code, which is organised in modules. The main js file, "),X=p(q,"CODE",{});var Aa=c(X);Dn=e(Aa,"index.js"),Aa.forEach(a),Nn=e(q,", orchestrates all the modules and connects them together. The heart of the app is a state machine"),q.forEach(a),kn=k(n),E=p(n,"H2",{id:!0});var ga=c(E);I=p(ga,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ma=c(I);z=p(Ma,"SPAN",{class:!0}),c(z).forEach(a),Ma.forEach(a),On=e(ga,"The State Machine"),ga.forEach(a),dn=k(n),D=p(n,"P",{});var Da=c(D);Fn=e(Da,"State machines are a neat way to organise apps; they encapsulate behaviour and I like the way they make us approach problems in terms of state. The implementation I came up with is very simple, basically a pub / sub pattern in which subscribers are able to trigger state changes as well. The state machine source file lives in the modules/ folder and exports a singleton. It\u2019s generic enough it could be dropped in another project"),Da.forEach(a),hn=k(n),j=p(n,"PRE",{class:!0});var ls=c(j);ls.forEach(a),mn=k(n),d=p(n,"P",{});var f=c(d);Rn=e(f,"The state machine offers three methods: "),B=p(f,"CODE",{});var Na=c(B);Ln=e(Na,"addStates"),Na.forEach(a),qn=e(f,", "),J=p(f,"CODE",{});var Oa=c(J);Hn=e(Oa,"addEntity"),Oa.forEach(a),Gn=e(f,", "),W=p(f,"CODE",{});var Fa=c(W);Xn=e(Fa,"setState"),Fa.forEach(a),zn=e(f,", all chainable. \u2018States\u2019 can technically be anything at all, but it only really make sense to use strings or symbols. Maybe numbers or Date objects if you are so inclined. "),V=p(f,"CODE",{});var Ra=c(V);Bn=e(Ra,"addStates"),Ra.forEach(a),Jn=e(f," simply stores a list of these states, and the state machine will not set a state with "),Z=p(f,"CODE",{});var La=c(Z);Wn=e(La,"setState"),La.forEach(a),Vn=e(f," event unless the state was previously added with "),K=p(f,"CODE",{});var qa=c(K);Zn=e(qa,"addStates"),qa.forEach(a),Kn=e(f," (it will fail silently)."),f.forEach(a),fn=k(n),N=p(n,"P",{});var Ha=c(N);Qn=e(Ha,"An \u2018entity\u2019 here is anything that is expected to respond to, or trigger, state changes. It can be any type of JS variable which is not undefine or null. Entities can respond to state changes by implementing a method with the same name as the state, and if they do not need to respond to a specific state change they simply do not implement the corresponding method; the state handling methods are basically mixed in into a \u2018normal\u2019 object. Additionally, they can have other methods of their own. For example, this is how it is used in this countdown example (IS_PAUSED, IS_RUNNING, IS_COMPLETE are symbols imported from a constants.js file):"),Ha.forEach(a),wn=k(n),P=p(n,"PRE",{class:!0});var is=c(P);is.forEach(a),yn=k(n),b=p(n,"P",{});var H=c(b);Yn=e(H,"If "),Q=p(H,"CODE",{});var Ga=c(Q);$n=e(Ga,"UI"),Ga.forEach(a),na=e(H," has a method called "),Y=p(H,"CODE",{});var Xa=c(Y);aa=e(Xa,"[IS_PAUSED]"),Xa.forEach(a),sa=e(H," (it does) then it will be called when the app starts up, and the same for CountDownTimer."),H.forEach(a),bn=k(n),h=p(n,"P",{});var w=c(h);ta=e(w,"Additionally if a module needs to trigger a state change, it can implement a "),$=p(w,"CODE",{});var za=c($);ea=e(za,"linkStateMachine"),za.forEach(a),oa=e(w," method, which takes a reference to the state machine\u2019s "),nn=p(w,"CODE",{});var Ba=c(nn);pa=e(Ba,"setState"),Ba.forEach(a),ca=e(w," method as its sole argument. "),an=p(w,"CODE",{});var Ja=c(an);la=e(Ja,"linkStateMachine"),Ja.forEach(a),ia=e(w," will be called when a reference to the module is added to the state machine with "),sn=p(w,"CODE",{});var Wa=c(sn);ua=e(Wa,"addEntity"),Wa.forEach(a),ra=e(w,"; the module can then store that reference internally, so that it can call it whenever it needs. For example, the countdown module will call "),tn=p(w,"CODE",{});var Va=c(tn);ka=e(Va,"setState(IS_COMPLETE)"),Va.forEach(a),da=e(w," when the countdown reaches 0, and the UI will change accordindly. The button in the UI also calls "),en=p(w,"CODE",{});var Za=c(en);ha=e(Za,"setState"),Za.forEach(a),ma=e(w," whenever it\u2019s clicked."),w.forEach(a),Sn=k(n),O=p(n,"P",{});var Ka=c(O);fa=e(Ka,"The state machine is used to orchestrate changes among its subscribers, it doesn\u2019t really know anything about the states at all except for keeping a list of what states are allowed. It is the entities which encapsulate the logic and know what to do."),Ka.forEach(a),vn=k(n),F=p(n,"P",{});var Qa=c(F);wa=e(Qa,"Note that the actual countdown \u201Canimation\u201D doesn\u2019t actually go through the state machine - rather, it feeds directly into the UI module. This is done to avoid the extra overhead and increase performance. Conceptually it also makes sense: when changing the time in the UI, the app is always in the same state, \u2018IS_RUNNING\u2019. One could instead see each seconds passing as a different state - this may make sense, for example, if you have a few components all animating in sync. But the current code works well for the case at hand."),Qa.forEach(a),En=k(n),_=p(n,"H2",{id:!0});var Ta=c(_);g=p(Ta,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ya=c(g);on=p(Ya,"SPAN",{class:!0}),c(on).forEach(a),Ya.forEach(a),ya=e(Ta,"The UI module"),Ta.forEach(a),In=k(n),R=p(n,"P",{});var $a=c(R);ba=e($a,"The UI is actually built in HTML; the UI module simply finds the DOM elements it needs (the time and the button) and updates them as needed in response to state changes. It implements methods for each state, and it can trigger a state change when the button is clicked on"),$a.forEach(a),_n=k(n),A=p(n,"PRE",{class:!0});var us=c(A);us.forEach(a),gn=k(n),T=p(n,"P",{});var Un=c(T);Sa=e(Un,"The module uses a util function, "),pn=p(Un,"CODE",{});var ns=c(pn);va=e(ns,"formatDate"),ns.forEach(a),Ea=e(Un,", to convert the time it gets from the countdown timer into the \u2018XX:XX\u2019 format. To avoid touching the DOM unless needed, it stores a copy of the last formatted time it has set, and will stop unless it has changed"),Un.forEach(a),Tn=k(n),x=p(n,"H2",{id:!0});var xa=c(x);C=p(xa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var as=c(C);cn=p(as,"SPAN",{class:!0}),c(cn).forEach(a),as.forEach(a),Ia=e(xa,"The Countdown timer"),xa.forEach(a),xn=k(n),L=p(n,"P",{});var ss=c(L);_a=e(ss,"The timer only responds to the IS_RUNNING and IS_PAUSED states. It uses requestAnimationFrame calling itself recursively to do the counting, and since requestAnimationFrame passes on an unknown timestamp to its method, a few variables are needed to keep track of where we are."),ss.forEach(a),Cn=k(n),M=p(n,"PRE",{class:!0});var rs=c(M);rs.forEach(a),this.h()},h(){ms(m.src,Ua="https://codesandbox.io/embed/vanilla-js-countdown-clock-kslrp?editorsize=65&codemirror=1&fontsize=14&theme=dark&view=split")||u(m,"src",Ua),ln(m,"width","100%"),ln(m,"height","500px"),ln(m,"border","0"),ln(m,"border-radius","4px"),ln(m,"overflow","hidden"),u(m,"title","Vanilla JS countdown clock"),u(m,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),u(G,"class","icon icon-link"),u(v,"aria-hidden","true"),u(v,"tabindex","-1"),u(v,"href","#setting-up-the-project-with-parcel--codesandboxio"),u(S,"id","setting-up-the-project-with-parcel--codesandboxio"),u(U,"href","https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript"),u(U,"rel","nofollow"),u(z,"class","icon icon-link"),u(I,"aria-hidden","true"),u(I,"tabindex","-1"),u(I,"href","#the-state-machine"),u(E,"id","the-state-machine"),u(j,"class","language-js"),u(P,"class","language-js"),u(on,"class","icon icon-link"),u(g,"aria-hidden","true"),u(g,"tabindex","-1"),u(g,"href","#the-ui-module"),u(_,"id","the-ui-module"),u(A,"class","language-js"),u(cn,"class","icon icon-link"),u(C,"aria-hidden","true"),u(C,"tabindex","-1"),u(C,"href","#the-countdown-timer"),u(x,"id","the-countdown-timer"),u(M,"class","language-js")},m(n,l){i(n,m,l),i(n,un,l),i(n,S,l),s(S,v),s(v,G),s(S,jn),i(n,rn,l),i(n,y,l),s(y,Pn),s(y,U),s(U,An),s(y,Mn),s(y,X),s(X,Dn),s(y,Nn),i(n,kn,l),i(n,E,l),s(E,I),s(I,z),s(E,On),i(n,dn,l),i(n,D,l),s(D,Fn),i(n,hn,l),i(n,j,l),j.innerHTML=es,i(n,mn,l),i(n,d,l),s(d,Rn),s(d,B),s(B,Ln),s(d,qn),s(d,J),s(J,Hn),s(d,Gn),s(d,W),s(W,Xn),s(d,zn),s(d,V),s(V,Bn),s(d,Jn),s(d,Z),s(Z,Wn),s(d,Vn),s(d,K),s(K,Zn),s(d,Kn),i(n,fn,l),i(n,N,l),s(N,Qn),i(n,wn,l),i(n,P,l),P.innerHTML=os,i(n,yn,l),i(n,b,l),s(b,Yn),s(b,Q),s(Q,$n),s(b,na),s(b,Y),s(Y,aa),s(b,sa),i(n,bn,l),i(n,h,l),s(h,ta),s(h,$),s($,ea),s(h,oa),s(h,nn),s(nn,pa),s(h,ca),s(h,an),s(an,la),s(h,ia),s(h,sn),s(sn,ua),s(h,ra),s(h,tn),s(tn,ka),s(h,da),s(h,en),s(en,ha),s(h,ma),i(n,Sn,l),i(n,O,l),s(O,fa),i(n,vn,l),i(n,F,l),s(F,wa),i(n,En,l),i(n,_,l),s(_,g),s(g,on),s(_,ya),i(n,In,l),i(n,R,l),s(R,ba),i(n,_n,l),i(n,A,l),A.innerHTML=ps,i(n,gn,l),i(n,T,l),s(T,Sa),s(T,pn),s(pn,va),s(T,Ea),i(n,Tn,l),i(n,x,l),s(x,C),s(C,cn),s(x,Ia),i(n,xn,l),i(n,L,l),s(L,_a),i(n,Cn,l),i(n,M,l),M.innerHTML=cs},p:Ca,i:Ca,o:Ca,d(n){n&&a(m),n&&a(un),n&&a(S),n&&a(rn),n&&a(y),n&&a(kn),n&&a(E),n&&a(dn),n&&a(D),n&&a(hn),n&&a(j),n&&a(mn),n&&a(d),n&&a(fn),n&&a(N),n&&a(wn),n&&a(P),n&&a(yn),n&&a(b),n&&a(bn),n&&a(h),n&&a(Sn),n&&a(O),n&&a(vn),n&&a(F),n&&a(En),n&&a(_),n&&a(In),n&&a(R),n&&a(_n),n&&a(A),n&&a(gn),n&&a(T),n&&a(Tn),n&&a(x),n&&a(xn),n&&a(L),n&&a(Cn),n&&a(M)}}}const ys={date:"2020-03-29T00:00:00.000Z",published:!0,archived:!1,excerpt:'I wanted to play with state machines and <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">requestAnimationFrame</a> in vanilla JS, so I came up with the idea of a simple countdown clock.',title:"A countdown clock using requestAnimationFrame, a state machine, and vanilla JS",prev:"music-remove-album-ratings-applescript",next:"setting-css-values-dynamically-in-svelte",tags:["js"]};class bs extends ks{constructor(m){super();ds(this,m,null,fs,hs,{})}}export{bs as default,ys as metadata};
