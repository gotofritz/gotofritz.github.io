import{S as xs,i as Fs,s as gs,e as t,t as r,k as u,c as o,a as p,d as e,h as i,m as d,b as c,g as l,I as s,E as Ue}from"./index-6e518972.js";function As(rs){let h,v,W,Ra,da,w,ja,L,Xa,Ja,ka,_,y,K,Za,fa,b,Ga,Q,Wa,Ka,ha,O,is=`<code class="language-python"><span class="token keyword">from</span> faker<span class="token punctuation">.</span>provider <span class="token keyword">import</span> BaseProvider
<span class="token keyword">from</span> models<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> Cloze

<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>BaseProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">cloze</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        text<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        obfuscated<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        guessed<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Model a Cloze entity"""</span>
        <span class="token keyword">return</span> Cloze<span class="token punctuation">(</span>
            text<span class="token operator">=</span>text <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            obfuscated<span class="token operator">=</span>obfuscated <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            guessed<span class="token operator">=</span>guessed<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">clozes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>Cloze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> etc
</code>`,ma,I,Qa,V,Va,Ya,va,H,cs=`<code class="language-python">
cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='zTbJuPgkCvtGJtms', obfuscated='LkqKBZBNLRYbAvXj', guessed=False)</span>

cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"TEXT"</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='TEXT', obfuscated='pdyQXUBhSyflBXvZ', guessed=False)</span>

list_of_clozes <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># [</span>
<span class="token comment">#   Cloze(text='EQKHvVUIJFllEZUg', obfuscated='ymEaSvqcYPdsGeFw', guessed=False)</span>
<span class="token comment">#   Cloze(text='IvSMtFGVXEGdODoC', obfuscated='pPTkcmlvCOizEqZe', guessed=False)</span>
<span class="token comment"># ]</span></code>`,wa,E,P,Y,$a,_a,k,ae,$,ee,se,N,ne,te,aa,oe,pe,ea,le,re,sa,ie,ce,na,ue,de,ya,U,us=`<code class="language-python"><span class="token keyword">from</span> faker<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>lorem<span class="token punctuation">.</span>en_US <span class="token keyword">import</span> Provider <span class="token keyword">as</span> LoremProvider
<span class="token keyword">from</span> models<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> Cloze

<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>LoremProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">words_words</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      twice
      <span class="token keyword">for</span> w <span class="token keyword">in</span> self<span class="token punctuation">.</span>words<span class="token punctuation">(</span>nb<span class="token operator">=</span>nb<span class="token punctuation">)</span> <span class="token comment"># outer loop</span>
      <span class="token keyword">for</span> twice <span class="token keyword">in</span> <span class="token punctuation">[</span>w<span class="token punctuation">,</span> w<span class="token punctuation">]</span>        <span class="token comment"># inner loop</span>
      <span class="token punctuation">]</span>
</code>`,ba,x,ke,ta,fe,he,Ia,F,g,oa,me,Ea,m,ve,pa,we,_e,la,ye,be,Pa,M,ds=`<code class="language-bash">src/language_learning/
\u2502
 <span class="token punctuation">..</span>.
\u2514\u2500\u2500 faker_providers
    \u251C\u2500\u2500 __init__.py
    \u251C\u2500\u2500 en_US
    \u251C\u2500\u2500 \u2514\u2500\u2500 __init__py
    \u251C\u2500\u2500 <span class="token punctuation">..</span>. other locales <span class="token punctuation">..</span>
 <span class="token punctuation">..</span>.
\u2502</code>`,xa,A,Ie,ra,Ee,Pe,Fa,D,ks=`<code class="language-python"><span class="token comment"># tests/conftest.py</span>
<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker

<span class="token keyword">from</span> app<span class="token punctuation">.</span>fake_providers<span class="token punctuation">.</span>language_training <span class="token keyword">import</span>   Provider <span class="token keyword">as</span> LanguageTrainingProvider

fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>
A_RANDOM_SEED <span class="token operator">=</span> <span class="token number">1369</span>
Faker<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>A_RANDOM_SEED<span class="token punctuation">)</span>
fake<span class="token punctuation">.</span>add_provider<span class="token punctuation">(</span>LanguageTrainingProvider<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fake"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fixture_fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Pass a seeded Faker instance as a fixture"""</span>
    <span class="token keyword">return</span> fake</code>`,ga,X,xe,Aa,q,fs=`<code class="language-python">
<span class="token keyword">def</span> <span class="token function">test_something</span><span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># fake.words is from a standard Faker provider</span>
  <span class="token keyword">assert</span> fake<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">123</span>

  <span class="token comment"># fake.clozes is the one I just created</span>
  <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">8</span></code>`,Ta,T,C,ia,Fe,Ca,z,ge,ca,Ae,Te,za,R,hs=`<code class="language-bash">\u2514\u2500\u2500 language_learning
    \u251C\u2500\u2500 __init__.py
    \u2514\u2500\u2500 en_US
        \u2514\u2500\u2500 __init__py</code>`,Sa,J,Ce,Ba,j,ms=`<code class="language-python"><span class="token comment"># src/fake_providers/language_learning/en_US/__init__.py</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> Provider <span class="token keyword">as</span> LanguageLearningProvider


<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>LanguageLearningProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Fallback locale"""</span>
</code>`,La,S,B,ua,ze,Oa,Z,Se;return{c(){h=t("h2"),v=t("a"),W=t("span"),Ra=r("Use case"),da=u(),w=t("p"),ja=r("For example, I am working on a small language training app. One of the data structures I use is what I call a \u201CCloze\u201D, inspired by "),L=t("a"),Xa=r("Anki"),Ja=r(". It has two strings: a to-be-solved version, and a solved version. And a boolean flag to say whether it was solved or not. These Clozes appear all over the app. I could create a mock. And I will when I need to call its methods or check whether some of the code does. But most of the time, I just need data in the right shape to pass around. Faker is great for that."),ka=u(),_=t("h2"),y=t("a"),K=t("span"),Za=r("Creating a provider in Faker"),fa=u(),b=t("p"),Ga=r("At the time of writing, the Faker doc doesn\u2019t quite explain how to create your own provider. Luckily reverse engineering some of the existing ones is not too hard. It boils down to extending the "),Q=t("code"),Wa=r("BaseProvider"),Ka=r(" class. Then every method becomes a generator. For example"),ha=u(),O=t("pre"),ma=u(),I=t("p"),Qa=r("Note how I can use Faker\u2019s BaseProvider\u2019s methods in my own provider. For example \u201Crandom_letters\u201D in "),V=t("code"),Va=r('"".join(self.random_letters())'),Ya=r(". Once I add the provider to Faker (more on that below), I can then use it in my tests. In the example above, I can create a single Cloze, or a list of them, with"),va=u(),H=t("pre"),wa=u(),E=t("h2"),P=t("a"),Y=t("span"),$a=r("Accessing Faker\u2019s standard providers\u2019 methods in a custom provider"),_a=u(),k=t("p"),ae=r("In the example above I could use "),$=t("code"),ee=r("self.random_letters"),se=r(" from BaseProvider, as well as all the other "),N=t("a"),ne=r("BaseProvider fakes"),te=r(". But not the others. In fact, I used "),aa=t("code"),oe=r("random_letters"),pe=r(" because I didn\u2019t know how to access the one I really wanted: "),ea=t("i"),le=r("words"),re=r(", from the "),sa=t("i"),ie=r("Lorem"),ce=r(" provider. Turns out it "),na=t("em"),ue=r("can"),de=r(" be done, although it is a bit hacky."),ya=u(),U=t("pre"),ba=u(),x=t("p"),ke=r("In the example above I import a specific locale of the provider ("),ta=t("code"),fe=r("faker.provider.lorem.en_US"),he=r("). Then I have all of its methods available. Here I am using a nested array comprehension to repeat each list item twice. Using a fixed locale works well because my fakes rarely need localisation."),Ia=u(),F=t("h2"),g=t("a"),oa=t("span"),me=r("Adding a provider to Faker"),Ea=u(),m=t("p"),ve=r("Providers in Faker follow an odd structure. A provider is a class called Provider which inherits from Faker\u2019s BaseProvider. The code lives in the package\u2019s "),pa=t("code"),we=r("__init__.py"),_e=r(", not a "),la=t("em"),ye=r("provider.py"),be=r(" file. That Provider class is all you need for a basic use case with no locales. If you need localised versions, they are alwyas packages named after the locale. They live one level down from the main Provider, and consists of a class also called Provider, which inherit from the Provider one level up."),Pa=u(),M=t("pre"),xa=u(),A=t("p"),Ie=r("I import my providers in my "),ra=t("code"),Ee=r("conftest.py"),Pe=r(" file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with"),Fa=u(),D=t("pre"),ga=u(),X=t("p"),xe=r("Now I can use the provier in my tests with"),Aa=u(),q=t("pre"),Ta=u(),T=t("h2"),C=t("a"),ia=t("span"),Fe=r("A Faker provider for all locales"),Ca=u(),z=t("p"),ge=r("If I never use locales, a simple class like the one in the example above will Just Work\u2122. But in the rare cases when I use different locales for my fakes for testing, it won\u2019t. Since I\u2019ll never create a different version for each locale, I need a workaround. What I can do is to create a single locale, "),ca=t("code"),Ae=r("en_US"),Te=r(", which simply inherits from the my main provider. Then Faker will fall back to it when it can\u2019t find any of the other locales."),za=u(),R=t("pre"),Sa=u(),J=t("p"),Ce=r("The class is minimal"),Ba=u(),j=t("pre"),La=u(),S=t("h2"),B=t("a"),ua=t("span"),ze=r("Conclusion"),Oa=u(),Z=t("p"),Se=r("I find using Faker keeps the code quite clean. Of course, I cannot call any of Cloze\u2019s methods. For that I would need to create mocks, but that is a different story."),this.h()},l(a){h=o(a,"H2",{id:!0});var n=p(h);v=o(n,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Me=p(v);W=o(Me,"SPAN",{class:!0}),p(W).forEach(e),Me.forEach(e),Ra=i(n,"Use case"),n.forEach(e),da=d(a),w=o(a,"P",{});var Ha=p(w);ja=i(Ha,"For example, I am working on a small language training app. One of the data structures I use is what I call a \u201CCloze\u201D, inspired by "),L=o(Ha,"A",{href:!0,rel:!0});var De=p(L);Xa=i(De,"Anki"),De.forEach(e),Ja=i(Ha,". It has two strings: a to-be-solved version, and a solved version. And a boolean flag to say whether it was solved or not. These Clozes appear all over the app. I could create a mock. And I will when I need to call its methods or check whether some of the code does. But most of the time, I just need data in the right shape to pass around. Faker is great for that."),Ha.forEach(e),ka=d(a),_=o(a,"H2",{id:!0});var Be=p(_);y=o(Be,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qe=p(y);K=o(qe,"SPAN",{class:!0}),p(K).forEach(e),qe.forEach(e),Za=i(Be,"Creating a provider in Faker"),Be.forEach(e),fa=d(a),b=o(a,"P",{});var Na=p(b);Ga=i(Na,"At the time of writing, the Faker doc doesn\u2019t quite explain how to create your own provider. Luckily reverse engineering some of the existing ones is not too hard. It boils down to extending the "),Q=o(Na,"CODE",{});var Re=p(Q);Wa=i(Re,"BaseProvider"),Re.forEach(e),Ka=i(Na," class. Then every method becomes a generator. For example"),Na.forEach(e),ha=d(a),O=o(a,"PRE",{class:!0});var vs=p(O);vs.forEach(e),ma=d(a),I=o(a,"P",{});var Ua=p(I);Qa=i(Ua,"Note how I can use Faker\u2019s BaseProvider\u2019s methods in my own provider. For example \u201Crandom_letters\u201D in "),V=o(Ua,"CODE",{});var je=p(V);Va=i(je,'"".join(self.random_letters())'),je.forEach(e),Ya=i(Ua,". Once I add the provider to Faker (more on that below), I can then use it in my tests. In the example above, I can create a single Cloze, or a list of them, with"),Ua.forEach(e),va=d(a),H=o(a,"PRE",{class:!0});var ws=p(H);ws.forEach(e),wa=d(a),E=o(a,"H2",{id:!0});var Le=p(E);P=o(Le,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xe=p(P);Y=o(Xe,"SPAN",{class:!0}),p(Y).forEach(e),Xe.forEach(e),$a=i(Le,"Accessing Faker\u2019s standard providers\u2019 methods in a custom provider"),Le.forEach(e),_a=d(a),k=o(a,"P",{});var f=p(k);ae=i(f,"In the example above I could use "),$=o(f,"CODE",{});var Je=p($);ee=i(Je,"self.random_letters"),Je.forEach(e),se=i(f," from BaseProvider, as well as all the other "),N=o(f,"A",{href:!0,rel:!0});var Ze=p(N);ne=i(Ze,"BaseProvider fakes"),Ze.forEach(e),te=i(f,". But not the others. In fact, I used "),aa=o(f,"CODE",{});var Ge=p(aa);oe=i(Ge,"random_letters"),Ge.forEach(e),pe=i(f," because I didn\u2019t know how to access the one I really wanted: "),ea=o(f,"I",{});var We=p(ea);le=i(We,"words"),We.forEach(e),re=i(f,", from the "),sa=o(f,"I",{});var Ke=p(sa);ie=i(Ke,"Lorem"),Ke.forEach(e),ce=i(f," provider. Turns out it "),na=o(f,"EM",{});var Qe=p(na);ue=i(Qe,"can"),Qe.forEach(e),de=i(f," be done, although it is a bit hacky."),f.forEach(e),ya=d(a),U=o(a,"PRE",{class:!0});var _s=p(U);_s.forEach(e),ba=d(a),x=o(a,"P",{});var Ma=p(x);ke=i(Ma,"In the example above I import a specific locale of the provider ("),ta=o(Ma,"CODE",{});var Ve=p(ta);fe=i(Ve,"faker.provider.lorem.en_US"),Ve.forEach(e),he=i(Ma,"). Then I have all of its methods available. Here I am using a nested array comprehension to repeat each list item twice. Using a fixed locale works well because my fakes rarely need localisation."),Ma.forEach(e),Ia=d(a),F=o(a,"H2",{id:!0});var Oe=p(F);g=o(Oe,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ye=p(g);oa=o(Ye,"SPAN",{class:!0}),p(oa).forEach(e),Ye.forEach(e),me=i(Oe,"Adding a provider to Faker"),Oe.forEach(e),Ea=d(a),m=o(a,"P",{});var G=p(m);ve=i(G,"Providers in Faker follow an odd structure. A provider is a class called Provider which inherits from Faker\u2019s BaseProvider. The code lives in the package\u2019s "),pa=o(G,"CODE",{});var $e=p(pa);we=i($e,"__init__.py"),$e.forEach(e),_e=i(G,", not a "),la=o(G,"EM",{});var as=p(la);ye=i(as,"provider.py"),as.forEach(e),be=i(G," file. That Provider class is all you need for a basic use case with no locales. If you need localised versions, they are alwyas packages named after the locale. They live one level down from the main Provider, and consists of a class also called Provider, which inherit from the Provider one level up."),G.forEach(e),Pa=d(a),M=o(a,"PRE",{class:!0});var ys=p(M);ys.forEach(e),xa=d(a),A=o(a,"P",{});var Da=p(A);Ie=i(Da,"I import my providers in my "),ra=o(Da,"CODE",{});var es=p(ra);Ee=i(es,"conftest.py"),es.forEach(e),Pe=i(Da," file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with"),Da.forEach(e),Fa=d(a),D=o(a,"PRE",{class:!0});var bs=p(D);bs.forEach(e),ga=d(a),X=o(a,"P",{});var ss=p(X);xe=i(ss,"Now I can use the provier in my tests with"),ss.forEach(e),Aa=d(a),q=o(a,"PRE",{class:!0});var Is=p(q);Is.forEach(e),Ta=d(a),T=o(a,"H2",{id:!0});var He=p(T);C=o(He,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ns=p(C);ia=o(ns,"SPAN",{class:!0}),p(ia).forEach(e),ns.forEach(e),Fe=i(He,"A Faker provider for all locales"),He.forEach(e),Ca=d(a),z=o(a,"P",{});var qa=p(z);ge=i(qa,"If I never use locales, a simple class like the one in the example above will Just Work\u2122. But in the rare cases when I use different locales for my fakes for testing, it won\u2019t. Since I\u2019ll never create a different version for each locale, I need a workaround. What I can do is to create a single locale, "),ca=o(qa,"CODE",{});var ts=p(ca);Ae=i(ts,"en_US"),ts.forEach(e),Te=i(qa,", which simply inherits from the my main provider. Then Faker will fall back to it when it can\u2019t find any of the other locales."),qa.forEach(e),za=d(a),R=o(a,"PRE",{class:!0});var Es=p(R);Es.forEach(e),Sa=d(a),J=o(a,"P",{});var os=p(J);Ce=i(os,"The class is minimal"),os.forEach(e),Ba=d(a),j=o(a,"PRE",{class:!0});var Ps=p(j);Ps.forEach(e),La=d(a),S=o(a,"H2",{id:!0});var Ne=p(S);B=o(Ne,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ps=p(B);ua=o(ps,"SPAN",{class:!0}),p(ua).forEach(e),ps.forEach(e),ze=i(Ne,"Conclusion"),Ne.forEach(e),Oa=d(a),Z=o(a,"P",{});var ls=p(Z);Se=i(ls,"I find using Faker keeps the code quite clean. Of course, I cannot call any of Cloze\u2019s methods. For that I would need to create mocks, but that is a different story."),ls.forEach(e),this.h()},h(){c(W,"class","icon icon-link"),c(v,"aria-hidden","true"),c(v,"tabindex","-1"),c(v,"href","#use-case"),c(h,"id","use-case"),c(L,"href","https://docs.ankiweb.net/editing.html#cloze-deletion"),c(L,"rel","nofollow"),c(K,"class","icon icon-link"),c(y,"aria-hidden","true"),c(y,"tabindex","-1"),c(y,"href","#creating-a-provider-in-faker"),c(_,"id","creating-a-provider-in-faker"),c(O,"class","language-python"),c(H,"class","language-python"),c(Y,"class","icon icon-link"),c(P,"aria-hidden","true"),c(P,"tabindex","-1"),c(P,"href","#accessing-fakers-standard-providers-methods-in-a-custom-provider"),c(E,"id","accessing-fakers-standard-providers-methods-in-a-custom-provider"),c(N,"href","https://faker.readthedocs.io/en/master/providers/baseprovider.html"),c(N,"rel","nofollow"),c(U,"class","language-python"),c(oa,"class","icon icon-link"),c(g,"aria-hidden","true"),c(g,"tabindex","-1"),c(g,"href","#adding-a-provider-to-faker"),c(F,"id","adding-a-provider-to-faker"),c(M,"class","language-bash"),c(D,"class","language-python"),c(q,"class","language-python"),c(ia,"class","icon icon-link"),c(C,"aria-hidden","true"),c(C,"tabindex","-1"),c(C,"href","#a-faker-provider-for-all-locales"),c(T,"id","a-faker-provider-for-all-locales"),c(R,"class","language-bash"),c(j,"class","language-python"),c(ua,"class","icon icon-link"),c(B,"aria-hidden","true"),c(B,"tabindex","-1"),c(B,"href","#conclusion"),c(S,"id","conclusion")},m(a,n){l(a,h,n),s(h,v),s(v,W),s(h,Ra),l(a,da,n),l(a,w,n),s(w,ja),s(w,L),s(L,Xa),s(w,Ja),l(a,ka,n),l(a,_,n),s(_,y),s(y,K),s(_,Za),l(a,fa,n),l(a,b,n),s(b,Ga),s(b,Q),s(Q,Wa),s(b,Ka),l(a,ha,n),l(a,O,n),O.innerHTML=is,l(a,ma,n),l(a,I,n),s(I,Qa),s(I,V),s(V,Va),s(I,Ya),l(a,va,n),l(a,H,n),H.innerHTML=cs,l(a,wa,n),l(a,E,n),s(E,P),s(P,Y),s(E,$a),l(a,_a,n),l(a,k,n),s(k,ae),s(k,$),s($,ee),s(k,se),s(k,N),s(N,ne),s(k,te),s(k,aa),s(aa,oe),s(k,pe),s(k,ea),s(ea,le),s(k,re),s(k,sa),s(sa,ie),s(k,ce),s(k,na),s(na,ue),s(k,de),l(a,ya,n),l(a,U,n),U.innerHTML=us,l(a,ba,n),l(a,x,n),s(x,ke),s(x,ta),s(ta,fe),s(x,he),l(a,Ia,n),l(a,F,n),s(F,g),s(g,oa),s(F,me),l(a,Ea,n),l(a,m,n),s(m,ve),s(m,pa),s(pa,we),s(m,_e),s(m,la),s(la,ye),s(m,be),l(a,Pa,n),l(a,M,n),M.innerHTML=ds,l(a,xa,n),l(a,A,n),s(A,Ie),s(A,ra),s(ra,Ee),s(A,Pe),l(a,Fa,n),l(a,D,n),D.innerHTML=ks,l(a,ga,n),l(a,X,n),s(X,xe),l(a,Aa,n),l(a,q,n),q.innerHTML=fs,l(a,Ta,n),l(a,T,n),s(T,C),s(C,ia),s(T,Fe),l(a,Ca,n),l(a,z,n),s(z,ge),s(z,ca),s(ca,Ae),s(z,Te),l(a,za,n),l(a,R,n),R.innerHTML=hs,l(a,Sa,n),l(a,J,n),s(J,Ce),l(a,Ba,n),l(a,j,n),j.innerHTML=ms,l(a,La,n),l(a,S,n),s(S,B),s(B,ua),s(S,ze),l(a,Oa,n),l(a,Z,n),s(Z,Se)},p:Ue,i:Ue,o:Ue,d(a){a&&e(h),a&&e(da),a&&e(w),a&&e(ka),a&&e(_),a&&e(fa),a&&e(b),a&&e(ha),a&&e(O),a&&e(ma),a&&e(I),a&&e(va),a&&e(H),a&&e(wa),a&&e(E),a&&e(_a),a&&e(k),a&&e(ya),a&&e(U),a&&e(ba),a&&e(x),a&&e(Ia),a&&e(F),a&&e(Ea),a&&e(m),a&&e(Pa),a&&e(M),a&&e(xa),a&&e(A),a&&e(Fa),a&&e(D),a&&e(ga),a&&e(X),a&&e(Aa),a&&e(q),a&&e(Ta),a&&e(T),a&&e(Ca),a&&e(z),a&&e(za),a&&e(R),a&&e(Sa),a&&e(J),a&&e(Ba),a&&e(j),a&&e(La),a&&e(S),a&&e(Oa),a&&e(Z)}}}const Cs={excerpt:"I am a big fan of Faker for testing. I find having a random mock data generator keeps tests clean. In fact, I tend to extend Faker with project specific providers. Here's how",date:"2022-09-24T00:00:00.000Z",draft:!1,archived:!1,title:"Faker providers for project specific data structure fakes, in Python",tags:["python","testing"]};class zs extends xs{constructor(h){super(),Fs(this,h,null,As,gs,{})}}export{zs as default,Cs as metadata};
