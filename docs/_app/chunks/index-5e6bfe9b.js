import{S as yh,i as vh,s as wh,e as o,t as p,k as u,c as s,a as i,d as t,h,m as c,b as r,Z as Tt,g as l,I as a,E as ar}from"./index-6e518972.js";var Eh="/_app/assets/states-0b97f1cb.png",bh="/_app/assets/stage-2d0e4f28.png",kh="/_app/assets/opportunity-19bbdd25.png",gh="/_app/assets/pool-e2a1bffb.png",Sh="/_app/assets/blank-slate-8ce157f3.png",Ih="/_app/assets/menu-c4f7bc99.png";function Ah(uh){let g,C,Ot,Ps,to,x,xt,Ts,Os,Re,xs,Ls,ao,Ne,Lt,Cs,Ms,oo,M,q,Ct,qs,so,je,Rs,io,R,N,Mt,Ns,no,Be,Gs,lo,G,U,qt,Us,ro,D,Ds,He,Vs,js,po,V,Bs,Rt,Hs,Fs,ho,f,Nt,Ys,Ws,Gt,Ks,zs,Ut,Js,Zs,Dt,Xs,Qs,Vt,$s,ei,jt,ti,ai,Bt,oi,uo,j,B,Ht,si,co,S,ii,Ft,ni,li,Ge,ri,pi,fo,H,F,Yt,hi,mo,Fe,ui,yo,Y,ci,Ye,di,fi,vo,We,mi,wo,W,K,Wt,yi,Eo,I,vi,Kt,wi,Ei,zt,bi,ki,bo,z,gi,Jt,Si,Ii,ko,J,Z,Zt,Ai,go,Ke,_i,So,X,Q,Xt,Pi,Io,$,ee,Qt,Ti,Ao,ze,Oi,_o,te,w,xi,$t,Li,Ci,ea,Mi,qi,ta,Ri,Ni,aa,Gi,Ui,Di,oa,Vi,Po,d,ji,sa,Bi,Hi,ia,Fi,Yi,na,Wi,Ki,la,zi,Ji,ra,Zi,Xi,pa,Qi,$i,ha,en,tn,To,Je,an,Oo,Ze,on,xo,ae,oe,ua,sn,Lo,Xe,Qe,or,Co,$e,nn,Mo,se,ie,ca,ln,qo,et,tt,sr,Ro,at,rn,No,ot,pn,Go,A,da,hn,un,fa,cn,dn,ma,fn,Uo,ne,le,ya,mn,Do,st,it,ir,Vo,nt,yn,jo,lt,vn,Bo,rt,wn,Ho,E,va,En,bn,wa,kn,gn,Ea,Sn,In,ba,An,Fo,re,pe,ka,_n,Yo,pt,ht,nr,Wo,ut,Pn,Ko,ct,Tn,zo,b,ga,On,xn,Sa,Ln,Cn,Ia,Mn,qn,Aa,Rn,Jo,he,ue,_a,Nn,Zo,dt,Gn,Xo,y,Ue,Un,Pa,Dn,Vn,jn,Ta,Bn,Hn,Oa,Fn,Yn,xa,Wn,Kn,La,zn,Qo,ft,Jn,$o,k,Ca,Zn,Xn,Ma,Qn,$n,qa,el,tl,Ra,al,es,ce,de,Na,ol,ts,mt,sl,as,yt,vt,lr,os,fe,me,Ga,il,ss,_,nl,Ua,ll,rl,Da,pl,hl,is,De,ch=`<code class="language-js"><span class="token comment">//const.gs</span>
<span class="token keyword">const</span> <span class="token constant">SS</span> <span class="token operator">=</span> SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getActiveSpreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ns,L,Va,ul,cl,ja,dl,fl,ls,Ve,dh=`<code class="language-js"><span class="token comment">// Code.js</span>
<span class="token keyword">function</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  SpreadsheetApp<span class="token punctuation">.</span><span class="token function">getActiveSpreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSpreadsheetTimeZone</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> menuEntries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  menuEntries<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"APP"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> doNothing <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"POOL"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> doNothing <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"OPPORTUNITY"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> doNothing <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"STAGE"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> doNothing <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"STATE"</span><span class="token punctuation">,</span> <span class="token literal-property property">functionName</span><span class="token operator">:</span> doNothing <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">SS</span><span class="token punctuation">.</span><span class="token function">addMenu</span><span class="token punctuation">(</span><span class="token string">"CRM 4.0"</span><span class="token punctuation">,</span> menuEntries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> doNothing <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></code>`,rs,wt,Et,rr,ps,ye,ve,Ba,ml,hs,we,Ee,Ha,yl,us,be,ke,Fa,vl,cs,ge,Se,Ya,wl,ds,Ie,Ae,Wa,El,fs,_e,Pe,Ka,bl,ms,Te,Oe,za,kl,ys,xe,Le,Ja,gl,vs,bt,Sl,ws,kt,Il,Es,P,Za,Al,_l,Xa,Pl,Tl,Qa,Ol,bs,gt,xl;return{c(){g=o("h2"),C=o("a"),Ot=o("span"),Ps=p("Need a CRM? Why not just use \u2026?"),to=u(),x=o("p"),xt=o("em"),Ts=p("Why not just use a real CRM"),Os=p("? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),Re=o("a"),xs=p("Capsule"),Ls=p(" and I found I spent most of my time trying to bend it to my needs."),ao=u(),Ne=o("p"),Lt=o("em"),Cs=p("Why not just use Trello"),Ms=p("? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),oo=u(),M=o("h2"),q=o("a"),Ct=o("span"),qs=p("Google Sheets with Apps Script is a great tool for quick tools and prototypes"),so=u(),je=o("p"),Rs=p("Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),io=u(),R=o("h2"),N=o("a"),Mt=o("span"),Ns=p("Tips on using Google Apps Script for prototyping"),no=u(),Be=o("p"),Gs=p("In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),lo=u(),G=o("h3"),U=o("a"),qt=o("span"),Us=p("1. Explicit interactions vs trying to build a SPA"),ro=u(),D=o("p"),Ds=p("Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),He=o("abbr"),Vs=p("SPA"),js=p(" with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),po=u(),V=o("p"),Bs=p("Just build your \u201Capp\u201D like in the good old days of the "),Rt=o("code"),Hs=p("cgi-bin"),Fs=p(". That is, completely stateless. The typical flow would be:"),ho=u(),f=o("ol"),Nt=o("li"),Ys=p("User selects cell(s) in worksheet (optional)"),Ws=u(),Gt=o("li"),Ks=p("User selects an entry from a custom menu which you have created"),zs=u(),Ut=o("li"),Js=p("The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s state from it"),Zs=u(),Dt=o("li"),Xs=p("the script does whatever processing it needs and updates the App state"),Qs=u(),Vt=o("li"),$s=p("the script updates the spreadsheet to match the new App state"),ei=u(),jt=o("li"),ti=p("the scripts finishes and the user is free to mess with the spreadsheet manually"),ai=u(),Bt=o("li"),oi=p("back to 1."),uo=u(),j=o("h3"),B=o("a"),Ht=o("span"),si=p("2. Resist the temptation to start coding straight away"),co=u(),S=o("p"),ii=p("The nice thing about prototyping with Google Sheets is that you can start without needing any scripting. Just do everything completely manually. You just need to "),Ft=o("em"),ni=p("think"),li=p(" like a script, and repeat actions mechanically. Requires a bit of discipline, but it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Ge=o("a"),ri=p("Lean"),pi=p(" than that!"),fo=u(),H=o("h3"),F=o("a"),Yt=o("span"),hi=p("3. Model your problem space first"),mo=u(),Fe=o("p"),ui=p("For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),yo=u(),Y=o("p"),ci=p("Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ye=o("abbr"),di=p("OOP"),fi=p(", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),vo=u(),We=o("p"),mi=p("something something layout of cells or multiple cells something"),wo=u(),W=o("h3"),K=o("a"),Wt=o("span"),yi=p("4. OOP is actually quite helpful (but there is a place for some FP too)"),Eo=u(),I=o("p"),vi=p("GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),Kt=o("code"),wi=p("recalculateAmount"),Ei=p(" method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),zt=o("code"),bi=p("convertToMetric"),ki=p(" method to your Ingredient class. And so on. Under the bonnet then the abstraction will interact with one of the GAS objects, and create a Sheet, or move a Range, and so on."),bo=u(),z=o("p"),gi=p("FP becomes useful when you want to share utilities, especially formatting. For example, an "),Jt=o("code"),Si=p("asArchive"),Ii=p(" function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),ko=u(),J=o("h3"),Z=o("a"),Zt=o("span"),Ai=p("5. Testing is not a solved problem"),go=u(),Ke=o("p"),_i=p("\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),So=u(),X=o("h2"),Q=o("a"),Xt=o("span"),Pi=p("Designing a CRM app"),Io=u(),$=o("h3"),ee=o("a"),Qt=o("span"),Ti=p("Step 1: Defining the problem"),Ao=u(),ze=o("p"),Oi=p("As a job seeker I have quite simple needs. In short:"),_o=u(),te=o("ul"),w=o("li"),xi=p("keep track of the "),$t=o("strong"),Li=p("many"),Ci=p(" active "),ea=o("strong"),Mi=p("opportunities"),qi=p(", so that I know in what "),ta=o("strong"),Ri=p("state"),Ni=p(" each opportunity is, and what "),aa=o("strong"),Gi=p("stages"),Ui=p(" in the interview process are coming up when"),Di=u(),oa=o("li"),Vi=p("archive opportunities when they are no longer active. So that they are out of the way but I can search through them to find out if I have history with recruiter x or company y"),Po=u(),d=o("p"),ji=p("The words in bold look like good candidates for entities. The basic entity seems to be the "),sa=o("strong"),Bi=p("Opportunities"),Hi=p(". There are "),ia=o("em"),Fi=p("many"),Yi=p(" of them, i.e. "),na=o("em"),Wi=p("collections"),Ki=p(", or "),la=o("strong"),zi=p("Pools"),Ji=p(" of them. Each process goes through a sequence of "),ra=o("strong"),Zi=p("Stages"),Xi=p(". Both opportunities and Stages can be in one of a predefined set of "),pa=o("strong"),Qi=p("States"),$i=p(". These are my main entities. Plus of course an "),ha=o("strong"),en=p("App"),tn=p(" entity to orchestrate everything."),To=u(),Je=o("p"),an=p("There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me (although they may still be useful). For now I\u2019ll just treat that information as background noise which I need to move around but not process."),Oo=u(),Ze=o("p"),on=p("Now I need to flesh out some details of each entity"),xo=u(),ae=o("h4"),oe=o("a"),ua=o("span"),sn=p("State"),Lo=u(),Xe=o("p"),Qe=o("img"),Co=u(),$e=o("p"),nn=p("An Opportunity or Stage can be in one of a predefined State. States are hierarchical. The main states are DUE and COMPLETE. The States associated with DUE are: OVERDUE, MAYBE_FAIL, MAYBE_SUCCESS, DUE, TENTATIVE_DUE. The States associated with COMPLETE are FAIL, SUCCESS, COMPLETE, BLACKLIST. Each Stage has style information associated with it (a background and foreground colour). This style information is used both as a visual hint for the user, and as a way for the app to find out what state a certain entity is. This entity has no methods, it\u2019s just a map of strings to style information. The States are actually created in Row 1 of the LIVE Sheet, which must always be present. The style information, name of the state, and name of parent state, is embedded in the name. So for example the DUE/OVERDUE cell will take state OVERDUE, and so on."),Mo=u(),se=o("h4"),ie=o("a"),ca=o("span"),ln=p("Stage"),qo=u(),et=o("p"),tt=o("img"),Ro=u(),at=o("p"),rn=p("A Stage is at the lowest level of the hierarchy. It typically involves an appointment or deadline or action (like sending a CV, a tech challenge, an interview). It is represented by a Cell in a Sheet, but the Stage entity itself doesn\u2019t know which sheet or which Pool it belongs to. A Stage is always associated with a State. It contains other data: state, date, time, contact involved, name of step, comments. Note that all of these are just strings. When the app needs to do something to a Stage, it reads the text content of a cell, parses it, extracts all of the data information from it and instantiates a data object. Then it does whatever processing it needs to do. Finally it does the same process but in reverse: encode the data as a string, puts it in the cell, then change the visual appearance according to the state the cell is in."),No=u(),ot=o("p"),pn=p("The methods the Stage entity will need are:"),Go=u(),A=o("ul"),da=o("li"),hn=p("loadFromCell -> decodes a spreadsheet cell to instantiate a State entity"),un=u(),fa=o("li"),cn=p("writeToCell -> serialises a State entity to a spreadsheet cell"),dn=u(),ma=o("li"),fn=p("addComment -> comments are a list; this is a utility function to add to them"),Uo=u(),ne=o("h4"),le=o("a"),ya=o("span"),mn=p("Opportunity"),Do=u(),st=o("p"),it=o("img"),Vo=u(),nt=o("p"),yn=p("The next level up. An Opportunity is a sequence of Stages with metadata. Every Opportunity has a State and at least a Stage. The State of an Opportunity is the State of the latest Stage within it. An Opportunity is associated with a spreadsheet row. When running a command, the app will read all of the cells in the row, decode the metadata, and then decode each of the Stages. From that information it can then create an Opportunity instance."),jo=u(),lt=o("p"),vn=p("An Opportunity\u2019s metadata is displayed in a cell in column 1. The initial Stage is shown in a cell in column 2. Both columns are frozen, and their information doesn\u2019t change. All of the subsequent steps are shown from column 3 onwards. The ordering is a bit tricky. Column 3 is always the next DUE Stage, if any. After that come all the remaining DUE Stages with the latest dates last. Then come the COMPLETE Stages, but they are ordered the other way, i.e. earliest date last. This may sound counter-intuitive, but after experimenting with a few options it works quite well. It lets me see the state of all the Opportunities at a glance (it\u2019s always in column 3), without constantly having to scroll horizontally. There cannot be duplicate Opportunities."),Bo=u(),rt=o("p"),wn=p("An Opportunity can:"),Ho=u(),E=o("ul"),va=o("li"),En=p("loadFromRow -> decodes a spreadsheet row to instantiate an Opportunity entity"),bn=u(),wa=o("li"),kn=p("writeToRow -> the opposite"),gn=u(),Ea=o("li"),Sn=p("activateNextStep -> changes the current Stage (i.e, the one in column 3) to one of the COMPLETE States, and either promotes the next DUE Stage to column 3 or it asks the user for input so that it can create one"),In=u(),ba=o("li"),An=p("addComment -> to the metadata in column 1"),Fo=u(),re=o("h4"),pe=o("a"),ka=o("span"),_n=p("Pools"),Yo=u(),pt=o("p"),ht=o("img"),Wo=u(),ut=o("p"),Pn=p("A Pool (=collection) of Opportunities. Each Pool corresponds to a Sheet. Opportunities can be moved from one Pool to another, but Pools don\u2019t need to know about it. They simply deal with whatever Opportunities they find in the current sheet. Pools don\u2019t have any metadata, except for the Sheet name which gives some information on the purpose of the Pool (for example LIVE, ARCHIVE BLACKLIST, etc)"),Ko=u(),ct=o("p"),Tn=p("A Pool can:"),zo=u(),b=o("ul"),ga=o("li"),On=p("loadFromSheet -> decodes a Sheet to instantiate an Pools entity"),xn=u(),Sa=o("li"),Ln=p("writeToSheet -> the opposite"),Cn=u(),Ia=o("li"),Mn=p("sort -> the opportunities within it (grouped by State, descending by date)"),qn=u(),Aa=o("li"),Rn=p("createOpportunity -> at the top of the Sheet"),Jo=u(),he=o("h4"),ue=o("a"),_a=o("span"),Nn=p("App"),Zo=u(),dt=o("p"),Gn=p("The App entity is at the top of the hierarchy. It consists of Pools. The list of Pools is arbitrary and hardcoded; the name of the sheet gives a hint of how the corresponding Pool will be managed. Not all Pools will exist, you can create them or remove them with the menu. Potential names:"),Xo=u(),y=o("ul"),Ue=o("li"),Un=p("LIVE: all the Opportunities in one of the DUE States. This is the only Pool that "),Pa=o("em"),Dn=p("must"),Vn=p(" exist"),jn=u(),Ta=o("li"),Bn=p("LIVE OVERDUE: if this Pool exists, the OVERDUE Opportunities are moved from LIVE to here. Is this is deleted, the opposite will happen"),Hn=u(),Oa=o("li"),Fn=p("ARCHIVE yyyy-qq: all of the COMPLETE Opportunities from quarter qq of year yyyy"),Yn=u(),xa=o("li"),Wn=p("ARCHIVE BLACKLIST: if it exists, the BLACKLIST Opportunities are moved to here"),Kn=u(),La=o("li"),zn=p("ARCHIVE PROMISING: individual COMPLETE Opportunities can be moved here"),Qo=u(),ft=o("p"),Jn=p("The App entity can:"),$o=u(),k=o("ul"),Ca=o("li"),Zn=p("createPool -> creates one of the Pools above if it doesn\u2019t exist, and move the relevant Opportunities around. It uses the LIVE Pool as a template"),Xn=u(),Ma=o("li"),Qn=p("destroyPool -> the opposite (doesn\u2019t apply to LIVE)"),$n=u(),qa=o("li"),el=p("moveProcess -> to a different Pool"),tl=u(),Ra=o("li"),al=p("updatePools -> ensures all the Opportunities are allocated to the correct Pool, creating ARCHIVE yyyy-qq as needed"),es=u(),ce=o("h3"),de=o("a"),Na=o("span"),ol=p("Step 2: Iterating without programming to reach an initial MVP"),ts=u(),mt=o("p"),sl=p("The above is the result of days of experimentation. Without any coding. I tried different layouts and abstractions and then pretended I was a script and did it all by hand. Keeping notes as I went along. Once happy I made a copy of it, removed all the sheets except for one called \u2018LIVE\u2019, and deleted all the data from it except for the top row. That\u2019s where the States are defined (useful as a legend). The first two column stay frozen."),as=u(),yt=o("p"),vt=o("img"),os=u(),fe=o("h3"),me=o("a"),Ga=o("span"),il=p("Step 3: Setup and menu"),ss=u(),_=o("p"),nl=p("When you select "),Ua=o("code"),ll=p("Extensions > Apps Script"),rl=p(" from the menu, a script called Code.gs is created. I typically use that to create a menu for the app. I use the menu for most functionality. Right now I create a divider for each of my main entities. It won\u2019t stay like that long term. But first I create a file called "),Da=o("code"),pl=p("constants.gs"),hl=p(" where I put all of the globals. To start off it will contain SS, a const for the active spreadsheet. SS is needed pretty much everywhere."),is=u(),De=o("pre"),ns=u(),L=o("p"),Va=o("code"),ul=p("onOpen"),cl=p(" is not as useful as one may think. Because of Google\u2019s paranoia it is quite limited in what it can do. But it can create menus, so that\u2019s what this file does. The SS variable is accessible here to; in fact all the top level variables are. Adding "),ja=o("code"),dl=p("null"),fl=p(" to the array of menu entries will create a divider."),ls=u(),Ve=o("pre"),rs=u(),wt=o("p"),Et=o("img"),ps=u(),ye=o("h3"),ve=o("a"),Ba=o("span"),ml=p("Iterating without programming to reach an initial MVP"),hs=u(),we=o("h3"),Ee=o("a"),Ha=o("span"),yl=p("Modelling the data"),us=u(),be=o("h4"),ke=o("a"),Fa=o("span"),vl=p("Generic Atom component"),cs=u(),ge=o("h4"),Se=o("a"),Ya=o("span"),wl=p("Derived components: Step, Current, Meta"),ds=u(),Ie=o("h4"),Ae=o("a"),Wa=o("span"),El=p("A Sequence of Steps"),fs=u(),_e=o("h4"),Pe=o("a"),Ka=o("span"),bl=p("There must be a better way to provide input\u2026"),ms=u(),Te=o("h4"),Oe=o("a"),za=o("span"),kl=p("Bringing it All Together: Store"),ys=u(),xe=o("h3"),Le=o("a"),Ja=o("span"),gl=p("Conclusion and potential next steps"),vs=u(),bt=o("p"),Sl=p("I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),ws=u(),kt=o("p"),Il=p("I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),Es=u(),P=o("ul"),Za=o("li"),Al=p("integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),_l=u(),Xa=o("li"),Pl=p("integrate with calendar to generate appointments and set reminders"),Tl=u(),Qa=o("li"),Ol=p("all of the above, to automatically generate emails with a list of available slots from my calendar."),bs=u(),gt=o("p"),xl=p("This would actually be quite useful, and who knows, I may well tackle it one of these days."),this.h()},l(e){g=s(e,"H2",{id:!0});var n=i(g);C=s(n,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pr=i(C);Ot=s(pr,"SPAN",{class:!0}),i(Ot).forEach(t),pr.forEach(t),Ps=h(n,"Need a CRM? Why not just use \u2026?"),n.forEach(t),to=c(e),x=s(e,"P",{});var $a=i(x);xt=s($a,"EM",{});var hr=i(xt);Ts=h(hr,"Why not just use a real CRM"),hr.forEach(t),Os=h($a,"? The issues with CRMs is that the problem they are trying to solve is quite broad. Commercial CRM software needs to be general enough to appeal to all types of users. To fit all their requirements, it often ends up overcomplicated and fiddly. Learning requires quite a time investment. Which might be worth if you work in sales and a CRM is your main tool. But I am a casual user. I tried "),Re=s($a,"A",{href:!0,rel:!0});var ur=i(Re);xs=h(ur,"Capsule"),ur.forEach(t),Ls=h($a," and I found I spent most of my time trying to bend it to my needs."),$a.forEach(t),ao=c(e),Ne=s(e,"P",{});var Ll=i(Ne);Lt=s(Ll,"EM",{});var cr=i(Lt);Cs=h(cr,"Why not just use Trello"),cr.forEach(t),Ms=h(Ll,"? I never understood the appeal of Trello. Yes, it gives you a Kanban-like workflow and the ability to include pretty pictures. But entering and editing data is way too laborious for my taste. You always need several clicks to get where you want. Also, I couldn\u2019t find ways to reorder or archive steps. And the horizontal scroll thing doesn\u2019t work for me. It works for physical whiteboards on walls, but not so much for electronic devices, IMHO"),Ll.forEach(t),oo=c(e),M=s(e,"H2",{id:!0});var Cl=i(M);q=s(Cl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dr=i(q);Ct=s(dr,"SPAN",{class:!0}),i(Ct).forEach(t),dr.forEach(t),qs=h(Cl,"Google Sheets with Apps Script is a great tool for quick tools and prototypes"),Cl.forEach(t),so=c(e),je=s(e,"P",{});var fr=i(je);Rs=h(fr,"Google Sheets with some Google Apps Scripts (GAS) and maybe forms are quite underrated as prototyping tools. You can quickly put together small \u201Capps\u201D and distribute them around. No installation required. Just send a link and start gathering data and validating ideas. As long as you are aware of its strong points and limitations"),fr.forEach(t),io=c(e),R=s(e,"H2",{id:!0});var Ml=i(R);N=s(Ml,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mr=i(N);Mt=s(mr,"SPAN",{class:!0}),i(Mt).forEach(t),mr.forEach(t),Ns=h(Ml,"Tips on using Google Apps Script for prototyping"),Ml.forEach(t),no=c(e),Be=s(e,"P",{});var yr=i(Be);Gs=h(yr,"In these years of using Google Apps Scripts I have collected a couple of principles that helped me well."),yr.forEach(t),lo=c(e),G=s(e,"H3",{id:!0});var ql=i(G);U=s(ql,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vr=i(U);qt=s(vr,"SPAN",{class:!0}),i(qt).forEach(t),vr.forEach(t),Us=h(ql,"1. Explicit interactions vs trying to build a SPA"),ql.forEach(t),ro=c(e),D=s(e,"P",{});var ks=i(D);Ds=h(ks,"Google are super cautious when it comes to security with GAS. They limit a lot of functionality. Trying to build a fully fledged "),He=s(ks,"ABBR",{title:!0});var wr=i(He);Vs=h(wr,"SPA"),wr.forEach(t),js=h(ks," with it is going to run into walls pretty quick. You can\u2019t detect when a user is selecting a cell or interacting with the UI. I am talking about things like automatically reordering a list when a user edits or deletes an item in it. My suggestion is to save yourself some frustration and not even try."),ks.forEach(t),po=c(e),V=s(e,"P",{});var gs=i(V);Bs=h(gs,"Just build your \u201Capp\u201D like in the good old days of the "),Rt=s(gs,"CODE",{});var Er=i(Rt);Hs=h(Er,"cgi-bin"),Er.forEach(t),Fs=h(gs,". That is, completely stateless. The typical flow would be:"),gs.forEach(t),ho=c(e),f=s(e,"OL",{});var v=i(f);Nt=s(v,"LI",{});var br=i(Nt);Ys=h(br,"User selects cell(s) in worksheet (optional)"),br.forEach(t),Ws=c(v),Gt=s(v,"LI",{});var kr=i(Gt);Ks=h(kr,"User selects an entry from a custom menu which you have created"),kr.forEach(t),zs=c(v),Ut=s(v,"LI",{});var gr=i(Ut);Js=h(gr,"The GAS script looks at the spreadsheet (including current selection from 1., if any) and works out the App\u2019s state from it"),gr.forEach(t),Zs=c(v),Dt=s(v,"LI",{});var Sr=i(Dt);Xs=h(Sr,"the script does whatever processing it needs and updates the App state"),Sr.forEach(t),Qs=c(v),Vt=s(v,"LI",{});var Ir=i(Vt);$s=h(Ir,"the script updates the spreadsheet to match the new App state"),Ir.forEach(t),ei=c(v),jt=s(v,"LI",{});var Ar=i(jt);ti=h(Ar,"the scripts finishes and the user is free to mess with the spreadsheet manually"),Ar.forEach(t),ai=c(v),Bt=s(v,"LI",{});var _r=i(Bt);oi=h(_r,"back to 1."),_r.forEach(t),v.forEach(t),uo=c(e),j=s(e,"H3",{id:!0});var Rl=i(j);B=s(Rl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Pr=i(B);Ht=s(Pr,"SPAN",{class:!0}),i(Ht).forEach(t),Pr.forEach(t),si=h(Rl,"2. Resist the temptation to start coding straight away"),Rl.forEach(t),co=c(e),S=s(e,"P",{});var St=i(S);ii=h(St,"The nice thing about prototyping with Google Sheets is that you can start without needing any scripting. Just do everything completely manually. You just need to "),Ft=s(St,"EM",{});var Tr=i(Ft);ni=h(Tr,"think"),Tr.forEach(t),li=h(St," like a script, and repeat actions mechanically. Requires a bit of discipline, but it\u2019s doable. Then you can start adding scripting to replace the most common manual steps you take. The app will grow organically. It doesn\u2019t get more "),Ge=s(St,"A",{href:!0,rel:!0});var Or=i(Ge);ri=h(Or,"Lean"),Or.forEach(t),pi=h(St," than that!"),St.forEach(t),fo=c(e),H=s(e,"H3",{id:!0});var Nl=i(H);F=s(Nl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xr=i(F);Yt=s(xr,"SPAN",{class:!0}),i(Yt).forEach(t),xr.forEach(t),hi=h(Nl,"3. Model your problem space first"),Nl.forEach(t),mo=c(e),Fe=s(e,"P",{});var Lr=i(Fe);ui=h(Lr,"For small prototype the temptation is often to jump in and hack some code and see it at work. But that doesn\u2019t work so well with GAS. That\u2019s because your code will consist of endless variations on the same themes. Insert a cell, insert a row, copy some cell content elsewhere, remove a cell, etc. Over and over. All the code ends up looking the same with only minor variations. Then you notice some patterns, and decide to abstract them into generalised functions. But they also look exactly the same as everything else. It\u2019s like a house of mirrors. You\u2019ll get lost very quickly."),Lr.forEach(t),yo=c(e),Y=s(e,"P",{});var Ss=i(Y);ci=h(Ss,"Instead try and create abstractions that reflect your problem space. You are writing a recipes app? Think of Ingredients, Steps or whatever else. A journey planner? Then you may need Destination and so on. That may seem an overkill at first, but it will be very helpful as your prototype grows. Also think of "),Ye=s(Ss,"ABBR",{title:!0});var Cr=i(Ye);di=h(Cr,"OOP"),Cr.forEach(t),fi=h(Ss,", and collect all your similar abstractions into a container / manager. So an IngredientList for Ingredients, a TripManager for a collection of Destinations, etc. Yes it smells like Java, but that\u2019s how the underlying stack works. It seems foolish to fight it."),Ss.forEach(t),vo=c(e),We=s(e,"P",{});var Mr=i(We);mi=h(Mr,"something something layout of cells or multiple cells something"),Mr.forEach(t),wo=c(e),W=s(e,"H3",{id:!0});var Gl=i(W);K=s(Gl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qr=i(K);Wt=s(qr,"SPAN",{class:!0}),i(Wt).forEach(t),qr.forEach(t),yi=h(Gl,"4. OOP is actually quite helpful (but there is a place for some FP too)"),Gl.forEach(t),Eo=c(e),I=s(e,"P",{});var It=i(I);vi=h(It,"GAS is very classical-OOP based. You have a Sheet object, with contains Range objects, and so on. Whatever you think of OOP, It actually helps using the same approach for your abstraction. Once you have identified your abstractions, what can happen to them? An Ingredient in a recipes app, for example. You can recalculate amount if you change the number of servings. Then add a "),Kt=s(It,"CODE",{});var Rr=i(Kt);wi=h(Rr,"recalculateAmount"),Rr.forEach(t),Ei=h(It," method. Or you may have a \u201Cconvert to metric\u201D toggle - then add a "),zt=s(It,"CODE",{});var Nr=i(zt);bi=h(Nr,"convertToMetric"),Nr.forEach(t),ki=h(It," method to your Ingredient class. And so on. Under the bonnet then the abstraction will interact with one of the GAS objects, and create a Sheet, or move a Range, and so on."),It.forEach(t),bo=c(e),z=s(e,"P",{});var Is=i(z);gi=h(Is,"FP becomes useful when you want to share utilities, especially formatting. For example, an "),Jt=s(Is,"CODE",{});var Gr=i(Jt);Si=h(Gr,"asArchive"),Gr.forEach(t),Ii=h(Is," function would be useful to add consistent formatting to some of your abstractions. But then again you could do that with multiple inheritance or mixins."),Is.forEach(t),ko=c(e),J=s(e,"H3",{id:!0});var Ul=i(J);Z=s(Ul,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ur=i(Z);Zt=s(Ur,"SPAN",{class:!0}),i(Zt).forEach(t),Ur.forEach(t),Ai=h(Ul,"5. Testing is not a solved problem"),Ul.forEach(t),go=c(e),Ke=s(e,"P",{});var Dr=i(Ke);_i=h(Dr,"\u201CWe didn\u2019t write tests because we didn\u2019t have time\u2026 we didn\u2019t have time because we didn\u2019t write tests\u201D is a well known programming meme. Sadly it\u2019s pretty much the only way with GAS. At the time of writing there isn\u2019t a testing framework for it. You will have to roll out your own. And it\u2019s not that easy (you can\u2019t simulate button clicks etc). The time investment in trying to write some sort of meaningful tests far outweigh the time it\u2019d take you to fix any bugs. I know because I tried. Unless writing GAS is your full time job and you are really investing in it for the long term, of course. If you do let me know, I\u2019d love to use your testing libraries \u{1F609}"),Dr.forEach(t),So=c(e),X=s(e,"H2",{id:!0});var Dl=i(X);Q=s(Dl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vr=i(Q);Xt=s(Vr,"SPAN",{class:!0}),i(Xt).forEach(t),Vr.forEach(t),Pi=h(Dl,"Designing a CRM app"),Dl.forEach(t),Io=c(e),$=s(e,"H3",{id:!0});var Vl=i($);ee=s(Vl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jr=i(ee);Qt=s(jr,"SPAN",{class:!0}),i(Qt).forEach(t),jr.forEach(t),Ti=h(Vl,"Step 1: Defining the problem"),Vl.forEach(t),Ao=c(e),ze=s(e,"P",{});var Br=i(ze);Oi=h(Br,"As a job seeker I have quite simple needs. In short:"),Br.forEach(t),_o=c(e),te=s(e,"UL",{});var As=i(te);w=s(As,"LI",{});var T=i(w);xi=h(T,"keep track of the "),$t=s(T,"STRONG",{});var Hr=i($t);Li=h(Hr,"many"),Hr.forEach(t),Ci=h(T," active "),ea=s(T,"STRONG",{});var Fr=i(ea);Mi=h(Fr,"opportunities"),Fr.forEach(t),qi=h(T,", so that I know in what "),ta=s(T,"STRONG",{});var Yr=i(ta);Ri=h(Yr,"state"),Yr.forEach(t),Ni=h(T," each opportunity is, and what "),aa=s(T,"STRONG",{});var Wr=i(aa);Gi=h(Wr,"stages"),Wr.forEach(t),Ui=h(T," in the interview process are coming up when"),T.forEach(t),Di=c(As),oa=s(As,"LI",{});var Kr=i(oa);Vi=h(Kr,"archive opportunities when they are no longer active. So that they are out of the way but I can search through them to find out if I have history with recruiter x or company y"),Kr.forEach(t),As.forEach(t),Po=c(e),d=s(e,"P",{});var m=i(d);ji=h(m,"The words in bold look like good candidates for entities. The basic entity seems to be the "),sa=s(m,"STRONG",{});var zr=i(sa);Bi=h(zr,"Opportunities"),zr.forEach(t),Hi=h(m,". There are "),ia=s(m,"EM",{});var Jr=i(ia);Fi=h(Jr,"many"),Jr.forEach(t),Yi=h(m," of them, i.e. "),na=s(m,"EM",{});var Zr=i(na);Wi=h(Zr,"collections"),Zr.forEach(t),Ki=h(m,", or "),la=s(m,"STRONG",{});var Xr=i(la);zi=h(Xr,"Pools"),Xr.forEach(t),Ji=h(m," of them. Each process goes through a sequence of "),ra=s(m,"STRONG",{});var Qr=i(ra);Zi=h(Qr,"Stages"),Qr.forEach(t),Xi=h(m,". Both opportunities and Stages can be in one of a predefined set of "),pa=s(m,"STRONG",{});var $r=i(pa);Qi=h($r,"States"),$r.forEach(t),$i=h(m,". These are my main entities. Plus of course an "),ha=s(m,"STRONG",{});var ep=i(ha);en=h(ep,"App"),ep.forEach(t),tn=h(m," entity to orchestrate everything."),m.forEach(t),To=c(e),Je=s(e,"P",{});var tp=i(Je);an=h(tp,"There are potentially many other entities (company, recruiter, interviewer, etc) but modelling them doesn\u2019t really help me (although they may still be useful). For now I\u2019ll just treat that information as background noise which I need to move around but not process."),tp.forEach(t),Oo=c(e),Ze=s(e,"P",{});var ap=i(Ze);on=h(ap,"Now I need to flesh out some details of each entity"),ap.forEach(t),xo=c(e),ae=s(e,"H4",{id:!0});var jl=i(ae);oe=s(jl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var op=i(oe);ua=s(op,"SPAN",{class:!0}),i(ua).forEach(t),op.forEach(t),sn=h(jl,"State"),jl.forEach(t),Lo=c(e),Xe=s(e,"P",{});var sp=i(Xe);Qe=s(sp,"IMG",{src:!0,alt:!0}),sp.forEach(t),Co=c(e),$e=s(e,"P",{});var ip=i($e);nn=h(ip,"An Opportunity or Stage can be in one of a predefined State. States are hierarchical. The main states are DUE and COMPLETE. The States associated with DUE are: OVERDUE, MAYBE_FAIL, MAYBE_SUCCESS, DUE, TENTATIVE_DUE. The States associated with COMPLETE are FAIL, SUCCESS, COMPLETE, BLACKLIST. Each Stage has style information associated with it (a background and foreground colour). This style information is used both as a visual hint for the user, and as a way for the app to find out what state a certain entity is. This entity has no methods, it\u2019s just a map of strings to style information. The States are actually created in Row 1 of the LIVE Sheet, which must always be present. The style information, name of the state, and name of parent state, is embedded in the name. So for example the DUE/OVERDUE cell will take state OVERDUE, and so on."),ip.forEach(t),Mo=c(e),se=s(e,"H4",{id:!0});var Bl=i(se);ie=s(Bl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var np=i(ie);ca=s(np,"SPAN",{class:!0}),i(ca).forEach(t),np.forEach(t),ln=h(Bl,"Stage"),Bl.forEach(t),qo=c(e),et=s(e,"P",{});var lp=i(et);tt=s(lp,"IMG",{src:!0,alt:!0}),lp.forEach(t),Ro=c(e),at=s(e,"P",{});var rp=i(at);rn=h(rp,"A Stage is at the lowest level of the hierarchy. It typically involves an appointment or deadline or action (like sending a CV, a tech challenge, an interview). It is represented by a Cell in a Sheet, but the Stage entity itself doesn\u2019t know which sheet or which Pool it belongs to. A Stage is always associated with a State. It contains other data: state, date, time, contact involved, name of step, comments. Note that all of these are just strings. When the app needs to do something to a Stage, it reads the text content of a cell, parses it, extracts all of the data information from it and instantiates a data object. Then it does whatever processing it needs to do. Finally it does the same process but in reverse: encode the data as a string, puts it in the cell, then change the visual appearance according to the state the cell is in."),rp.forEach(t),No=c(e),ot=s(e,"P",{});var pp=i(ot);pn=h(pp,"The methods the Stage entity will need are:"),pp.forEach(t),Go=c(e),A=s(e,"UL",{});var At=i(A);da=s(At,"LI",{});var hp=i(da);hn=h(hp,"loadFromCell -> decodes a spreadsheet cell to instantiate a State entity"),hp.forEach(t),un=c(At),fa=s(At,"LI",{});var up=i(fa);cn=h(up,"writeToCell -> serialises a State entity to a spreadsheet cell"),up.forEach(t),dn=c(At),ma=s(At,"LI",{});var cp=i(ma);fn=h(cp,"addComment -> comments are a list; this is a utility function to add to them"),cp.forEach(t),At.forEach(t),Uo=c(e),ne=s(e,"H4",{id:!0});var Hl=i(ne);le=s(Hl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dp=i(le);ya=s(dp,"SPAN",{class:!0}),i(ya).forEach(t),dp.forEach(t),mn=h(Hl,"Opportunity"),Hl.forEach(t),Do=c(e),st=s(e,"P",{});var fp=i(st);it=s(fp,"IMG",{src:!0,alt:!0}),fp.forEach(t),Vo=c(e),nt=s(e,"P",{});var mp=i(nt);yn=h(mp,"The next level up. An Opportunity is a sequence of Stages with metadata. Every Opportunity has a State and at least a Stage. The State of an Opportunity is the State of the latest Stage within it. An Opportunity is associated with a spreadsheet row. When running a command, the app will read all of the cells in the row, decode the metadata, and then decode each of the Stages. From that information it can then create an Opportunity instance."),mp.forEach(t),jo=c(e),lt=s(e,"P",{});var yp=i(lt);vn=h(yp,"An Opportunity\u2019s metadata is displayed in a cell in column 1. The initial Stage is shown in a cell in column 2. Both columns are frozen, and their information doesn\u2019t change. All of the subsequent steps are shown from column 3 onwards. The ordering is a bit tricky. Column 3 is always the next DUE Stage, if any. After that come all the remaining DUE Stages with the latest dates last. Then come the COMPLETE Stages, but they are ordered the other way, i.e. earliest date last. This may sound counter-intuitive, but after experimenting with a few options it works quite well. It lets me see the state of all the Opportunities at a glance (it\u2019s always in column 3), without constantly having to scroll horizontally. There cannot be duplicate Opportunities."),yp.forEach(t),Bo=c(e),rt=s(e,"P",{});var vp=i(rt);wn=h(vp,"An Opportunity can:"),vp.forEach(t),Ho=c(e),E=s(e,"UL",{});var Ce=i(E);va=s(Ce,"LI",{});var wp=i(va);En=h(wp,"loadFromRow -> decodes a spreadsheet row to instantiate an Opportunity entity"),wp.forEach(t),bn=c(Ce),wa=s(Ce,"LI",{});var Ep=i(wa);kn=h(Ep,"writeToRow -> the opposite"),Ep.forEach(t),gn=c(Ce),Ea=s(Ce,"LI",{});var bp=i(Ea);Sn=h(bp,"activateNextStep -> changes the current Stage (i.e, the one in column 3) to one of the COMPLETE States, and either promotes the next DUE Stage to column 3 or it asks the user for input so that it can create one"),bp.forEach(t),In=c(Ce),ba=s(Ce,"LI",{});var kp=i(ba);An=h(kp,"addComment -> to the metadata in column 1"),kp.forEach(t),Ce.forEach(t),Fo=c(e),re=s(e,"H4",{id:!0});var Fl=i(re);pe=s(Fl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var gp=i(pe);ka=s(gp,"SPAN",{class:!0}),i(ka).forEach(t),gp.forEach(t),_n=h(Fl,"Pools"),Fl.forEach(t),Yo=c(e),pt=s(e,"P",{});var Sp=i(pt);ht=s(Sp,"IMG",{src:!0,alt:!0}),Sp.forEach(t),Wo=c(e),ut=s(e,"P",{});var Ip=i(ut);Pn=h(Ip,"A Pool (=collection) of Opportunities. Each Pool corresponds to a Sheet. Opportunities can be moved from one Pool to another, but Pools don\u2019t need to know about it. They simply deal with whatever Opportunities they find in the current sheet. Pools don\u2019t have any metadata, except for the Sheet name which gives some information on the purpose of the Pool (for example LIVE, ARCHIVE BLACKLIST, etc)"),Ip.forEach(t),Ko=c(e),ct=s(e,"P",{});var Ap=i(ct);Tn=h(Ap,"A Pool can:"),Ap.forEach(t),zo=c(e),b=s(e,"UL",{});var Me=i(b);ga=s(Me,"LI",{});var _p=i(ga);On=h(_p,"loadFromSheet -> decodes a Sheet to instantiate an Pools entity"),_p.forEach(t),xn=c(Me),Sa=s(Me,"LI",{});var Pp=i(Sa);Ln=h(Pp,"writeToSheet -> the opposite"),Pp.forEach(t),Cn=c(Me),Ia=s(Me,"LI",{});var Tp=i(Ia);Mn=h(Tp,"sort -> the opportunities within it (grouped by State, descending by date)"),Tp.forEach(t),qn=c(Me),Aa=s(Me,"LI",{});var Op=i(Aa);Rn=h(Op,"createOpportunity -> at the top of the Sheet"),Op.forEach(t),Me.forEach(t),Jo=c(e),he=s(e,"H4",{id:!0});var Yl=i(he);ue=s(Yl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xp=i(ue);_a=s(xp,"SPAN",{class:!0}),i(_a).forEach(t),xp.forEach(t),Nn=h(Yl,"App"),Yl.forEach(t),Zo=c(e),dt=s(e,"P",{});var Lp=i(dt);Gn=h(Lp,"The App entity is at the top of the hierarchy. It consists of Pools. The list of Pools is arbitrary and hardcoded; the name of the sheet gives a hint of how the corresponding Pool will be managed. Not all Pools will exist, you can create them or remove them with the menu. Potential names:"),Lp.forEach(t),Xo=c(e),y=s(e,"UL",{});var O=i(y);Ue=s(O,"LI",{});var _s=i(Ue);Un=h(_s,"LIVE: all the Opportunities in one of the DUE States. This is the only Pool that "),Pa=s(_s,"EM",{});var Cp=i(Pa);Dn=h(Cp,"must"),Cp.forEach(t),Vn=h(_s," exist"),_s.forEach(t),jn=c(O),Ta=s(O,"LI",{});var Mp=i(Ta);Bn=h(Mp,"LIVE OVERDUE: if this Pool exists, the OVERDUE Opportunities are moved from LIVE to here. Is this is deleted, the opposite will happen"),Mp.forEach(t),Hn=c(O),Oa=s(O,"LI",{});var qp=i(Oa);Fn=h(qp,"ARCHIVE yyyy-qq: all of the COMPLETE Opportunities from quarter qq of year yyyy"),qp.forEach(t),Yn=c(O),xa=s(O,"LI",{});var Rp=i(xa);Wn=h(Rp,"ARCHIVE BLACKLIST: if it exists, the BLACKLIST Opportunities are moved to here"),Rp.forEach(t),Kn=c(O),La=s(O,"LI",{});var Np=i(La);zn=h(Np,"ARCHIVE PROMISING: individual COMPLETE Opportunities can be moved here"),Np.forEach(t),O.forEach(t),Qo=c(e),ft=s(e,"P",{});var Gp=i(ft);Jn=h(Gp,"The App entity can:"),Gp.forEach(t),$o=c(e),k=s(e,"UL",{});var qe=i(k);Ca=s(qe,"LI",{});var Up=i(Ca);Zn=h(Up,"createPool -> creates one of the Pools above if it doesn\u2019t exist, and move the relevant Opportunities around. It uses the LIVE Pool as a template"),Up.forEach(t),Xn=c(qe),Ma=s(qe,"LI",{});var Dp=i(Ma);Qn=h(Dp,"destroyPool -> the opposite (doesn\u2019t apply to LIVE)"),Dp.forEach(t),$n=c(qe),qa=s(qe,"LI",{});var Vp=i(qa);el=h(Vp,"moveProcess -> to a different Pool"),Vp.forEach(t),tl=c(qe),Ra=s(qe,"LI",{});var jp=i(Ra);al=h(jp,"updatePools -> ensures all the Opportunities are allocated to the correct Pool, creating ARCHIVE yyyy-qq as needed"),jp.forEach(t),qe.forEach(t),es=c(e),ce=s(e,"H3",{id:!0});var Wl=i(ce);de=s(Wl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bp=i(de);Na=s(Bp,"SPAN",{class:!0}),i(Na).forEach(t),Bp.forEach(t),ol=h(Wl,"Step 2: Iterating without programming to reach an initial MVP"),Wl.forEach(t),ts=c(e),mt=s(e,"P",{});var Hp=i(mt);sl=h(Hp,"The above is the result of days of experimentation. Without any coding. I tried different layouts and abstractions and then pretended I was a script and did it all by hand. Keeping notes as I went along. Once happy I made a copy of it, removed all the sheets except for one called \u2018LIVE\u2019, and deleted all the data from it except for the top row. That\u2019s where the States are defined (useful as a legend). The first two column stay frozen."),Hp.forEach(t),as=c(e),yt=s(e,"P",{});var Fp=i(yt);vt=s(Fp,"IMG",{src:!0,alt:!0}),Fp.forEach(t),os=c(e),fe=s(e,"H3",{id:!0});var Kl=i(fe);me=s(Kl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yp=i(me);Ga=s(Yp,"SPAN",{class:!0}),i(Ga).forEach(t),Yp.forEach(t),il=h(Kl,"Step 3: Setup and menu"),Kl.forEach(t),ss=c(e),_=s(e,"P",{});var _t=i(_);nl=h(_t,"When you select "),Ua=s(_t,"CODE",{});var Wp=i(Ua);ll=h(Wp,"Extensions > Apps Script"),Wp.forEach(t),rl=h(_t," from the menu, a script called Code.gs is created. I typically use that to create a menu for the app. I use the menu for most functionality. Right now I create a divider for each of my main entities. It won\u2019t stay like that long term. But first I create a file called "),Da=s(_t,"CODE",{});var Kp=i(Da);pl=h(Kp,"constants.gs"),Kp.forEach(t),hl=h(_t," where I put all of the globals. To start off it will contain SS, a const for the active spreadsheet. SS is needed pretty much everywhere."),_t.forEach(t),is=c(e),De=s(e,"PRE",{class:!0});var fh=i(De);fh.forEach(t),ns=c(e),L=s(e,"P",{});var eo=i(L);Va=s(eo,"CODE",{});var zp=i(Va);ul=h(zp,"onOpen"),zp.forEach(t),cl=h(eo," is not as useful as one may think. Because of Google\u2019s paranoia it is quite limited in what it can do. But it can create menus, so that\u2019s what this file does. The SS variable is accessible here to; in fact all the top level variables are. Adding "),ja=s(eo,"CODE",{});var Jp=i(ja);dl=h(Jp,"null"),Jp.forEach(t),fl=h(eo," to the array of menu entries will create a divider."),eo.forEach(t),ls=c(e),Ve=s(e,"PRE",{class:!0});var mh=i(Ve);mh.forEach(t),rs=c(e),wt=s(e,"P",{});var Zp=i(wt);Et=s(Zp,"IMG",{src:!0,alt:!0}),Zp.forEach(t),ps=c(e),ye=s(e,"H3",{id:!0});var zl=i(ye);ve=s(zl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xp=i(ve);Ba=s(Xp,"SPAN",{class:!0}),i(Ba).forEach(t),Xp.forEach(t),ml=h(zl,"Iterating without programming to reach an initial MVP"),zl.forEach(t),hs=c(e),we=s(e,"H3",{id:!0});var Jl=i(we);Ee=s(Jl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qp=i(Ee);Ha=s(Qp,"SPAN",{class:!0}),i(Ha).forEach(t),Qp.forEach(t),yl=h(Jl,"Modelling the data"),Jl.forEach(t),us=c(e),be=s(e,"H4",{id:!0});var Zl=i(be);ke=s(Zl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $p=i(ke);Fa=s($p,"SPAN",{class:!0}),i(Fa).forEach(t),$p.forEach(t),vl=h(Zl,"Generic Atom component"),Zl.forEach(t),cs=c(e),ge=s(e,"H4",{id:!0});var Xl=i(ge);Se=s(Xl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var eh=i(Se);Ya=s(eh,"SPAN",{class:!0}),i(Ya).forEach(t),eh.forEach(t),wl=h(Xl,"Derived components: Step, Current, Meta"),Xl.forEach(t),ds=c(e),Ie=s(e,"H4",{id:!0});var Ql=i(Ie);Ae=s(Ql,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var th=i(Ae);Wa=s(th,"SPAN",{class:!0}),i(Wa).forEach(t),th.forEach(t),El=h(Ql,"A Sequence of Steps"),Ql.forEach(t),fs=c(e),_e=s(e,"H4",{id:!0});var $l=i(_e);Pe=s($l,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ah=i(Pe);Ka=s(ah,"SPAN",{class:!0}),i(Ka).forEach(t),ah.forEach(t),bl=h($l,"There must be a better way to provide input\u2026"),$l.forEach(t),ms=c(e),Te=s(e,"H4",{id:!0});var er=i(Te);Oe=s(er,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var oh=i(Oe);za=s(oh,"SPAN",{class:!0}),i(za).forEach(t),oh.forEach(t),kl=h(er,"Bringing it All Together: Store"),er.forEach(t),ys=c(e),xe=s(e,"H3",{id:!0});var tr=i(xe);Le=s(tr,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sh=i(Le);Ja=s(sh,"SPAN",{class:!0}),i(Ja).forEach(t),sh.forEach(t),gl=h(tr,"Conclusion and potential next steps"),tr.forEach(t),vs=c(e),bt=s(e,"P",{});var ih=i(bt);Sl=h(ih,"I have used this app for a while and does the job quite well, with a minimum of fuss. And what is more, it was usable from day 1 - with a lot of manual data entry at the beginning, which became less and less as I automated more and more steps. Obviously it\u2019s not as slick as a SPA put together by a team of UX and FE devs, but then it costed rather less in term of efforts. I find Google Apps Script great for knocking together quick prototypes like this."),ih.forEach(t),ws=c(e),kt=s(e,"P",{});var nh=i(kt);Il=h(nh,"I am not going to take this any further as my basic needs are met. But should I want to, it would be possible, for example to"),nh.forEach(t),Es=c(e),P=s(e,"UL",{});var Pt=i(P);Za=s(Pt,"LI",{});var lh=i(Za);Al=h(lh,"integrate with email to automatically generate steps from incoming messages, or generate emails from steps"),lh.forEach(t),_l=c(Pt),Xa=s(Pt,"LI",{});var rh=i(Xa);Pl=h(rh,"integrate with calendar to generate appointments and set reminders"),rh.forEach(t),Tl=c(Pt),Qa=s(Pt,"LI",{});var ph=i(Qa);Ol=h(ph,"all of the above, to automatically generate emails with a list of available slots from my calendar."),ph.forEach(t),Pt.forEach(t),bs=c(e),gt=s(e,"P",{});var hh=i(gt);xl=h(hh,"This would actually be quite useful, and who knows, I may well tackle it one of these days."),hh.forEach(t),this.h()},h(){r(Ot,"class","icon icon-link"),r(C,"aria-hidden","true"),r(C,"tabindex","-1"),r(C,"href","#need-a-crm-why-not-just-use-"),r(g,"id","need-a-crm-why-not-just-use-"),r(Re,"href","https://capsulecrm.com/"),r(Re,"rel","nofollow"),r(Ct,"class","icon icon-link"),r(q,"aria-hidden","true"),r(q,"tabindex","-1"),r(q,"href","#google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),r(M,"id","google-sheets-with-apps-script-is-a-great-tool-for-quick-tools-and-prototypes"),r(Mt,"class","icon icon-link"),r(N,"aria-hidden","true"),r(N,"tabindex","-1"),r(N,"href","#tips-on-using-google-apps-script-for-prototyping"),r(R,"id","tips-on-using-google-apps-script-for-prototyping"),r(qt,"class","icon icon-link"),r(U,"aria-hidden","true"),r(U,"tabindex","-1"),r(U,"href","#1-explicit-interactions-vs-trying-to-build-a-spa"),r(G,"id","1-explicit-interactions-vs-trying-to-build-a-spa"),r(He,"title","Single Page Application"),r(Ht,"class","icon icon-link"),r(B,"aria-hidden","true"),r(B,"tabindex","-1"),r(B,"href","#2-resist-the-temptation-to-start-coding-straight-away"),r(j,"id","2-resist-the-temptation-to-start-coding-straight-away"),r(Ge,"href","https://www.natechplastics.com/four-stages-of-lean-product-development/"),r(Ge,"rel","nofollow"),r(Yt,"class","icon icon-link"),r(F,"aria-hidden","true"),r(F,"tabindex","-1"),r(F,"href","#3-model-your-problem-space-first"),r(H,"id","3-model-your-problem-space-first"),r(Ye,"title","Object Oriented Programming"),r(Wt,"class","icon icon-link"),r(K,"aria-hidden","true"),r(K,"tabindex","-1"),r(K,"href","#4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),r(W,"id","4-oop-is-actually-quite-helpful-but-there-is-a-place-for-some-fp-too"),r(Zt,"class","icon icon-link"),r(Z,"aria-hidden","true"),r(Z,"tabindex","-1"),r(Z,"href","#5-testing-is-not-a-solved-problem"),r(J,"id","5-testing-is-not-a-solved-problem"),r(Xt,"class","icon icon-link"),r(Q,"aria-hidden","true"),r(Q,"tabindex","-1"),r(Q,"href","#designing-a-crm-app"),r(X,"id","designing-a-crm-app"),r(Qt,"class","icon icon-link"),r(ee,"aria-hidden","true"),r(ee,"tabindex","-1"),r(ee,"href","#step-1-defining-the-problem"),r($,"id","step-1-defining-the-problem"),r(ua,"class","icon icon-link"),r(oe,"aria-hidden","true"),r(oe,"tabindex","-1"),r(oe,"href","#state"),r(ae,"id","state"),Tt(Qe.src,or=Eh)||r(Qe,"src",or),r(Qe,"alt","A list of States"),r(ca,"class","icon icon-link"),r(ie,"aria-hidden","true"),r(ie,"tabindex","-1"),r(ie,"href","#stage"),r(se,"id","stage"),Tt(tt.src,sr=bh)||r(tt,"src",sr),r(tt,"alt","A Stage"),r(ya,"class","icon icon-link"),r(le,"aria-hidden","true"),r(le,"tabindex","-1"),r(le,"href","#opportunity"),r(ne,"id","opportunity"),Tt(it.src,ir=kh)||r(it,"src",ir),r(it,"alt","An Opportunity"),r(ka,"class","icon icon-link"),r(pe,"aria-hidden","true"),r(pe,"tabindex","-1"),r(pe,"href","#pools"),r(re,"id","pools"),Tt(ht.src,nr=gh)||r(ht,"src",nr),r(ht,"alt","A pool"),r(_a,"class","icon icon-link"),r(ue,"aria-hidden","true"),r(ue,"tabindex","-1"),r(ue,"href","#app"),r(he,"id","app"),r(Na,"class","icon icon-link"),r(de,"aria-hidden","true"),r(de,"tabindex","-1"),r(de,"href","#step-2-iterating-without-programming-to-reach-an-initial-mvp"),r(ce,"id","step-2-iterating-without-programming-to-reach-an-initial-mvp"),Tt(vt.src,lr=Sh)||r(vt,"src",lr),r(vt,"alt","Initial sheet"),r(Ga,"class","icon icon-link"),r(me,"aria-hidden","true"),r(me,"tabindex","-1"),r(me,"href","#step-3-setup-and-menu"),r(fe,"id","step-3-setup-and-menu"),r(De,"class","language-js"),r(Ve,"class","language-js"),Tt(Et.src,rr=Ih)||r(Et,"src",rr),r(Et,"alt","The initial menu, with placeholders"),r(Ba,"class","icon icon-link"),r(ve,"aria-hidden","true"),r(ve,"tabindex","-1"),r(ve,"href","#iterating-without-programming-to-reach-an-initial-mvp"),r(ye,"id","iterating-without-programming-to-reach-an-initial-mvp"),r(Ha,"class","icon icon-link"),r(Ee,"aria-hidden","true"),r(Ee,"tabindex","-1"),r(Ee,"href","#modelling-the-data"),r(we,"id","modelling-the-data"),r(Fa,"class","icon icon-link"),r(ke,"aria-hidden","true"),r(ke,"tabindex","-1"),r(ke,"href","#generic-atom-component"),r(be,"id","generic-atom-component"),r(Ya,"class","icon icon-link"),r(Se,"aria-hidden","true"),r(Se,"tabindex","-1"),r(Se,"href","#derived-components-step-current-meta"),r(ge,"id","derived-components-step-current-meta"),r(Wa,"class","icon icon-link"),r(Ae,"aria-hidden","true"),r(Ae,"tabindex","-1"),r(Ae,"href","#a-sequence-of-steps"),r(Ie,"id","a-sequence-of-steps"),r(Ka,"class","icon icon-link"),r(Pe,"aria-hidden","true"),r(Pe,"tabindex","-1"),r(Pe,"href","#there-must-be-a-better-way-to-provide-input"),r(_e,"id","there-must-be-a-better-way-to-provide-input"),r(za,"class","icon icon-link"),r(Oe,"aria-hidden","true"),r(Oe,"tabindex","-1"),r(Oe,"href","#bringing-it-all-together-store"),r(Te,"id","bringing-it-all-together-store"),r(Ja,"class","icon icon-link"),r(Le,"aria-hidden","true"),r(Le,"tabindex","-1"),r(Le,"href","#conclusion-and-potential-next-steps"),r(xe,"id","conclusion-and-potential-next-steps")},m(e,n){l(e,g,n),a(g,C),a(C,Ot),a(g,Ps),l(e,to,n),l(e,x,n),a(x,xt),a(xt,Ts),a(x,Os),a(x,Re),a(Re,xs),a(x,Ls),l(e,ao,n),l(e,Ne,n),a(Ne,Lt),a(Lt,Cs),a(Ne,Ms),l(e,oo,n),l(e,M,n),a(M,q),a(q,Ct),a(M,qs),l(e,so,n),l(e,je,n),a(je,Rs),l(e,io,n),l(e,R,n),a(R,N),a(N,Mt),a(R,Ns),l(e,no,n),l(e,Be,n),a(Be,Gs),l(e,lo,n),l(e,G,n),a(G,U),a(U,qt),a(G,Us),l(e,ro,n),l(e,D,n),a(D,Ds),a(D,He),a(He,Vs),a(D,js),l(e,po,n),l(e,V,n),a(V,Bs),a(V,Rt),a(Rt,Hs),a(V,Fs),l(e,ho,n),l(e,f,n),a(f,Nt),a(Nt,Ys),a(f,Ws),a(f,Gt),a(Gt,Ks),a(f,zs),a(f,Ut),a(Ut,Js),a(f,Zs),a(f,Dt),a(Dt,Xs),a(f,Qs),a(f,Vt),a(Vt,$s),a(f,ei),a(f,jt),a(jt,ti),a(f,ai),a(f,Bt),a(Bt,oi),l(e,uo,n),l(e,j,n),a(j,B),a(B,Ht),a(j,si),l(e,co,n),l(e,S,n),a(S,ii),a(S,Ft),a(Ft,ni),a(S,li),a(S,Ge),a(Ge,ri),a(S,pi),l(e,fo,n),l(e,H,n),a(H,F),a(F,Yt),a(H,hi),l(e,mo,n),l(e,Fe,n),a(Fe,ui),l(e,yo,n),l(e,Y,n),a(Y,ci),a(Y,Ye),a(Ye,di),a(Y,fi),l(e,vo,n),l(e,We,n),a(We,mi),l(e,wo,n),l(e,W,n),a(W,K),a(K,Wt),a(W,yi),l(e,Eo,n),l(e,I,n),a(I,vi),a(I,Kt),a(Kt,wi),a(I,Ei),a(I,zt),a(zt,bi),a(I,ki),l(e,bo,n),l(e,z,n),a(z,gi),a(z,Jt),a(Jt,Si),a(z,Ii),l(e,ko,n),l(e,J,n),a(J,Z),a(Z,Zt),a(J,Ai),l(e,go,n),l(e,Ke,n),a(Ke,_i),l(e,So,n),l(e,X,n),a(X,Q),a(Q,Xt),a(X,Pi),l(e,Io,n),l(e,$,n),a($,ee),a(ee,Qt),a($,Ti),l(e,Ao,n),l(e,ze,n),a(ze,Oi),l(e,_o,n),l(e,te,n),a(te,w),a(w,xi),a(w,$t),a($t,Li),a(w,Ci),a(w,ea),a(ea,Mi),a(w,qi),a(w,ta),a(ta,Ri),a(w,Ni),a(w,aa),a(aa,Gi),a(w,Ui),a(te,Di),a(te,oa),a(oa,Vi),l(e,Po,n),l(e,d,n),a(d,ji),a(d,sa),a(sa,Bi),a(d,Hi),a(d,ia),a(ia,Fi),a(d,Yi),a(d,na),a(na,Wi),a(d,Ki),a(d,la),a(la,zi),a(d,Ji),a(d,ra),a(ra,Zi),a(d,Xi),a(d,pa),a(pa,Qi),a(d,$i),a(d,ha),a(ha,en),a(d,tn),l(e,To,n),l(e,Je,n),a(Je,an),l(e,Oo,n),l(e,Ze,n),a(Ze,on),l(e,xo,n),l(e,ae,n),a(ae,oe),a(oe,ua),a(ae,sn),l(e,Lo,n),l(e,Xe,n),a(Xe,Qe),l(e,Co,n),l(e,$e,n),a($e,nn),l(e,Mo,n),l(e,se,n),a(se,ie),a(ie,ca),a(se,ln),l(e,qo,n),l(e,et,n),a(et,tt),l(e,Ro,n),l(e,at,n),a(at,rn),l(e,No,n),l(e,ot,n),a(ot,pn),l(e,Go,n),l(e,A,n),a(A,da),a(da,hn),a(A,un),a(A,fa),a(fa,cn),a(A,dn),a(A,ma),a(ma,fn),l(e,Uo,n),l(e,ne,n),a(ne,le),a(le,ya),a(ne,mn),l(e,Do,n),l(e,st,n),a(st,it),l(e,Vo,n),l(e,nt,n),a(nt,yn),l(e,jo,n),l(e,lt,n),a(lt,vn),l(e,Bo,n),l(e,rt,n),a(rt,wn),l(e,Ho,n),l(e,E,n),a(E,va),a(va,En),a(E,bn),a(E,wa),a(wa,kn),a(E,gn),a(E,Ea),a(Ea,Sn),a(E,In),a(E,ba),a(ba,An),l(e,Fo,n),l(e,re,n),a(re,pe),a(pe,ka),a(re,_n),l(e,Yo,n),l(e,pt,n),a(pt,ht),l(e,Wo,n),l(e,ut,n),a(ut,Pn),l(e,Ko,n),l(e,ct,n),a(ct,Tn),l(e,zo,n),l(e,b,n),a(b,ga),a(ga,On),a(b,xn),a(b,Sa),a(Sa,Ln),a(b,Cn),a(b,Ia),a(Ia,Mn),a(b,qn),a(b,Aa),a(Aa,Rn),l(e,Jo,n),l(e,he,n),a(he,ue),a(ue,_a),a(he,Nn),l(e,Zo,n),l(e,dt,n),a(dt,Gn),l(e,Xo,n),l(e,y,n),a(y,Ue),a(Ue,Un),a(Ue,Pa),a(Pa,Dn),a(Ue,Vn),a(y,jn),a(y,Ta),a(Ta,Bn),a(y,Hn),a(y,Oa),a(Oa,Fn),a(y,Yn),a(y,xa),a(xa,Wn),a(y,Kn),a(y,La),a(La,zn),l(e,Qo,n),l(e,ft,n),a(ft,Jn),l(e,$o,n),l(e,k,n),a(k,Ca),a(Ca,Zn),a(k,Xn),a(k,Ma),a(Ma,Qn),a(k,$n),a(k,qa),a(qa,el),a(k,tl),a(k,Ra),a(Ra,al),l(e,es,n),l(e,ce,n),a(ce,de),a(de,Na),a(ce,ol),l(e,ts,n),l(e,mt,n),a(mt,sl),l(e,as,n),l(e,yt,n),a(yt,vt),l(e,os,n),l(e,fe,n),a(fe,me),a(me,Ga),a(fe,il),l(e,ss,n),l(e,_,n),a(_,nl),a(_,Ua),a(Ua,ll),a(_,rl),a(_,Da),a(Da,pl),a(_,hl),l(e,is,n),l(e,De,n),De.innerHTML=ch,l(e,ns,n),l(e,L,n),a(L,Va),a(Va,ul),a(L,cl),a(L,ja),a(ja,dl),a(L,fl),l(e,ls,n),l(e,Ve,n),Ve.innerHTML=dh,l(e,rs,n),l(e,wt,n),a(wt,Et),l(e,ps,n),l(e,ye,n),a(ye,ve),a(ve,Ba),a(ye,ml),l(e,hs,n),l(e,we,n),a(we,Ee),a(Ee,Ha),a(we,yl),l(e,us,n),l(e,be,n),a(be,ke),a(ke,Fa),a(be,vl),l(e,cs,n),l(e,ge,n),a(ge,Se),a(Se,Ya),a(ge,wl),l(e,ds,n),l(e,Ie,n),a(Ie,Ae),a(Ae,Wa),a(Ie,El),l(e,fs,n),l(e,_e,n),a(_e,Pe),a(Pe,Ka),a(_e,bl),l(e,ms,n),l(e,Te,n),a(Te,Oe),a(Oe,za),a(Te,kl),l(e,ys,n),l(e,xe,n),a(xe,Le),a(Le,Ja),a(xe,gl),l(e,vs,n),l(e,bt,n),a(bt,Sl),l(e,ws,n),l(e,kt,n),a(kt,Il),l(e,Es,n),l(e,P,n),a(P,Za),a(Za,Al),a(P,_l),a(P,Xa),a(Xa,Pl),a(P,Tl),a(P,Qa),a(Qa,Ol),l(e,bs,n),l(e,gt,n),a(gt,xl)},p:ar,i:ar,o:ar,d(e){e&&t(g),e&&t(to),e&&t(x),e&&t(ao),e&&t(Ne),e&&t(oo),e&&t(M),e&&t(so),e&&t(je),e&&t(io),e&&t(R),e&&t(no),e&&t(Be),e&&t(lo),e&&t(G),e&&t(ro),e&&t(D),e&&t(po),e&&t(V),e&&t(ho),e&&t(f),e&&t(uo),e&&t(j),e&&t(co),e&&t(S),e&&t(fo),e&&t(H),e&&t(mo),e&&t(Fe),e&&t(yo),e&&t(Y),e&&t(vo),e&&t(We),e&&t(wo),e&&t(W),e&&t(Eo),e&&t(I),e&&t(bo),e&&t(z),e&&t(ko),e&&t(J),e&&t(go),e&&t(Ke),e&&t(So),e&&t(X),e&&t(Io),e&&t($),e&&t(Ao),e&&t(ze),e&&t(_o),e&&t(te),e&&t(Po),e&&t(d),e&&t(To),e&&t(Je),e&&t(Oo),e&&t(Ze),e&&t(xo),e&&t(ae),e&&t(Lo),e&&t(Xe),e&&t(Co),e&&t($e),e&&t(Mo),e&&t(se),e&&t(qo),e&&t(et),e&&t(Ro),e&&t(at),e&&t(No),e&&t(ot),e&&t(Go),e&&t(A),e&&t(Uo),e&&t(ne),e&&t(Do),e&&t(st),e&&t(Vo),e&&t(nt),e&&t(jo),e&&t(lt),e&&t(Bo),e&&t(rt),e&&t(Ho),e&&t(E),e&&t(Fo),e&&t(re),e&&t(Yo),e&&t(pt),e&&t(Wo),e&&t(ut),e&&t(Ko),e&&t(ct),e&&t(zo),e&&t(b),e&&t(Jo),e&&t(he),e&&t(Zo),e&&t(dt),e&&t(Xo),e&&t(y),e&&t(Qo),e&&t(ft),e&&t($o),e&&t(k),e&&t(es),e&&t(ce),e&&t(ts),e&&t(mt),e&&t(as),e&&t(yt),e&&t(os),e&&t(fe),e&&t(ss),e&&t(_),e&&t(is),e&&t(De),e&&t(ns),e&&t(L),e&&t(ls),e&&t(Ve),e&&t(rs),e&&t(wt),e&&t(ps),e&&t(ye),e&&t(hs),e&&t(we),e&&t(us),e&&t(be),e&&t(cs),e&&t(ge),e&&t(ds),e&&t(Ie),e&&t(fs),e&&t(_e),e&&t(ms),e&&t(Te),e&&t(ys),e&&t(xe),e&&t(vs),e&&t(bt),e&&t(ws),e&&t(kt),e&&t(Es),e&&t(P),e&&t(bs),e&&t(gt)}}}const Ph={date:"2022-05-26T17:04:48.123Z",draft:!0,archived:!1,title:"A Trello-like CRM tool with Google Apps Script",tags:["google apps script"],excerpt:"Keeping track of all the leads and opportunities when freelancing or now that I have just been laid off and am job hunting, can be a daunting task. I have built a simple tool in Google Apps Script to make the process easier"};class Th extends yh{constructor(g){super(),vh(this,g,null,Ah,wh,{})}}export{Th as default,Ph as metadata};
