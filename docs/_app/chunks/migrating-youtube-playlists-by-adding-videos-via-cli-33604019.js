import{S as jp,i as Mp,s as Vp,e,t as p,k as i,c as n,a as t,d as a,h as l,m as c,b as r,g as h,I as s,E as Kt}from"./index-6e518972.js";function Up(np){let y,P,Vs,Ie,Ma,fs,be,Va,S,A,Us,xe,Ua,ms,Te,Ya,_,Q,Ys,Le,Pe,_s,tp=`<code class="language-bash"><span class="token operator">></span> <span class="token function">mkdir</span> my-project <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> my-project
<span class="token operator">></span> python -V
<span class="token number">3.8</span>.5
<span class="token operator">></span> pyenv <span class="token builtin class-name">local</span> <span class="token number">3.10</span>.1
<span class="token punctuation">..</span>.
<span class="token operator">></span> python -V
<span class="token number">3.10</span>.1
<span class="token operator">></span> poetry init
<span class="token punctuation">..</span>. accept all default except <span class="token keyword">for</span>
<span class="token punctuation">..</span>. <span class="token variable"><span class="token variable">&#96;</span>Would you like to define your main dependencies interactively?<span class="token variable">&#96;</span></span>
<span class="token operator">></span> poetry shell
/Users/gotofritz/Library/Caches/pypoetry/virtualenvs/youtube-migration--G8ptBqy-py3.10</code>`,Se,Gs,v,Ae,Bs,Ce,De,Qs,Oe,Re,Ws,He,Fe,W,qs,Ne,je,gs,op='<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> -D black</code>',Me,q,z,Ve,zs,Ue,Ye,Ge,ys,pp=`<code class="language-bash"> <span class="token comment"># toptal.com offers a free, comprehensive .gitignore generator</span>
 <span class="token operator">></span> <span class="token function">curl</span> -L https://www.toptal.com/developers/gitignore/api/python,visualstudiocode <span class="token operator">></span> .gitignore
 <span class="token operator">></span> <span class="token function">git</span> init
 <span class="token punctuation">..</span>. accept all defaults</code>`,Ga,vs,Be,Ba,C,D,Zs,Qe,Qa,w,We,Z,qe,ze,Ks,Ze,Ke,Wa,O,Je,Js,Xe,$e,qa,R,H,Xs,sn,za,ws,an,Za,F,en,$s,nn,tn,Ka,f,K,sa,on,pn,Es,lp=`<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> pandas
Using version ^1.4.3 <span class="token keyword">for</span> pandas
<span class="token punctuation">..</span>.</code>`,ln,J,X,cn,aa,rn,dn,un,Is,ip=`<code class="language-python"><span class="token comment"># csv-concat.py</span>

<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

SOURCE_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"~/Downloads/takeout/playlists"</span><span class="token punctuation">)</span>
TARGET_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_csv_files</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> SOURCE_DIR<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.csv"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>SOURCE_DIR <span class="token operator">/</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    get_csv_files<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,hn,$,ss,kn,ea,fn,mn,_n,bs,cp=`<code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

SOURCE_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"~/Downloads/takeout/playlists"</span><span class="token punctuation">)</span>
TARGET_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">with_timestamp</span><span class="token punctuation">(</span>stem<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dt_string <span class="token operator">=</span> dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%dT%H%M%S"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dt_string <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> stem

<span class="token keyword">def</span> <span class="token function">get_csv_files</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    csvs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> SOURCE_DIR<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.csv"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"reading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        playlist <span class="token operator">=</span> Path<span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>stem
        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>SOURCE_DIR <span class="token operator">/</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        df<span class="token punctuation">[</span><span class="token string">"Status"</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">""</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        df<span class="token punctuation">[</span><span class="token string">"Playlist ID"</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>playlist <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        csvs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df<span class="token punctuation">)</span>
    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>csvs<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    concatenated_df <span class="token operator">=</span> get_csv_files<span class="token punctuation">(</span><span class="token punctuation">)</span>
    destination_csv <span class="token operator">=</span> TARGET_DIR <span class="token operator">/</span> with_timestamp<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">)</span>
    concatenated_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>destination_csv<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Created </span><span class="token interpolation"><span class="token punctuation">&#123;</span>destination_csv<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,gn,as,na,yn,vn,xs,rp=`<code class="language-bash">\u276F python csv-concat.py
reading PLZ6Ih9wLHQ2H1u5cOpSWgVGsn8YLWMmdy.csv
reading PLZ6Ih9wLHQ2Em6nwtgGZ9q-eBRlSSbDRU.csv
reading PLZ6Ih9wLHQ2HDOnRZaKQSWz8R4II0163v.csv
reading PLZ6Ih9wLHQ2FDvivyW8_xcp6qG4-D45yh.csv
Created data/20220828T170021_data.csv

\u276F <span class="token function">head</span> -n <span class="token number">3</span> data/20220828T170021_data.csv
Video ID,Time Added,Status,Playlist ID
nmdUMwlrezs,2022-05-01 <span class="token number">16</span>:28:50 UTC,,PLZ6Ih9wLHQ2H1u5cOpSWgVGsn8YLWMmdy
8qIMIAG5Z_E,2022-05-01 <span class="token number">16</span>:31:08 UTC,,PLZ6Ih9wLHQ2H1u5cOpSWgVGsn8YLWMmdy</code>`,wn,es,E,En,ta,In,bn,oa,xn,Tn,pa,Ln,Pn,Ts,dp=`<code class="language-bash"><span class="token operator">></span> <span class="token function">touch</span> data/.gitkeep
<span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">"data/*.csv"</span> <span class="token operator">>></span> .gitignore
<span class="token operator">></span> <span class="token function">git</span> <span class="token function">add</span> -a <span class="token builtin class-name">.</span>
<span class="token operator">></span> <span class="token function">git</span> commit -m <span class="token string">"initial commit"</span></code>`,Ja,N,j,la,Sn,Xa,u,ia,ns,An,ts,Cn,Dn,On,ca,ra,Rn,Hn,da,ua,Fn,Nn,ha,ka,jn,Mn,fa,ma,Vn,Un,_a,M,Yn,ga,Gn,Bn,ya,Qn,Wn,va,wa,qn,zn,os,ps,Zn,Ea,Kn,Jn,Xn,Ls,up=`<code class="language-bash"> <span class="token operator">></span> <span class="token function">cp</span> ~/Downloads/client<span class="token punctuation">..</span><span class="token punctuation">..</span>json client_secret.json
 <span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token string">"client_secret.json"</span> <span class="token operator">>></span> .gitignore</code>`,$n,ls,Ia,st,at,Ps,hp=`<code class="language-python"><span class="token comment"># uploader.py</span>

<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

DATA_DIR <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">)</span>
FILE_STEM <span class="token operator">=</span> <span class="token string">"data.csv"</span>

<span class="token keyword">def</span> <span class="token function">pick_latest_file</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">:</span> Path<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Path<span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""assume that all files have a timestamp in the name, and hence the
    latest is the last one
    """</span>
    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>DATA_DIR<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">with_timestamp</span><span class="token punctuation">(</span>stem<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""prepend a timestamp to a string. Typically used for filenames"""</span>
    dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dt_string <span class="token operator">=</span> dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%dT%H%M%S"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dt_string <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> stem

<span class="token keyword">def</span> <span class="token function">partly_processed_csv</span><span class="token punctuation">(</span>source_df<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">:</span>
    processed_df <span class="token operator">=</span> source_df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token triple-quoted-string string">""" THIS IS WHERE THE MAGIC WILL HAPPEN """</span>
    <span class="token keyword">return</span> processed_df

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    source_file <span class="token operator">=</span> pick_latest_file<span class="token punctuation">(</span>DATA_DIR<span class="token punctuation">)</span>
    source_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>source_file<span class="token punctuation">)</span>
    processed_df <span class="token operator">=</span> partly_processed_csv<span class="token punctuation">(</span>source_df<span class="token punctuation">)</span>
    latest_file <span class="token operator">=</span> with_timestamp<span class="token punctuation">(</span>FILE_STEM<span class="token punctuation">)</span>
    processed_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>DATA_DIR <span class="token operator">/</span> latest_file<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"DONE"</span><span class="token punctuation">)</span></code>`,et,is,ba,nt,tt,Ss,kp=`<code class="language-bash"><span class="token comment"># see what we've got before starting</span>
\u276F <span class="token function">ls</span> -1 data
20220828T170021_data.csv
20220828T172321_data.csv

\u276F python uploader.py
DONE

<span class="token comment"># we got a new file</span>
\u276F <span class="token function">ls</span> -1 data
20220828T170021_data.csv
20220828T172321_data.csv
20220828T225131_data.csv

<span class="token comment"># it is the same as the old one? YES - there is no output</span>
\u276F <span class="token function">diff</span> data/20220828T225131_data.csv data/20220828T172321_data.csv
</code>`,ot,x,T,pt,xa,lt,it,Ta,ct,rt,dt,As,fp=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">DATA_DIR = Path("./data")
</span><span class="token prefix inserted">+</span><span class="token line">FILE_STEM = "data.csv"
</span><span class="token prefix inserted">+</span><span class="token line">COL_VIDEO_ID = "Video ID"
</span><span class="token prefix inserted">+</span><span class="token line">COL_STATUS = "Status"
</span><span class="token prefix inserted">+</span><span class="token line">COL_PLAYLIST_ID = "Playlist ID"
</span><span class="token prefix inserted">+</span><span class="token line">LABEL_DONE = "done"
</span></span>
...

def partly_processed_csv(source_df: pd.DataFrame) -> pd.DataFrame:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   processed_df = source_df.copy()
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    """ THIS IS WHERE THE MAGIC WILL HAPPEN """
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    for row in processed_df.itertuples():
</span><span class="token prefix inserted">+</span><span class="token line">        data = processed_df.loc[row.Index, [COL_VIDEO_ID, COL_STATUS, COL_PLAYLIST_ID]]
</span><span class="token prefix inserted">+</span><span class="token line">        video_id, status, playlist_id = data.values
</span><span class="token prefix inserted">+</span><span class="token line">        if status == LABEL_DONE:
</span><span class="token prefix inserted">+</span><span class="token line">            continue
</span><span class="token prefix inserted">+</span><span class="token line">        try:
</span><span class="token prefix inserted">+</span><span class="token line">            print(f"-> Adding &#123;video_id&#125; to &#123;playlist_id&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">            # TODO
</span><span class="token prefix inserted">+</span><span class="token line">            processed_df.at[row.Index, COL_STATUS] = LABEL_DONE
</span><span class="token prefix inserted">+</span><span class="token line">        except Exception as e:
</span><span class="token prefix inserted">+</span><span class="token line">            processed_df.at[row.Index, COL_STATUS] = e
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return processed_df</span></span></code>`,ut,La,ht,kt,cs,Pa,ft,mt,Cs,mp='<code class="language-bash"><span class="token operator">></span> poetry <span class="token function">add</span> google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client</code>',_t,m,rs,gt,Sa,yt,vt,wt,Ds,_p=`<code class="language-diff"># uploader.py

import pandas as pd
from datetime import datetime
from pathlib import Path
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import os
</span><span class="token prefix inserted">+</span><span class="token line">from googleapiclient.discovery import build
</span><span class="token prefix inserted">+</span><span class="token line">from google_auth_oauthlib.flow import InstalledAppFlow
</span></span>
..
LABEL_DONE = "done"
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">CLIENT_SECRETS_FILE = "client_secret.json"
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"># This scope allows for full read/write
</span><span class="token prefix inserted">+</span><span class="token line"># access to the authenticated user's account
</span><span class="token prefix inserted">+</span><span class="token line"># and requires requests to use an SSL connection.
</span><span class="token prefix inserted">+</span><span class="token line">SCOPES = ["https://www.googleapis.com/auth/youtube.force-ssl"]
</span><span class="token prefix inserted">+</span><span class="token line">API_SERVICE_NAME = "youtube"
</span><span class="token prefix inserted">+</span><span class="token line">API_VERSION = "v3"
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">def get_authenticated_service():
</span><span class="token prefix inserted">+</span><span class="token line">    """straight from the YouTube API documentation"""
</span><span class="token prefix inserted">+</span><span class="token line">    flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
</span><span class="token prefix inserted">+</span><span class="token line">    credentials = flow.run_console()
</span><span class="token prefix inserted">+</span><span class="token line">    return build(API_SERVICE_NAME, API_VERSION, credentials=credentials)
</span></span>
def pick_latest_file(dir: Path) -> Path:
...

<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">def partly_processed_csv(source_df: pd.DataFrame) -> pd.DataFrame:
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">def partly_processed_csv(client, source_df: pd.DataFrame) -> pd.DataFrame:
</span></span>...

<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">def main():
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">def main(client):
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ...
</span></span>
if __name__ == "__main__":
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    main()
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    # When running locally, disable OAuthlib's
</span><span class="token prefix inserted">+</span><span class="token line">    # HTTPs verification. When running in production
</span><span class="token prefix inserted">+</span><span class="token line">    # * do not * leave this option enabled.
</span><span class="token prefix inserted">+</span><span class="token line">    os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"
</span><span class="token prefix inserted">+</span><span class="token line">    client = get_authenticated_service()
</span><span class="token prefix inserted">+</span><span class="token line">    main(client)
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   print("DONE")</span></span></code>`,Et,Aa,It,bt,Os,gp=`<code class="language-bash"><span class="token operator">></span> python uploader.py
Please visit this URL to authorize this application: <span class="token punctuation"></span>
https://accounts.google.com/o/oauth2/auth?response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token punctuation">..</span><span class="token punctuation">..</span>etc<span class="token punctuation">..</span>.
Enter the authorization code:</code>`,xt,Ca,Tt,Lt,ds,g,Pt,Da,St,At,Oa,Ct,Dt,Ra,Ot,Rt,Ht,Rs,yp=`<code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> LABEL_404 = "videoNotFound"
</span><span class="token prefix inserted">+</span><span class="token line"> LABEL_QUOTA_EXCEEDED = "quotaExceeded"
</span></span>...

def partly_processed_csv(client, source_df: pd.DataFrame) -> pd.DataFrame:
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   processed_df = source_df.copy()
</span><span class="token prefix unchanged"> </span><span class="token line">   for row in processed_df.itertuples():
</span><span class="token prefix unchanged"> </span><span class="token line">       data = processed_df.loc[row.Index, [COL_VIDEO_ID, COL_STATUS, COL_PLAYLIST_ID]]
</span><span class="token prefix unchanged"> </span><span class="token line">       video_id, status, playlist_id = data.values
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        if status in [LABEL_DONE, LABEL_404]:
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">           continue
</span><span class="token prefix unchanged"> </span><span class="token line">       try:
</span><span class="token prefix unchanged"> </span><span class="token line">           print(f"-> Adding &#123;video_id&#125; to &#123;playlist_id&#125;")
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">            response = (
</span><span class="token prefix inserted">+</span><span class="token line">                client.playlistItems()
</span><span class="token prefix inserted">+</span><span class="token line">                .insert(
</span><span class="token prefix inserted">+</span><span class="token line">                    part="snippet, contentDetails",
</span><span class="token prefix inserted">+</span><span class="token line">                    body=&#123;
</span><span class="token prefix inserted">+</span><span class="token line">                        "contentDetails": &#123;"videoId": video_id&#125;,
</span><span class="token prefix inserted">+</span><span class="token line">                        "snippet": &#123;
</span><span class="token prefix inserted">+</span><span class="token line">                            "playlistId": playlist_id,
</span><span class="token prefix inserted">+</span><span class="token line">                            "resourceId": &#123;
</span><span class="token prefix inserted">+</span><span class="token line">                                "kind": "youtube#video",
</span><span class="token prefix inserted">+</span><span class="token line">                                "videoId": video_id,
</span><span class="token prefix inserted">+</span><span class="token line">                            &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">                        &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">                    &#125;,
</span><span class="token prefix inserted">+</span><span class="token line">                )
</span><span class="token prefix inserted">+</span><span class="token line">                .execute()
</span><span class="token prefix inserted">+</span><span class="token line">            )
</span><span class="token prefix inserted">+</span><span class="token line">            print(
</span><span class="token prefix inserted">+</span><span class="token line">                f" + &#123;response['snippet']['title']&#125; / "
</span><span class="token prefix inserted">+</span><span class="token line">                f"&#123;response['snippet']['position']&#125; in playlist"
</span><span class="token prefix inserted">+</span><span class="token line">            )
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">           processed_df.at[row.Index, COL_STATUS] = LABEL_DONE
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       except Exception as e:
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       except HttpError as e:
</span><span class="token prefix inserted">+</span><span class="token line">            if e.error_details[0]["reason"] == LABEL_QUOTA_EXCEEDED:
</span><span class="token prefix inserted">+</span><span class="token line">                print(f">>>> Quota exceeded when trying to add &#123;video_id&#125;")
</span><span class="token prefix inserted">+</span><span class="token line">                return processed_df
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">            processed_df.at[row.Index, COL_STATUS] = e
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">            processed_df.at[row.Index, COL_STATUS] = e.error_details[0]["reason"]
</span><span class="token prefix inserted">+</span><span class="token line">            print(f">>>> ERROR &#123;e.error_details[0]['message']&#125;")
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return processed_df</span></span></code>`,Ft,L,Ha,Nt,jt,Hs,vp=`<code class="language-bash">\u276F python uploader.py
Please visit this URL to authorize this application:
 https://accounts.google.com/o/oauth2/auth?response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span>xxxxx<span class="token punctuation">..</span><span class="token punctuation">..</span>
Enter the authorization code: xxxx<span class="token punctuation">..</span><span class="token punctuation">..</span>
-<span class="token operator">></span> Adding RbjONfRaMDs to PLZ6Ih9wLHQ2HDOnRZaKQSWz8R4II0163v
+ Hey, Uh, What You Say Come On / <span class="token number">178</span> <span class="token keyword">in</span> playlist
-<span class="token operator">></span> Adding bxN1xrLRvGU to PLZ6Ih9wLHQ2HDOnRZaKQSWz8R4II0163v
<span class="token operator">>></span><span class="token operator">>></span> ERROR <span class="token string">'Video not found.'</span>
-<span class="token operator">></span> Adding B2qI6UDD2uQ to PLZ6Ih9wLHQ2HDOnRZaKQSWz8R4II0163v
+ Donna Summer  I Feel Love Original  <span class="token number">8</span> minute <span class="token number">12</span>" version <span class="token number">1977</span> / <span class="token number">179</span> <span class="token keyword">in</span> playlist
<span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
-<span class="token operator">></span> Adding F2QF_7N85lQ to PLZ6Ih9wLHQ2HDOnRZaKQSWz8R4II0163v
<span class="token operator">>></span><span class="token operator">>></span> Quota exceeded when trying to <span class="token function">add</span> F2QF_7N85lQ
DONE</code>`,Mt,Fa,Vt,$a,V,U,Na,Ut,se,Y,Yt,us,Gt,Bt;return{c(){y=e("h2"),P=e("a"),Vs=e("span"),Ie=p("Copying another user\u2019s playlist? Why?"),Ma=i(),fs=e("p"),be=p("It all began when Google decided to start charging me for using my own domain name on their servers. I don\u2019t mind paying for the service, but if I\u2019m paying then I can shop around. Google is not the only game in town. Having decided to move away, the next step was to migrate the data. There is not much I can do with YouTube data. Either I download the videos and store them myself (which I do, for some videos). Or transfer the playlists to a different user account, a free one. But one doesn\u2019t simple \u201Ctransfer a playlist\u201D on YouTube. You need to create a script and register to access their api. And this is what this post is all about"),Va=i(),S=e("h2"),A=e("a"),Us=e("span"),xe=p("Step 0: set up the python project"),Ua=i(),ms=e("p"),Te=p("Since this is going to be a python project, let\u2019s set it up that way."),Ya=i(),_=e("ol"),Q=e("li"),Ys=e("p"),Le=p("Started by creating a folder on my local machine. Then initialised the project with poetry and the right version of python"),Pe=i(),_s=e("pre"),Se=i(),Gs=e("li"),v=e("p"),Ae=p("Set up VScode to use the poetry environment. To do that I click on the status bar at the bottom right of the editor, where it shows the python version. Clicking it brings up a list of possible python runtimes. I paste in the path that was given when I run "),Bs=e("code"),Ce=p("poetry shell"),De=p(", plus the fragment "),Qs=e("code"),Oe=p("bin/python3.10"),Re=p(" - i.e., "),Ws=e("code"),He=p("/Users/gotofritz/Library/Caches/pypoetry/virtualenvs/youtube-migration--G8ptBqy-py3.10/bin/python3.10"),Fe=i(),W=e("li"),qs=e("p"),Ne=p("Added dependencies - for now just the black formatter. My VSCode is set up to format on save and use Black as default formatter, so if it\u2019s there it will find it and use it"),je=i(),gs=e("pre"),Me=i(),q=e("li"),z=e("p"),Ve=p("Created an "),zs=e("code"),Ue=p(".gitignore"),Ye=p(" with settings for python and VSCode, and initialised the git project"),Ge=i(),ys=e("pre"),Ga=i(),vs=e("p"),Be=p("Now I\u2019m ready to start"),Ba=i(),C=e("h2"),D=e("a"),Zs=e("span"),Qe=p("Step 1: download the playlist information as CSV files"),Qa=i(),w=e("p"),We=p("This step only applies because the source account, the one I am copying the playlist from, is mine. Later on I will make this step general and replace it with a script too. But for now, a manual download is fine. There isn\u2019t much to it - you just go to the "),Z=e("a"),qe=p("google takeout page"),ze=p(" and follow the instructions there. The result is a zip file. Inside the zip a folder called "),Ks=e("code"),Ze=p("playlists"),Ke=p(", full of CSV files. That\u2019s what we are after."),Wa=i(),O=e("p"),Je=p("("),Js=e("em"),Xe=p("TODO: Fetch playlists using the same API I use for creating them."),$e=p(")"),qa=i(),R=e("h2"),H=e("a"),Xs=e("span"),sn=p("Step 2: preprocess the youtube takeout data and concat into a single file"),za=i(),ws=e("p"),an=p("The takeout data has one file per playlist. For reasons that will become clear later (spoiler: it\u2019s to do with API quotas), I prefer working with a single CSV file. That means two things. First, concatenating the csvs, and removing unneeded metadata at the top as I do so. Second, for each row, adding the playlist id in a new spreadsheet column. That means those playlists must already exist; I go and create them manually in the YouTube page. I then rename each CSV file with the id of the playlist the videos in that file will go to. A bit of a hack, but sufficient for a quick one-off job."),Za=i(),F=e("p"),en=p("("),$s=e("em"),nn=p("TODO: later on I could also automate the playlist creation."),tn=p(")"),Ka=i(),f=e("ol"),K=e("li"),sa=e("p"),on=p("Pandas is the standard library for CSV massaging in python, although I could get away with the built-in csv module. So the first step is installing it"),pn=i(),Es=e("pre"),ln=i(),J=e("li"),X=e("p"),cn=p("The initial script just finds the source csv files and list them. Note the "),aa=e("code"),rn=p("skiprows=3"),dn=p(" in the read_csv - that\u2019s because the playlist files have 3 lines of metadata at the top."),un=i(),Is=e("pre"),hn=i(),$=e("li"),ss=e("p"),kn=p("After a few iterations I ended up with this. It concats the csv files to a csv with the timestamp in its name. The "),ea=e("code"),fn=p("with_timestamp"),mn=p(" I will probably reuse later"),_n=i(),bs=e("pre"),gn=i(),as=e("li"),na=e("p"),yn=p("It does the job"),vn=i(),xs=e("pre"),wn=i(),es=e("li"),E=e("p"),En=p("As a final step, I add a "),ta=e("code"),In=p(".gitkeep"),bn=p(" file to the "),oa=e("code"),xn=p("data/"),Tn=p(" folder, and then add the rest of that folder to "),pa=e("code"),Ln=p(".gitignore"),Pn=i(),Ts=e("pre"),Ja=i(),N=e("h2"),j=e("a"),la=e("span"),Sn=p("Step 3: setting up a GCP project and getting YouTube API access"),Xa=i(),u=e("ol"),ia=e("li"),ns=e("p"),An=p("Went to "),ts=e("a"),Cn=p("https://console.developers.google.com/"),Dn=p(" with my free Google account, created a new project"),On=i(),ca=e("li"),ra=e("p"),Rn=p("Searched for \u2018YouTube API\u2019 and enabled it"),Hn=i(),da=e("li"),ua=e("p"),Fn=p("Clicked on \u2018credentials\u2019 on side bar, and then \u2018Configure consent screen\u2019. I had to pick \u2018External\u2019. Added the email address and a made up app name in the next screen."),Nn=i(),ha=e("li"),ka=e("p"),jn=p("Click on \u2018add scopes\u2019 and find the YouTube API ones in the list. Select them all and clicked on \u2018save\u2019"),Mn=i(),fa=e("li"),ma=e("p"),Vn=p("In the next screen, added myself as a test user, then \u2018Save and Continue\u2019"),Un=i(),_a=e("li"),M=e("p"),Yn=p("Back on \u2018credentials\u2019 on side bar, then "),ga=e("code"),Gn=p("Create OAuth client ID"),Bn=p(". Picked "),ya=e("code"),Qn=p("OAuth Client Id"),Wn=i(),va=e("li"),wa=e("p"),qn=p("In the next screen I entered some app details. NOTE: Type should not be \u201Cweb application\u201D, but \u201Cdesktop app\u201D. Clicked on \u201Ccreate\u201D and then \u201Cdownload JSON\u201D in the modal box on the next screen"),zn=i(),os=e("li"),ps=e("p"),Zn=p("Moved the "),Ea=e("code"),Kn=p("client_json_xxxxx"),Jn=p(" file and playlists files to my project folder. Don\u2019t forget to add to .gitignore!"),Xn=i(),Ls=e("pre"),$n=i(),ls=e("li"),Ia=e("p"),st=p("I now start with the python script that adds the songs to the playlist. The first iteration will simply read a timestamped CSV file with pandas, and copy it to a new timestamped CSV file. This is needed because of quotas. Basically you won\u2019t be able to run the whole job in one go. Google limits the amount of calls you can make. You will have to run it a bit every day, and carry on from where you left off the previous day."),at=i(),Ps=e("pre"),et=i(),is=e("li"),ba=e("p"),nt=p("Run it to test it works"),tt=i(),Ss=e("pre"),ot=i(),x=e("li"),T=e("p"),pt=p("For the next iteration I try to do as much as the work as I can without actually accessing the YouTube API. Working with it is time consuming because the constant signing in. "),xa=e("code"),lt=p("partly_processed_csv"),it=p(" will use pandas to iterate through the rows and process each file. "),Ta=e("code"),ct=p("itertuples"),rt=p(" has a bad rep in pandas, but in my case I need to stop and call an API at each iteration."),dt=i(),As=e("pre"),ut=i(),La=e("p"),ht=p("I run the command as before, this time the new csv file has \u2018done\u2019 in the column status for each row, as expected."),kt=i(),cs=e("li"),Pa=e("p"),ft=p("It\u2019s time to start accessing the YouTube API. First, install the dependencies"),mt=i(),Cs=e("pre"),_t=i(),m=e("li"),rs=e("p"),gt=p("Then amend the script to test the connection works. The big change is that main function will be passed a client, which is created with the "),Sa=e("code"),yt=p("get_authenticated_service"),vt=p(" function. I copied that straight from the documentation."),wt=i(),Ds=e("pre"),Et=i(),Aa=e("p"),It=p("When it runs it tries stops and asks me for an authorisation code:"),bt=i(),Os=e("pre"),xt=i(),Ca=e("p"),Tt=p("I paste the URL in a browser, authenticate, copy the code, and paste it on the CLI. I have to do this every time I run the script, but it works"),Lt=i(),ds=e("li"),g=e("p"),Pt=p("The last step is to finally send the calls to the YouTube API and decode the response. The call itself is to "),Da=e("code"),St=p("client.playlistItems().insert"),At=p(". It takes a while to get the correct shape for the payload, but got there in the end. The try / except block listens for errors. A "),Oa=e("code"),Ct=p("quotaExceeded"),Dt=p(" error means I am done for the day, Google won\u2019t accept any more calls from me. A "),Ra=e("code"),Ot=p("videoNotFound"),Rt=p(" error means the video has been deleted; no need to stop, but no point in trying again. Any other errors we\u2019ll have to wait and see until they occur"),Ht=i(),Rs=e("pre"),Ft=i(),L=e("li"),Ha=e("p"),Nt=p("Finally, let\u2019s run it"),jt=i(),Hs=e("pre"),Mt=i(),Fa=e("p"),Vt=p("Checking the generated CSV file, it has some rows marked as \u2018done\u2019, some with \u2018videoNotFound\u2019, and all the rows from \u2018F2QF_7N85lQ\u2019 on are untouched. Just as I expected. I shall do the rest tomorrow."),$a=i(),V=e("h3"),U=e("a"),Na=e("span"),Ut=p("Conclusion"),se=i(),Y=e("p"),Yt=p("This was a couple of simple scripts to get the job done. There are a couple of possible improvements (I marked them as TODO in the post above). If I were to extend this I would start using Typer and of course add tests. But for now, it has served its purpose, which was to help me migrate away from the paid Google account. Hope there was something useful for you in there. The code is "),us=e("a"),Gt=p("available on GitHub"),Bt=p(" if you need it."),this.h()},l(o){y=n(o,"H2",{id:!0});var d=t(y);P=n(d,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Jt=t(P);Vs=n(Jt,"SPAN",{class:!0}),t(Vs).forEach(a),Jt.forEach(a),Ie=l(d,"Copying another user\u2019s playlist? Why?"),d.forEach(a),Ma=c(o),fs=n(o,"P",{});var Xt=t(fs);be=l(Xt,"It all began when Google decided to start charging me for using my own domain name on their servers. I don\u2019t mind paying for the service, but if I\u2019m paying then I can shop around. Google is not the only game in town. Having decided to move away, the next step was to migrate the data. There is not much I can do with YouTube data. Either I download the videos and store them myself (which I do, for some videos). Or transfer the playlists to a different user account, a free one. But one doesn\u2019t simple \u201Ctransfer a playlist\u201D on YouTube. You need to create a script and register to access their api. And this is what this post is all about"),Xt.forEach(a),Va=c(o),S=n(o,"H2",{id:!0});var Qt=t(S);A=n(Qt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $t=t(A);Us=n($t,"SPAN",{class:!0}),t(Us).forEach(a),$t.forEach(a),xe=l(Qt,"Step 0: set up the python project"),Qt.forEach(a),Ua=c(o),ms=n(o,"P",{});var so=t(ms);Te=l(so,"Since this is going to be a python project, let\u2019s set it up that way."),so.forEach(a),Ya=c(o),_=n(o,"OL",{});var G=t(_);Q=n(G,"LI",{});var ae=t(Q);Ys=n(ae,"P",{});var ao=t(Ys);Le=l(ao,"Started by creating a folder on my local machine. Then initialised the project with poetry and the right version of python"),ao.forEach(a),Pe=c(ae),_s=n(ae,"PRE",{class:!0});var wp=t(_s);wp.forEach(a),ae.forEach(a),Se=c(G),Gs=n(G,"LI",{});var eo=t(Gs);v=n(eo,"P",{});var hs=t(v);Ae=l(hs,"Set up VScode to use the poetry environment. To do that I click on the status bar at the bottom right of the editor, where it shows the python version. Clicking it brings up a list of possible python runtimes. I paste in the path that was given when I run "),Bs=n(hs,"CODE",{});var no=t(Bs);Ce=l(no,"poetry shell"),no.forEach(a),De=l(hs,", plus the fragment "),Qs=n(hs,"CODE",{});var to=t(Qs);Oe=l(to,"bin/python3.10"),to.forEach(a),Re=l(hs," - i.e., "),Ws=n(hs,"CODE",{});var oo=t(Ws);He=l(oo,"/Users/gotofritz/Library/Caches/pypoetry/virtualenvs/youtube-migration--G8ptBqy-py3.10/bin/python3.10"),oo.forEach(a),hs.forEach(a),eo.forEach(a),Fe=c(G),W=n(G,"LI",{});var ee=t(W);qs=n(ee,"P",{});var po=t(qs);Ne=l(po,"Added dependencies - for now just the black formatter. My VSCode is set up to format on save and use Black as default formatter, so if it\u2019s there it will find it and use it"),po.forEach(a),je=c(ee),gs=n(ee,"PRE",{class:!0});var Ep=t(gs);Ep.forEach(a),ee.forEach(a),Me=c(G),q=n(G,"LI",{});var ne=t(q);z=n(ne,"P",{});var te=t(z);Ve=l(te,"Created an "),zs=n(te,"CODE",{});var lo=t(zs);Ue=l(lo,".gitignore"),lo.forEach(a),Ye=l(te," with settings for python and VSCode, and initialised the git project"),te.forEach(a),Ge=c(ne),ys=n(ne,"PRE",{class:!0});var Ip=t(ys);Ip.forEach(a),ne.forEach(a),G.forEach(a),Ga=c(o),vs=n(o,"P",{});var io=t(vs);Be=l(io,"Now I\u2019m ready to start"),io.forEach(a),Ba=c(o),C=n(o,"H2",{id:!0});var Wt=t(C);D=n(Wt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var co=t(D);Zs=n(co,"SPAN",{class:!0}),t(Zs).forEach(a),co.forEach(a),Qe=l(Wt,"Step 1: download the playlist information as CSV files"),Wt.forEach(a),Qa=c(o),w=n(o,"P",{});var Fs=t(w);We=l(Fs,"This step only applies because the source account, the one I am copying the playlist from, is mine. Later on I will make this step general and replace it with a script too. But for now, a manual download is fine. There isn\u2019t much to it - you just go to the "),Z=n(Fs,"A",{href:!0,rel:!0});var ro=t(Z);qe=l(ro,"google takeout page"),ro.forEach(a),ze=l(Fs," and follow the instructions there. The result is a zip file. Inside the zip a folder called "),Ks=n(Fs,"CODE",{});var uo=t(Ks);Ze=l(uo,"playlists"),uo.forEach(a),Ke=l(Fs,", full of CSV files. That\u2019s what we are after."),Fs.forEach(a),Wa=c(o),O=n(o,"P",{});var oe=t(O);Je=l(oe,"("),Js=n(oe,"EM",{});var ho=t(Js);Xe=l(ho,"TODO: Fetch playlists using the same API I use for creating them."),ho.forEach(a),$e=l(oe,")"),oe.forEach(a),qa=c(o),R=n(o,"H2",{id:!0});var qt=t(R);H=n(qt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ko=t(H);Xs=n(ko,"SPAN",{class:!0}),t(Xs).forEach(a),ko.forEach(a),sn=l(qt,"Step 2: preprocess the youtube takeout data and concat into a single file"),qt.forEach(a),za=c(o),ws=n(o,"P",{});var fo=t(ws);an=l(fo,"The takeout data has one file per playlist. For reasons that will become clear later (spoiler: it\u2019s to do with API quotas), I prefer working with a single CSV file. That means two things. First, concatenating the csvs, and removing unneeded metadata at the top as I do so. Second, for each row, adding the playlist id in a new spreadsheet column. That means those playlists must already exist; I go and create them manually in the YouTube page. I then rename each CSV file with the id of the playlist the videos in that file will go to. A bit of a hack, but sufficient for a quick one-off job."),fo.forEach(a),Za=c(o),F=n(o,"P",{});var pe=t(F);en=l(pe,"("),$s=n(pe,"EM",{});var mo=t($s);nn=l(mo,"TODO: later on I could also automate the playlist creation."),mo.forEach(a),tn=l(pe,")"),pe.forEach(a),Ka=c(o),f=n(o,"OL",{});var I=t(f);K=n(I,"LI",{});var le=t(K);sa=n(le,"P",{});var _o=t(sa);on=l(_o,"Pandas is the standard library for CSV massaging in python, although I could get away with the built-in csv module. So the first step is installing it"),_o.forEach(a),pn=c(le),Es=n(le,"PRE",{class:!0});var bp=t(Es);bp.forEach(a),le.forEach(a),ln=c(I),J=n(I,"LI",{});var ie=t(J);X=n(ie,"P",{});var ce=t(X);cn=l(ce,"The initial script just finds the source csv files and list them. Note the "),aa=n(ce,"CODE",{});var go=t(aa);rn=l(go,"skiprows=3"),go.forEach(a),dn=l(ce," in the read_csv - that\u2019s because the playlist files have 3 lines of metadata at the top."),ce.forEach(a),un=c(ie),Is=n(ie,"PRE",{class:!0});var xp=t(Is);xp.forEach(a),ie.forEach(a),hn=c(I),$=n(I,"LI",{});var re=t($);ss=n(re,"P",{});var de=t(ss);kn=l(de,"After a few iterations I ended up with this. It concats the csv files to a csv with the timestamp in its name. The "),ea=n(de,"CODE",{});var yo=t(ea);fn=l(yo,"with_timestamp"),yo.forEach(a),mn=l(de," I will probably reuse later"),de.forEach(a),_n=c(re),bs=n(re,"PRE",{class:!0});var Tp=t(bs);Tp.forEach(a),re.forEach(a),gn=c(I),as=n(I,"LI",{});var ue=t(as);na=n(ue,"P",{});var vo=t(na);yn=l(vo,"It does the job"),vo.forEach(a),vn=c(ue),xs=n(ue,"PRE",{class:!0});var Lp=t(xs);Lp.forEach(a),ue.forEach(a),wn=c(I),es=n(I,"LI",{});var he=t(es);E=n(he,"P",{});var ks=t(E);En=l(ks,"As a final step, I add a "),ta=n(ks,"CODE",{});var wo=t(ta);In=l(wo,".gitkeep"),wo.forEach(a),bn=l(ks," file to the "),oa=n(ks,"CODE",{});var Eo=t(oa);xn=l(Eo,"data/"),Eo.forEach(a),Tn=l(ks," folder, and then add the rest of that folder to "),pa=n(ks,"CODE",{});var Io=t(pa);Ln=l(Io,".gitignore"),Io.forEach(a),ks.forEach(a),Pn=c(he),Ts=n(he,"PRE",{class:!0});var Pp=t(Ts);Pp.forEach(a),he.forEach(a),I.forEach(a),Ja=c(o),N=n(o,"H2",{id:!0});var zt=t(N);j=n(zt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bo=t(j);la=n(bo,"SPAN",{class:!0}),t(la).forEach(a),bo.forEach(a),Sn=l(zt,"Step 3: setting up a GCP project and getting YouTube API access"),zt.forEach(a),Xa=c(o),u=n(o,"OL",{});var k=t(u);ia=n(k,"LI",{});var xo=t(ia);ns=n(xo,"P",{});var ke=t(ns);An=l(ke,"Went to "),ts=n(ke,"A",{href:!0,rel:!0});var To=t(ts);Cn=l(To,"https://console.developers.google.com/"),To.forEach(a),Dn=l(ke," with my free Google account, created a new project"),ke.forEach(a),xo.forEach(a),On=c(k),ca=n(k,"LI",{});var Lo=t(ca);ra=n(Lo,"P",{});var Po=t(ra);Rn=l(Po,"Searched for \u2018YouTube API\u2019 and enabled it"),Po.forEach(a),Lo.forEach(a),Hn=c(k),da=n(k,"LI",{});var So=t(da);ua=n(So,"P",{});var Ao=t(ua);Fn=l(Ao,"Clicked on \u2018credentials\u2019 on side bar, and then \u2018Configure consent screen\u2019. I had to pick \u2018External\u2019. Added the email address and a made up app name in the next screen."),Ao.forEach(a),So.forEach(a),Nn=c(k),ha=n(k,"LI",{});var Co=t(ha);ka=n(Co,"P",{});var Do=t(ka);jn=l(Do,"Click on \u2018add scopes\u2019 and find the YouTube API ones in the list. Select them all and clicked on \u2018save\u2019"),Do.forEach(a),Co.forEach(a),Mn=c(k),fa=n(k,"LI",{});var Oo=t(fa);ma=n(Oo,"P",{});var Ro=t(ma);Vn=l(Ro,"In the next screen, added myself as a test user, then \u2018Save and Continue\u2019"),Ro.forEach(a),Oo.forEach(a),Un=c(k),_a=n(k,"LI",{});var Ho=t(_a);M=n(Ho,"P",{});var ja=t(M);Yn=l(ja,"Back on \u2018credentials\u2019 on side bar, then "),ga=n(ja,"CODE",{});var Fo=t(ga);Gn=l(Fo,"Create OAuth client ID"),Fo.forEach(a),Bn=l(ja,". Picked "),ya=n(ja,"CODE",{});var No=t(ya);Qn=l(No,"OAuth Client Id"),No.forEach(a),ja.forEach(a),Ho.forEach(a),Wn=c(k),va=n(k,"LI",{});var jo=t(va);wa=n(jo,"P",{});var Mo=t(wa);qn=l(Mo,"In the next screen I entered some app details. NOTE: Type should not be \u201Cweb application\u201D, but \u201Cdesktop app\u201D. Clicked on \u201Ccreate\u201D and then \u201Cdownload JSON\u201D in the modal box on the next screen"),Mo.forEach(a),jo.forEach(a),zn=c(k),os=n(k,"LI",{});var fe=t(os);ps=n(fe,"P",{});var me=t(ps);Zn=l(me,"Moved the "),Ea=n(me,"CODE",{});var Vo=t(Ea);Kn=l(Vo,"client_json_xxxxx"),Vo.forEach(a),Jn=l(me," file and playlists files to my project folder. Don\u2019t forget to add to .gitignore!"),me.forEach(a),Xn=c(fe),Ls=n(fe,"PRE",{class:!0});var Sp=t(Ls);Sp.forEach(a),fe.forEach(a),$n=c(k),ls=n(k,"LI",{});var _e=t(ls);Ia=n(_e,"P",{});var Uo=t(Ia);st=l(Uo,"I now start with the python script that adds the songs to the playlist. The first iteration will simply read a timestamped CSV file with pandas, and copy it to a new timestamped CSV file. This is needed because of quotas. Basically you won\u2019t be able to run the whole job in one go. Google limits the amount of calls you can make. You will have to run it a bit every day, and carry on from where you left off the previous day."),Uo.forEach(a),at=c(_e),Ps=n(_e,"PRE",{class:!0});var Ap=t(Ps);Ap.forEach(a),_e.forEach(a),et=c(k),is=n(k,"LI",{});var ge=t(is);ba=n(ge,"P",{});var Yo=t(ba);nt=l(Yo,"Run it to test it works"),Yo.forEach(a),tt=c(ge),Ss=n(ge,"PRE",{class:!0});var Cp=t(Ss);Cp.forEach(a),ge.forEach(a),ot=c(k),x=n(k,"LI",{});var Ns=t(x);T=n(Ns,"P",{});var js=t(T);pt=l(js,"For the next iteration I try to do as much as the work as I can without actually accessing the YouTube API. Working with it is time consuming because the constant signing in. "),xa=n(js,"CODE",{});var Go=t(xa);lt=l(Go,"partly_processed_csv"),Go.forEach(a),it=l(js," will use pandas to iterate through the rows and process each file. "),Ta=n(js,"CODE",{});var Bo=t(Ta);ct=l(Bo,"itertuples"),Bo.forEach(a),rt=l(js," has a bad rep in pandas, but in my case I need to stop and call an API at each iteration."),js.forEach(a),dt=c(Ns),As=n(Ns,"PRE",{class:!0});var Dp=t(As);Dp.forEach(a),ut=c(Ns),La=n(Ns,"P",{});var Qo=t(La);ht=l(Qo,"I run the command as before, this time the new csv file has \u2018done\u2019 in the column status for each row, as expected."),Qo.forEach(a),Ns.forEach(a),kt=c(k),cs=n(k,"LI",{});var ye=t(cs);Pa=n(ye,"P",{});var Wo=t(Pa);ft=l(Wo,"It\u2019s time to start accessing the YouTube API. First, install the dependencies"),Wo.forEach(a),mt=c(ye),Cs=n(ye,"PRE",{class:!0});var Op=t(Cs);Op.forEach(a),ye.forEach(a),_t=c(k),m=n(k,"LI",{});var b=t(m);rs=n(b,"P",{});var ve=t(rs);gt=l(ve,"Then amend the script to test the connection works. The big change is that main function will be passed a client, which is created with the "),Sa=n(ve,"CODE",{});var qo=t(Sa);yt=l(qo,"get_authenticated_service"),qo.forEach(a),vt=l(ve," function. I copied that straight from the documentation."),ve.forEach(a),wt=c(b),Ds=n(b,"PRE",{class:!0});var Rp=t(Ds);Rp.forEach(a),Et=c(b),Aa=n(b,"P",{});var zo=t(Aa);It=l(zo,"When it runs it tries stops and asks me for an authorisation code:"),zo.forEach(a),bt=c(b),Os=n(b,"PRE",{class:!0});var Hp=t(Os);Hp.forEach(a),xt=c(b),Ca=n(b,"P",{});var Zo=t(Ca);Tt=l(Zo,"I paste the URL in a browser, authenticate, copy the code, and paste it on the CLI. I have to do this every time I run the script, but it works"),Zo.forEach(a),b.forEach(a),Lt=c(k),ds=n(k,"LI",{});var we=t(ds);g=n(we,"P",{});var B=t(g);Pt=l(B,"The last step is to finally send the calls to the YouTube API and decode the response. The call itself is to "),Da=n(B,"CODE",{});var Ko=t(Da);St=l(Ko,"client.playlistItems().insert"),Ko.forEach(a),At=l(B,". It takes a while to get the correct shape for the payload, but got there in the end. The try / except block listens for errors. A "),Oa=n(B,"CODE",{});var Jo=t(Oa);Ct=l(Jo,"quotaExceeded"),Jo.forEach(a),Dt=l(B," error means I am done for the day, Google won\u2019t accept any more calls from me. A "),Ra=n(B,"CODE",{});var Xo=t(Ra);Ot=l(Xo,"videoNotFound"),Xo.forEach(a),Rt=l(B," error means the video has been deleted; no need to stop, but no point in trying again. Any other errors we\u2019ll have to wait and see until they occur"),B.forEach(a),Ht=c(we),Rs=n(we,"PRE",{class:!0});var Fp=t(Rs);Fp.forEach(a),we.forEach(a),Ft=c(k),L=n(k,"LI",{});var Ms=t(L);Ha=n(Ms,"P",{});var $o=t(Ha);Nt=l($o,"Finally, let\u2019s run it"),$o.forEach(a),jt=c(Ms),Hs=n(Ms,"PRE",{class:!0});var Np=t(Hs);Np.forEach(a),Mt=c(Ms),Fa=n(Ms,"P",{});var sp=t(Fa);Vt=l(sp,"Checking the generated CSV file, it has some rows marked as \u2018done\u2019, some with \u2018videoNotFound\u2019, and all the rows from \u2018F2QF_7N85lQ\u2019 on are untouched. Just as I expected. I shall do the rest tomorrow."),sp.forEach(a),Ms.forEach(a),k.forEach(a),$a=c(o),V=n(o,"H3",{id:!0});var Zt=t(V);U=n(Zt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ap=t(U);Na=n(ap,"SPAN",{class:!0}),t(Na).forEach(a),ap.forEach(a),Ut=l(Zt,"Conclusion"),Zt.forEach(a),se=c(o),Y=n(o,"P",{});var Ee=t(Y);Yt=l(Ee,"This was a couple of simple scripts to get the job done. There are a couple of possible improvements (I marked them as TODO in the post above). If I were to extend this I would start using Typer and of course add tests. But for now, it has served its purpose, which was to help me migrate away from the paid Google account. Hope there was something useful for you in there. The code is "),us=n(Ee,"A",{href:!0,rel:!0});var ep=t(us);Gt=l(ep,"available on GitHub"),ep.forEach(a),Bt=l(Ee," if you need it."),Ee.forEach(a),this.h()},h(){r(Vs,"class","icon icon-link"),r(P,"aria-hidden","true"),r(P,"tabindex","-1"),r(P,"href","#copying-another-users-playlist-why"),r(y,"id","copying-another-users-playlist-why"),r(Us,"class","icon icon-link"),r(A,"aria-hidden","true"),r(A,"tabindex","-1"),r(A,"href","#step-0-set-up-the-python-project"),r(S,"id","step-0-set-up-the-python-project"),r(_s,"class","language-bash"),r(gs,"class","language-bash"),r(ys,"class","language-bash"),r(Zs,"class","icon icon-link"),r(D,"aria-hidden","true"),r(D,"tabindex","-1"),r(D,"href","#step-1-download-the-playlist-information-as-csv-files"),r(C,"id","step-1-download-the-playlist-information-as-csv-files"),r(Z,"href","https://takeout.google.com/settings/takeout/"),r(Z,"rel","nofollow"),r(Xs,"class","icon icon-link"),r(H,"aria-hidden","true"),r(H,"tabindex","-1"),r(H,"href","#step-2-preprocess-the-youtube-takeout-data-and-concat-into-a-single-file"),r(R,"id","step-2-preprocess-the-youtube-takeout-data-and-concat-into-a-single-file"),r(Es,"class","language-bash"),r(Is,"class","language-python"),r(bs,"class","language-python"),r(xs,"class","language-bash"),r(Ts,"class","language-bash"),r(la,"class","icon icon-link"),r(j,"aria-hidden","true"),r(j,"tabindex","-1"),r(j,"href","#step-3-setting-up-a-gcp-project-and-getting-youtube-api-access"),r(N,"id","step-3-setting-up-a-gcp-project-and-getting-youtube-api-access"),r(ts,"href","https://console.developers.google.com/"),r(ts,"rel","nofollow"),r(Ls,"class","language-bash"),r(Ps,"class","language-python"),r(Ss,"class","language-bash"),r(As,"class","language-diff"),r(Cs,"class","language-bash"),r(Ds,"class","language-diff"),r(Os,"class","language-bash"),r(Rs,"class","language-diff"),r(Hs,"class","language-bash"),r(Na,"class","icon icon-link"),r(U,"aria-hidden","true"),r(U,"tabindex","-1"),r(U,"href","#conclusion"),r(V,"id","conclusion"),r(us,"href","https://github.com/gotofritz/quick_and_dirty/tree/master/youtube_migration"),r(us,"rel","nofollow")},m(o,d){h(o,y,d),s(y,P),s(P,Vs),s(y,Ie),h(o,Ma,d),h(o,fs,d),s(fs,be),h(o,Va,d),h(o,S,d),s(S,A),s(A,Us),s(S,xe),h(o,Ua,d),h(o,ms,d),s(ms,Te),h(o,Ya,d),h(o,_,d),s(_,Q),s(Q,Ys),s(Ys,Le),s(Q,Pe),s(Q,_s),_s.innerHTML=tp,s(_,Se),s(_,Gs),s(Gs,v),s(v,Ae),s(v,Bs),s(Bs,Ce),s(v,De),s(v,Qs),s(Qs,Oe),s(v,Re),s(v,Ws),s(Ws,He),s(_,Fe),s(_,W),s(W,qs),s(qs,Ne),s(W,je),s(W,gs),gs.innerHTML=op,s(_,Me),s(_,q),s(q,z),s(z,Ve),s(z,zs),s(zs,Ue),s(z,Ye),s(q,Ge),s(q,ys),ys.innerHTML=pp,h(o,Ga,d),h(o,vs,d),s(vs,Be),h(o,Ba,d),h(o,C,d),s(C,D),s(D,Zs),s(C,Qe),h(o,Qa,d),h(o,w,d),s(w,We),s(w,Z),s(Z,qe),s(w,ze),s(w,Ks),s(Ks,Ze),s(w,Ke),h(o,Wa,d),h(o,O,d),s(O,Je),s(O,Js),s(Js,Xe),s(O,$e),h(o,qa,d),h(o,R,d),s(R,H),s(H,Xs),s(R,sn),h(o,za,d),h(o,ws,d),s(ws,an),h(o,Za,d),h(o,F,d),s(F,en),s(F,$s),s($s,nn),s(F,tn),h(o,Ka,d),h(o,f,d),s(f,K),s(K,sa),s(sa,on),s(K,pn),s(K,Es),Es.innerHTML=lp,s(f,ln),s(f,J),s(J,X),s(X,cn),s(X,aa),s(aa,rn),s(X,dn),s(J,un),s(J,Is),Is.innerHTML=ip,s(f,hn),s(f,$),s($,ss),s(ss,kn),s(ss,ea),s(ea,fn),s(ss,mn),s($,_n),s($,bs),bs.innerHTML=cp,s(f,gn),s(f,as),s(as,na),s(na,yn),s(as,vn),s(as,xs),xs.innerHTML=rp,s(f,wn),s(f,es),s(es,E),s(E,En),s(E,ta),s(ta,In),s(E,bn),s(E,oa),s(oa,xn),s(E,Tn),s(E,pa),s(pa,Ln),s(es,Pn),s(es,Ts),Ts.innerHTML=dp,h(o,Ja,d),h(o,N,d),s(N,j),s(j,la),s(N,Sn),h(o,Xa,d),h(o,u,d),s(u,ia),s(ia,ns),s(ns,An),s(ns,ts),s(ts,Cn),s(ns,Dn),s(u,On),s(u,ca),s(ca,ra),s(ra,Rn),s(u,Hn),s(u,da),s(da,ua),s(ua,Fn),s(u,Nn),s(u,ha),s(ha,ka),s(ka,jn),s(u,Mn),s(u,fa),s(fa,ma),s(ma,Vn),s(u,Un),s(u,_a),s(_a,M),s(M,Yn),s(M,ga),s(ga,Gn),s(M,Bn),s(M,ya),s(ya,Qn),s(u,Wn),s(u,va),s(va,wa),s(wa,qn),s(u,zn),s(u,os),s(os,ps),s(ps,Zn),s(ps,Ea),s(Ea,Kn),s(ps,Jn),s(os,Xn),s(os,Ls),Ls.innerHTML=up,s(u,$n),s(u,ls),s(ls,Ia),s(Ia,st),s(ls,at),s(ls,Ps),Ps.innerHTML=hp,s(u,et),s(u,is),s(is,ba),s(ba,nt),s(is,tt),s(is,Ss),Ss.innerHTML=kp,s(u,ot),s(u,x),s(x,T),s(T,pt),s(T,xa),s(xa,lt),s(T,it),s(T,Ta),s(Ta,ct),s(T,rt),s(x,dt),s(x,As),As.innerHTML=fp,s(x,ut),s(x,La),s(La,ht),s(u,kt),s(u,cs),s(cs,Pa),s(Pa,ft),s(cs,mt),s(cs,Cs),Cs.innerHTML=mp,s(u,_t),s(u,m),s(m,rs),s(rs,gt),s(rs,Sa),s(Sa,yt),s(rs,vt),s(m,wt),s(m,Ds),Ds.innerHTML=_p,s(m,Et),s(m,Aa),s(Aa,It),s(m,bt),s(m,Os),Os.innerHTML=gp,s(m,xt),s(m,Ca),s(Ca,Tt),s(u,Lt),s(u,ds),s(ds,g),s(g,Pt),s(g,Da),s(Da,St),s(g,At),s(g,Oa),s(Oa,Ct),s(g,Dt),s(g,Ra),s(Ra,Ot),s(g,Rt),s(ds,Ht),s(ds,Rs),Rs.innerHTML=yp,s(u,Ft),s(u,L),s(L,Ha),s(Ha,Nt),s(L,jt),s(L,Hs),Hs.innerHTML=vp,s(L,Mt),s(L,Fa),s(Fa,Vt),h(o,$a,d),h(o,V,d),s(V,U),s(U,Na),s(V,Ut),h(o,se,d),h(o,Y,d),s(Y,Yt),s(Y,us),s(us,Gt),s(Y,Bt)},p:Kt,i:Kt,o:Kt,d(o){o&&a(y),o&&a(Ma),o&&a(fs),o&&a(Va),o&&a(S),o&&a(Ua),o&&a(ms),o&&a(Ya),o&&a(_),o&&a(Ga),o&&a(vs),o&&a(Ba),o&&a(C),o&&a(Qa),o&&a(w),o&&a(Wa),o&&a(O),o&&a(qa),o&&a(R),o&&a(za),o&&a(ws),o&&a(Za),o&&a(F),o&&a(Ka),o&&a(f),o&&a(Ja),o&&a(N),o&&a(Xa),o&&a(u),o&&a($a),o&&a(V),o&&a(se),o&&a(Y)}}}const Gp={title:"Adding videos to a youtube playlists via a terminal python script",date:"2022-08-23T00:00:00.000Z",excerpt:`I wanted to duplicate another user's playlist to one of my free google accounts. But it's no longer possible from the web interface. None of <a href="https://webapps.stackexchange.com/questions/39686/how-to-copy-youtube-playlist-from-one-account-to-another" title="read those answers in Stack Overflow">the methods described in various SO answers</a> are functional, they are obsolete. But it can be done with a Python script in your terminal.`,draft:!1,tags:["google","youtube api","python"]};class Bp extends jp{constructor(y){super(),Mp(this,y,null,Up,Vp,{})}}export{Bp as default,Gp as metadata};
