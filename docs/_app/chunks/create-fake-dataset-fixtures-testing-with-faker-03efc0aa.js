import{S as Gs,i as Ks,s as Qs,e as o,t as i,k as u,c as p,a as l,d as s,h as c,m as k,b as r,g as n,I as t,E as us}from"./index-6e518972.js";function Vs(As){let d,h,G,Ca,na,m,Ba,A,Sa,La,ta,v,w,K,Ha,oa,R,Oa,pa,C,Cs=`<code class="language-python"><span class="token keyword">from</span> faker<span class="token punctuation">.</span>provider <span class="token keyword">import</span> BaseProvider
<span class="token keyword">from</span> models<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> Cloze

<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>BaseProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">cloze</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        text<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        obfuscated<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        guessed<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Model a Cloze entity"""</span>
        <span class="token keyword">return</span> Cloze<span class="token punctuation">(</span>
            text<span class="token operator">=</span>text <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            obfuscated<span class="token operator">=</span>obfuscated <span class="token keyword">or</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>random_letters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            guessed<span class="token operator">=</span>guessed<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">clozes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>Cloze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> etc
</code>`,la,j,Na,ra,B,Bs=`<code class="language-python">
cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='zTbJuPgkCvtGJtms', obfuscated='LkqKBZBNLRYbAvXj', guessed=False)</span>

cloze <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>cloze<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"TEXT"</span><span class="token punctuation">)</span>
<span class="token comment"># Cloze(text='TEXT', obfuscated='pdyQXUBhSyflBXvZ', guessed=False)</span>

list_of_clozes <span class="token operator">=</span> faker_instance<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># [</span>
<span class="token comment">#   Cloze(text='EQKHvVUIJFllEZUg', obfuscated='ymEaSvqcYPdsGeFw', guessed=False)</span>
<span class="token comment">#   Cloze(text='IvSMtFGVXEGdODoC', obfuscated='pPTkcmlvCOizEqZe', guessed=False)</span>
<span class="token comment"># ]</span></code>`,ia,_,y,Q,Ua,ca,b,Ma,S,Ra,ja,ua,L,Ss=`<code class="language-python"><span class="token keyword">from</span> faker<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>lorem<span class="token punctuation">.</span>en_US <span class="token keyword">import</span> Provider <span class="token keyword">as</span> LoremProvider
<span class="token keyword">from</span> models<span class="token punctuation">.</span>cloze <span class="token keyword">import</span> Cloze

<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>LoremProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">words_words</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      twice
      <span class="token keyword">for</span> w <span class="token keyword">in</span> self<span class="token punctuation">.</span>words<span class="token punctuation">(</span>nb<span class="token operator">=</span>nb<span class="token punctuation">)</span> <span class="token comment"># outer loop</span>
      <span class="token keyword">for</span> twice <span class="token keyword">in</span> <span class="token punctuation">[</span>w<span class="token punctuation">,</span> w<span class="token punctuation">]</span>        <span class="token comment"># inner loop</span>
      <span class="token punctuation">]</span>
</code>`,ka,I,Da,V,qa,Xa,da,E,P,W,Ja,fa,f,Za,Y,Ga,Ka,$,Qa,Va,ha,H,Ls=`<code class="language-bash">src/language_learning/
\u2502
 <span class="token punctuation">..</span>.
\u2514\u2500\u2500 faker_providers
    \u251C\u2500\u2500 __init__.py
    \u251C\u2500\u2500 en_US
    \u251C\u2500\u2500 \u2514\u2500\u2500 __init__py
    \u251C\u2500\u2500 <span class="token punctuation">..</span>. other locales <span class="token punctuation">..</span>
 <span class="token punctuation">..</span>.
\u2502</code>`,ma,x,Wa,aa,Ya,$a,va,O,Hs=`<code class="language-python"><span class="token comment"># tests/conftest.py</span>
<span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker

<span class="token keyword">from</span> app<span class="token punctuation">.</span>fake_providers<span class="token punctuation">.</span>language_training <span class="token keyword">import</span>   Provider <span class="token keyword">as</span> LanguageTrainingProvider

fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>
A_RANDOM_SEED <span class="token operator">=</span> <span class="token number">1369</span>
Faker<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>A_RANDOM_SEED<span class="token punctuation">)</span>
fake<span class="token punctuation">.</span>add_provider<span class="token punctuation">(</span>LanguageTrainingProvider<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fake"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fixture_fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Pass a seeded Faker instance as a fixture"""</span>
    <span class="token keyword">return</span> fake</code>`,wa,D,as,_a,N,Os=`<code class="language-python">
<span class="token keyword">def</span> <span class="token function">test_something</span><span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># fake.words is from a standard Faker provider</span>
  <span class="token keyword">assert</span> fake<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">123</span>

  <span class="token comment"># fake.clozes is the one I just created</span>
  <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>clozes<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">8</span></code>`,ya,F,g,sa,ss,ba,q,es,Ia,U,Ns=`<code class="language-bash">\u2514\u2500\u2500 language_learning
    \u251C\u2500\u2500 __init__.py
    \u2514\u2500\u2500 en_US
        \u2514\u2500\u2500 __init__py</code>`,Ea,X,ns,Pa,M,Us=`<code class="language-python"><span class="token comment"># src/fake_providers/language_learning/en_US/__init__.py</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> Provider <span class="token keyword">as</span> LanguageLearningProvider


<span class="token keyword">class</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>LanguageLearningProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Fallback locale"""</span>
</code>`,xa,T,z,ea,ts,Fa,J,os;return{c(){d=o("h2"),h=o("a"),G=o("span"),Ca=i("Use case"),na=u(),m=o("p"),Ba=i("I am working on a small language training app. One data structure I use is called a \u201CCloze\u201D, inspired by "),A=o("a"),Sa=i("Anki"),La=i(". It has two strings: a to-be-solved version and a solved version. There is also a boolean flag to show whether it was solved or not. These Clozes appear throughout the app. I could create a mock, and I will when I need to call its methods or check the code. But most of the time, I just need data in the right shape to pass around in my tests. Faker is great for that."),ta=u(),v=o("h2"),w=o("a"),K=o("span"),Ha=i("Creating a provider in Faker"),oa=u(),R=o("p"),Oa=i("At the time of writing, the Faker doc does not explain how to create your own provider. But you can reverse engineer some of the existing ones. Extend the BaseProvider class. Then every method becomes a generator. For example:"),pa=u(),C=o("pre"),la=u(),j=o("p"),Na=i('Note how I can use Faker\u2019s BaseProvider\u2019s methods in my own provider, like \u201Crandom_letters\u201D in "".join(self.random_letters()). Once I add the provider to Faker (more below), I can use it in my tests. In the example above, I can create a single Cloze or a list of them with:'),ra=u(),B=o("pre"),ia=u(),_=o("h2"),y=o("a"),Q=o("span"),Ua=i("Accessing Faker\u2019s standard providers\u2019 methods in a custom provider"),ca=u(),b=o("p"),Ma=i("In the example above, I could use self.random_letters from BaseProvider and all the other "),S=o("a"),Ra=i("BaseProvider fakes"),ja=i(". But not others. I used random_letters because I did not know how to access the one I really wanted: words, from the Lorem provider. It can be done, but it is hacky."),ua=u(),L=o("pre"),ka=u(),I=o("p"),Da=i("In the example above, I import a specific locale of the provider ("),V=o("code"),qa=i("faker.provider.lorem.en_US"),Xa=i("). Then I have all its methods. Here, I use a nested array comprehension to repeat each list item twice. Using a fixed locale works well because my fakes rarely need localization."),da=u(),E=o("h2"),P=o("a"),W=o("span"),Ja=i("Adding a provider to Faker"),fa=u(),f=o("p"),Za=i("Providers in Faker follow an odd structure. A provider is a class called Provider that inherits from Faker\u2019s BaseProvider. The code lives in the package\u2019s"),Y=o("code"),Ga=i("__init__.py"),Ka=i(", not a "),$=o("em"),Qa=i("provider.py"),Va=i(" file. That Provider class is all you need for a basic use case with no locales. If you need localised versions, they are always packages named after the locale. They are one level down from the main Provider and consist of a class also called Provider, which inherits from the Provider one level up."),ha=u(),H=o("pre"),ma=u(),x=o("p"),Wa=i("I import my providers in my "),aa=o("code"),Ya=i("conftest.py"),$a=i(" file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with:"),va=u(),O=o("pre"),wa=u(),D=o("p"),as=i("Now I can use the provier in my tests with"),_a=u(),N=o("pre"),ya=u(),F=o("h2"),g=o("a"),sa=o("span"),ss=i("A Faker provider for all locales"),ba=u(),q=o("p"),es=i("If I never use locales, a simple class like the one in the example above will Just Work\u2122. But if I use different locales for my fakes for testing, it won\u2019t. Since I\u2019ll never create a different version for each locale, I need a workaround. I can create a single locale, en_US, that simply inherits from my main provider. Then Faker will fall back to it when it can\u2019t find any of the other locales."),Ia=u(),U=o("pre"),Ea=u(),X=o("p"),ns=i("The class is minimal"),Pa=u(),M=o("pre"),xa=u(),T=o("h2"),z=o("a"),ea=o("span"),ts=i("Conclusion"),Fa=u(),J=o("p"),os=i("I find using Faker keeps the code clean. Of course, I cannot call any of Cloze\u2019s methods. I would need to create mocks for that, but that is a different story"),this.h()},l(a){d=p(a,"H2",{id:!0});var e=l(d);h=p(e,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ks=l(h);G=p(ks,"SPAN",{class:!0}),l(G).forEach(s),ks.forEach(s),Ca=c(e,"Use case"),e.forEach(s),na=k(a),m=p(a,"P",{});var ga=l(m);Ba=c(ga,"I am working on a small language training app. One data structure I use is called a \u201CCloze\u201D, inspired by "),A=p(ga,"A",{href:!0,rel:!0});var ds=l(A);Sa=c(ds,"Anki"),ds.forEach(s),La=c(ga,". It has two strings: a to-be-solved version and a solved version. There is also a boolean flag to show whether it was solved or not. These Clozes appear throughout the app. I could create a mock, and I will when I need to call its methods or check the code. But most of the time, I just need data in the right shape to pass around in my tests. Faker is great for that."),ga.forEach(s),ta=k(a),v=p(a,"H2",{id:!0});var ps=l(v);w=p(ps,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fs=l(w);K=p(fs,"SPAN",{class:!0}),l(K).forEach(s),fs.forEach(s),Ha=c(ps,"Creating a provider in Faker"),ps.forEach(s),oa=k(a),R=p(a,"P",{});var hs=l(R);Oa=c(hs,"At the time of writing, the Faker doc does not explain how to create your own provider. But you can reverse engineer some of the existing ones. Extend the BaseProvider class. Then every method becomes a generator. For example:"),hs.forEach(s),pa=k(a),C=p(a,"PRE",{class:!0});var Ms=l(C);Ms.forEach(s),la=k(a),j=p(a,"P",{});var ms=l(j);Na=c(ms,'Note how I can use Faker\u2019s BaseProvider\u2019s methods in my own provider, like \u201Crandom_letters\u201D in "".join(self.random_letters()). Once I add the provider to Faker (more below), I can use it in my tests. In the example above, I can create a single Cloze or a list of them with:'),ms.forEach(s),ra=k(a),B=p(a,"PRE",{class:!0});var Rs=l(B);Rs.forEach(s),ia=k(a),_=p(a,"H2",{id:!0});var ls=l(_);y=p(ls,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vs=l(y);Q=p(vs,"SPAN",{class:!0}),l(Q).forEach(s),vs.forEach(s),Ua=c(ls,"Accessing Faker\u2019s standard providers\u2019 methods in a custom provider"),ls.forEach(s),ca=k(a),b=p(a,"P",{});var Ta=l(b);Ma=c(Ta,"In the example above, I could use self.random_letters from BaseProvider and all the other "),S=p(Ta,"A",{href:!0,rel:!0});var ws=l(S);Ra=c(ws,"BaseProvider fakes"),ws.forEach(s),ja=c(Ta,". But not others. I used random_letters because I did not know how to access the one I really wanted: words, from the Lorem provider. It can be done, but it is hacky."),Ta.forEach(s),ua=k(a),L=p(a,"PRE",{class:!0});var js=l(L);js.forEach(s),ka=k(a),I=p(a,"P",{});var za=l(I);Da=c(za,"In the example above, I import a specific locale of the provider ("),V=p(za,"CODE",{});var _s=l(V);qa=c(_s,"faker.provider.lorem.en_US"),_s.forEach(s),Xa=c(za,"). Then I have all its methods. Here, I use a nested array comprehension to repeat each list item twice. Using a fixed locale works well because my fakes rarely need localization."),za.forEach(s),da=k(a),E=p(a,"H2",{id:!0});var rs=l(E);P=p(rs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ys=l(P);W=p(ys,"SPAN",{class:!0}),l(W).forEach(s),ys.forEach(s),Ja=c(rs,"Adding a provider to Faker"),rs.forEach(s),fa=k(a),f=p(a,"P",{});var Z=l(f);Za=c(Z,"Providers in Faker follow an odd structure. A provider is a class called Provider that inherits from Faker\u2019s BaseProvider. The code lives in the package\u2019s"),Y=p(Z,"CODE",{});var bs=l(Y);Ga=c(bs,"__init__.py"),bs.forEach(s),Ka=c(Z,", not a "),$=p(Z,"EM",{});var Is=l($);Qa=c(Is,"provider.py"),Is.forEach(s),Va=c(Z," file. That Provider class is all you need for a basic use case with no locales. If you need localised versions, they are always packages named after the locale. They are one level down from the main Provider and consist of a class also called Provider, which inherits from the Provider one level up."),Z.forEach(s),ha=k(a),H=p(a,"PRE",{class:!0});var Ds=l(H);Ds.forEach(s),ma=k(a),x=p(a,"P",{});var Aa=l(x);Wa=c(Aa,"I import my providers in my "),aa=p(Aa,"CODE",{});var Es=l(aa);Ya=c(Es,"conftest.py"),Es.forEach(s),$a=c(Aa," file and add them to the centralised Faker instance, which is passed to the texts as a fixture, with:"),Aa.forEach(s),va=k(a),O=p(a,"PRE",{class:!0});var qs=l(O);qs.forEach(s),wa=k(a),D=p(a,"P",{});var Ps=l(D);as=c(Ps,"Now I can use the provier in my tests with"),Ps.forEach(s),_a=k(a),N=p(a,"PRE",{class:!0});var Xs=l(N);Xs.forEach(s),ya=k(a),F=p(a,"H2",{id:!0});var is=l(F);g=p(is,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xs=l(g);sa=p(xs,"SPAN",{class:!0}),l(sa).forEach(s),xs.forEach(s),ss=c(is,"A Faker provider for all locales"),is.forEach(s),ba=k(a),q=p(a,"P",{});var Fs=l(q);es=c(Fs,"If I never use locales, a simple class like the one in the example above will Just Work\u2122. But if I use different locales for my fakes for testing, it won\u2019t. Since I\u2019ll never create a different version for each locale, I need a workaround. I can create a single locale, en_US, that simply inherits from my main provider. Then Faker will fall back to it when it can\u2019t find any of the other locales."),Fs.forEach(s),Ia=k(a),U=p(a,"PRE",{class:!0});var Js=l(U);Js.forEach(s),Ea=k(a),X=p(a,"P",{});var gs=l(X);ns=c(gs,"The class is minimal"),gs.forEach(s),Pa=k(a),M=p(a,"PRE",{class:!0});var Zs=l(M);Zs.forEach(s),xa=k(a),T=p(a,"H2",{id:!0});var cs=l(T);z=p(cs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ts=l(z);ea=p(Ts,"SPAN",{class:!0}),l(ea).forEach(s),Ts.forEach(s),ts=c(cs,"Conclusion"),cs.forEach(s),Fa=k(a),J=p(a,"P",{});var zs=l(J);os=c(zs,"I find using Faker keeps the code clean. Of course, I cannot call any of Cloze\u2019s methods. I would need to create mocks for that, but that is a different story"),zs.forEach(s),this.h()},h(){r(G,"class","icon icon-link"),r(h,"aria-hidden","true"),r(h,"tabindex","-1"),r(h,"href","#use-case"),r(d,"id","use-case"),r(A,"href","https://docs.ankiweb.net/editing.html#cloze-deletion"),r(A,"rel","nofollow"),r(K,"class","icon icon-link"),r(w,"aria-hidden","true"),r(w,"tabindex","-1"),r(w,"href","#creating-a-provider-in-faker"),r(v,"id","creating-a-provider-in-faker"),r(C,"class","language-python"),r(B,"class","language-python"),r(Q,"class","icon icon-link"),r(y,"aria-hidden","true"),r(y,"tabindex","-1"),r(y,"href","#accessing-fakers-standard-providers-methods-in-a-custom-provider"),r(_,"id","accessing-fakers-standard-providers-methods-in-a-custom-provider"),r(S,"href","https://faker.readthedocs.io/en/master/providers/baseprovider.html"),r(S,"rel","nofollow"),r(L,"class","language-python"),r(W,"class","icon icon-link"),r(P,"aria-hidden","true"),r(P,"tabindex","-1"),r(P,"href","#adding-a-provider-to-faker"),r(E,"id","adding-a-provider-to-faker"),r(H,"class","language-bash"),r(O,"class","language-python"),r(N,"class","language-python"),r(sa,"class","icon icon-link"),r(g,"aria-hidden","true"),r(g,"tabindex","-1"),r(g,"href","#a-faker-provider-for-all-locales"),r(F,"id","a-faker-provider-for-all-locales"),r(U,"class","language-bash"),r(M,"class","language-python"),r(ea,"class","icon icon-link"),r(z,"aria-hidden","true"),r(z,"tabindex","-1"),r(z,"href","#conclusion"),r(T,"id","conclusion")},m(a,e){n(a,d,e),t(d,h),t(h,G),t(d,Ca),n(a,na,e),n(a,m,e),t(m,Ba),t(m,A),t(A,Sa),t(m,La),n(a,ta,e),n(a,v,e),t(v,w),t(w,K),t(v,Ha),n(a,oa,e),n(a,R,e),t(R,Oa),n(a,pa,e),n(a,C,e),C.innerHTML=Cs,n(a,la,e),n(a,j,e),t(j,Na),n(a,ra,e),n(a,B,e),B.innerHTML=Bs,n(a,ia,e),n(a,_,e),t(_,y),t(y,Q),t(_,Ua),n(a,ca,e),n(a,b,e),t(b,Ma),t(b,S),t(S,Ra),t(b,ja),n(a,ua,e),n(a,L,e),L.innerHTML=Ss,n(a,ka,e),n(a,I,e),t(I,Da),t(I,V),t(V,qa),t(I,Xa),n(a,da,e),n(a,E,e),t(E,P),t(P,W),t(E,Ja),n(a,fa,e),n(a,f,e),t(f,Za),t(f,Y),t(Y,Ga),t(f,Ka),t(f,$),t($,Qa),t(f,Va),n(a,ha,e),n(a,H,e),H.innerHTML=Ls,n(a,ma,e),n(a,x,e),t(x,Wa),t(x,aa),t(aa,Ya),t(x,$a),n(a,va,e),n(a,O,e),O.innerHTML=Hs,n(a,wa,e),n(a,D,e),t(D,as),n(a,_a,e),n(a,N,e),N.innerHTML=Os,n(a,ya,e),n(a,F,e),t(F,g),t(g,sa),t(F,ss),n(a,ba,e),n(a,q,e),t(q,es),n(a,Ia,e),n(a,U,e),U.innerHTML=Ns,n(a,Ea,e),n(a,X,e),t(X,ns),n(a,Pa,e),n(a,M,e),M.innerHTML=Us,n(a,xa,e),n(a,T,e),t(T,z),t(z,ea),t(T,ts),n(a,Fa,e),n(a,J,e),t(J,os)},p:us,i:us,o:us,d(a){a&&s(d),a&&s(na),a&&s(m),a&&s(ta),a&&s(v),a&&s(oa),a&&s(R),a&&s(pa),a&&s(C),a&&s(la),a&&s(j),a&&s(ra),a&&s(B),a&&s(ia),a&&s(_),a&&s(ca),a&&s(b),a&&s(ua),a&&s(L),a&&s(ka),a&&s(I),a&&s(da),a&&s(E),a&&s(fa),a&&s(f),a&&s(ha),a&&s(H),a&&s(ma),a&&s(x),a&&s(va),a&&s(O),a&&s(wa),a&&s(D),a&&s(_a),a&&s(N),a&&s(ya),a&&s(F),a&&s(ba),a&&s(q),a&&s(Ia),a&&s(U),a&&s(Ea),a&&s(X),a&&s(Pa),a&&s(M),a&&s(xa),a&&s(T),a&&s(Fa),a&&s(J)}}}const Ys={excerpt:"I am a big fan of Faker for testing. I find having a random mock data generator keeps tests clean. In fact, I tend to extend Faker with project specific providers. Here's how",date:"2022-09-24T00:00:00.000Z",draft:!1,archived:!1,title:"Faker providers for project specific data structure fakes, in Python",tags:["python","testing"]};class $s extends Gs{constructor(d){super(),Ks(this,d,null,Vs,Qs,{})}}export{$s as default,Ys as metadata};
