import{S as po,i as oo,s as lo,D as Ie,x as co,y as io,z as ro,A as uo,B as jp,r as ko,p as ho,C as fo,L as Dp,e as p,t,k as r,c as o,a as l,h as e,d as n,m as u,b as k,g as i,F as s,n as mo}from"../../chunks/index-889cf753.js";import{P as yo}from"../../chunks/_post-5ef2f492.js";import"../../chunks/Header-15607706.js";function vo(is){let d,P,j,S,f=`<code class="language-bash">$ <span class="token function">npm</span> init svelte@next gotofritz
Need to <span class="token function">install</span> the following packages:
  create-svelte@next
Ok to proceed? <span class="token punctuation">(</span>y<span class="token punctuation">)</span> y
<span class="token punctuation">..</span>.

Next steps:
  <span class="token number">1</span>: <span class="token builtin class-name">cd</span> gotofritz
  <span class="token number">2</span>: <span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">(</span>or <span class="token function">pnpm</span> install, etc<span class="token punctuation">)</span>
  <span class="token number">3</span>: <span class="token function">git</span> init <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> <span class="token function">add</span> -A <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"Initial commit"</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span>
  <span class="token number">4</span>: <span class="token function">npm</span> run dev -- --open

To close the dev server, hit Ctrl-C

Stuck? Visit us at https://svelte.dev/chat

$ <span class="token function">npm</span> <span class="token function">install</span>
gotofritz@0.0.1 prepare
<span class="token punctuation">..</span>.

$ <span class="token function">npm</span> run dev -- --open</code>`,b,T,on,As,ln,cn,Ea,R,Lp=`<code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>
  <span class="token property">"bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"jsxBracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code>`,Ia,rs,rn,xa,D,un,F,kn,dn,K,hn,fn,Sa,h,Bs,us,mn,$s,yn,vn,Rs,W,gn,Fs,wn,bn,_n,Ks,A,En,Ws,In,xn,qs,Sn,Tn,Js,M,Pn,zs,jn,Dn,Vs,Cn,Ln,Hn,q,Gs,Mn,On,ks,Hp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> isHome <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">itemscope</span>
      <span class="token attr-name">itemtype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schema.org/Person<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vcard group-of-links<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> isHome<span class="token punctuation">&#125;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:info@gotofritz.net<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/fritz-stelluto_resume.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my CV as a PDF<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>my resume<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>
        <span class="token punctuation">></span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>
      ... etc ...</code>`,An,J,z,Bn,Qs,$n,Rn,Fn,ds,Mp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> page <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"$app/stores"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> isHome <span class="token operator">=</span> $page<span class="token punctuation">.</span>url<span class="token punctuation">.</span>pathname <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,Kn,Ys,Us,Wn,qn,Ns,V,Jn,Zs,zn,Vn,Ta,hs,Gn,Pa,fs,Qn,ja,m,Xs,ms,Yn,sa,Un,Nn,G,ys,Zn,aa,Xn,st,vs,Op=`<code class="language-js"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".svelte"</span><span class="token punctuation">,</span> <span class="token string">".md"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">mdsvex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".md"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
  <span class="token operator">...</span></code>`,at,Q,Y,nt,na,tt,et,pt,gs,Ap=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">const</span> prerender <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> allPostFiles <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"../../src-old/blog/**/*.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> iterablePostFiles <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>allPostFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> allPosts <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
      iterablePostFiles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>path<span class="token punctuation">,</span> resolver<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> postPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">archived</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>archived<span class="token punctuation">,</span>
          <span class="token literal-property property">when</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>date<span class="token punctuation">,</span>
          <span class="token literal-property property">permalink</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>permalink<span class="token punctuation">,</span>
          <span class="token literal-property property">published</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>published<span class="token punctuation">,</span>
          <span class="token literal-property property">tags</span><span class="token operator">:</span>
            metadata<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length
              <span class="token operator">?</span> <span class="token string">"//"</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" //"</span><span class="token punctuation">)</span>
              <span class="token operator">:</span> <span class="token string">"/ BLOG"</span><span class="token punctuation">,</span>
          <span class="token literal-property property">title</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sortedPosts <span class="token operator">=</span> allPosts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// TODO: filter out non-published files when not in dev</span>
    <span class="token comment">// (or maybe simply use _xxxx.md names for them?)</span>

    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">posts</span><span class="token operator">:</span> sortedPosts<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,ot,U,v,lt,ta,ct,it,ea,rt,ut,pa,kt,dt,oa,ht,ft,la,mt,yt,vt,ws,Bp=`<code class="language-js"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">vite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">fs</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">allow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/Users/gotofritz/Dropbox/"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">,</span><span class="token punctuation">,</span> etc</code>`,gt,N,ca,wt,bt,bs,$p=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// @ts-nocheck</span>
  <span class="token keyword">import</span> PostSummary <span class="token keyword">from</span> <span class="token string">"$lib/PostSummary.svelte"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> post <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./todos"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> posts<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostSummary</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>post<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>`,_t,Z,_s,ia,Et,It,xt,Es,Rp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">let</span> tags <span class="token operator">=</span> <span class="token string">"--tags--"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> when <span class="token operator">=</span> <span class="token string">"--when--"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> permalink <span class="token operator">=</span> <span class="token string">"--permalink--"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">"--title--"</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> whenHuman <span class="token operator">=</span> when<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span> <span class="token attr-name">datetime=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>when<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span>whenHuman<span class="token punctuation">&#125;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> permalink<span class="token punctuation">&#125;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>permalink<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span>
      <span class="token language-javascript"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span>
    <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>tags<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code>`,Da,Is,St,Ca,C,Tt,ra,Pt,jt,ua,Dt,Ct,La,g,Lt,ka,Ht,Mt,X,Ot,At,da,Bt,$t,ha,Rt,Ft,Ha,ss,Fp=`<code class="language-svelte">import <span class="token language-javascript"><span class="token punctuation">&#123;</span> readable <span class="token punctuation">&#125;</span></span> from "svelte/store"
export const questionStore = readable([], async set => set(await getQuestionData()))

async function getQuestionData() <span class="token language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    <span class="token string">"https://opentdb.com/api.php?amount=10&amp;category=27&amp;difficulty=easy&amp;type=multiple"</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">.</span>results
<span class="token punctuation">&#125;</span></span></code>`,Ma,L,Kt,as,Wt,qt,fa,Jt,zt,Oa,ns,Kp=`<code class="language-js"><span class="token comment">// stores/sitemap.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> readable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"svelte/store"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loadFilelist</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> allPostFiles <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"../../../src-old/blog/**/2*.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> iterablePostFiles <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>allPostFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> allPosts <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    iterablePostFiles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span><span class="token punctuation">,</span> resolver<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">archived</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>archived<span class="token punctuation">,</span>
        <span class="token literal-property property">when</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>date<span class="token punctuation">,</span>
        <span class="token literal-property property">permalink</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>permalink<span class="token punctuation">,</span>
        <span class="token literal-property property">published</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>published<span class="token punctuation">,</span>
        <span class="token literal-property property">tags</span><span class="token operator">:</span>
          metadata<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length
            <span class="token operator">?</span> <span class="token string">"//"</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" //"</span><span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token string">"// BLOG"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> metadata<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sortedPosts <span class="token operator">=</span> allPosts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// TODO: filter out non-published files when not in dev</span>
  <span class="token comment">// (or maybe simply use _xxxx.md names for them?)</span>

  <span class="token keyword">return</span> sortedPosts<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> filelist <span class="token operator">=</span> <span class="token function">readable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">loadFilelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">set</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Aa,ts,Wp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// routes/index.svelte ...</span>
  <span class="token keyword">import</span> PostSummary <span class="token keyword">from</span> <span class="token string">"$lib/PostSummary.svelte"</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> filelist <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"$lib/stores/sitemap.js"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

... other stuff ...

<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">$filelist </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PostSummary</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>post<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>`,Ba,xs,Vt,$a,Ss,Gt,Ra,es,qp='<code class="language-bash">$ <span class="token function">ln</span> -s ~/Dropbox/my_folder routes/blog</code>',Fa,_,Qt,ma,Yt,Ut,ya,Nt,Zt,va,Xt,se,Ka,Ts,ae,Wa,Ps,ne,qa,ps,Jp=`<code class="language-html">---
some: frontmatter
title: My Post
---

Here is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>the excerpt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>. Just some HTML
<span class="token comment">&lt;!--more--></span>
Now comes the rest of the post. Also HTML</code>`,Ja,w,ga,te,ee,os,pe,oe,ls,le,ce,wa,ie,re,za,E,ue,cs,ke,de,ba,he,fe,js,me,ye,Va,Ds,ve,Ga,Cs,ge;return{c(){d=p("h2"),P=t("Installation"),j=r(),S=p("pre"),b=r(),T=p("p"),on=t("I hardly had to think - I picked JS over TS (apparently the Svelte MD module doesn\u2019t work too well with TS), eslint and prettier, and bob\u2019s your uncle. Well\u2026 "),As=p("em"),ln=t("mostly"),cn=t(". I had to change the prettier settings as they are all wrong - single quotes? tabs??!? who uses tabs in JS? Weird. Well the Svelte devs have volunteered their spare time to give us a wonderful tool, it\u2019s no problem whatsoever to indulge their little quirks. And it could have been worse, at least they use semicolons\u2026 Anyway no biggie, I just edit .prettierrc, the prettier config file, and that\u2019s it"),Ea=r(),R=p("pre"),Ia=r(),rs=p("h3"),rn=t("Start hacking"),xa=r(),D=p("p"),un=t("I already have a website built with ancient technology ("),F=p("a"),kn=t("Metalsmit"),dn=t(", "),K=p("a"),hn=t("Handlebars"),fn=t(") so my first job is to convert it as is to SvelteKit."),Sa=r(),h=p("ul"),Bs=p("li"),us=p("p"),mn=t("Move static assets such as favicons into "),$s=p("code"),yn=t("src/static"),vn=r(),Rs=p("li"),W=p("p"),gn=t("Copy the rendered CSS from my old site into "),Fs=p("code"),wn=t("src/app.css"),bn=t(". Since I will be redesigning it anyway, no point in reorganising all the CSS files to fit SvelteKit\u2019s component structure"),_n=r(),Ks=p("li"),A=p("p"),En=t("Copy the HTML scaffolding from a variety of Handlebars files into "),Ws=p("code"),In=t("src/app.html"),xn=t(". I convert the path variables to "),qs=p("code"),Sn=t("%svelte.assets%"),Tn=r(),Js=p("li"),M=p("p"),Pn=t("Similarly to create-react-app, there are tags such as "),zs=p("code"),jn=t("%svelte.body%"),Dn=t(" and "),Vs=p("code"),Cn=t("%svelte.head%"),Ln=t(" in your HTML templates for a site\u2019s title and description"),Hn=r(),q=p("li"),Gs=p("p"),Mn=t("SvelteKit comes with a Header component already wired up. I also had a header component, so it\u2019s pretty much a copy and paste job. This is the only case where I need one of this if/else statements in the template. Easily done with Svelte"),On=r(),ks=p("pre"),An=r(),J=p("li"),z=p("p"),Bn=t("Passing the value of isHome dynamically left me a bit disappointed. It\u2019s not that straigtforward to pass variables up the tree from a page to a layout. My first approach involved using the standard "),Qs=p("code"),$n=t("pages"),Rn=t(" store which comes with svelte kit, and using the url property set by the router by default. It works, but it\u2019s neither portable nor elegant."),Fn=r(),ds=p("pre"),Kn=r(),Ys=p("li"),Us=p("p"),Wn=t("I want to set variables from inside svelte files, not by hardcoding strings in JS blocks in the layout. I tried with setContext and getContext but no joy there. I know about stores, but it seems a bit of an overkill for a simple variable. I\u2019ll leave it for refactoring later."),qn=r(),Ns=p("li"),V=p("p"),Jn=t("I finally add the content of the homepage to "),Zs=p("code"),zn=t("index.svelte"),Vn=t(". Getting there"),Ta=r(),hs=p("h3"),Gn=t("Enter mdx"),Pa=r(),fs=p("p"),Qn=t("It\u2019s time to start importing those MD files."),ja=r(),m=p("ul"),Xs=p("li"),ms=p("p"),Yn=t("First I install mdsvex with "),sa=p("code"),Un=t("npm i -D mdsvex"),Nn=r(),G=p("li"),ys=p("p"),Zn=t("Then amend the configuration "),aa=p("code"),Xn=t("svelte.config.js"),st=r(),vs=p("pre"),at=r(),Q=p("li"),Y=p("p"),nt=t("In my "),na=p("code"),tt=t("index.svelte"),et=t(" I add a JS block to fetch all the metadata for the posts"),pt=r(),gs=p("pre"),ot=r(),U=p("li"),v=p("p"),lt=t("I got the error "),ta=p("code"),ct=t("The request url /Users/gotofritz/Dropbox/src-old/ is outside of Vite serving allow list"),it=t(". That\u2019s because "),ea=p("code"),rt=t("../../src-old/"),ut=t(" is a symbolic link. Vite resolves it to the actual folder, which I happen to keep in Dropbox. Vite doesn\u2019t like it\u2019s not under te project\u2019s "),pa=p("code"),kt=t("src/"),dt=t(" but somewhere totally different. Eventually I discover the "),oa=p("code"),ht=t("svelte.config.js"),ft=t(" amend that makes it work. "),la=p("code"),mt=t("config.kit.vite"),yt=t(" is the part of the SvelteKit config where you can add Vite config"),vt=r(),ws=p("pre"),gt=r(),N=p("li"),ca=p("p"),wt=t("After that is simply a matter of using this data."),bt=r(),bs=p("pre"),_t=r(),Z=p("li"),_s=p("p"),ia=p("code"),Et=t("<PostSummary"),It=t(" is a simple component I created for this"),xt=r(),Es=p("pre"),Da=r(),Is=p("h3"),St=t("Refactoring: moving file list to an async Svelte Store"),Ca=r(),C=p("p"),Tt=t("One of SvelteKit\u2019s quirks is that you can have a "),ra=p("code"),Pt=t("load"),jt=t(" function only in a page. In my mind that makes it a bad place for fetching global information. Like, for example, a list of all the files in the site. A "),ua=p("code"),Dt=t("store"),Ct=t(" seems the more logical place for that. That gets us into one of the least savoury parts of Svelte: async stores."),La=r(),g=p("p"),Lt=t("Svelte Stores are not designed to be asynchronous. What makes me think that? Their start function needs to return a "),ka=p("code"),Ht=t("stop"),Mt=t(" function. But all async functions return a promise. For example, "),X=p("a"),Ot=t("the code in this gist by Theo Steiner"),At=t(" feels like the obvious way to wire up an async store. But if you try it, Svelte fails it with a "),da=p("code"),Bt=t("TypeError: stop is not a function"),$t=t(" error. That\u2019s because it isn\u2019t. You\u2019d think that "),ha=p("code"),Rt=t("async set => set(await getQuestionData())"),Ft=t(" isn\u2019t returning anything. But it is, it returns a promise. There are workarounds, but they feel like hacks."),Ha=r(),ss=p("pre"),Ma=r(),L=p("p"),Kt=t("I found "),as=p("a"),Wt=t("svelte-asyncable, an asyncable store"),qt=t(". But I am wary of small projects with a single contributor. Their priorities may change and then I\u2019d be stuck with an obsolete library. In the end I went for the least hacky solution: remove the "),fa=p("code"),Jt=t("async"),zt=t(" in favour of old fashioned promise/thens. The page renders, but now the file list loads asynchronously after page load. I have a feeling this may not play well when I\u2019ll get to generating the static site. But I\u2019ll cross that bridge when I get to it."),Oa=r(),ns=p("pre"),Aa=r(),ts=p("pre"),Ba=r(),xs=p("h3"),Vt=t("Adding MD blog posts to SvelteKit"),$a=r(),Ss=p("p"),Gt=t("I wanted to keep my old blog posts where they are, in Dropbox. That way I could decouple them from the site implementation. Creating a symbolic link to them with"),Ra=r(),es=p("pre"),Fa=r(),_=p("p"),Qt=t("wasn\u2019t possible. The config trick I used for generating the index page doesn\u2019t work with routes. Additionally I couldn\u2019t find a way to rename routes dynamically. The posts file names follow the Jenkins convention, "),ma=p("code"),Yt=t("yyyy-mm-dd-the-post-slug.md"),Ut=t(". I couldn\u2019t make them accessible as "),ya=p("code"),Nt=t("the-post-slug"),Zt=t(". Quite simply, SvelteKit can be used as a static site generator. But at heart, it isn\u2019t one. I bit the bullet and copied the md files files inside the "),va=p("code"),Xt=t("routes/blog/"),se=t(" folder. Then removed the date from the filename. It worked without a glitch."),Ka=r(),Ts=p("h4"),ae=t("Adding excerpts with mdsvex"),Wa=r(),Ps=p("p"),ne=t("My markdown sourcefiles had an excerpt section in the body. That was separated from the main body with an HTML comment. They were originally Wordpress posts, that\u2019s the reason for that. And once I set up my blog engine that way, I applied the same principle to all posts."),qa=r(),ps=p("pre"),Ja=r(),w=p("p"),ga=p("code"),te=t("mdsvex"),ee=t(" doesn\u2019t provide a way to handle that. You can apply a chain of "),os=p("a"),pe=t("remark"),oe=t(" plugins to the markdown source, and of "),ls=p("a"),le=t("rehype"),ce=t(" plugins to the generated HTML. But then "),wa=p("code"),ie=t("mdsvex"),re=t(" gets whatever comes out from the other end as a Svelte component. You can\u2019t fiddle with it in a template (at least, not as far as I could make out)."),za=r(),E=p("p"),ue=t("There is, actually, "),cs=p("a"),ke=t("a remark plugin for extracting a Wordpress style excerpts"),de=t(". It works quite well. But it keeps the excerpt and throws away the body. Mdsvex is not sophisticated enough to \u201Csplit\u201D the markdown data into a body "),ba=p("em"),he=t("and"),fe=t(" an excerpt and handle both in parallel. That is actually very similar to my old metalsmith engine, or to gulp, from the same era\u2026 I hoped it would be more capable, but Sveltekit is not a pure "),js=p("abbr"),me=t("SSG"),ye=t(". In the end rather than fighting it I preferred writing a simple script to batch-process all the posts I have. I moved any \u201Cspecial\u201D information which needs special treatment to the frontmatter. The body is just the page content, nothing meta in it. It makes more sense that way."),Va=r(),Ds=p("p"),ve=t("There is another way to handle the whole thing. One which should allow me to move the markdown files back to my Dropbox folder. But I will attempt it in the next version."),Ga=r(),Cs=p("h3"),ge=t("Tags"),this.h()},l(a){d=o(a,"H2",{});var c=l(d);P=e(c,"Installation"),c.forEach(n),j=u(a),S=o(a,"PRE",{class:!0});var zp=l(S);zp.forEach(n),b=u(a),T=o(a,"P",{});var Qa=l(T);on=e(Qa,"I hardly had to think - I picked JS over TS (apparently the Svelte MD module doesn\u2019t work too well with TS), eslint and prettier, and bob\u2019s your uncle. Well\u2026 "),As=o(Qa,"EM",{});var xe=l(As);ln=e(xe,"mostly"),xe.forEach(n),cn=e(Qa,". I had to change the prettier settings as they are all wrong - single quotes? tabs??!? who uses tabs in JS? Weird. Well the Svelte devs have volunteered their spare time to give us a wonderful tool, it\u2019s no problem whatsoever to indulge their little quirks. And it could have been worse, at least they use semicolons\u2026 Anyway no biggie, I just edit .prettierrc, the prettier config file, and that\u2019s it"),Qa.forEach(n),Ea=u(a),R=o(a,"PRE",{class:!0});var Vp=l(R);Vp.forEach(n),Ia=u(a),rs=o(a,"H3",{});var Se=l(rs);rn=e(Se,"Start hacking"),Se.forEach(n),xa=u(a),D=o(a,"P",{});var Ls=l(D);un=e(Ls,"I already have a website built with ancient technology ("),F=o(Ls,"A",{href:!0,rel:!0});var Te=l(F);kn=e(Te,"Metalsmit"),Te.forEach(n),dn=e(Ls,", "),K=o(Ls,"A",{href:!0,rel:!0});var Pe=l(K);hn=e(Pe,"Handlebars"),Pe.forEach(n),fn=e(Ls,") so my first job is to convert it as is to SvelteKit."),Ls.forEach(n),Sa=u(a),h=o(a,"UL",{});var y=l(h);Bs=o(y,"LI",{});var je=l(Bs);us=o(je,"P",{});var we=l(us);mn=e(we,"Move static assets such as favicons into "),$s=o(we,"CODE",{});var De=l($s);yn=e(De,"src/static"),De.forEach(n),we.forEach(n),je.forEach(n),vn=u(y),Rs=o(y,"LI",{});var Ce=l(Rs);W=o(Ce,"P",{});var Ya=l(W);gn=e(Ya,"Copy the rendered CSS from my old site into "),Fs=o(Ya,"CODE",{});var Le=l(Fs);wn=e(Le,"src/app.css"),Le.forEach(n),bn=e(Ya,". Since I will be redesigning it anyway, no point in reorganising all the CSS files to fit SvelteKit\u2019s component structure"),Ya.forEach(n),Ce.forEach(n),_n=u(y),Ks=o(y,"LI",{});var He=l(Ks);A=o(He,"P",{});var _a=l(A);En=e(_a,"Copy the HTML scaffolding from a variety of Handlebars files into "),Ws=o(_a,"CODE",{});var Me=l(Ws);In=e(Me,"src/app.html"),Me.forEach(n),xn=e(_a,". I convert the path variables to "),qs=o(_a,"CODE",{});var Oe=l(qs);Sn=e(Oe,"%svelte.assets%"),Oe.forEach(n),_a.forEach(n),He.forEach(n),Tn=u(y),Js=o(y,"LI",{});var Ae=l(Js);M=o(Ae,"P",{});var Hs=l(M);Pn=e(Hs,"Similarly to create-react-app, there are tags such as "),zs=o(Hs,"CODE",{});var Be=l(zs);jn=e(Be,"%svelte.body%"),Be.forEach(n),Dn=e(Hs," and "),Vs=o(Hs,"CODE",{});var $e=l(Vs);Cn=e($e,"%svelte.head%"),$e.forEach(n),Ln=e(Hs," in your HTML templates for a site\u2019s title and description"),Hs.forEach(n),Ae.forEach(n),Hn=u(y),q=o(y,"LI",{});var Ua=l(q);Gs=o(Ua,"P",{});var Re=l(Gs);Mn=e(Re,"SvelteKit comes with a Header component already wired up. I also had a header component, so it\u2019s pretty much a copy and paste job. This is the only case where I need one of this if/else statements in the template. Easily done with Svelte"),Re.forEach(n),On=u(Ua),ks=o(Ua,"PRE",{class:!0});var Gp=l(ks);Gp.forEach(n),Ua.forEach(n),An=u(y),J=o(y,"LI",{});var Na=l(J);z=o(Na,"P",{});var Za=l(z);Bn=e(Za,"Passing the value of isHome dynamically left me a bit disappointed. It\u2019s not that straigtforward to pass variables up the tree from a page to a layout. My first approach involved using the standard "),Qs=o(Za,"CODE",{});var Fe=l(Qs);$n=e(Fe,"pages"),Fe.forEach(n),Rn=e(Za," store which comes with svelte kit, and using the url property set by the router by default. It works, but it\u2019s neither portable nor elegant."),Za.forEach(n),Fn=u(Na),ds=o(Na,"PRE",{class:!0});var Qp=l(ds);Qp.forEach(n),Na.forEach(n),Kn=u(y),Ys=o(y,"LI",{});var Ke=l(Ys);Us=o(Ke,"P",{});var We=l(Us);Wn=e(We,"I want to set variables from inside svelte files, not by hardcoding strings in JS blocks in the layout. I tried with setContext and getContext but no joy there. I know about stores, but it seems a bit of an overkill for a simple variable. I\u2019ll leave it for refactoring later."),We.forEach(n),Ke.forEach(n),qn=u(y),Ns=o(y,"LI",{});var qe=l(Ns);V=o(qe,"P",{});var Xa=l(V);Jn=e(Xa,"I finally add the content of the homepage to "),Zs=o(Xa,"CODE",{});var Je=l(Zs);zn=e(Je,"index.svelte"),Je.forEach(n),Vn=e(Xa,". Getting there"),Xa.forEach(n),qe.forEach(n),y.forEach(n),Ta=u(a),hs=o(a,"H3",{});var ze=l(hs);Gn=e(ze,"Enter mdx"),ze.forEach(n),Pa=u(a),fs=o(a,"P",{});var Ve=l(fs);Qn=e(Ve,"It\u2019s time to start importing those MD files."),Ve.forEach(n),ja=u(a),m=o(a,"UL",{});var I=l(m);Xs=o(I,"LI",{});var Ge=l(Xs);ms=o(Ge,"P",{});var be=l(ms);Yn=e(be,"First I install mdsvex with "),sa=o(be,"CODE",{});var Qe=l(sa);Un=e(Qe,"npm i -D mdsvex"),Qe.forEach(n),be.forEach(n),Ge.forEach(n),Nn=u(I),G=o(I,"LI",{});var sn=l(G);ys=o(sn,"P",{});var _e=l(ys);Zn=e(_e,"Then amend the configuration "),aa=o(_e,"CODE",{});var Ye=l(aa);Xn=e(Ye,"svelte.config.js"),Ye.forEach(n),_e.forEach(n),st=u(sn),vs=o(sn,"PRE",{class:!0});var Yp=l(vs);Yp.forEach(n),sn.forEach(n),at=u(I),Q=o(I,"LI",{});var an=l(Q);Y=o(an,"P",{});var nn=l(Y);nt=e(nn,"In my "),na=o(nn,"CODE",{});var Ue=l(na);tt=e(Ue,"index.svelte"),Ue.forEach(n),et=e(nn," I add a JS block to fetch all the metadata for the posts"),nn.forEach(n),pt=u(an),gs=o(an,"PRE",{class:!0});var Up=l(gs);Up.forEach(n),an.forEach(n),ot=u(I),U=o(I,"LI",{});var tn=l(U);v=o(tn,"P",{});var x=l(v);lt=e(x,"I got the error "),ta=o(x,"CODE",{});var Ne=l(ta);ct=e(Ne,"The request url /Users/gotofritz/Dropbox/src-old/ is outside of Vite serving allow list"),Ne.forEach(n),it=e(x,". That\u2019s because "),ea=o(x,"CODE",{});var Ze=l(ea);rt=e(Ze,"../../src-old/"),Ze.forEach(n),ut=e(x," is a symbolic link. Vite resolves it to the actual folder, which I happen to keep in Dropbox. Vite doesn\u2019t like it\u2019s not under te project\u2019s "),pa=o(x,"CODE",{});var Xe=l(pa);kt=e(Xe,"src/"),Xe.forEach(n),dt=e(x," but somewhere totally different. Eventually I discover the "),oa=o(x,"CODE",{});var sp=l(oa);ht=e(sp,"svelte.config.js"),sp.forEach(n),ft=e(x," amend that makes it work. "),la=o(x,"CODE",{});var ap=l(la);mt=e(ap,"config.kit.vite"),ap.forEach(n),yt=e(x," is the part of the SvelteKit config where you can add Vite config"),x.forEach(n),vt=u(tn),ws=o(tn,"PRE",{class:!0});var Np=l(ws);Np.forEach(n),tn.forEach(n),gt=u(I),N=o(I,"LI",{});var en=l(N);ca=o(en,"P",{});var np=l(ca);wt=e(np,"After that is simply a matter of using this data."),np.forEach(n),bt=u(en),bs=o(en,"PRE",{class:!0});var Zp=l(bs);Zp.forEach(n),en.forEach(n),_t=u(I),Z=o(I,"LI",{});var pn=l(Z);_s=o(pn,"P",{});var Ee=l(_s);ia=o(Ee,"CODE",{});var tp=l(ia);Et=e(tp,"<PostSummary"),tp.forEach(n),It=e(Ee," is a simple component I created for this"),Ee.forEach(n),xt=u(pn),Es=o(pn,"PRE",{class:!0});var Xp=l(Es);Xp.forEach(n),pn.forEach(n),I.forEach(n),Da=u(a),Is=o(a,"H3",{});var ep=l(Is);St=e(ep,"Refactoring: moving file list to an async Svelte Store"),ep.forEach(n),Ca=u(a),C=o(a,"P",{});var Ms=l(C);Tt=e(Ms,"One of SvelteKit\u2019s quirks is that you can have a "),ra=o(Ms,"CODE",{});var pp=l(ra);Pt=e(pp,"load"),pp.forEach(n),jt=e(Ms," function only in a page. In my mind that makes it a bad place for fetching global information. Like, for example, a list of all the files in the site. A "),ua=o(Ms,"CODE",{});var op=l(ua);Dt=e(op,"store"),op.forEach(n),Ct=e(Ms," seems the more logical place for that. That gets us into one of the least savoury parts of Svelte: async stores."),Ms.forEach(n),La=u(a),g=o(a,"P",{});var H=l(g);Lt=e(H,"Svelte Stores are not designed to be asynchronous. What makes me think that? Their start function needs to return a "),ka=o(H,"CODE",{});var lp=l(ka);Ht=e(lp,"stop"),lp.forEach(n),Mt=e(H," function. But all async functions return a promise. For example, "),X=o(H,"A",{href:!0,rel:!0});var cp=l(X);Ot=e(cp,"the code in this gist by Theo Steiner"),cp.forEach(n),At=e(H," feels like the obvious way to wire up an async store. But if you try it, Svelte fails it with a "),da=o(H,"CODE",{});var ip=l(da);Bt=e(ip,"TypeError: stop is not a function"),ip.forEach(n),$t=e(H," error. That\u2019s because it isn\u2019t. You\u2019d think that "),ha=o(H,"CODE",{});var rp=l(ha);Rt=e(rp,"async set => set(await getQuestionData())"),rp.forEach(n),Ft=e(H," isn\u2019t returning anything. But it is, it returns a promise. There are workarounds, but they feel like hacks."),H.forEach(n),Ha=u(a),ss=o(a,"PRE",{class:!0});var so=l(ss);so.forEach(n),Ma=u(a),L=o(a,"P",{});var Os=l(L);Kt=e(Os,"I found "),as=o(Os,"A",{href:!0,rel:!0});var up=l(as);Wt=e(up,"svelte-asyncable, an asyncable store"),up.forEach(n),qt=e(Os,". But I am wary of small projects with a single contributor. Their priorities may change and then I\u2019d be stuck with an obsolete library. In the end I went for the least hacky solution: remove the "),fa=o(Os,"CODE",{});var kp=l(fa);Jt=e(kp,"async"),kp.forEach(n),zt=e(Os," in favour of old fashioned promise/thens. The page renders, but now the file list loads asynchronously after page load. I have a feeling this may not play well when I\u2019ll get to generating the static site. But I\u2019ll cross that bridge when I get to it."),Os.forEach(n),Oa=u(a),ns=o(a,"PRE",{class:!0});var ao=l(ns);ao.forEach(n),Aa=u(a),ts=o(a,"PRE",{class:!0});var no=l(ts);no.forEach(n),Ba=u(a),xs=o(a,"H3",{});var dp=l(xs);Vt=e(dp,"Adding MD blog posts to SvelteKit"),dp.forEach(n),$a=u(a),Ss=o(a,"P",{});var hp=l(Ss);Gt=e(hp,"I wanted to keep my old blog posts where they are, in Dropbox. That way I could decouple them from the site implementation. Creating a symbolic link to them with"),hp.forEach(n),Ra=u(a),es=o(a,"PRE",{class:!0});var to=l(es);to.forEach(n),Fa=u(a),_=o(a,"P",{});var B=l(_);Qt=e(B,"wasn\u2019t possible. The config trick I used for generating the index page doesn\u2019t work with routes. Additionally I couldn\u2019t find a way to rename routes dynamically. The posts file names follow the Jenkins convention, "),ma=o(B,"CODE",{});var fp=l(ma);Yt=e(fp,"yyyy-mm-dd-the-post-slug.md"),fp.forEach(n),Ut=e(B,". I couldn\u2019t make them accessible as "),ya=o(B,"CODE",{});var mp=l(ya);Nt=e(mp,"the-post-slug"),mp.forEach(n),Zt=e(B,". Quite simply, SvelteKit can be used as a static site generator. But at heart, it isn\u2019t one. I bit the bullet and copied the md files files inside the "),va=o(B,"CODE",{});var yp=l(va);Xt=e(yp,"routes/blog/"),yp.forEach(n),se=e(B," folder. Then removed the date from the filename. It worked without a glitch."),B.forEach(n),Ka=u(a),Ts=o(a,"H4",{});var vp=l(Ts);ae=e(vp,"Adding excerpts with mdsvex"),vp.forEach(n),Wa=u(a),Ps=o(a,"P",{});var gp=l(Ps);ne=e(gp,"My markdown sourcefiles had an excerpt section in the body. That was separated from the main body with an HTML comment. They were originally Wordpress posts, that\u2019s the reason for that. And once I set up my blog engine that way, I applied the same principle to all posts."),gp.forEach(n),qa=u(a),ps=o(a,"PRE",{class:!0});var eo=l(ps);eo.forEach(n),Ja=u(a),w=o(a,"P",{});var O=l(w);ga=o(O,"CODE",{});var wp=l(ga);te=e(wp,"mdsvex"),wp.forEach(n),ee=e(O," doesn\u2019t provide a way to handle that. You can apply a chain of "),os=o(O,"A",{href:!0,rel:!0});var bp=l(os);pe=e(bp,"remark"),bp.forEach(n),oe=e(O," plugins to the markdown source, and of "),ls=o(O,"A",{href:!0,rel:!0});var _p=l(ls);le=e(_p,"rehype"),_p.forEach(n),ce=e(O," plugins to the generated HTML. But then "),wa=o(O,"CODE",{});var Ep=l(wa);ie=e(Ep,"mdsvex"),Ep.forEach(n),re=e(O," gets whatever comes out from the other end as a Svelte component. You can\u2019t fiddle with it in a template (at least, not as far as I could make out)."),O.forEach(n),za=u(a),E=o(a,"P",{});var $=l(E);ue=e($,"There is, actually, "),cs=o($,"A",{href:!0,rel:!0});var Ip=l(cs);ke=e(Ip,"a remark plugin for extracting a Wordpress style excerpts"),Ip.forEach(n),de=e($,". It works quite well. But it keeps the excerpt and throws away the body. Mdsvex is not sophisticated enough to \u201Csplit\u201D the markdown data into a body "),ba=o($,"EM",{});var xp=l(ba);he=e(xp,"and"),xp.forEach(n),fe=e($," an excerpt and handle both in parallel. That is actually very similar to my old metalsmith engine, or to gulp, from the same era\u2026 I hoped it would be more capable, but Sveltekit is not a pure "),js=o($,"ABBR",{title:!0});var Sp=l(js);me=e(Sp,"SSG"),Sp.forEach(n),ye=e($,". In the end rather than fighting it I preferred writing a simple script to batch-process all the posts I have. I moved any \u201Cspecial\u201D information which needs special treatment to the frontmatter. The body is just the page content, nothing meta in it. It makes more sense that way."),$.forEach(n),Va=u(a),Ds=o(a,"P",{});var Tp=l(Ds);ve=e(Tp,"There is another way to handle the whole thing. One which should allow me to move the markdown files back to my Dropbox folder. But I will attempt it in the next version."),Tp.forEach(n),Ga=u(a),Cs=o(a,"H3",{});var Pp=l(Cs);ge=e(Pp,"Tags"),Pp.forEach(n),this.h()},h(){k(S,"class","language-bash"),k(R,"class","language-json"),k(F,"href","https://www.metalsmith.io/"),k(F,"rel","nofollow"),k(K,"href","https://handlebarsjs.com/"),k(K,"rel","nofollow"),k(ks,"class","language-svelte"),k(ds,"class","language-svelte"),k(vs,"class","language-js"),k(gs,"class","language-svelte"),k(ws,"class","language-js"),k(bs,"class","language-svelte"),k(Es,"class","language-svelte"),k(X,"href","https://gist.github.com/Theo-Steiner/e7fdbbdde224e5d53c35da26844902bd"),k(X,"rel","nofollow"),k(ss,"class","language-svelte"),k(as,"href","https://github.com/sveltetools/svelte-asyncable"),k(as,"rel","nofollow"),k(ns,"class","language-js"),k(ts,"class","language-svelte"),k(es,"class","language-bash"),k(ps,"class","language-html"),k(os,"href","https://remark.js.org/"),k(os,"rel","nofollow"),k(ls,"href","https://github.com/rehypejs/rehype/blob/main/doc/plugins.md"),k(ls,"rel","nofollow"),k(cs,"href","https://www.npmjs.com/package/remark-excerpt"),k(cs,"rel","nofollow"),k(js,"title","Static Site Generator")},m(a,c){i(a,d,c),s(d,P),i(a,j,c),i(a,S,c),S.innerHTML=f,i(a,b,c),i(a,T,c),s(T,on),s(T,As),s(As,ln),s(T,cn),i(a,Ea,c),i(a,R,c),R.innerHTML=Lp,i(a,Ia,c),i(a,rs,c),s(rs,rn),i(a,xa,c),i(a,D,c),s(D,un),s(D,F),s(F,kn),s(D,dn),s(D,K),s(K,hn),s(D,fn),i(a,Sa,c),i(a,h,c),s(h,Bs),s(Bs,us),s(us,mn),s(us,$s),s($s,yn),s(h,vn),s(h,Rs),s(Rs,W),s(W,gn),s(W,Fs),s(Fs,wn),s(W,bn),s(h,_n),s(h,Ks),s(Ks,A),s(A,En),s(A,Ws),s(Ws,In),s(A,xn),s(A,qs),s(qs,Sn),s(h,Tn),s(h,Js),s(Js,M),s(M,Pn),s(M,zs),s(zs,jn),s(M,Dn),s(M,Vs),s(Vs,Cn),s(M,Ln),s(h,Hn),s(h,q),s(q,Gs),s(Gs,Mn),s(q,On),s(q,ks),ks.innerHTML=Hp,s(h,An),s(h,J),s(J,z),s(z,Bn),s(z,Qs),s(Qs,$n),s(z,Rn),s(J,Fn),s(J,ds),ds.innerHTML=Mp,s(h,Kn),s(h,Ys),s(Ys,Us),s(Us,Wn),s(h,qn),s(h,Ns),s(Ns,V),s(V,Jn),s(V,Zs),s(Zs,zn),s(V,Vn),i(a,Ta,c),i(a,hs,c),s(hs,Gn),i(a,Pa,c),i(a,fs,c),s(fs,Qn),i(a,ja,c),i(a,m,c),s(m,Xs),s(Xs,ms),s(ms,Yn),s(ms,sa),s(sa,Un),s(m,Nn),s(m,G),s(G,ys),s(ys,Zn),s(ys,aa),s(aa,Xn),s(G,st),s(G,vs),vs.innerHTML=Op,s(m,at),s(m,Q),s(Q,Y),s(Y,nt),s(Y,na),s(na,tt),s(Y,et),s(Q,pt),s(Q,gs),gs.innerHTML=Ap,s(m,ot),s(m,U),s(U,v),s(v,lt),s(v,ta),s(ta,ct),s(v,it),s(v,ea),s(ea,rt),s(v,ut),s(v,pa),s(pa,kt),s(v,dt),s(v,oa),s(oa,ht),s(v,ft),s(v,la),s(la,mt),s(v,yt),s(U,vt),s(U,ws),ws.innerHTML=Bp,s(m,gt),s(m,N),s(N,ca),s(ca,wt),s(N,bt),s(N,bs),bs.innerHTML=$p,s(m,_t),s(m,Z),s(Z,_s),s(_s,ia),s(ia,Et),s(_s,It),s(Z,xt),s(Z,Es),Es.innerHTML=Rp,i(a,Da,c),i(a,Is,c),s(Is,St),i(a,Ca,c),i(a,C,c),s(C,Tt),s(C,ra),s(ra,Pt),s(C,jt),s(C,ua),s(ua,Dt),s(C,Ct),i(a,La,c),i(a,g,c),s(g,Lt),s(g,ka),s(ka,Ht),s(g,Mt),s(g,X),s(X,Ot),s(g,At),s(g,da),s(da,Bt),s(g,$t),s(g,ha),s(ha,Rt),s(g,Ft),i(a,Ha,c),i(a,ss,c),ss.innerHTML=Fp,i(a,Ma,c),i(a,L,c),s(L,Kt),s(L,as),s(as,Wt),s(L,qt),s(L,fa),s(fa,Jt),s(L,zt),i(a,Oa,c),i(a,ns,c),ns.innerHTML=Kp,i(a,Aa,c),i(a,ts,c),ts.innerHTML=Wp,i(a,Ba,c),i(a,xs,c),s(xs,Vt),i(a,$a,c),i(a,Ss,c),s(Ss,Gt),i(a,Ra,c),i(a,es,c),es.innerHTML=qp,i(a,Fa,c),i(a,_,c),s(_,Qt),s(_,ma),s(ma,Yt),s(_,Ut),s(_,ya),s(ya,Nt),s(_,Zt),s(_,va),s(va,Xt),s(_,se),i(a,Ka,c),i(a,Ts,c),s(Ts,ae),i(a,Wa,c),i(a,Ps,c),s(Ps,ne),i(a,qa,c),i(a,ps,c),ps.innerHTML=Jp,i(a,Ja,c),i(a,w,c),s(w,ga),s(ga,te),s(w,ee),s(w,os),s(os,pe),s(w,oe),s(w,ls),s(ls,le),s(w,ce),s(w,wa),s(wa,ie),s(w,re),i(a,za,c),i(a,E,c),s(E,ue),s(E,cs),s(cs,ke),s(E,de),s(E,ba),s(ba,he),s(E,fe),s(E,js),s(js,me),s(E,ye),i(a,Va,c),i(a,Ds,c),s(Ds,ve),i(a,Ga,c),i(a,Cs,c),s(Cs,ge)},p:mo,d(a){a&&n(d),a&&n(j),a&&n(S),a&&n(b),a&&n(T),a&&n(Ea),a&&n(R),a&&n(Ia),a&&n(rs),a&&n(xa),a&&n(D),a&&n(Sa),a&&n(h),a&&n(Ta),a&&n(hs),a&&n(Pa),a&&n(fs),a&&n(ja),a&&n(m),a&&n(Da),a&&n(Is),a&&n(Ca),a&&n(C),a&&n(La),a&&n(g),a&&n(Ha),a&&n(ss),a&&n(Ma),a&&n(L),a&&n(Oa),a&&n(ns),a&&n(Aa),a&&n(ts),a&&n(Ba),a&&n(xs),a&&n($a),a&&n(Ss),a&&n(Ra),a&&n(es),a&&n(Fa),a&&n(_),a&&n(Ka),a&&n(Ts),a&&n(Wa),a&&n(Ps),a&&n(qa),a&&n(ps),a&&n(Ja),a&&n(w),a&&n(za),a&&n(E),a&&n(Va),a&&n(Ds),a&&n(Ga),a&&n(Cs)}}}function go(is){let d,P;const j=[is[0],Cp];let S={$$slots:{default:[vo]},$$scope:{ctx:is}};for(let f=0;f<j.length;f+=1)S=Ie(S,j[f]);return d=new yo({props:S}),{c(){co(d.$$.fragment)},l(f){io(d.$$.fragment,f)},m(f,b){ro(d,f,b),P=!0},p(f,[b]){const T=b&1?uo(j,[b&1&&jp(f[0]),b&0&&jp(Cp)]):{};b&2&&(T.$$scope={dirty:b,ctx:f}),d.$set(T)},i(f){P||(ko(d.$$.fragment,f),P=!0)},o(f){ho(d.$$.fragment,f),P=!1},d(f){fo(d,f)}}}const Cp={date:"2022-04-22T00:00:00.000Z",draft:!0,archived:!1,title:"I rebuilt my website with SvelteKit",permalink:"/blog/building-blog-with-sveltekit",prev:"reordering-audio-files-in-a-fat-usb-stick",tags:["svelte","gotofritz"],excerpt:"https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog"};function wo(is,d,P){return is.$$set=j=>{P(0,d=Ie(Ie({},d),Dp(j)))},d=Dp(d),[d]}class Io extends po{constructor(d){super(),oo(this,d,wo,go,lo,{})}}export{Io as default,Cp as metadata};
