import{S as Ht,i as Pt,s as Ot,D as Je,x as Rt,y as $t,z as gt,A as Gt,B as _t,r as Lt,p as St,C as Ct,L as dt,e as r,t as l,k as c,c as i,a as f,h as n,d as t,m,b as h,g as o,F as a,n as Ut}from"../../chunks/index-889cf753.js";import{P as Dt}from"../../chunks/_post-5ef2f492.js";import"../../chunks/Header-15607706.js";function Yt(G){let p,b,d,I,u,_,L,we,x,Ee,K,S,ke,Q,C,ye,V,M,vt=`<code class="language-bash"><span class="token builtin class-name">cd</span> path/to/dotfile/clone
<span class="token function">git</span> pull origin master
./bootstrap.sh <span class="token comment">#./bootstrap.sh -f to avoid the prompt</span>
<span class="token builtin class-name">.</span> ~/.bash_profile</code>`,Z,U,Ie,ee,D,xe,te,Y,Me,se,w,Te,W,Ae,He,ae,E,Pe,X,Oe,Re,oe,T,wt=`<code class="language-bash"><span class="token comment"># Git credentials</span>
<span class="token comment"># Not in the repository, to prevent people from</span>
<span class="token comment"># accidentally committing under my name</span>
<span class="token assign-left variable">GIT_AUTHOR_NAME</span><span class="token operator">=</span><span class="token string">"Fritz Stelluto"</span>
<span class="token assign-left variable">GIT_COMMITTER_NAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$GIT_AUTHOR_NAME</span>"</span>
<span class="token function">git</span> config --global user.name <span class="token string">"<span class="token variable">$GIT_AUTHOR_NAME</span>"</span>
<span class="token assign-left variable">GIT_AUTHOR_EMAIL</span><span class="token operator">=</span><span class="token string">"xxxxxxx"</span>
<span class="token assign-left variable">GIT_COMMITTER_EMAIL</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$GIT_AUTHOR_EMAIL</span>"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"<span class="token variable">$GIT_AUTHOR_EMAIL</span>"</span></code>`,le,v,$e,F,ge,Ge,A,Le,Se,ne,j,Ce,re,N,Ue,ie,H,Et='<code class="language-bash">./.osx</code>',fe,z,De,pe,k,Ye,P,je,Ne,ue,O,kt='<code class="language-bash">brew bundle ~/Brewfile</code>',ce,R,ze,q,Be,me,y,We,$,J,Xe,Fe,he,g,yt='<code class="language-bash">./.cask</code>';return{c(){p=r("p"),b=l("I first learned about them from "),d=r("a"),I=l("Mathias Bynes"),u=l(", of jsPerf fame and so I cloned his project and created "),_=r("a"),L=l("my own dotfiles"),we=l(". Meanwhile "),x=r("a"),Ee=l("it has become a thing"),K=c(),S=r("h2"),ke=l("Using Git and the bootstrap script"),Q=c(),C=r("p"),ye=l("I have a cloned version of the dotfile directory on my machine. To update"),V=c(),M=r("pre"),Z=c(),U=r("h2"),Ie=l("Path"),ee=c(),D=r("p"),xe=l("I have no problem with putting the path under github - there\u2019s no confidential stuff in there."),te=c(),Y=r("h2"),Me=l("Add custom commands without creating a new fork"),se=c(),w=r("p"),Te=l("If "),W=r("code"),Ae=l("~/.extra"),He=l(" exists, it will be sourced along with the other files. You can use this to add a few custom commands without the need to fork this entire repository, or to add commands you don\u2019t want to commit to a public repository."),ae=c(),E=r("p"),Pe=l("My "),X=r("code"),Oe=l("~/.extra"),Re=l(" looks something like this:"),oe=c(),T=r("pre"),le=c(),v=r("p"),$e=l("You could also use "),F=r("code"),ge=l("~/.extra"),Ge=l(" to override settings, functions and aliases from my dotfiles repository. It\u2019s probably better to "),A=r("a"),Le=l("fork this repository"),Se=l(" instead, though."),ne=c(),j=r("h2"),Ce=l("Sensible OS X defaults"),re=c(),N=r("p"),Ue=l("When setting up a new Mac, you may want to set some sensible OS X defaults:"),ie=c(),H=r("pre"),fe=c(),z=r("h2"),De=l("Install Homebrew formulae"),pe=c(),k=r("p"),Ye=l("When setting up a new Mac, you may want to install some common "),P=r("a"),je=l("Homebrew"),Ne=l(" formulae (after installing Homebrew, of course):"),ue=c(),O=r("pre"),ce=c(),R=r("h2"),ze=l("Install native apps with "),q=r("code"),Be=l("brew cask"),me=c(),y=r("p"),We=l("You could also install native apps with "),$=r("a"),J=r("code"),Xe=l("brew cask"),Fe=l(":"),he=c(),g=r("pre"),this.h()},l(e){p=i(e,"P",{});var s=f(p);b=n(s,"I first learned about them from "),d=i(s,"A",{href:!0,rel:!0});var Ke=f(d);I=n(Ke,"Mathias Bynes"),Ke.forEach(t),u=n(s,", of jsPerf fame and so I cloned his project and created "),_=i(s,"A",{href:!0,rel:!0});var Qe=f(_);L=n(Qe,"my own dotfiles"),Qe.forEach(t),we=n(s,". Meanwhile "),x=i(s,"A",{href:!0,rel:!0});var Ve=f(x);Ee=n(Ve,"it has become a thing"),Ve.forEach(t),s.forEach(t),K=m(e),S=i(e,"H2",{});var Ze=f(S);ke=n(Ze,"Using Git and the bootstrap script"),Ze.forEach(t),Q=m(e),C=i(e,"P",{});var et=f(C);ye=n(et,"I have a cloned version of the dotfile directory on my machine. To update"),et.forEach(t),V=m(e),M=i(e,"PRE",{class:!0});var It=f(M);It.forEach(t),Z=m(e),U=i(e,"H2",{});var tt=f(U);Ie=n(tt,"Path"),tt.forEach(t),ee=m(e),D=i(e,"P",{});var st=f(D);xe=n(st,"I have no problem with putting the path under github - there\u2019s no confidential stuff in there."),st.forEach(t),te=m(e),Y=i(e,"H2",{});var at=f(Y);Me=n(at,"Add custom commands without creating a new fork"),at.forEach(t),se=m(e),w=i(e,"P",{});var _e=f(w);Te=n(_e,"If "),W=i(_e,"CODE",{});var ot=f(W);Ae=n(ot,"~/.extra"),ot.forEach(t),He=n(_e," exists, it will be sourced along with the other files. You can use this to add a few custom commands without the need to fork this entire repository, or to add commands you don\u2019t want to commit to a public repository."),_e.forEach(t),ae=m(e),E=i(e,"P",{});var de=f(E);Pe=n(de,"My "),X=i(de,"CODE",{});var lt=f(X);Oe=n(lt,"~/.extra"),lt.forEach(t),Re=n(de," looks something like this:"),de.forEach(t),oe=m(e),T=i(e,"PRE",{class:!0});var xt=f(T);xt.forEach(t),le=m(e),v=i(e,"P",{});var B=f(v);$e=n(B,"You could also use "),F=i(B,"CODE",{});var nt=f(F);ge=n(nt,"~/.extra"),nt.forEach(t),Ge=n(B," to override settings, functions and aliases from my dotfiles repository. It\u2019s probably better to "),A=i(B,"A",{href:!0,rel:!0});var rt=f(A);Le=n(rt,"fork this repository"),rt.forEach(t),Se=n(B," instead, though."),B.forEach(t),ne=m(e),j=i(e,"H2",{});var it=f(j);Ce=n(it,"Sensible OS X defaults"),it.forEach(t),re=m(e),N=i(e,"P",{});var ft=f(N);Ue=n(ft,"When setting up a new Mac, you may want to set some sensible OS X defaults:"),ft.forEach(t),ie=m(e),H=i(e,"PRE",{class:!0});var Mt=f(H);Mt.forEach(t),fe=m(e),z=i(e,"H2",{});var pt=f(z);De=n(pt,"Install Homebrew formulae"),pt.forEach(t),pe=m(e),k=i(e,"P",{});var be=f(k);Ye=n(be,"When setting up a new Mac, you may want to install some common "),P=i(be,"A",{href:!0,rel:!0});var ut=f(P);je=n(ut,"Homebrew"),ut.forEach(t),Ne=n(be," formulae (after installing Homebrew, of course):"),be.forEach(t),ue=m(e),O=i(e,"PRE",{class:!0});var Tt=f(O);Tt.forEach(t),ce=m(e),R=i(e,"H2",{});var qe=f(R);ze=n(qe,"Install native apps with "),q=i(qe,"CODE",{});var ct=f(q);Be=n(ct,"brew cask"),ct.forEach(t),qe.forEach(t),me=m(e),y=i(e,"P",{});var ve=f(y);We=n(ve,"You could also install native apps with "),$=i(ve,"A",{href:!0,rel:!0});var mt=f($);J=i(mt,"CODE",{});var ht=f(J);Xe=n(ht,"brew cask"),ht.forEach(t),mt.forEach(t),Fe=n(ve,":"),ve.forEach(t),he=m(e),g=i(e,"PRE",{class:!0});var At=f(g);At.forEach(t),this.h()},h(){h(d,"href","https://github.com/mathiasbynens/dotfiles"),h(d,"rel","nofollow"),h(_,"href","https://github.com/gotofritz/dotfiles"),h(_,"rel","nofollow"),h(x,"href","https://dotfiles.github.io/"),h(x,"rel","nofollow"),h(M,"class","language-bash"),h(T,"class","language-bash"),h(A,"href","https://github.com/mathiasbynens/dotfiles/fork"),h(A,"rel","nofollow"),h(H,"class","language-bash"),h(P,"href","http://brew.sh/"),h(P,"rel","nofollow"),h(O,"class","language-bash"),h($,"href","https://github.com/phinze/homebrew-cask"),h($,"rel","nofollow"),h(g,"class","language-bash")},m(e,s){o(e,p,s),a(p,b),a(p,d),a(d,I),a(p,u),a(p,_),a(_,L),a(p,we),a(p,x),a(x,Ee),o(e,K,s),o(e,S,s),a(S,ke),o(e,Q,s),o(e,C,s),a(C,ye),o(e,V,s),o(e,M,s),M.innerHTML=vt,o(e,Z,s),o(e,U,s),a(U,Ie),o(e,ee,s),o(e,D,s),a(D,xe),o(e,te,s),o(e,Y,s),a(Y,Me),o(e,se,s),o(e,w,s),a(w,Te),a(w,W),a(W,Ae),a(w,He),o(e,ae,s),o(e,E,s),a(E,Pe),a(E,X),a(X,Oe),a(E,Re),o(e,oe,s),o(e,T,s),T.innerHTML=wt,o(e,le,s),o(e,v,s),a(v,$e),a(v,F),a(F,ge),a(v,Ge),a(v,A),a(A,Le),a(v,Se),o(e,ne,s),o(e,j,s),a(j,Ce),o(e,re,s),o(e,N,s),a(N,Ue),o(e,ie,s),o(e,H,s),H.innerHTML=Et,o(e,fe,s),o(e,z,s),a(z,De),o(e,pe,s),o(e,k,s),a(k,Ye),a(k,P),a(P,je),a(k,Ne),o(e,ue,s),o(e,O,s),O.innerHTML=kt,o(e,ce,s),o(e,R,s),a(R,ze),a(R,q),a(q,Be),o(e,me,s),o(e,y,s),a(y,We),a(y,$),a($,J),a(J,Xe),a(y,Fe),o(e,he,s),o(e,g,s),g.innerHTML=yt},p:Ut,d(e){e&&t(p),e&&t(K),e&&t(S),e&&t(Q),e&&t(C),e&&t(V),e&&t(M),e&&t(Z),e&&t(U),e&&t(ee),e&&t(D),e&&t(te),e&&t(Y),e&&t(se),e&&t(w),e&&t(ae),e&&t(E),e&&t(oe),e&&t(T),e&&t(le),e&&t(v),e&&t(ne),e&&t(j),e&&t(re),e&&t(N),e&&t(ie),e&&t(H),e&&t(fe),e&&t(z),e&&t(pe),e&&t(k),e&&t(ue),e&&t(O),e&&t(ce),e&&t(R),e&&t(me),e&&t(y),e&&t(he),e&&t(g)}}}function jt(G){let p,b;const d=[G[0],bt];let I={$$slots:{default:[Yt]},$$scope:{ctx:G}};for(let u=0;u<d.length;u+=1)I=Je(I,d[u]);return p=new Dt({props:I}),{c(){Rt(p.$$.fragment)},l(u){$t(p.$$.fragment,u)},m(u,_){gt(p,u,_),b=!0},p(u,[_]){const L=_&1?Gt(d,[_&1&&_t(u[0]),_&0&&_t(bt)]):{};_&2&&(L.$$scope={dirty:_,ctx:u}),p.$set(L)},i(u){b||(Lt(p.$$.fragment,u),b=!0)},o(u){St(p.$$.fragment,u),b=!1},d(u){Ct(p,u)}}}const bt={title:"dotfiles",date:"2013-09-01 16:11",excerpt:"Storing your CLI config files (.bash_profile and all the rest) on github makes sense - as a backup, but also to compare and learn.",prev:"install-specific-version-homebrew",next:"directory-listings-in-apache-2-4",published:!0,tags:["bash"]};function Nt(G,p,b){return G.$$set=d=>{b(0,p=Je(Je({},p),dt(d)))},p=dt(p),[p]}class Xt extends Ht{constructor(p){super(),Pt(this,p,Nt,jt,Ot,{})}}export{Xt as default,bt as metadata};
