<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Weekly Challenge | Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/blog/cat/weekly-challenge/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2015-07-15T22:35:33+02:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hosting Octopress on nginx]]></title>
    <link href="http://gotofritz.net/blog/weekly-challenge/hosting-octopress-nginx/"/>
    <updated>2012-09-21T19:24:00+02:00</updated>
    <id>http://gotofritz.net/blog/weekly-challenge/hosting-octopress-nginx</id>
    <content type="html"><![CDATA[<p>The best thing about Octopress is that it makes it easier to switch to one of the servers out there which are faster than Apache - Nginx, lighttpd, or services such as Amazon S3. I went for nginx.</p>

<!--more-->


<h2>Deploying Octopress to my server</h2>

<p>For now I want to self-host my site on my <a href="http://www.linode.com/" title="[new window] Linode - Xen VPS Hosting" target="_blank">Linode</a>. Since both my server and my local machines are fresh installs, I first needed to <a href="http://gotofritz.net/blog/geekery/basic-user-admin-linode/" title="Basic user admin in an Ubuntu Linode">set up users, SSH keys</a> and suchlike.</p>

<p>With that done, I toyed with the idea of deploying Octopress via Dropbox - I mean, could it get any easier? Just symlink the public folder into dropbox
<code>bash
ln -s /path/to/octopress/Public /Users/ME/Dropbox/gotofritz.net
</code>
and then <a href="https://www.dropbox.com/install?os=lnx" title="[new window] Dropbox - Download Dropbox - Simplify your life" target="_blank">install Dropbox on the server</a> and do the same on that side. But somehow I felt reluctant to do that.</p>

<p>Instead I picked rsync as the deploy method.</p>

<h2>Deploying Octopress with rsync</h2>

<p>It's really as simple as the <a href="http://octopress.org/docs/deploying/rsync/" title="[new window] Deploying with rsync - Octopress" target="_blank">instructions on the Octopress site</a> say - you change a couple of settings in the Rakefile, and then you run <tt>rake deploy</tt>.</p>

<h2>Hosting Octopress on nginx</h2>

<h3>Installing nginx on Ubuntu</h3>

<p>I didn't have nginx on my server, so I installed it and started it a version which includes <a href="http://code.google.com/p/naxsi/" title="[new window] naxsi - Naxsi is an open source, high performance, low rules maintenance, Web Application Firewall module for Nginx - Google Project Hosting" target="_blank">naxsi, an nginx firewall</a>.</p>

<p><code>bash
apt-get install nginx-naxsi
/etc/init.d/nginx start
</code>
I then changed some of the settings in /etc/nginx/nginx.conf - enabled gizipping, added the location of the log files, nothing too weird.</p>

<p>Then I created a config file in /etc/nginx/sites-available/gotofritz.net</p>

<p>``` nginx
server {</p>

<pre><code>listen       80;
server_name  www.gotofritz.net;
return       301 http://gotofritz.net$request_uri;
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>listen       80;
server_name  blog.gotofritz.net;
return       301 http://gotofritz.net/blog$request_uri;
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>listen       80;
server_name  work.gotofritz.net;
return       301 http://gotofritz.net/work$request_uri;
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>listen       80;

root ...
index index.html;

server_name gotofritz.net;
access_log ...
error_log ...


error_page 500 502 503 504 /50x.html;
location = /50x.html {
     root /usr/share/nginx/www;
}


# do not serve pages starting with .
location ~ /\. {
     log_not_found off;
      deny all;
}

### This location definition prevents Nginx from serving any files which begin
### with a dollar sign, so Nginx will refuse to serve out a temp file if you
### are doing any editing inside a web-available directory
location ~ ~$ {
    access_log off;
    log_not_found off;
    deny all;
}

### These next two locations simply prevent Nginx from logging every time the
### favicon &amp; robots.txt files are accessed, to keep the logs clean
location = /robots.txt {
  access_log off;
  log_not_found off;
}

#don't need these for static site
location ~ \.(aspx|php|jsp|cgi)$ {
        return 410;
        access_log off;
}

location = /favicon.ico {
  access_log off;
  log_not_found off;
}

location ~ \.js {
  access_log off;
  log_not_found off;
}

location ~ \.css {
  access_log off;
  log_not_found off;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Created a symlink between sites-available and sites-enabled, then restarted the server
<code>bash
ln -s ../sites-enabled/gotofritz.net gotofritz.net
sudo /etc/init.d/nginx restart
</code></p>

<p>Anf off we go. Check out the speed - it's actually faster to load the page from my Linode in the UK than it is to load it locally on my machine using Pow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Wordpress blogs to Octopress]]></title>
    <link href="http://gotofritz.net/blog/weekly-challenge/migrating-wordpress-blogs-to-octopress"/>
    <updated>2012-09-16T14:26:00+02:00</updated>
    <id>http://gotofritz.net/blog/weekly-challenge/migrating-wordpress-blogs-to-octopress</id>
    <content type="html"><![CDATA[<p>This week's challenge: liberating my site from Wordpress' clumsy grasp.<!--more--></p>

<h2>About the challenge</h2>

<p>This has been said many times before: it's fantastic how Wordpress allowed so many people the ability to publish their content on the internet for free. For all the criticism, let's not forget how many people gave their free time to developing Wordpress. But the world has moved on and I can't stand the platform anymore. So I am moving to Octopress.</p>

<h2>Installing Octopress</h2>

<p>I simply followed the instructions on the <a href="http://octopress.org/docs/setup/" title="[new window] Octopress Setup - Octopress" target="_blank">Octopress setup page</a>, using rvm to upgrade ruby, and it all went well.</p>

<h2>Configuring Octopress</h2>

<p>Next I edited the _config.yml file - again, no major surprises there. I used "$F, %a"" as the date format ( 2004-12-25, Mon ) and /:categories/:title/ as the permalink structure.</p>

<h2>Creating test blogs</h2>

<p>I created the first test file:
<code>bash
$ rake new_post["Test 1, I will probably delete this"]
Creating new post: source/_posts/2012-09-15-test-1.markdown
subl source/_posts/2012-09-15-test-1.markdown
</code></p>

<p>which opeened the file in Sublime Text 2. I added a single category and a some sample text.</p>

<h2>``` bash</h2>

<p>layout: post
title: "Test 1"
date: 2012-09-15 17:34
comments: true</p>

<h2>categories: geekery</h2>

<p>This is my first test.</p>

<!--more-->


<p>And this is what it is all about.
```</p>

<p>I generated the site with
``` bash
$rake generate</p>

<h2>Generating Site with Jekyll</h2>

<p>directory source/stylesheets/
   create source/stylesheets/screen.css
/Users/ME/.rvm/gems/ruby-1.9.3-p194/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
Configuration from /Users/ME/work/octopress/_config.yml
Building site: source -> public
Successfully generated site: source -> public</p>

<p>$open public/index.html
```
It launched the static file into a browser. It looked like all the bits are there, but of course the images etc aren't because the app needs a web server. I could just deploy everything to Apache, but there is a more convenient way.</p>

<h2>Previewing Octopress with POW</h2>

<p>Octopress is a rack app, and can be viewed wtih <a href="http://pow.cx/" title="[new window] Pow: Zero-configuration Rack server for Mac OS X" target="_blank">Pow</a>, the simplest of rack servers. I installed it as per the instructions, then started rake to automatically deploy to it when I save.
<code>bash
curl get.pow.cx | sh
cd ~/.pow
ln -s ~/work/octopress octopress
rake watch
</code></p>

<h2>Changing Octopress theme</h2>

<p>Wanted to try a different theme, so went for the <a href="http://zespia.tw/Octopress-Theme-Slash/" title="[new window] Slash — a minimal theme for Octopress" target="_blank">Slash Octopress theme</a>. The instructions are pretty simple, but had to remember to stop watching the octopress folder before running the commands.
<code>bash
$ cd octopress
$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
$ rake install['slash']
$ rake generate
$ rake watch
</code></p>

<h2>Liberating data from Wordpress blogs</h2>

<p>Now the laborious parts. First of all, got the <a href="https://github.com/thomasf/exitwp" title="[new window] thomasf/exitwp · GitHub" target="_blank">Exitwp</a> plugin from github
<code>bash
git clone https://github.com/thomasf/exitwp.git
</code>
Then I logged onto the Wordpress admin console (for the last time!) and in <tt>wp-admin/export.php</tt> I clicked on "Download Export File". I saved the xml files into the wordpress-xml directory I just cloned from github.</p>

<p>I run the XML through xmlint as suggested, although without a DTD I am not sure what I was looking for
<code>bash
$ xmllint --noout wordpress-xml/*.xml
</code></p>

<p>Installed dependencies - but first had to <a href="http://guide.python-distribute.org/installation.html" title="[new window] Installing the Package Tools — The Hitchhiker's Guide to Packaging v1.0 documentation" target="_blank">install Pip</a>.
<code>bash
$ curl -O http://pypi.python.org/packages/source/p/pip/pip-0.7.2.tar.gz
$ tar xzf pip-0.7.2.tar.gz
$ cd pip-0.7.2
$ python setup.py install
$ cd exitwp/
$ sudo pip install --upgrade  -r pip_requirements.txt
</code></p>

<p>Edited the config.yaml file - changed download_images to true, and added a few filters:

``` bash</p>

<h1>Replace certain patterns in body</h1>

<h1>Simply replace the key with its value</h1>

<p>body_replace: {</p>

<pre><code>'[python]': '{% codeblock lang:python %}',
'[/python]': '{% endcodeblock %}',
'[bash]': '{% codeblock lang:bash %}',
'[/bash]': '{% endcodeblock %}',
'[js]': '{% codeblock lang:js %}',
'[/js]': '{% endcodeblock %}',
'[ruby]': '{% codeblock lang:ruby %}',
'[/ruby]': '{% endcodeblock %}',
'[xml]': '{% codeblock lang:xml %}',
'[/xml]': '{% endcodeblock %}',
'[css]': '{% codeblock lang:css %}',
'[/css]': '{% endcodeblock %}',
'[html]': '{% codeblock lang:html %}',
'[/html]': '{% endcodeblock %}',
'[yaml]': '{% codeblock lang:yaml %}',
'[/yaml]': '{% endcodeblock %}',
'[php]': '{% codeblock lang:php %}',
'[/php]': '{% endcodeblock %}'
</code></pre>

<p>}
```
</p>

<p>Finally, run the converter command.
<code>bash
python exitwp.py
</code></p>

<p>It is quite good - it mostly does a good job, and the lists the files it couldn't parse at the end. I only had 6 out of 400 posts, which is quite something.</p>

<p>Even the files it couldn't convert, it still created them with the right front matter, so all I needed to take care of is the HTML to markdown conversion. I used <a href="http://johnmacfarlane.net/pandoc/README.html" title="[new window] Pandoc - Pandoc User’s Guide" target="_blank">Pandoc, a remarkable conversion tool</a> for that. I pasted the HTML from the Wordpress window to a file called text.html, run the command below, then pasted the text.md file into the correct jekyll post file.</p>

<p><code>bash
$ pandoc -f html -t markdown text.html  &gt; text.md
$ subl text.md
</code></p>

<p>The only issue is that a the &lt;!--more--&gt; excerpt thing was missing for most posts. I bit the bullet and added it manually to all the files - it only took me half a hour, nothing too dramatic.</p>

<h2>Combining multiple Octopress blogs</h2>

<p>With the basics out of the way, it's time to fine tune things. I actually had two instances of Wordpress running two separate subsites - a blog and a portfolio site with a common homepage. I was hoping to be able to combine them when WP 3.0 came out, but managing the subdomains was too painful so I never did. I want to keep that setup for now, as I am planning to do a lot of reorganizing of the portfolio site, but not the blog. Octopress is not set up to manage multiple blogs, but eventually found a way.</p>

<p>My starting point was two separate octopress instances, Octo1/ and Octo2/, sitting side by side.</p>

<p>First of all I tried deploying both to a third folder octopress_deploy. That had the undesirable side effect of duplicating assets - there'll be two versions of images, css, and so on. But also, rake watch didn't work anymore. I found watch very useful so that wasn't good.</p>

<p>Then I tried the technique suggested on this <a href="https://github.com/imathis/octopress/issues/708" title="[new window] 2 Blogs in 1 Domain · Issue #708 · imathis/octopress" target="_blank">Octopress github page</a>. This makes the rake watch task work again, but doesn't solve the repeated assets issue. I guess I would have to edit the themes for that, something I can do later.</p>

<p>So the main site is the blog. It is a vanilla Octopress site, except that the links have the structure
<code>yaml
root: /
permalink: /blog/:categories/:title/
</code>
The portfolio site is published to the SOURCE of the main site - so that when the main site is generated, it copies along the portfolio site files too.</p>

<p><code>yaml
root: /work
permalink: /work/:categories/:title/
source: source
</code>
The rakefile for the portfolio site was amended accordingly, so that the generate publishes to the correct directory (again, notice the 'source' in the path)
<code>ruby
public_dir      = "~/work/octopress/source/work"    # compiled site directory
</code>
So that almost creates the structure I want:
<code>
gotofritz.net/ -&gt; homepage, with links to blog entries and a single link to the portfolio site in the main nav
gotofritz.net/blog/ -&gt; blog homepage - MISSING
gotofritz.net/blog/blah/blah-blah -&gt; blog entries
....
gotofritz.net/work/ -&gt; portfolio homepage
gotofritz.net/work/blah/blah-blah -&gt; portfolio entries
...
</code>
Now I need a way to generate the missing blog summary page. I thought I could use the archive for that, since I don't use it for anyehing else. It turns out I can just move the index.html inside source/blog/archives to source/blog - that's my blog index page, there and then. Of course it uses a different template, but that's ok for now.</p>

<p>Finally, some tweaks to the theme files. Changed <tt>octopress_blog/source/<em>includes/custom/navigation.html</tt> removing Archives links and changing url for blog links. Did the same on <tt>octopress_work/source/</em>includes/custom/navigation.html</tt>. Updated the favicons and head.html. Changed some image paths in the scss for the buttons in the top navigation bar - removed the Rails image-url( helper and replaced it with an hard coded URL. It's good enough for now.</p>

<p>Added an intro message in the homepage by editing the default.html page

<code>
{% if "/index.html" == page.url %}
Hello my name is fritz. blah blah
{% endif %}
</code>
</p>

<p>That's pretty much it for now.</p>

<h2>Merging sitemaps</h2>

<p>One issue with merging multiple blogs is that each comes with its own sitemap.xml file, and they'll need to be merged. After <a href="https://github.com/imathis/octopress/issues/708" title="[new window] 2 Blogs in 1 Domain · Issue #708 · imathis/octopress" target="_blank">a discussion on GitHub</a> I came up with these amends to the rakefile, which basically merge all the sitemap.xml files it finds inside the public/ directory, and runs at the end of the generate task
``` ruby
is_multiblog    = true        # runs some extra tasks for blogs</p>

<h1>...</h1>

<p>desc "Generate jekyll site"
task :generate do
  raise "### You haven't set anything up yet. First run <code>rake install</code> to set up an Octopress theme." unless File.directory?(source_dir)
  puts "## Generating Site with Jekyll"
  system "compass compile --css-dir #{source_dir}/stylesheets"
  system "jekyll"
  if( defined? is_multiblog and is_multiblog )</p>

<pre><code>Rake::Task[:merge_sitemaps].execute
</code></pre>

<p>  end
end</p>

<h1>....</h1>

<p>desc "merges all the sitemaps it finds inside public. Useuful if you have more than one blog under the same site. Idea from https://github.com/imathis/octopress/issues/708"
task :merge_sitemaps do
  root_dir = "public"
  howmany  = 0
  header   = []
  trailer  = []
  alllines = []
  lines    = []
  Dir.glob( root_dir + "/**/sitemap.xml" ).each{ |sitemap|</p>

<pre><code>lines    = (IO.readlines sitemap)
header   = lines.slice!( 0..1 )
trailer  = [ lines.slice!( -1 ) ]
alllines = alllines + lines
howmany  += 1
File.delete sitemap
</code></pre>

<p>  }
  File.open( root_dir + "/sitemap.xml", 'w' ) do |f|</p>

<pre><code>f.write ( header + alllines + trailer ).join( "\n" )
</code></pre>

<p>  end
  puts "Merged #{howmany} sitemaps onto #{root_dir}/sitemap.xml"
end
```</p>

<p>I made <a href="https://developer.apple.com/downloads/index.action#">a pull request for this Octopress change</a>, should anyone be interested</p>

<h2>Fixing bad SEO in Octopress permalinks with categories</h2>

<p>Another problem with Jekyll / Octopress is that it doesn't do a good job of creating permalinks with categories in them. It puts the category human readable name as the permalink, rather than a URL friendly version as per the post title. So, if you have a category "Café dreams" and post "My favourite Café", and your structure is /:categories/:title, then your permalink will include <code>/Café Dreams/my-favourite-cafe</code> instead of  <code>/cafe-dreams/my-favourite-cafe</code>. There are two separate aspects to it, with two different solutions - fixing the legacy Wordpress pages, and ensuring all future pages do not suffer from this issue.</p>

<h3>Generating Octopress permalinks from legacy Wordpress slugs</h3>

<p>This is a semi-manual batch job, but there isn't really an easy way to do it. The good thing is that all the posts have a Wordpress slug: field, so I can use that to create the title from. I create a temporary rake task for this. It worked ok, bar a couple of files which I fixed manually.
``` ruby
desc "fix permalinks"
task :fix do</p>

<p>  howmany = 0</p>

<p>  #get all files
  Dir.glob( "#{source_dir}/#{posts_dir}/**" ).each{ |post|</p>

<pre><code>  #get frontmatter
  stream = File.open( post )
  frontmatter = YAML::load( stream )
  stream.close

  #only create permalink if not there
  if( frontmatter["permalink"] or !frontmatter.has_key?("slug") )
    next
  end

  #generate permalink - regex is from category_generator.rb
  catSlug = frontmatter["categories"][0].gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase
  frontmatter["permalink"] = "blog/" + catSlug + "/" + frontmatter["slug"]

  #gets rest of file
  content = File.read( post ).gsub( /^---.+:?---/m, "" )

  #updates file
  File.open( post, "w") { |file|
    file.puts frontmatter.to_yaml + "---" + content
  }

  howmany += 1
</code></pre>

<p>  }
  puts "Update #{howmany} files"</p>

<p>end
```</p>

<h3>Ensuring new Octopress pages have an SEO friendly link with category</h3>

<p>In order to ensure all new Octopress posts do not suffer from the same bad permalink problem, I amended the rake new_post task to take an optonial second parameter, category. So you can call it like this
<code>bash
rake new_post["is coffee passé?","Café Dreams"]
</code>
and it will generate this front matter below. Notice that rake will complain if there are any blank spaces between the two square brackets.
While I was at it I added an 'editor' variable (in my case, "subl") to open the newly created file with.</p>

<h2>``` yaml</h2>

<p>layout: post
title: "is coffee passé?"
date: 2012-09-20 17:14
comments: true
categories:
- Café Dreams</p>

<h2>permalink: /blog/cafe-dreams/is-coffee-passe/</h2>

<p>```
Note that I had to the encoding as the first line, to avoid the regular expression choking on umlauts etc</p>

<p>``` ruby</p>

<h1>encoding: utf-8</h1>

<p>```
The code for the rake is below.</p>

<p>``` ruby</p>

<h1>usage rake new_post[my-new-post] or rake new_post['my new post'] or rake new_post (defaults to "new-post")</h1>

<p>desc "Begin a new post in #{source_dir}/#{posts_dir}"
task :new_post, :title, :category do |t, args|
  raise "### You haven't set anything up yet. First run <code>rake install</code> to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{posts_dir}"
  args.with_defaults(:title => 'new-post', :category => "")
  title = args.title
  filename = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)</p>

<pre><code>abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
</code></pre>

<p>  end</p>

<p>  permalink = ""</p>

<p>  #get config
  stream = File.open( "_config.yml" )
  configYml = YAML::load( stream )
  stream.close</p>

<p>  #does it need to fix the permalink?
  if /:categories\b/.match( configYml["permalink"] ) and !/:((year)|(date)|(month)|(day)|(pretty))\b/.match( configYml["permalink"] )</p>

<pre><code>permalink = "permalink: " + configYml["permalink"]
                .gsub(/:categories/, args.category.to_url )
                .gsub(/:title/, title.to_url )
</code></pre>

<p>  end</p>

<p>  puts "Creating new post: #{filename}"
  open(filename, 'w') do |post|</p>

<pre><code>post.puts "---"
post.puts "layout: post"
post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
post.puts "comments: true"
post.puts "categories: "
if "" != args["category"]
  post.puts "- #{args.category}"
end
if permalink
  post.puts permalink
end
post.puts "---"
</code></pre>

<p>  end</p>

<p>  #open straight away
  if defined? editor</p>

<pre><code>system "#{editor} #{filename}"
</code></pre>

<p>  end
end
```</p>

<p>There are plenty more small adjustements to do, but this is it for now. Now it's time for <a href="../hosting-octopress-nginx/">part 2: depoly to an Nginx server</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating XML iTunes library files with Ruby]]></title>
    <link href="http://gotofritz.net/blog/weekly-challenge/manipulating-xml-itunes-library-ruby"/>
    <updated>2012-07-15T13:04:15+02:00</updated>
    <id>http://gotofritz.net/blog/weekly-challenge/manipulating-xml-itunes-library-ruby</id>
    <content type="html"><![CDATA[<p>The challenge this week: shell script(s) to quickly edit the iTunes library and copy files around.</p>

<!--more-->


<h2>About the challenge</h2>

<p>iTunes is quite limiting in what it does and doesn't allow people to do with their own music. There are a number of things which are not easy to do: copying files from a playlists into a USB stick for car journeys, identifying missing files, removing files from the hard disk which are no longer in the iTunes library, and so on.</p>

<p>One can write AppleScript utilities for those types of tasks - check out <a href="http://dougscripts.com/itunes/">Doug's AppleScripts for iTunes</a> for example - but I try to avoid AppleScript at all costs if I can.</p>

<p>Luckily, iTunes keeps an XML copy of the library data (a <a href="http://en.wikipedia.org/wiki/Property_list">plist</a>), one I can manipulate in any language of my choice. Since I have been wanting to play with Ruby for years, I decided to make this my first script. Because the file can get quite huge, an event based parser like SAX should be used, whether it's pull or push (here's <a href="http://www.programmersheaven.com/user/pawanspace/blog/609-XML-parsers-Push-versus-Pull-parsers/">a quick article explaining the difference between push and pull parsers</a>).</p>

<p>Some artefacts <a href="https://github.com/gotofritz/Weekly-Challenges/tree/master/weekly-challenge-23_ruby-itunes-fiddler">available on GitHub</a>.</p>

<h2>Generating an XML iTunes library file with Ruby</h2>

<p><code>gherkin
Feature: Generating an XML iTunes library file with Ruby
  In order to manipulate the iTunes library
  As a command line user
  I need to be able to read it and generate a manipulated version
</code></p>

<p>Initially I need to find a good XML parser, and prove that I can read the library file and process it into another library file that is still valid.</p>

<h3>Running a simple Ruby script from the command line</h3>

<p>``` gherkin
Scenario: Running a simple Ruby script from the command line</p>

<pre><code>Given that I am in the folder "weekly-challenge-23_ruby-itunes-fiddler"
When I run the command itunefiddler
Then the script should run
And the last line of output should start with "done"
</code></pre>

<p>```</p>

<p>Babysteps, as this is my very first ruby script. This can all be done quickly on the command line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch itunesfiddler
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;#!/usr/bin/env ruby&#39;</span> &gt;&gt; itunesfiddler
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;&#39;</span> &gt;&gt; itunesfiddler
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;puts &quot;done&quot;&#39;</span> &gt;&gt; itunesfiddler
</span><span class='line'>chmod 775 itunesfiddler
</span><span class='line'>./itunesfiddler
</span><span class='line'>subl itunesfiddler
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The lines starting with touch and echo create the files and add a line at the time to it. Then I make it executable, run it, and open it in Sublime Text 2 for further editing.</p>

<h3>Duplicating the XML library file in Ruby</h3>

<p><code>gherkin
Scenario: Duplicating the XML library file in Ruby
  Given that I have a library XML file called iTunes Music Library.xml
  And an executable ruby script called itunefiddler
  When I run the command itunefiddler
  And I pass --input "iTunes Music Library.xml" as an argument
  And I pass --output "iTunes_library_new.xml" as an argument
  Then "iTunes_library_new.xml" should be created
  And it should be a copy of "iTunes_library.xml"
  And the output should be "done - iTunes_library_new.xml"
</code></p>

<p>This scenario covers passing command line arguments, and opening files for reading and writing.</p>

<p>I started using ARGV to read arguments, but that is nowhere near flexible enough.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=</span><span class="n">itunesfiddler</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;parses an XML library file for iTunes into another&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">ARGV</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span><span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Argument: </span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">a</span>
</span><span class='line'>  <span class="k">when</span> <span class="sr">/--input=(\w+)/</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;INPUT: </span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">puts &quot;done&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ugly regex alert! I used the OptionParser module in the end.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =itunesfiddler&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">parses</span> <span class="n">an</span> <span class="no">XML</span> <span class="n">library</span> <span class="n">file</span> <span class="k">for</span> <span class="n">iTunes</span> <span class="n">into</span> <span class="n">another</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &#39;optparse&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">reads</span> <span class="n">command</span> <span class="n">line</span> <span class="n">args</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;options = {}</span>
</span><span class='line'><span class="sr">itunesfiddler = OptionParser.new do |opt|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#help screen</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: itunesfiddler --input=FILE [OPTIONS] [COMMAND]&quot;</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">separator</span>  <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">separator</span>  <span class="s2">&quot;Commands&quot;</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">separator</span>  <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">separator</span>  <span class="s2">&quot;Options&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #individual options</span>
</span><span class='line'><span class="sr">  opt.on(&quot;-i&quot;,&quot;--input SRC&quot;,&quot;input xml file&quot;) do |src|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span> <span class="n">src</span>
</span><span class='line'>  <span class="nb">abort</span><span class="p">(</span> <span class="s2">&quot;File not found </span><span class="si">#{</span><span class="n">src</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'><span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span>
</span><span class='line'>  <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">].</span><span class="n">clone</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;.new&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  opt.on(&quot;-o&quot;,&quot;--output [TARGET]&quot;,&quot;output xml file&quot;) do |target|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span> <span class="o">=</span> <span class="n">target</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  opt.on(&quot;-h&quot;,&quot;--help&quot;,&quot;help&quot;) do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">itunesfiddler</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">collects</span> <span class="n">args</span> <span class="ow">and</span> <span class="n">quits</span> <span class="k">if</span> <span class="n">something</span> <span class="n">wrong</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;itunesfiddler.parse!</span>
</span><span class='line'><span class="sr">unless options[:src]</span>
</span><span class='line'><span class="sr">  puts itunesfiddler</span>
</span><span class='line'><span class="sr">  abort( &quot;ERROR: missing --input&quot; )</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As for reading and writing the file, it's all very simple in Ruby.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#copies file over</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span> <span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;f &amp;lt;&amp;lt; x</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;done </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">exit</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have added a couple of nice to haves - the --input= parameter is mandatory, the --output= param is derived from input if not passed.</p>

<p>To test it, first of all I moved iTunes Library.itl and iTunes Music Library.xml out of the Music/iTunes folder, which means next time iTunes is started it will run with a blank library. Started iTunes, and a new version of iTunes Music Library.xml was created automatically. I took that file as the starting point for my work - the real library is too big.</p>

<p>I copied this default XML file to the weekly-challenge-23_ruby-itunes-fiddler folder, and manually added some tracks - I copied the XML fragment from the original libray. It's all quite straight forward. I also added a track I knew wasn't there.</p>

<p>To test my hand editing was done properly, I imported the edited XML file with: File > Library  > Import Playlist...  It did what I expected, i.e. imported the songs I had added manually, as well as complaining about the missing track.</p>

<p>I then quit iTunes and deleted the library files again again. This time I used my script to duplicate the edited XML file <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./itunesfiddler --input <span class="s2">&quot;iTunes Music Library.xml&quot;</span> --output <span class="s2">&quot;iTunes_library_new.xml&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> It created a duplicate called iTunes_library_new.xml. I imported that into iTunes, and it worked just like the hand coded original.</p>

<p>So far so good - but no XML parsing yet.</p>

<h2>Using an event based parser to duplicate an XML file</h2>

<p><code>gherkin
Feature: Using an event based parser to duplicate an XML file
  In order to understand the XML data in the iTunes library
  As a command line user
  I want to duplicate it using a SAX parser
</code></p>

<p>No new functionality is introduced, this is just refactoring to use a SAX parser. I picked the <a href="http://nokogiri.org/Nokogiri/XML/SAX.html">Nokogiri SAX Parser</a>, which is easily installed as a gem <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install nokogiri
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the code, I subclassed the SAX::Document class to set up all the callbacks, passing a filehandle so that it can write XML out there and then. I could have stored the XML to a temp object and returned that at the end, but I didn't want to keep a 200MB string in memory.</p>

<h3>What is SAX parsing</h3>

<p>If you are not familiar with SAX, the idea is very simple. The parser reads the input file one character at the time, and whenever it detects a point where a node changes, it generates a corresponding event. For example, when it sees a > after a &lt;TAG_NAME it generates the event "node start" (or suchlike), and passes "TAG_NAME" and an array of attributes, to the event call. It then moves on to the next character, forgetting everything about TAG_NAME. It's this forgetting that make SAX parsers useful - because they only remember enough to detect when tags are open or closed, they don't clog the memory.</p>

<p>The way to use a SAX parser is to set up callbacks for each of those events emitted as the parser reads the document. Sounds laborious, but in reality there isn't that much going on in an XML document as you can see from the <a href="http://nokogiri.org/Nokogiri/XML/SAX/Document.html">list of Nokogiri SAX events</a> - a new tag is found, a tag is finished, a CDATA is found, etc.</p>

<p>The lack of memory is both the strength and the weakness of SAX parsers. Because they have no concept of the data structure they are parsing, it is very hard, for example, to move a node to another parent. Even recognizing where you are at any given time is quite laborious, particularly if you use the same node name at different depths - which is what plists do. SAX parsers are typically used to convert XML data to another format, or extract some nodes from a large list, or do some simple node manipulation.</p>

<p>At this stage however, I am keeping track of nothing, I am just duplicating the file to prove it works.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#collection of callbacks for SAX parser</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ITunesLibraryCallbacks</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="o">::</span><span class="no">SAX</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">filehandle</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle = filehandle</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  def characters str&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start_element</span> <span class="n">element_name</span><span class="p">,</span> <span class="n">attributes</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;case element_name</span>
</span><span class='line'><span class="sr">when &quot;plist&quot;</span>
</span><span class='line'><span class="sr">  @filehandle &amp;lt;&amp;lt; &#39;&amp;lt;plist version=&quot;1.0&quot;&amp;gt;&#39;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  @filehandle &amp;lt;&amp;lt; &quot;&amp;lt;</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="sr">&amp;gt;&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  def end_element element_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;&amp;lt;/</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">error</span> <span class="n">error_message</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;abort &quot;ERROR: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I only need to worry about three callbacks because plists have a very basic structure - they have no comments, CDATA, or attributes except the root node, which can be hardcoded. Therefore only three callbacks are needed: opening tag, closing tag, and characters (i.e., what's inside a tag).</p>

<p>Then I changed the block that copies the file over. In theory the SAX parser could open its own filehandle and write the whole thing itself, but this particular parser doesn't generate an event for DOCTYPE nodes. Therefore I open a filehandle outside the parser, copy the first two lines of the input files manually, then pass on the filehandle to the parser and let it do its job. Not great, but not the end of the world either.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#copies file over</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;f &amp;lt;&amp;lt; r.readline #the xml declaration - could be handled by parser but...</span>
</span><span class='line'><span class="sr">f &amp;lt;&amp;lt; r.readline #the doctype - this one cannot be handled by the parser</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }</span>
</span><span class='line'><span class="sr">  parser = Nokogiri::XML::SAX::Parser.new( ITunesLibraryCallbacks.new( f ) )</span>
</span><span class='line'><span class="sr">  parser.parse_file( options[:src] )</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I run it and tested as I did earlier, and iTunes seems happy importing it.</p>

<h3>Extracting track records with SAX parsing</h3>

<p>``` gherkin
Scenario: Extracting track records with SAX parsing</p>

<pre><code>Given that the script is parsing the XML iTunes file
When it encounters the start of a track block
Then it should hold off producing output until it gets all the related tags
</code></pre>

<p>```</p>

<p>Now the "fun" with SAX parsing can start. To make the whole thing useful, it is important the script can abstract a group of tags into a 'track'. Because SAX has no memory, I need to keep track of what is being parsed. A common trick is to use a breadcrumb.</p>

<p>First of all, I put the ITunesLibraryCallbacks class into its own file, and included it using <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#collection of callbacks for SAX parser</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryCallbacks&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;copies file over&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;f &amp;lt;&amp;lt; r.readline #the xml declaration - could be handled by parser but...</span>
</span><span class='line'><span class="sr">f &amp;lt;&amp;lt; r.readline #the doctype - this one cannot be handled by the parser</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }</span>
</span><span class='line'><span class="sr">  $iTLCInstance = ITunesLibraryCallbacks.new( f )</span>
</span><span class='line'><span class="sr">  parser = Nokogiri::XML::SAX::Parser.new( $iTLCInstance )</span>
</span><span class='line'><span class="sr">  parser.parse_file( options[:src] )</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;done - </span><span class="si">#{</span><span class="vg">$iTLCInstance</span><span class="o">.</span><span class="n">track_count</span><span class="si">}</span><span class="s2"> tracks, created:</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">exit</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
I made the instance global, $iTLCInstance, so that I can query its get_count method later.</p>

<p>ITunesLibraryCallbacks will now stop writing output when a new track is found, collect all the track data in an object, and only write it out in one go when the end track in the input is found. Potentially, at that stage further processing is possible (e.g., don't add the track in if the song file doesn't exist, etc).</p>

<p>The code is a bit ugly, but that's partly how SAX parsing goes, and partly this being my first Ruby script.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ITunesLibraryCallbacks</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="o">::</span><span class="no">SAX</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:breadcrumb</span><span class="p">,</span> <span class="ss">:track_count</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize(filehandle)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@track_count</span>  <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="vi">@separator</span>    <span class="o">=</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'><span class="vi">@breadcrumb</span>   <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@mode</span>         <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@filehandle</span>   <span class="o">=</span> <span class="n">filehandle</span>
</span><span class='line'><span class="vi">@is_tracks</span>    <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="vi">@is_playlists</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="vi">@track</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@element_name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@track_attr</span>
</span><span class='line'><span class="vi">@node_separator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">       &quot;</span>
</span><span class='line'><span class="vi">@track_separator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">    &quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def characters str&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">str</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;Tracks&quot;</span>
</span><span class='line'>  <span class="vi">@is_tracks</span>    <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;Playlists&quot;</span>
</span><span class='line'>  <span class="vi">@is_playlists</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">is_track_start</span>
</span><span class='line'>    <span class="vi">@track</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>    <span class="vi">@track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">is_track_key</span>
</span><span class='line'>    <span class="vi">@track_attr</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">is_track_value</span>
</span><span class='line'>    <span class="vi">@track_attr</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="o">!</span><span class="vi">@is_tracks</span>
</span><span class='line'>    <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def start_element element_name, attributes = []&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">breadcrumb_add</span><span class="p">(</span> <span class="n">element_name</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@element_name</span> <span class="o">=</span> <span class="n">element_name</span>
</span><span class='line'><span class="k">case</span> <span class="n">element_name</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;plist&quot;</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s1">&#39;&amp;lt;plist version=&quot;1.0&quot;&amp;gt;&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">is_top_level_key</span>
</span><span class='line'>    <span class="vi">@is_tracks</span>    <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="vi">@is_playlists</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;&amp;lt;</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">is_track_start</span>
</span><span class='line'>    <span class="vi">@track</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@track_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">is_track_key</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="kp">nil</span> <span class="o">!=</span> <span class="vi">@track_attr</span> <span class="p">)</span>
</span><span class='line'>      <span class="vi">@track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">push</span><span class="p">(</span> <span class="vi">@track_attr</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@track_attr</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">is_track_value</span>
</span><span class='line'>    <span class="vi">@track_attr</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@element_name</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="o">!</span><span class="vi">@is_tracks</span> <span class="o">||</span> <span class="n">is_tracks_container</span>
</span><span class='line'>    <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;&amp;lt;</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def end_element element_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">is_track_end</span>
</span><span class='line'>  <span class="n">track_print</span>
</span><span class='line'><span class="k">elsif</span> <span class="o">!</span><span class="vi">@is_tracks</span> <span class="o">||</span> <span class="n">is_tracks_container</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;&amp;lt;/</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">breadcrumb_remove</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def breadcrumb_add element_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@breadcrumb</span> <span class="o">=</span> <span class="vi">@breadcrumb</span> <span class="o">+</span> <span class="vi">@separator</span> <span class="o">+</span> <span class="n">element_name</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def breadcrumb_remove&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">temp</span> <span class="o">=</span> <span class="vi">@breadcrumb</span><span class="o">.</span><span class="n">split</span><span class="p">(</span> <span class="vi">@separator</span> <span class="p">)</span>
</span><span class='line'><span class="n">temp</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="vi">@element_name</span> <span class="o">=</span> <span class="n">temp</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="vi">@breadcrumb</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="vi">@separator</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def track_print&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;key&amp;gt;</span><span class="si">#{</span><span class="vi">@track</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span><span class="si">}</span><span class="s2">&amp;lt;/key&amp;gt;&quot;</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;dict&amp;gt;&quot;</span>
</span><span class='line'><span class="vi">@track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@node_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;key&amp;gt;</span><span class="si">#{</span><span class="n">row</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span><span class="si">}</span><span class="s2">&amp;lt;/key&amp;gt;&quot;</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="n">row</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span><span class="si">}</span><span class="s2">&amp;lt;/</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;/dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_track_start&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@is_tracks</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="s2">&quot;/plist/dict/dict/key&quot;</span> <span class="o">==</span> <span class="vi">@breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_top_level_key&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s2">&quot;/plist/dict/key&quot;</span> <span class="o">==</span> <span class="vi">@breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_track_key&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@is_tracks</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="s2">&quot;/plist/dict/dict/dict/key&quot;</span> <span class="o">==</span> <span class="vi">@breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_track_value&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@is_tracks</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">[</span>
</span><span class='line'>  <span class="s1">&#39;/plist/dict/dict/dict/integer&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/plist/dict/dict/dict/string&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/plist/dict/dict/dict/true&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/plist/dict/dict/dict/false&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;/plist/dict/dict/dict/date&#39;</span>
</span><span class='line'>  <span class="o">].</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">bc</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@breadcrumb</span> <span class="o">===</span> <span class="n">bc</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_tracks_container&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@is_tracks</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">[</span> <span class="s1">&#39;/plist/dict/dict&#39;</span><span class="p">,</span> <span class="s1">&#39;/plist/dict/key&#39;</span> <span class="o">].</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">bc</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@breadcrumb</span> <span class="o">===</span> <span class="n">bc</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def is_track_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="vi">@is_tracks</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="s2">&quot;/plist/dict/dict/dict&quot;</span> <span class="o">==</span> <span class="vi">@breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def error error_message&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">abort</span> <span class="s2">&quot;ERROR: </span><span class="si">#{</span><span class="n">error_message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As before I run it on a reduced file and imported the result into iTunes, and it worked. I also benchmarked it against the real iTunes library, a 150MB file with 3M lines and 80k tracks, and it run in 2m47.366s - which is much better than I thought it would be.</p>

<h3>Unit Testing and Mocking a SAX Parser with Ruby</h3>

<p>``` gherkin
Scenario: Unit Testing and MOcking a SAX parser with Ruby</p>

<pre><code>Given that I have a ITunesLibraryCallbacks
When I run unit tests on it
Then they should pass
</code></pre>

<p>```</p>

<p>Now that I got something useful, it's time to bring unit testing and TDD into the picture, so that I can improve it more easily as my Ruby improves.</p>

<p>I created a file test-ITunesLibraryCallbacks.tb <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryCallbacks&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ITunesLibraryCallbacksTest &amp;lt; Test::Unit::TestCase&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">setup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@iTLCInstance = ITunesLibraryCallbacks.new({})</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">terdown</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_breadcrumb_add&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">breadcrumb_add</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="s1">&#39;/test&#39;</span><span class="p">,</span> <span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then run it simply with <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -rtest/unit -e0 -- --pattern <span class="s1">&#39;test-&#39;</span>
</span><span class='line'>Loaded suite .
</span><span class='line'>Started
</span><span class='line'>.
</span><span class='line'>Finished in 0.000193 seconds.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1 tests, 1 assertions, 0 failures, 0 errors
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Blimey, that was easy.</p>

<p>The next step is to mock the writing to file. I did that with FlexMock: <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install flexmock
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I wrote a simple test to make sure the mocking works,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ITunesLibraryCallbacksTest</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle = flexmock()</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_breadcrumb_add</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@iTLCInstance = ITunesLibraryCallbacks.new( @filehandle )</span>
</span><span class='line'><span class="sr">@iTLCInstance.breadcrumb_add &quot;test&quot;</span>
</span><span class='line'><span class="sr">assert_equal &#39;/</span><span class="nb">test</span><span class="err">&#39;</span><span class="p">,</span> <span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">breadcrumb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_character_add&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">chars</span> <span class="o">=</span> <span class="s2">&quot;this_should_be_written&quot;</span>
</span><span class='line'><span class="vi">@filehandle</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;&amp;lt;&amp;lt;&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span> <span class="n">chars</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="n">chars</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And it does.</p>

<h3>Refactoring into a library parser, and a library callback class</h3>

<p>Now that I got started on unit testing, it's time for the first round of refactoring. The main objective here is to split the two main responsibilities of the class into separate classes. ITunesLibraryCallbacks will concentrate on parsing the input XML and understanding when a track or a plalyist starts or end. It will then generate its own SAX-like events, such as "track start" or "playlist end", and pass data with them.</p>

<p>A new class, ITunesLibraryWriter, will respond to these events. The initial implementation will simply output an exact copy of the original XML file (give or take - for example it prints <true></true> instead of <true/>). The idea is that when special processing is needed, one overwrites some of the method calls as needed.</p>

<p>The events I added for now are: tracks_collection_start, tracks_collection_end, playlists_collection_start, playlists_collection_end, top_level_start, library_start, track_end, playlist_end, top_level_row, top_level_end, library_end. Here's the code for all of them.</p>

<p>The script itunesfiddler hasn't changed.</p>

<p>ITunesLibraryCallbacks has been changed a lot. It takes an ITunesLibraryWriter instance as optional second argument, or will create a vanilla one if none passed.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =ITunesLibraryCallbacks&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">SAX</span> <span class="n">callbacks</span> <span class="k">for</span> <span class="n">iTunes</span> <span class="n">library</span> <span class="n">parsing</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &#39;rubygems&#39;</span>
</span><span class='line'><span class="sr">require &#39;nokogiri&#39;</span>
</span><span class='line'><span class="sr">require &#39;ITunesLibraryWriter&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ITunesLibraryCallbacks</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="o">::</span><span class="no">SAX</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:breadcrumb</span><span class="p">,</span> <span class="ss">:track_count</span><span class="p">,</span> <span class="ss">:is_tracks</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #takes a filehandler as argument</span>
</span><span class='line'><span class="sr">  #optionally an instance of a subclass of ITunesLibraryWriter</span>
</span><span class='line'><span class="sr">  def initialize( *args )&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">args</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span>
</span><span class='line'>  <span class="vi">@filehandle</span>   <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span> <span class="o">=</span> <span class="no">ITunesLibraryWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="k">when</span> <span class="mi">2</span>
</span><span class='line'>  <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@library_callbacks</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;This class takes either 1 or 2 arguments.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@track_count</span>  <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="vi">@playlist</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@separator</span>    <span class="o">=</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'><span class="vi">@breadcrumb</span>   <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@top_level_key</span>    <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@last_key</span>    <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@track</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@element_name</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="vi">@property_row</span>
</span><span class='line'><span class="vi">@node_separator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">       &quot;</span>
</span><span class='line'><span class="vi">@track_separator</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">    &quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #standard callback</span>
</span><span class='line'><span class="sr">  def characters str&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">is_top_level_key</span>
</span><span class='line'>  <span class="vi">@top_level_key</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">clone</span><span class="o">.</span><span class="n">downcase!</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_key</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_items_value</span>
</span><span class='line'>  <span class="vi">@playlist</span><span class="o">[</span><span class="ss">:items</span><span class="o">].</span><span class="n">push</span><span class="p">(</span> <span class="p">{</span> <span class="ss">:key</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;Track ID&quot;</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;integer&quot;</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">str</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_key</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_start</span>
</span><span class='line'>  <span class="vi">@track</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="vi">@track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="o">==</span> <span class="vi">@element_name</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span> <span class="mi">5</span> <span class="o">==</span> <span class="n">depth</span> <span class="p">)</span>
</span><span class='line'>  <span class="vi">@last_key</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">clone</span><span class="o">.</span><span class="n">downcase!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #standard callback</span>
</span><span class='line'><span class="sr">  def start_element element_name, attributes = []&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">breadcrumb_add</span><span class="p">(</span> <span class="n">element_name</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@element_name</span> <span class="o">=</span> <span class="n">element_name</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">is_track_start</span>
</span><span class='line'>  <span class="vi">@track</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="vi">@track_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_key</span>
</span><span class='line'>  <span class="vi">@property_row</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@element_name</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_items_key</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_key</span>
</span><span class='line'>  <span class="vi">@property_row</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@element_name</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_start</span>
</span><span class='line'>  <span class="vi">@playlist</span><span class="o">[</span><span class="ss">:dict</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level_value</span>
</span><span class='line'>  <span class="vi">@property_row</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@element_name</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_tracks_collection_start</span>
</span><span class='line'>  <span class="vi">@property_row</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">tracks_collection_start</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlists_collection_start</span>
</span><span class='line'>  <span class="vi">@property_row</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">playlists_collection_start</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level_key</span>
</span><span class='line'>  <span class="vi">@is_tracks</span>    <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@is_playlists</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@property_row</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">top_level_start</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">element_name</span> <span class="o">==</span> <span class="s2">&quot;plist&quot;</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">library_start</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #standard callback</span>
</span><span class='line'><span class="sr">  def end_element element_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">is_track_end</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">track_end</span> <span class="vi">@track</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_track_key</span>
</span><span class='line'>  <span class="vi">@track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">push</span><span class="p">(</span> <span class="vi">@property_row</span> <span class="p">)</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_items_start</span>
</span><span class='line'>  <span class="vi">@playlist</span><span class="o">[</span><span class="ss">:items</span><span class="o">]</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_key</span>
</span><span class='line'>  <span class="vi">@playlist</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">push</span><span class="p">(</span> <span class="vi">@property_row</span> <span class="p">)</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlist_end</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">playlist_end</span> <span class="vi">@playlist</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level_value</span>
</span><span class='line'>  <span class="k">unless</span> <span class="o">[</span> <span class="s2">&quot;tracks&quot;</span><span class="p">,</span> <span class="s2">&quot;playlists&quot;</span> <span class="o">].</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">tlk</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@top_level_key</span> <span class="o">==</span> <span class="n">tlk</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">top_level_row</span> <span class="vi">@property_row</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level_key</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_tracks_collection_end</span>
</span><span class='line'> <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">tracks_collection_end</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_playlists_collection_end</span>
</span><span class='line'> <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">playlists_collection_end</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">is_top_level</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">top_level_end</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">element_name</span> <span class="o">==</span> <span class="s2">&quot;plist&quot;</span>
</span><span class='line'>  <span class="vi">@library_callbacks</span><span class="o">.</span><span class="n">library_end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">breadcrumb_remove</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #breadcrumbs are stores xpath style, i.e. /</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">node</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">breadcrumb_add</span> <span class="n">element_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@breadcrumb = @breadcrumb + @separator + element_name</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#breadcrumbs are stores xpath style, i.e. /path/to/node</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">breadcrumb_remove</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;temp = @breadcrumb.split( @separator )</span>
</span><span class='line'><span class="sr">temp.pop()</span>
</span><span class='line'><span class="sr">@element_name = temp[-1]</span>
</span><span class='line'><span class="sr">@breadcrumb = temp.join( @separator )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#matches the very first dict after plist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_top_level</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;return &quot;/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the key a top level plist property</span>
</span><span class='line'><span class="s2">  def is_top_level_key&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/key&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the value a top level plist property</span>
</span><span class='line'><span class="s2">  def is_top_level_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/integer&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/string&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/true&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/false&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/date&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #main container for tracks</span>
</span><span class='line'><span class="s2">  def is_tracks_collection_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;tracks&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  ( &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="s2">&quot; == @breadcrumb )</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #main container for tracks</span>
</span><span class='line'><span class="s2">  def is_tracks_collection_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( is_tracks_collection_start ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  ( &quot;</span><span class="n">dict</span><span class="s2">&quot; == @element_name )</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the start of a track</span>
</span><span class='line'><span class="s2">  def is_track_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;tracks&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">key</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the key for one of the tracks&#39; attributes</span>
</span><span class='line'><span class="s2">  def is_track_key&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;tracks&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">key</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the value for one of the tracks&#39; attributes</span>
</span><span class='line'><span class="s2">  def is_track_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;tracks&#39; == @top_level_key ) &amp;amp;&amp;amp; [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/dict/dict/integer&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/dict/dict/string&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/dict/dict/true&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/dict/dict/false&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/dict/dict/date&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the key for one of the tracks&#39; attributes</span>
</span><span class='line'><span class="s2">  def is_playlist_key&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlists&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">array</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">key</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the value for one of the tracks&#39; attributes</span>
</span><span class='line'><span class="s2">  def is_playlist_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlists&#39; == @top_level_key ) &amp;amp;&amp;amp; [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/integer&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/string&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/true&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/false&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/date&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/data&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #a single track with all its attributes</span>
</span><span class='line'><span class="s2">  def is_track_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;tracks&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">dict</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #main container for playlists</span>
</span><span class='line'><span class="s2">  def is_playlists_collection_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlists&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  ( &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">array</span><span class="s2">&quot; == @breadcrumb )</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #main container for playlists</span>
</span><span class='line'><span class="s2">  def is_playlists_collection_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( is_playlists_collection_start ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  ( &quot;</span><span class="n">array</span><span class="s2">&quot; == @element_name )</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the start of a playlist</span>
</span><span class='line'><span class="s2">  def is_playlist_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlists&#39; == @top_level_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">array</span><span class="o">/</span><span class="n">dict</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the end of a playlist</span>
</span><span class='line'><span class="s2">  def is_playlist_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( is_playlist_start ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="n">dict</span><span class="s2">&quot; == @element_name</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #the start of a playlist</span>
</span><span class='line'><span class="s2">  def is_playlist_items_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlist items&#39; == @last_key ) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="o">/</span><span class="n">plist</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">array</span><span class="o">/</span><span class="n">dict</span><span class="o">/</span><span class="n">key</span><span class="s2">&quot; == @breadcrumb</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #non-important</span>
</span><span class='line'><span class="s2">  def is_playlist_items_key&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlist items&#39; == @last_key ) &amp;amp;&amp;amp; [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/array/dict&#39;,</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/array/dict/key&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #non-important</span>
</span><span class='line'><span class="s2">  def is_playlist_items_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;return ( &#39;playlist items&#39; == @last_key ) &amp;amp;&amp;amp; [</span>
</span><span class='line'><span class="s2">  &#39;/plist/dict/array/dict/array/dict/integer&#39;</span>
</span><span class='line'><span class="s2">  ].any? { |bc|</span>
</span><span class='line'><span class="s2">    @breadcrumb === bc</span>
</span><span class='line'><span class="s2">  }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #breadcrumbs are stores xpath style, i.e. /path/to/node</span>
</span><span class='line'><span class="s2">  #this methods counts the slashes to determine the dept</span>
</span><span class='line'><span class="s2">  def depth&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@breadcrumb.scan( &quot;</span><span class="o">/</span><span class="s2">&quot; ).size</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def error error_message&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;abort &quot;</span><span class="no">ERROR</span><span class="p">:</span> <span class="c1">#{error_message}&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because iTunes specific callbacks are now in another class, tests are much easier to write, if a bit tedious. The ITunesCallbacksTest creates an instance of the ITunesCallbacks class and passes it an ITunesLibraryWriter mock. The test check the mock receive all the expected events. The parsing is done manually by calling start_element and all the other SAX methods. I could have created a few mock files and passed them on instead, but this will do for now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;flexmock/test_unit&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryCallbacks&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryWriter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ITunesLibraryCallbacksTest &amp;lt; Test::Unit::TestCase&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">setup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle = flexmock( &quot;&amp;lt;&amp;lt;&quot; =&amp;gt; &quot;&quot; )</span>
</span><span class='line'><span class="sr">@ITunesLibraryWriter = flexmock( ITunesLibraryWriter.new( @filehandle ),</span>
</span><span class='line'><span class="sr">                                &quot;ITunesLibraryWriter&quot;</span>
</span><span class='line'><span class="sr">                                )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_tracks_collection_start</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@ITunesLibraryWriter.should_receive( &quot;tracks_collection_start&quot; ).once</span>
</span><span class='line'><span class="sr">@iTLCInstance = ITunesLibraryCallbacks.new( @filehandle, @ITunesLibraryWriter )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;plist&quot;, [ :version =&amp;gt; &quot;1.0&quot; ] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;dict&quot;, [] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;key&quot;, [] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.characters &quot;Tracks&quot;</span>
</span><span class='line'><span class="sr">@iTLCInstance.end_element( &quot;key&quot; )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;dict&quot;, [] )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_playlists_collection_start</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@ITunesLibraryWriter.should_receive( &quot;playlists_collection_start&quot; ).once</span>
</span><span class='line'><span class="sr">@iTLCInstance = ITunesLibraryCallbacks.new( @filehandle, @ITunesLibraryWriter )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;plist&quot;, [ :version =&amp;gt; &quot;1.0&quot; ] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;dict&quot;, [] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;key&quot;, [] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.characters &quot;Playlists&quot;</span>
</span><span class='line'><span class="sr">@iTLCInstance.end_element( &quot;key&quot; )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;array&quot;, [] )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_top_level_start</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@ITunesLibraryWriter.should_receive( &quot;top_level_start&quot; ).once</span>
</span><span class='line'><span class="sr">@iTLCInstance = ITunesLibraryCallbacks.new( @filehandle, @ITunesLibraryWriter )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;plist&quot;, [ :version =&amp;gt; &quot;1.0&quot; ] )</span>
</span><span class='line'><span class="sr">@iTLCInstance.start_element( &quot;dict&quot;, [] )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_track_end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#&amp;lt;dict&amp;gt;</span>
</span><span class='line'><span class="sr">#&amp;lt;key&amp;gt;45543&amp;lt;/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="c1">#&amp;lt;dict&amp;gt;</span>
</span><span class='line'><span class="c1">#  &amp;lt;key&amp;gt;Track ID&amp;lt;/key&amp;gt;&amp;lt;integer&amp;gt;45543&amp;lt;/integer&amp;gt;</span>
</span><span class='line'><span class="c1">#  &amp;lt;key&amp;gt;Name&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;Fifths (Jazzanova 6 Sickth Mix)&amp;lt;/string&amp;gt;</span>
</span><span class='line'><span class="c1">#  &amp;lt;key&amp;gt;Artist&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;Ski&amp;lt;/string&amp;gt;</span>
</span><span class='line'><span class="c1">#  &amp;lt;key&amp;gt;Album&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;Jazzanova: The Remixes, 1997-2000&amp;lt;/string&amp;gt;</span>
</span><span class='line'><span class="c1">#&amp;lt;/dict&amp;gt;</span>
</span><span class='line'><span class="n">track</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:dict</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;integer&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Track ID&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Name&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Ski&quot;</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Artist&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Jazzanova: The Remixes, 1997-2000&quot;</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Album&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:key</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;track_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span> <span class="n">track</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Tracks&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="mi">2</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Track ID&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;integer&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="mi">2</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;integer&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Name&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Artist&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Ski&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Album&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Jazzanova: The Remixes, 1997-2000&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span>  <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_playlist_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">playlist</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:dict</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">[</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Name&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;integer&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Eyes&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;playlist_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span> <span class="n">playlist</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;playlists&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Name&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Eyes&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;integer&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="mi">2</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;integer&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span>  <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_top_level_row&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#&amp;lt;key&amp;gt;Application Version&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;10.6.3&amp;lt;/string&amp;gt;</span>
</span><span class='line'><span class="n">property_row</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:type</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;10.6.3&quot;</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;Application Version&quot;</span><span class="p">}</span>
</span><span class='line'><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;top_level_row&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span> <span class="n">property_row</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Application Version&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;10.6.3&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;string&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_tracks_collection_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;tracks_collection_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Tracks&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_playlists_collection_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;playlists_collection_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">characters</span> <span class="s2">&quot;Playlists&quot;</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;key&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_top_level_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;top_level_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span><span class="p">,</span> <span class="o">[]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;dict&quot;</span>  <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def test_library_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@ITunesLibraryWriter</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;library_end&quot;</span> <span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="vi">@iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span><span class="p">,</span> <span class="vi">@ITunesLibraryWriter</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">start_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span><span class="p">,</span> <span class="o">[</span> <span class="ss">:version</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;1.0&quot;</span> <span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@iTLCInstance</span><span class="o">.</span><span class="n">end_element</span><span class="p">(</span> <span class="s2">&quot;plist&quot;</span>  <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ITunesLibraryWriter is the new class that handles all the writing and the business logic. It's pretty simple, in the end it is just a pretty printer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =ITunesLibraryWriter&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">responds</span> <span class="n">to</span> <span class="n">event</span> <span class="n">raised</span> <span class="n">by</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ITunesLibraryWriter</span>
</span><span class='line'><span class="sr">  attr_accessor&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#takes a filehandler as argument</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;case args.size</span>
</span><span class='line'><span class="sr">when 1</span>
</span><span class='line'><span class="sr">  @filehandle   = args[0]</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  raise ArgumentError, &quot;This class takes 1 argument.&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">@node_separator = &quot;\n       &quot;</span>
</span><span class='line'><span class="sr">@track_separator = &quot;\n    &quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#called by ITunesLibraryEvent</span>
</span><span class='line'>  <span class="c1">#prints a complete playlist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">playlist_end</span> <span class="n">playlist</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  playlist_print playlist</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#called by ITunesLibraryEvent</span>
</span><span class='line'>  <span class="c1">#prints a complete track</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">track_end</span> <span class="n">track</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  track_print track</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#called by ITunesLibraryEvent</span>
</span><span class='line'>  <span class="c1">#prints the opening plist tag</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">library_start</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle &amp;lt;&amp;lt; &#39;&amp;lt;plist version=&quot;1.0&quot;&amp;gt;&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#called by ITunesLibraryEvent</span>
</span><span class='line'>  <span class="c1">#prints the opening plist tag</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">library_end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle &amp;lt;&amp;lt; &quot;\n&amp;lt;/</span><span class="n">plist</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="s2">  #prints the opening dict tag</span>
</span><span class='line'><span class="s2">  def top_level_start element_name=&quot;</span><span class="n">dict</span><span class="s2">&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle &amp;lt;&amp;lt; &quot;</span><span class="p">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="c1">#{element_name}&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the closing dict tag</span>
</span><span class='line'><span class="sr">  def top_level_end element_name=&quot;dict&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&amp;lt;/</span><span class="si">#{</span><span class="n">element_name</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the opening dict tag for tracks</span>
</span><span class='line'><span class="sr">  def tracks_collection_start&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">&amp;lt;key&amp;gt;Tracks&amp;lt;/key&amp;gt;</span><span class="se">\n\t</span><span class="s2">&amp;lt;dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the opening dict tag for tracks</span>
</span><span class='line'><span class="sr">  def playlists_collection_start&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">&amp;lt;key&amp;gt;Playlists&amp;lt;/key&amp;gt;</span><span class="se">\n\t</span><span class="s2">&amp;lt;array&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the closing dict tag for tracks</span>
</span><span class='line'><span class="sr">  def tracks_collection_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">&amp;lt;/dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the closing dict tag for playlists</span>
</span><span class='line'><span class="sr">  def playlists_collection_end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t</span><span class="s2">&amp;lt;/array&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #called by ITunesLibraryEvent</span>
</span><span class='line'><span class="sr">  #prints the opening dict tag</span>
</span><span class='line'><span class="sr">  def top_level_row row&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">track_row_print</span> <span class="n">row</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #prints a complete playlist</span>
</span><span class='line'><span class="sr">  def playlist_print playlist&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;dict&amp;gt;&quot;</span>
</span><span class='line'><span class="n">playlist</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="n">track_row_print</span> <span class="n">row</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="kp">nil</span> <span class="o">!=</span> <span class="n">playlist</span><span class="o">[</span><span class="ss">:items</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t\t\t</span><span class="s2">&amp;lt;key&amp;gt;Playlist Items&amp;lt;/key&amp;gt;</span><span class="se">\n\t\t\t</span><span class="s2">&amp;lt;array&amp;gt;&quot;</span>
</span><span class='line'>  <span class="n">playlist</span><span class="o">[</span><span class="ss">:items</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>    <span class="n">playlist_item_row_print</span> <span class="n">row</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t\t\t</span><span class="s2">&amp;lt;/array&amp;gt;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;/dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #prints a complete track</span>
</span><span class='line'><span class="sr">  def track_print track&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;key&amp;gt;</span><span class="si">#{</span><span class="n">track</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span><span class="si">}</span><span class="s2">&amp;lt;/key&amp;gt;&quot;</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;dict&amp;gt;&quot;</span>
</span><span class='line'><span class="n">track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="n">track_row_print</span> <span class="n">row</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="vi">@track_separator</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;/dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #prints the row generated by track_row_string</span>
</span><span class='line'><span class="sr">  def track_row_print row, tabs=3&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">track_row_string</span><span class="p">(</span> <span class="n">row</span><span class="p">,</span> <span class="n">tabs</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #prints the row generated by track_row_string</span>
</span><span class='line'><span class="sr">  def playlist_item_row_print row, tabs=5&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t\t\t\t</span><span class="s2">&amp;lt;dict&amp;gt;&quot;</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">track_row_string</span><span class="p">(</span> <span class="n">row</span><span class="p">,</span> <span class="n">tabs</span> <span class="p">)</span>
</span><span class='line'><span class="vi">@filehandle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="se">\n\t\t\t\t</span><span class="s2">&amp;lt;/dict&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #takes an hash with { :key :value :type } and outputs</span>
</span><span class='line'><span class="sr">  #    &lt;key&gt;KEY&lt;/</span><span class="n">key</span><span class="o">&gt;&lt;</span><span class="no">TYPE</span><span class="o">&gt;</span><span class="no">VALUE</span><span class="o">&lt;</span><span class="sr">/TYPE&gt;</span>
</span><span class='line'><span class="sr">  def track_row_string row, tabs=3&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">k</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span>
</span><span class='line'><span class="k">return</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="p">(</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span><span class="o">*</span><span class="n">tabs</span> <span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&amp;lt;key&amp;gt;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">&amp;lt;/key&amp;gt;&amp;lt;</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&amp;gt;</span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&amp;lt;/</span><span class="si">#{</span><span class="n">t</span><span class="si">}</span><span class="s2">&amp;gt;&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The unit tests are also relatively simple</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;flexmock/test_unit&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryWriter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ITunesLibraryWriterTest &amp;lt; Test::Unit::TestCase&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">setup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle = flexmock( &quot;filehandle&quot; )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_library_start</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;&amp;lt;&amp;lt;&quot; ).with( &#39;&amp;lt;plist version=&quot;1.0&quot;&amp;gt;&#39; )</span>
</span><span class='line'><span class="sr">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="sr">@iTLWInstance.library_start</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">test_library_end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;&amp;lt;&amp;lt;&quot; ).with( &quot;\n&amp;lt;/</span><span class="n">plist</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.library_end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_playlist_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;playlist = {:dict=&amp;gt;[</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">string</span><span class="s2">&quot;, :value=&amp;gt;&quot;</span><span class="no">John</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Name</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">integer</span><span class="s2">&quot;, :value=&amp;gt;2, :key=&amp;gt;&quot;</span><span class="no">Eyes</span><span class="s2">&quot;}</span>
</span><span class='line'><span class="s2">  ]}</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Name</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">John</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Eyes</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.playlist_end playlist</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_track_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;track = { :dict =&amp;gt; [</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">integer</span><span class="s2">&quot;, :value=&amp;gt;2, :key=&amp;gt;&quot;</span><span class="no">Track</span> <span class="no">ID</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">string</span><span class="s2">&quot;, :value=&amp;gt;&quot;</span><span class="no">John</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Name</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">string</span><span class="s2">&quot;, :value=&amp;gt;&quot;</span><span class="no">Ski</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Artist</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">    {:type=&amp;gt;&quot;</span><span class="n">string</span><span class="s2">&quot;, :value=&amp;gt;&quot;</span><span class="no">Jazzanova</span><span class="p">:</span> <span class="no">The</span> <span class="no">Remixes</span><span class="p">,</span> <span class="mi">1997</span><span class="o">-</span><span class="mi">2000</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Album</span><span class="s2">&quot;}</span>
</span><span class='line'><span class="s2">  ],</span>
</span><span class='line'><span class="s2">  :key =&amp;gt; 2</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Track</span> <span class="no">ID</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Name</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">John</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Artist</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Ski</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Album</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Jazzanova</span><span class="p">:</span> <span class="no">The</span> <span class="no">Remixes</span><span class="p">,</span> <span class="mi">1997</span><span class="o">-</span><span class="mi">2000</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.track_end track</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_top_level_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.top_level_start</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_top_level_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.top_level_end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_tracks_collection_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Tracks</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.tracks_collection_start</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_tracks_collection_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">dict</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.tracks_collection_end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_playlists_collection_start&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Playlists</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">array</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.playlists_collection_start</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_playlists_collection_end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">array</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.playlists_collection_end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_top_level_row&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;row = {:type=&amp;gt;&quot;</span><span class="n">string</span><span class="s2">&quot;, :value=&amp;gt;&quot;</span><span class="mi">10</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">3</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Application</span> <span class="no">Version</span><span class="s2">&quot;}</span>
</span><span class='line'><span class="s2">@filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Application</span> <span class="no">Version</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">10</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">3</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s2">&quot; )</span>
</span><span class='line'><span class="s2">@iTLWInstance = ITunesLibraryWriter.new( @filehandle )</span>
</span><span class='line'><span class="s2">@iTLWInstance.top_level_row row</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Creating a playlist of missing iTunes tracks</h3>

<p>``` gherkin
Scenario: Creating a playlist of missing iTunes tracks</p>

<pre><code>    Given that "itunes XML library" contains references to X files
    And only 8 of these are in "folder"
    When I run itunesfiddler with input "itunes XML library"
    And folder "folder"
    And command "keep_missing_only"
    Then it should create a Library file with the two missing files only
    And no playlists
</code></pre>

<p>```</p>

<p>To finish off, I wanted to create at least a useful utility, which is what the whole point of this challenge was (as well as learning Ruby).</p>

<p>I am always swapping hard disks around for backing up. Since my playlist is huge, sometimes iTunes gives up and tells me it couldn't copy all the files - but with no indication of what the missing files were. A utility that could compare the original iTunes library with the files in the new location, and create a playlist including only the files that weren't copied over would be quite useful.</p>

<p>This shouldn't be too hard too achieve. First of all the script needs to be able to read in the new parameters, so that it knows what it is expected to do and where to look for files. Then I will subclass ITunesLibraryWriter and overwrite the playlist writer method (to do nothing - I don't need playlists, only tracks), and the track writing method (to only write if the file wasn't found).</p>

<h4>Changing the main shell script to take commands</h4>

<p>itunesfiddler is changed so that it now accept command names. I also made --input optional - got bored of typing it...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#reads command line args</span>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">itunesfiddler</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opt</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #help screen</span>
</span><span class='line'><span class="sr">  opt.banner = &quot;Usage: itunesfiddler --input=FILE [OPTIONS] [COMMAND]&quot;</span>
</span><span class='line'><span class="sr">  opt.separator  &quot;&quot;</span>
</span><span class='line'><span class="sr">  opt.separator  &quot;Commands&quot;</span>
</span><span class='line'><span class="sr">  opt.separator  &quot;   keep_missing_only - only includes track not found in folder, and doesn&#39;t print out any playlists. Requires --folder option&quot;</span>
</span><span class='line'><span class="sr">  opt.separator  &quot;Options&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#individual options</span>
</span><span class='line'>  <span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-i&quot;</span><span class="p">,</span><span class="s2">&quot;--input SRC&quot;</span><span class="p">,</span><span class="s2">&quot;input xml file, default iTunes Music Library.xml&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">src</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;options[:src] = src</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-o&quot;</span><span class="p">,</span><span class="s2">&quot;--output [TARGET]&quot;</span><span class="p">,</span><span class="s2">&quot;output xml file&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">target</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;options[:target] = target</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-f&quot;</span><span class="p">,</span><span class="s2">&quot;--folder [FOLDER]&quot;</span><span class="p">,</span><span class="s2">&quot;folder where files are, or should be, copied to&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">folder</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;options[:folder] = folder</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-h&quot;</span><span class="p">,</span><span class="s2">&quot;--help&quot;</span><span class="p">,</span><span class="s2">&quot;help&quot;</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts itunesfiddler</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;collects args and quits if something wrong&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">itunesfiddler</span><span class="o">.</span><span class="n">parse!</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;unless options[:src]</span>
</span><span class='line'><span class="sr">  options[:src] = &quot;iTunes Music Library.xml&quot;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">itunesfiddler</span>
</span><span class='line'>  <span class="nb">abort</span><span class="p">(</span> <span class="s2">&quot;ERROR: missing --input file - tried </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;unless options[:target]</span>
</span><span class='line'><span class="sr">  options[:target] = options[:src].clone.insert( -5, &quot; - new&quot; )</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A big switch statement associates an ITunesLibraryWriter (sub)class with a command. Not the most elegant approach, but it will do for now. The class I will be creating now is ITunesLibraryWriterKeepMissingOnly</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#collection of callbacks for SAX parser</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ITunesLibraryCallbacks&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;copies file over&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span> <span class="n">options</span><span class="o">[</span><span class="ss">:src</span><span class="o">]</span> <span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#the top two lines are not easily dealt with by SAX, so done manually</span>
</span><span class='line'><span class="sr">f &amp;lt;&amp;lt; r.readline</span>
</span><span class='line'><span class="sr">f &amp;lt;&amp;lt; r.readline</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#FIXME something more elegant is on its way</span>
</span><span class='line'>  <span class="c1">#each command gets its own subclass of SAX::Document</span>
</span><span class='line'>  <span class="k">case</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  when &quot;keep_missing_only&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:folder</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">itunesfiddler</span>
</span><span class='line'>  <span class="nb">abort</span><span class="p">(</span> <span class="s2">&quot;ERROR: missing --folder&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;ITunesLibraryWriterKeepMissingOnly&quot;</span>
</span><span class='line'><span class="vg">$iTLCInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryCallbacks</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="n">f</span><span class="p">,</span> <span class="no">ITunesLibraryWriterKeepMissingOnly</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="n">f</span><span class="p">,</span> <span class="n">options</span><span class="o">[</span><span class="ss">:folder</span><span class="o">]</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">else</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;$iTLCInstance = ITunesLibraryCallbacks.new( f )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  parser = Nokogiri::XML::SAX::Parser.new( $iTLCInstance )</span>
</span><span class='line'><span class="sr">  parser.parse_file( options[:src] )</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;done - </span><span class="si">#{</span><span class="vg">$iTLCInstance</span><span class="o">.</span><span class="n">track_count</span><span class="si">}</span><span class="s2"> tracks, created:</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:target</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">exit</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Setting up ITunesLibraryWriterKeepMissingOnly</h4>

<p>Now that I got unit tests in place I can start using TDD for the rest. First task, ensure playlists are not written out - they only increase the file size needlessly.</p>

<p>First of all I created a blank ITunesLibraryWriterKeepMissingOnly file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># =ITunesLibraryWriterKeepMissingOnly&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">keeps</span> <span class="n">only</span> <span class="n">the</span> <span class="n">files</span> <span class="n">which</span> <span class="n">are</span> <span class="ow">not</span> <span class="n">found</span> <span class="k">in</span> <span class="vi">@folder</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &#39;ITunesLibraryWriter&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ITunesLibraryWriterKeepMissingOnly</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ITunesLibraryWriter</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I duplicated the ITunesLibraryWriterTest file and renamed the test class ITunesLibraryWriterKeepMissingOnlyTest - it should just run as it is, as none of the methods were overwritten. And it does.</p>

<p>I want to force the class to read in a new paramter - folder, so I added a test
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">setup</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@filehandle = flexmock( &quot;filehandle&quot; )</span>
</span><span class='line'><span class="sr">@folder = &quot;tracks/</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def test_instantiation&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;assert_raise(ArgumentError) { @iTLWInstance = ITunesLibraryWriterKeepMissingOnly.new( @filehandle ) }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To pass it, I amended the class as
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#takes a filehandler as argument</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span> <span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;case args.size</span>
</span><span class='line'><span class="sr">when 2</span>
</span><span class='line'><span class="sr">  @filehandle = args[0]</span>
</span><span class='line'><span class="sr">  @folder     = args[1]</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  raise ArgumentError, &quot;This class takes 2 argument.&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that test passes, but all the others failed as they still only pass in one argument. I changed them all to two. I can now delete all the tests that are not relevant, and change the ones I want to overwrite.</p>

<h4>Making ITunesLibraryWriterKeepMissingOnly not write out output</h4>

<p>Playlists are written at the end of a playlist block, so the relevant event is playlist_end. Here's the test
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_playlist_end</span>
</span><span class='line'>  <span class="n">playlist</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:dict</span><span class="o">=&gt;[&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  {:type=&amp;gt;&quot;string&quot;, :value=&amp;gt;&quot;John&quot;, :key=&amp;gt;&quot;Name&quot;},</span>
</span><span class='line'><span class="sr">  {:type=&amp;gt;&quot;integer&quot;, :value=&amp;gt;2, :key=&amp;gt;&quot;Eyes&quot;}</span>
</span><span class='line'><span class="sr">]}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  @filehandle.should_receive( &quot;&amp;lt;&amp;lt;&quot; ).never</span>
</span><span class='line'><span class="sr">  @iTLWInstance = ITunesLibraryWriterKeepMissingOnly.new( @filehandle, @folder )</span>
</span><span class='line'><span class="sr">  @iTLWInstance.playlist_end playlist</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code to pass it couldn't be easier - just do nothing
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">playlist_end</span> <span class="n">playlist</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Storing meta information</h4>

<p>Tracks are also written at the end of the corresponding block. Each track's path is stored under the key Location, so in theory it should be easy to look up whether a file in that location actually exists in --folder. But before doing that, in each path I need to replace the folder the tracks were copied <em>from</em>, i.e. the original iTunes library folder, with the folder the paths are being copied <em>to</em>. But where do I get hold of the iTunes library folder path?</p>

<p>One of the top level keys in the iTunes XML plist is Music Folder, which is exactly what I need. But nowhere in my code is this information stored, it is just copied over. In fact, it would be a good idea to store <em>all</em> those top level properties in an object - there are only a handful. I will add a new method, meta to the parent ITunesLibraryWriter class</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_meta</span>
</span><span class='line'>  <span class="n">folder_key</span> <span class="o">=</span> <span class="s2">&quot;Music Folder&quot;</span>
</span><span class='line'>  <span class="n">folder_value</span> <span class="o">=</span> <span class="s2">&quot;file://localhost/Volumes/HD1T/Music/&quot;</span>
</span><span class='line'>  <span class="n">row</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&gt;</span><span class="n">folder_value</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&gt;</span><span class="n">folder_key</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@filehandle</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span> <span class="s2">&quot;&amp;lt;&amp;lt;&quot;</span> <span class="p">)</span>
</span><span class='line'>  <span class="vi">@iTLWInstance</span> <span class="o">=</span> <span class="no">ITunesLibraryWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="vi">@filehandle</span> <span class="p">)</span>
</span><span class='line'>  <span class="vi">@iTLWInstance</span><span class="o">.</span><span class="n">top_level_row</span> <span class="n">row</span>
</span><span class='line'>  <span class="n">assert_equal</span><span class="p">(</span> <span class="n">folder_value</span><span class="p">,</span> <span class="vi">@iTLWInstance</span><span class="o">.</span><span class="n">meta</span><span class="p">(</span> <span class="n">folder_key</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the implementation - @top_level is created in the initialize method
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#called by ITunesLibraryEvent&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">prints</span> <span class="n">the</span> <span class="n">opening</span> <span class="n">dict</span> <span class="n">tag</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def top_level_row row</span>
</span><span class='line'><span class="sr">  @top_level[row[:key]] = row[:value]</span>
</span><span class='line'><span class="sr">  track_row_print row, 1</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">top</span> <span class="n">level</span> <span class="n">keys</span> <span class="n">are</span> <span class="n">saved</span> <span class="k">in</span> <span class="n">a</span> <span class="n">global</span> <span class="n">object</span><span class="o">.</span> <span class="n">this</span> <span class="nb">method</span> <span class="n">returns</span> <span class="n">it</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def meta the_key</span>
</span><span class='line'><span class="sr">  return @top_level[the_key]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Copying tracks only if the file doesn't exist in --folder</h4>

<p>Now it should be possible to check those files. Two new test: one for files that are not there, and one for files that are.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_track_exists</span>
</span><span class='line'>  <span class="n">folder_key</span> <span class="o">=</span> <span class="s2">&quot;Music Folder&quot;</span>
</span><span class='line'>  <span class="n">folder_value</span> <span class="o">=</span> <span class="s2">&quot;file://localhost/Volumes/HD1T/Music/&quot;</span>
</span><span class='line'>  <span class="n">row</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&gt;</span><span class="n">folder_value</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&gt;</span><span class="n">folder_key</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">track</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:dict</span> <span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  {:type=&amp;gt;&quot;integer&quot;, :value=&amp;gt;2, :key=&amp;gt;&quot;Track ID&quot;},</span>
</span><span class='line'><span class="sr">  {:type=&amp;gt;&quot;string&quot;, :value=&amp;gt;&quot;Tonton Du Bled&quot;, :key=&amp;gt;&quot;Name&quot;},</span>
</span><span class='line'><span class="sr">  {:type=&amp;gt;&quot;string&quot;, :value=&amp;gt; folder_value + &quot;113/</span><span class="no">Tonton</span><span class="o">%</span><span class="mi">20</span><span class="no">Du</span><span class="o">%</span><span class="mi">20</span><span class="no">Bled</span><span class="o">/</span><span class="no">Tonton</span><span class="o">%</span><span class="mi">20</span><span class="no">Du</span><span class="o">%</span><span class="mi">20</span><span class="no">Bled</span><span class="o">.</span><span class="n">mp3</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Location</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">],</span>
</span><span class='line'><span class="s2">:key =&amp;gt; 2</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  }</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="no">Music</span> <span class="no">Folder</span><span class="o">&lt;</span><span class="sr">/key&gt;&lt;string&gt;file:/</span><span class="o">/</span><span class="n">localhost</span><span class="o">/</span><span class="no">Volumes</span><span class="o">/</span><span class="no">HD1T</span><span class="o">/</span><span class="no">Music</span><span class="o">/&lt;</span><span class="sr">/string&gt;&quot; ).once</span>
</span><span class='line'><span class="sr">  @iTLWInstance = ITunesLibraryWriterKeepMissingOnly.new( @filehandle, @folder )</span>
</span><span class='line'><span class="sr">  @iTLWInstance.top_level_row row</span>
</span><span class='line'><span class="sr">  @iTLWInstance.track_end track</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">test_track_doesnt_exist</span>
</span><span class='line'>  <span class="n">folder_key</span> <span class="o">=</span> <span class="s2">&quot;Music Folder&quot;</span>
</span><span class='line'>  <span class="n">folder_value</span> <span class="o">=</span> <span class="s2">&quot;file://localhost/Volumes/HD1T/Music/&quot;</span>
</span><span class='line'>  <span class="n">row</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:value</span><span class="o">=&gt;</span><span class="n">folder_value</span><span class="p">,</span> <span class="ss">:key</span><span class="o">=&gt;</span><span class="n">folder_key</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">track</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:dict</span> <span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  {:type=&amp;gt;&quot;integer&quot;, :value=&amp;gt;3, :key=&amp;gt;&quot;Track ID&quot;},</span>
</span><span class='line'><span class="sr">  {:type=&amp;gt;&quot;string&quot;, :value=&amp;gt;&quot;Tonton Du Bled&quot;, :key=&amp;gt;&quot;Name&quot;},</span>
</span><span class='line'><span class="sr">  {:type=&amp;gt;&quot;string&quot;, :value=&amp;gt; folder_value + &quot;113/</span><span class="no">ThisDoesNotExist</span><span class="o">.</span><span class="n">mp3</span><span class="s2">&quot;, :key=&amp;gt;&quot;</span><span class="no">Location</span><span class="s2">&quot;},</span>
</span><span class='line'><span class="s2">],</span>
</span><span class='line'><span class="s2">:key =&amp;gt; 3</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  }</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="no">Music</span> <span class="no">Folder</span><span class="o">&lt;</span><span class="sr">/key&gt;&lt;string&gt;file:/</span><span class="o">/</span><span class="n">localhost</span><span class="o">/</span><span class="no">Volumes</span><span class="o">/</span><span class="no">HD1T</span><span class="o">/</span><span class="no">Music</span><span class="o">/&lt;</span><span class="sr">/string&gt;&quot; ).once</span>
</span><span class='line'><span class="sr">  @filehandle.should_receive( &quot;&amp;lt;&amp;lt;&quot; ).with( &quot;\n    &lt;key&gt;3&lt;/</span><span class="n">key</span><span class="o">&gt;</span><span class="s2">&quot; ).once</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span>    <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span><span class="s2">&quot; ).once</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="no">Track</span> <span class="no">ID</span><span class="o">&lt;</span><span class="sr">/key&gt;&lt;integer&gt;3&lt;/in</span><span class="n">teger</span><span class="o">&gt;</span><span class="s2">&quot; ).once</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="no">Name</span><span class="o">&lt;</span><span class="sr">/key&gt;&lt;string&gt;Tonton Du Bled&lt;/s</span><span class="n">tring</span><span class="o">&gt;</span><span class="s2">&quot; ).once</span>
</span><span class='line'><span class="s2">  @filehandle.should_receive( &quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s2">&quot; ).with( &quot;</span><span class="p">\</span><span class="n">n</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="p">\</span><span class="n">t</span><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="no">Location</span><span class="o">&lt;</span><span class="sr">/key&gt;&lt;string&gt;file:/</span><span class="o">/</span><span class="n">localhost</span><span class="o">/</span><span class="no">Volumes</span><span class="o">/</span><span class="no">HD1T</span><span class="o">/</span><span class="no">Music</span><span class="o">/</span><span class="mi">113</span><span class="o">/</span><span class="no">ThisDoesNotExist</span><span class="o">.</span><span class="n">mp3</span><span class="o">&lt;</span><span class="sr">/string&gt;&quot; ).once</span>
</span><span class='line'><span class="sr">  @filehandle.should_receive( &quot;&amp;lt;&amp;lt;&quot; ).with( &quot;\n    &lt;/</span><span class="n">dict</span><span class="o">&gt;</span><span class="s2">&quot; ).once</span>
</span><span class='line'><span class="s2">  @iTLWInstance = ITunesLibraryWriterKeepMissingOnly.new( @filehandle, @folder )</span>
</span><span class='line'><span class="s2">  @iTLWInstance.top_level_row row</span>
</span><span class='line'><span class="s2">  @iTLWInstance.track_end track</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code to pass them is fairly simple. I created a helper function to extract the file path from a track array of tuples, including URL-decoding them. Then all the track_end event handler has to do is to check that path, and only call the parent (super) method if the track wasn't found.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#called by ITunesLibraryEvent</span>
</span><span class='line'><span class="k">def</span> <span class="nf">track_end</span> <span class="n">track</span>
</span><span class='line'>  <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span><span class="p">(</span> <span class="n">extract_pth</span><span class="p">(</span> <span class="n">track</span><span class="o">[</span><span class="ss">:dict</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;Location&quot;</span> <span class="p">)</span> <span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;super track</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">extract_pth</span> <span class="n">the_array</span><span class="p">,</span> <span class="n">the_key</span>
</span><span class='line'>  <span class="n">the_array</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">tuple</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if the_key == tuple[:key]</span>
</span><span class='line'><span class="sr">  str =  URI.unescape( tuple[:value] )</span>
</span><span class='line'><span class="sr">  return @folder + str[meta( &quot;Music Folder&quot; ).size .. str.size]</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }</span>
</span><span class='line'><span class="sr">  return nil</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It works a treat.</p>

<h2>Challenge 100% complete</h2>

<p>Farily happy with this - it was reasonably straightforward, it gets the job done, it allowed me to get to know Ruby, and I got the foundation for a flexible system. The code is far from perfect, it's just the bare minimum to pass the tests, but that's the point of TDD - I can go back and refactor it without fear of breaking everything.</p>

<p>The scripts are <a href="https://github.com/gotofritz/Weekly-Challenges/tree/master/weekly-challenge-23_ruby-itunes-fiddler">available on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a RESTful Python API with Bottle]]></title>
    <link href="http://gotofritz.net/blog/weekly-challenge/restful-python-api-bottle"/>
    <updated>2012-03-31T17:06:55+02:00</updated>
    <id>http://gotofritz.net/blog/weekly-challenge/restful-python-api-bottle</id>
    <content type="html"><![CDATA[<p>The challenge this week: using Python to create a RESTful service to allow simple <abbr title="Create Retrieve Update Delete">CRUD</abbr> operations on a bunch of XML files.</p>

<!--more-->


<h2>About the challenge</h2>

<p>This is part of an larger, abondoned project, a simple recipe manager. Previous steps had left me with a set of XML files I can visualize in a browser by applying XSLT to them. I now need a quick and dirty way to manage those files directly from the (yet to be built) front end.</p>

<p>``` gherkin
Feature: Creating a quick RESTful API for recipes</p>

<pre><code>In order to develop a front end quickly
As a developer
I need to a RESTful API that performas basic CRUD operations
</code></pre>

<p>```</p>

<p>I decided to use Python for the backend because I am trying to learn it, and it also fits well with some tools that I intend to use further down the line. I haven't decided on a framework yet, that will be part of the challenge. I will try <a href="http://bottlepy.org/docs/dev/index.html" title="[new window] Bottle: Python Web Framework — Bottle 0.12-dev documentation" target="_blank">Bottle</a> to start with.</p>

<p>Some artefacts <a href="https://github.com/gotofritz/Weekly-Challenges/tree/master/weekly-challenge-17_restful">available on GitHub</a>.</p>

<h2>Installing Bottle</h2>

<p>I couldn't use curl or wget for some reason, so I simply pointed my browser to <a href="https://raw.github.com/defnull/bottle/master/bottle.py" title="[new window] view the script" target="_blank">http://bottlepy.org/bottle.py</a> and hit "Save as..." to download the single Python file to a folder called bottle. To test it run, I created this script</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test1.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and started the server with <code>python test1.py</code>. I then checked the server was up and running by pointing a browser to http://localhost:8080/. I got the Hello World string</p>

<p>Now I can start building the API.</p>

<h3>Testing Bottle installation</h3>

<p>This server is going to perform the most basic CRUD operation without checking input, using HTTP verbs. That would be PUT for Create / Update (the only difference will be whether there is already a file by that name or not); DELETE for Delete; GET for Retrieve, plus another GET at the root to get the list of available recipes. Nothing fancier than that.</p>

<p>The first step is to create a script that proves all the calls I want to make work.</p>

<p>``` gherkin
Scenario: Installing and setting up Bottle</p>

<pre><code>Given that I am running test2.py
When I access the &lt;url&gt; with &lt;verb&gt;
Then the response should have status 200 and be &lt;response&gt;
</code></pre>

<p>Examples: Basic Strings</p>

<pre><code>| url                                | verb   | response           |
| http://localhost:8080/recipes      | GET    | LIST               |
| http://localhost:8080/recipes/name | PUT    | SAVE RECIPE name   |
| http://localhost:8080/recipes/name | GET    | SHOW RECIPE name   |
| http://localhost:8080/recipes/name | DELETE | DELETE RECIPE name |
</code></pre>

<p>Examples: JSON Responses</p>

<pre><code>| url                                | verb   | response                                                                                     |
| http://localhost:8080/recipes      | GET    | { "success" : False, "paths" : [], "error" : "list not implemented yet" }                    |
| http://localhost:8080/recipes/name | PUT    | { "success" : False, "path" : "/PTH/TO/XML/name.xml", "error" : "save not implemented yet" } |
| http://localhost:8080/recipes/name | GET    | { "success" : False, "path" : "/PTH/TO/XML/name.xml", "error" : "show not implemented yet" } |
| http://localhost:8080/recipes/name | DELETE | { "success" : False, "paths" : [], "error" : "delete not implemented yet" }                  |
</code></pre>

<p>```</p>

<p>I will test this manually with curl with this script</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X GET http://localhost:8080/recipes
</span><span class='line'>curl -X DELETE http://localhost:8080/recipes/name
</span><span class='line'>curl -X GET http://localhost:8080/recipes/name
</span><span class='line'>curl -X PUT http://localhost:8080/recipes/name
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Implementing a server that fulfils those requests is pretty simple.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test2.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipes_list</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s">&quot;LIST&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;GET&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_show</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s">&quot;SHOW RECIPE &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;DELETE&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_delete</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s">&quot;DELETE RECIPE &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;PUT&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_save</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s">&quot;SAVE RECIPE &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I run <code>python test2.py</code>, run the curl requests, and for each of them I got the expected response. Blimey - this is <em>way</em> too easy.</p>

<h3>Returning JSON data with Bottle</h3>

<p>So simple I can skip directly to the next iteration, return JSON responses in the right "shape", but with dummy data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test2.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipes_list</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;paths&quot;</span> <span class="p">:</span> <span class="p">[],</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;list not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;GET&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_show</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;path&quot;</span> <span class="p">:</span> <span class="s">&quot;/PTH/TO/XML/&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;.xml&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;show not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;DELETE&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_delete</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;delete not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;PUT&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_save</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;path&quot;</span> <span class="p">:</span> <span class="s">&quot;/PTH/TO/XML/&quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;.xml&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;save not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Reading config data</h3>

<p>Finally, I will set up a config files for the app to read config data from - always good practice.</p>

<p>``` gherkin
Scenario: Loading config data with ConfigParser</p>

<pre><code>Given that config.json contains
    """
    "paths" : {
        "xml" : "/Users/ME/work/xml/"
    }
    """
And I am running test2.py
When I access http://localhost:8080/recipes/name
Then the app should return a JSON response { "success" : false, "path" : "/Users/ME/work/xml/name.xml" , "error" : "show not implemented yet }
</code></pre>

<p>```</p>

<p>Nothing really too exciting here.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test2.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span> <span class="s">&#39;config.json&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">config_file</span> <span class="p">)</span>
</span><span class='line'><span class="n">pth_xml</span>     <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s">&quot;paths&quot;</span><span class="p">][</span><span class="s">&quot;xml&quot;</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipes_list</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;paths&quot;</span> <span class="p">:</span> <span class="p">[],</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;list not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;GET&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_show</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;path&quot;</span> <span class="p">:</span> <span class="n">pth_xml</span> <span class="o">+</span><span class="n">name</span> <span class="o">+</span><span class="s">&quot; .xml&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;show not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;DELETE&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_delete</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;delete not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;PUT&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_save</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;Mystery Recipe&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;path&quot;</span> <span class="p">:</span> <span class="n">pth_xml</span> <span class="o">+</span><span class="n">name</span> <span class="o">+</span><span class="s">&quot; .xml&quot;</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;save not implemented yet&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I run it and got the expected results.</p>

<h2>Creating RESTful responses</h2>

<p>Now it's simply a matter of filling in the blanks, and writing those methods.</p>

<h3>Returning a JSON formatted directory listing with Bottle</h3>

<p>First, let's get list of files.</p>

<p>``` gherkin
Scenario: Returning a JSON formatted directory listing with Bottle</p>

<pre><code>Given that config.json points to &lt;PTH&gt;
And &lt;PTH&gt; contains &lt;filelist&gt;
When I request http://localhost:8080/recipes&lt;url&gt; with &lt;verb&gt;
Then the app should return &lt;response&gt;
</code></pre>

<p>Examples: simple listing</p>

<pre><code>| PTH         | filelist                   | url | verb | response                                                    |
| test/data/1 | a.xml, b.xml, c.xml, d.txt | /   | GET  | { "success": true, "paths": [ "a.xml", "b.xml", "c.xml" ] } |
</code></pre>

<p>```</p>

<p>This is a readdir job, very simple with python.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test3.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span> <span class="s">&#39;config.json&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">config_file</span> <span class="p">)</span>
</span><span class='line'><span class="n">pth_xml</span>     <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s">&quot;paths&quot;</span><span class="p">][</span><span class="s">&quot;xml&quot;</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipes_list</span><span class="p">():</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">paths</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">ls</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span> <span class="n">pth_xml</span> <span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">ls</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&quot;.xml&quot;</span> <span class="o">==</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span> <span class="n">entry</span> <span class="p">)[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">paths</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">entry</span> <span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s">&quot;paths&quot;</span> <span class="p">:</span> <span class="n">paths</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Err... that's it. A JSON response. In the browser.</p>

<h3>Echoing XML files with Bottle</h3>

<p>Now, let's look at one of these files in the list.</p>

<p>``` gherkin
Scenario: Echoing XML files with Bottle</p>

<pre><code>Given that config.json points to &lt;PTH&gt;
And &lt;PTH&gt; contains &lt;filelist&gt;
When I request http://localhost:8080/recipes&lt;url&gt; with &lt;verb&gt;
Then the app should return &lt;response&gt;
</code></pre>

<p>Examples: simple listing</p>

<pre><code>| PTH         | filelist                   | url | verb | response           |
| test/data/1 | a.xml, b.xml, c.xml, d.txt | /a  | GET  | &lt;content of a.xml&gt; |
</code></pre>

<p>```</p>

<p>So now I am actually serving a file. It's not JSON, it's XML - that's still OK, it's all human readable data in the end.</p>

<p>This is ridiculously easy using Bottle's static_file. Note that Bottle takes case of slashes, so I won't need to watch out for someone passing ../../../../../etc/passwd as name and showing sensitive data.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>test3.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">static_file</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span> <span class="s">&#39;config.json&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">config_file</span> <span class="p">)</span>
</span><span class='line'><span class="n">pth_xml</span>     <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s">&quot;paths&quot;</span><span class="p">][</span><span class="s">&quot;xml&quot;</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;GET&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_show</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="s">&quot;&quot;</span> <span class="o">!=</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">static_file</span><span class="p">(</span> <span class="n">name</span><span class="p">,</span> <span class="n">pth_xml</span>  <span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;show called without a filename&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Embarassingly simple.</p>

<h3>Creating and updating XML files with Bottle</h3>

<p>The next obvious step is to add files to the set. The same script will be used for create or update - any exisiting files will simply be overwritten, without checking. And there won't be any checks for the correct XML format either.</p>

<p>``` gherkin
Scenario: Creating and updating XML files with Bottle</p>

<pre><code>Given that config.json points to &lt;PTH&gt;
And &lt;PTH&gt; contains &lt;filelist&gt;
When I request http://localhost:8080/recipes&lt;url&gt; with &lt;verb&gt;
And send &lt;postdata&gt;
Then the app should return &lt;response&gt;
And the &lt;PTH&gt; should contain &lt;newfilelist&gt;
And &lt;PTH&gt;&lt;url&gt; should contain &lt;postdata&gt;
</code></pre>

<p>Examples: simple listing</p>

<pre><code>| PTH         | filelist     | url | verb | postdata | response                                             | newfilelist         |
| test/data/2 | a.xml, b.xml | /f  | PUT  | new file | { "success": true, "path": [ "test/data/2/a.xml" ] } | a.xml, b.xml, f.xml |
| test/data/2 | a.xml, b.xml | /a  | PUT  | new file | { "success": true, "path": [ "test/data/2/a.xml" ] } | a.xml, b.xml        |
</code></pre>

<p>```</p>

<p>This is also fairly simple, as long as one knows where to get the PUT data from - request.forms, which requires the request module.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test3.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">request</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span> <span class="s">&#39;config.json&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">config_file</span> <span class="p">)</span>
</span><span class='line'><span class="n">pth_xml</span>     <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s">&quot;paths&quot;</span><span class="p">][</span><span class="s">&quot;xml&quot;</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;PUT&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_save</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">xml</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span> <span class="s">&quot;xml&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="s">&quot;&quot;</span> <span class="o">!=</span> <span class="n">name</span> <span class="ow">and</span> <span class="s">&quot;&quot;</span> <span class="o">!=</span> <span class="n">xml</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">pth_xml</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.xml&quot;</span> <span class="p">),</span> <span class="s">&quot;w&quot;</span> <span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span> <span class="n">xml</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s">&quot;path&quot;</span> <span class="p">:</span> <span class="n">name</span> <span class="p">}</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">&quot;error&quot;</span> <span class="p">:</span> <span class="s">&quot;save called without a filename or content&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In order to test this I needed to send postdata with curl:</p>

<p><code>bash
curl -X PUT --data-urlencode "xml=new file" http://localhost:8080/recipes/f
curl -X PUT --data-urlencode "xml=new file" http://localhost:8080/recipes/a
</code></p>

<p>Everything worked as expected.</p>

<h3>Deleting files with Bottle</h3>

<p>The last piece of the puzzle.</p>

<p>``` gherkin
Scenario: eleting files with Bottle</p>

<pre><code>Given that config.json points to &lt;PTH&gt;
And &lt;PTH&gt; contains &lt;filelist&gt;
When I request http://localhost:8080/recipes&lt;url&gt; with &lt;verb&gt;
Then the app should return &lt;response&gt;
And the &lt;PTH&gt; should contain &lt;newfilelist&gt;
</code></pre>

<p>Examples: simple listing</p>

<pre><code>| PTH         | filelist            | url | verb    | response            | newfilelist  |
| test/data/2 | a.xml, b.xml, f.xml | /f  | DELETE  | { "success": true } | a.xml, b.xml |
</code></pre>

<p>```</p>

<p>Also fairly simple. A try / except is used to avoid errors if the files doesn't exist.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bottle/test3.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="p">,</span> <span class="n">request</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">config_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span> <span class="s">&#39;config.json&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span> <span class="n">config_file</span> <span class="p">)</span>
</span><span class='line'><span class="n">pth_xml</span>     <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s">&quot;paths&quot;</span><span class="p">][</span><span class="s">&quot;xml&quot;</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@route</span><span class="p">(</span><span class="s">&#39;/recipes/&lt;name&gt;&#39;</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">&#39;DELETE&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">recipe_delete</span><span class="p">(</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="s">&quot;&quot;</span> <span class="o">!=</span> <span class="n">name</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">pth_xml</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.xml&quot;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">True</span>  <span class="p">}</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="s">&quot;success&quot;</span> <span class="p">:</span> <span class="bp">False</span>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Challenge 100% complete</h2>

<p>This is quick and dirty work - no testing, and running off a local dev server which wouldn't be suited for production. But I am still amazed but how easy it all was. Bottle really does rock.</p>

<p>The scripts are <a href="https://github.com/gotofritz/Weekly-Challenges/tree/master/weekly-challenge-17_restful">available on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building scalable PHP / MySQL websites]]></title>
    <link href="http://gotofritz.net/blog/weekly-challenge/building-scalable-php-mysql-websites"/>
    <updated>2012-02-03T11:10:36+01:00</updated>
    <id>http://gotofritz.net/blog/weekly-challenge/building-scalable-php-mysql-websites</id>
    <content type="html"><![CDATA[<p>The task: summarize notes from a lecture about scaling PHP apps.</p>

<!--more-->


<p>Can't remember by whom, but you can tell it was a couple of years ago because neither cloud services nor NoSQL get much of a mention. It also doesn't mention tools such as <a href="https://www.varnish-cache.org/">Varnish</a>. Most of the information is still relevant though.</p>

<h2>Scaling</h2>

<p> Scaling means enabling your application to grow as traffic grows.</p>

<h2>Scaling the web server</h2>

<p>I.e., the server responding to browser requests. Different stages:</p>

<h3>STAGE 1: a single server with everything in it</h3>

<h3>STAGE 2: Load balanced servers</h3>

<p>Servers can be added as needed.</p>

<ul>
<li><p>Commercial solutions are expensive but do all you need and more (compression on the fly, etc)
Examples: <a href="http://www.citrix.com/English/ps2/products/product.asp?contentID=21679">Citrix NetScaler</a>, <a href="http://www.f5.com/glossary/load-balancing.html">F5 Big-IP</a></p></li>
<li><p><a href="http://www2.de.squid-cache.org/">squid</a> is open source and can do load balancing</p></li>
<li><p>Other, less strong, options</p>

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/Round-robin_DNS">DNS rotation</a> - hacky but works.</p></li>
<li><p><a href="http://danga.com/perlbal/">Perlbal</a></p></li>
<li><p><a href="http://httpd.apache.org/docs/2.1/mod/mod_proxy_balancer.html">Apache Proxy Balancer</a>, a simulator</p></li>
<li><p>Cloud services, proprietary</p></li>
</ul>
</li>
</ul>


<p>The guiding principle: only implement what you need, but without coding yourself into a corner. So:</p>

<ul>
<li><p>Don't code assuming a physical machine; so careful with <a href="http://php.net/manual/en/book.apc.php">APC</a>, <a href="http://www.zend.com/products/server/">Zend Server</a></p></li>
<li><p>Don't assume a file system, unless you use distributive file system NFTS etc</p></li>
<li><p>Do not use file based sessions but DB based</p></li>
</ul>


<p>If you <em>have</em> to, encapsulate all the bad practices into a BAD CLASS, so that you know what to change later on when you need to scale.</p>

<h2>Scaling the database</h2>

<p>The database is <em>always</em> the bottleneck.</p>

<h3>STAGE 1: a single server with everything in it</h3>

<h3>STAGE 2: master slave replication</h3>

<p>Two databases - everything that happens in the master also happens in the slave. This is easily set up with <a href="http://dev.mysql.com/doc/refman/5.1/en/replication.html">MySQL</a>. It's worth doing even if only one physical server - if nothing else for backing up.</p>

<h3>STAGE 3: isolate areas of load</h3>

<p>Have read happen from slave, write to master. Worth preparing for that, by having an extra paramater in you DB call to select which server is being accessed.
If doing that, one needs to avoid slave lag - i.e., the delay between action on master being reproduced on the slave. It should be in the order of 0.001s, but can get worse if there is lots of traffic, up to 2s.
To prepare for that, don't write code with a master instruction immediately followed by a slave instruction.</p>

<h3>STAGE 4: multiple slaves</h3>

<p>Again, something that comes out of the box with MySQL.
A typical, but not ideal, scenario - one master, and one slave box for each load balanced web server box. Or one box for each load balanced web server / DB pair.
It's simple but not ideal, as you must create a web server even if all you want is to add a new DB slave, or viceversa. And if a DB gets corrupted you quickly need to remove the web server from the pool, which kind of defeats the point. It's better to have each web server pick up random DB box.</p>

<p>Sample code:<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">class DB {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;   private static $cfg = array(</span>
</span><span class='line'><span class="x">       &#39;write&#39; =&amp;gt;</span>
</span><span class='line'><span class="x">           array(&#39;mysql:dbname=MyDB;host=10.1.2.3&#39;),</span>
</span><span class='line'><span class="x">       &#39;read&#39; =&amp;gt;</span>
</span><span class='line'><span class="x">           array(&#39;mysql:dbname=MyDB;host=10.1.2.7&#39;,</span>
</span><span class='line'><span class="x">                 &#39;mysql:dbname=MyDB;host=10.1.2.8&#39;,</span>
</span><span class='line'><span class="x">                 &#39;mysql:dbname=MyDB;host=10.1.2.9&#39;);</span>
</span><span class='line'><span class="x">       );</span>
</span><span class='line'><span class="x">   public static function getConnection($pool) {</span>
</span><span class='line'><span class="x">       $max = count(self::$cfg[$pool]) - 1;</span>
</span><span class='line'><span class="x">       $dsn = self::$cfg[$pool][mt_rand(0, $max)];</span>
</span><span class='line'><span class="x">       return new PDO($dsn, USER, PASS);</span>
</span><span class='line'><span class="x">   }</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;   }</span>
</span><span class='line'><span class="x">   $db = DB::getConnection(&#39;read&#39;);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>STAGE 5: slave pools</h3>

<p>Pools increases the likelihood that queries gets cached on a given server. Another benefit is that if certain queries need improving performance, you can add servers to that particular pool.
Different approaches:</p>

<ul>
<li><p>Divide slaves into pools, each handling only one type of query.</p></li>
<li><p>Keep a pool of slaves just for batch jobs</p></li>
<li><p>Use a pool of slaves for comments, one for articles, etc</p></li>
<li><p>Use a pool for AJAX calls, another for posts, etc</p></li>
</ul>


<h3>STAGE 6: partitioning</h3>

<p>Breaking up the master database. A drawback is that you can lose some SQL functionality, for example the ability to do joins, so they have to done in PHP. You can prepare for it by having the connection returned depending on the type of query.</p>

<p>There are tools for it - <a href="http://www.mysql.com/products/cluster/">MySQL Cluster</a> (which takes a long time to do the splitting), or <a href="http://en.wikipedia.org/wiki/Federated_database_system">federation</a>, but they are a bit generic.</p>

<p>Three types: vertical partitioning, horizontal partitioning, application level partitioning.</p>

<h4>Vertical partitioning</h4>

<p>Done on a single master. Moving different columns into different tables - trying to create smaller tables. Candidates: rarely used columns, columns mostly empty, columns not used in where clauses.</p>

<h4>Horizontal partitioning</h4>

<p>Mostly applied to multiple masters. It's when rows are split across databases. It can be</p>

<ul>
<li><p>Range based</p></li>
<li><p>Date based (most common)</p></li>
<li><p>Interlaced (row 1 in table 1, row 2 in table 2, etc). It works well for IDs where you can use module division.</p></li>
<li><p>User based, like Facebook which have (had) users from different universities in different databases</p></li>
</ul>


<h4>Application level partitioning</h4>

<p>Only done on multiple servers. Different tables in different DB servers, keeping related tables together to allow for joins.</p>

<h3>STAGE 7: partition between data centers</h3>

<p>Like master slave - but hell.</p>

<h2>Caching Database</h2>

<p>It allows you ignore the DB. Principles:</p>

<ul>
<li><p>choose small, discrete, reusable units</p></li>
<li><p>don't store data you can't recreate</p></li>
<li><p>store data in as close to final processed form</p></li>
</ul>


<p>Two types:</p>

<h3>Single server memory caches</h3>

<p>It caches data specific to the server you are on. It is about performance, not scalability though. <a href="http://php.net/manual/en/book.apc.php">APC</a>, <a href="http://www.zend.com/products/server/">Zend Server</a> are used for that. Limited due to lack of synchronised cache.</p>

<h3>Distributed cache</h3>

<p>Required for scalability. Classic: <a href="http://memcached.org/">Memcached</a>, <a href="http://www.zend.com/en/products/server/features">Zend platform</a>.</p>

<h2>Challenge 100% complete</h2>

<p>This was a simple but useful task, as this is a busy week.</p>
]]></content>
  </entry>
  
</feed>
