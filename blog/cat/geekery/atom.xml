<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geekery | Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/blog/cat/geekery/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2015-04-27T01:09:42+02:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X DNS lookups too slow for local hosts]]></title>
    <link href="http://gotofritz.net/blog/geekery/os-x-dns-lookups-too-slow-for-local-hosts/"/>
    <updated>2015-04-27T13:03:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/os-x-dns-lookups-too-slow-for-local-hosts</id>
    <content type="html"><![CDATA[<p>I have several local hosts set up on my dev OS X machine. The browser hangs for several seconds while trying to load them. Which doesn't make any sense, since they are local.</p>

<!--more-->


<p>The solution is to change the <code>/etc/hosts</code> file so that all hosts are on one line, the very first line where localhost is defined.</p>

<p>In other words, change from this...
<code>bash
127.0.0.1       localhost
255.255.255.255 broadcasthost
::1             localhost
fe80::1%lo0     localhost
127.0.0.1       my-host.dev
127.0.0.1       another-host.dev
127.0.0.1       oh-that-host.dev
</code></p>

<p>...to this.
<code>bash
127.0.0.1       localhost  my-host.dev another-host.dev oh-that-host.dev
255.255.255.255 broadcasthost
::1             localhost
fe80::1%lo0     localhost
</code></p>

<p>It <em>still</em> doesn't make sense, but it works and that's all that matters.</p>

<p><small>Answer from <a href="http://stackoverflow.com/questions/10064581/how-can-i-eliminate-slow-resolving-loading-of-localhost-virtualhost-a-2-3-secon">Stack Overflow</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to generate an error in a Gulp task]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-generate-error-in-gulp-task/"/>
    <updated>2015-04-24T12:29:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-generate-an-error-in-a-gulp-task</id>
    <content type="html"><![CDATA[<p>When writing a Gulp task that doesn't involve streams, how do you throw an error?</p>

<!--more-->


<h2>Motivation</h2>

<p><a href="http://gulpjs.com/">Gulp</a>, is a popular javscript build tool for web development. Gulp tasks are based around <a href="https://github.com/substack/stream-handbook">streams</a>; but sometimes streams are too clumsy when you want to do a simple task. Say you want to check a JSON file conforms to certain rule. It's much easier to require the file, check what you need to check, and then throw an error if you need to than it is opening the file as a stream and validating it.</p>

<p>But how do you throw an error in Gulp "the proper way", i.e. not just by throwing a standard JS error?</p>

<h2>Validating a package.json file</h2>

<p>I had to validate a package json file to make sure all packages were installed with the <code>--save-dev</code> flag. In other words, all dependencies should be in exact semantic format, <code>1.2.3</code> instead of the default <code>^1.2.3</code> or <code>~1.2.3</code>. It is simply enough in plain node, without the extra complication of streams - you require package.json, then test each dependency.</p>

<p>``` js
gulp.task(taskName, function (cb) {
  var gutil = require("gulp-util");
  var packageData = require("./package.json");</p>

<p>  // we test all three types of dependencies
  ["devDependencies", "dependencies", "optionalDependencies"]
  .forEach(function validateAnObj(key) {</p>

<pre><code>// load each dependency
Object.keys(packageData[key])
.forEach(function validateAField(field) {

  // check the version complies
  var hasInvalidVersion = (/[^0-9.]/.test(packageData[key][field]));

  // this is where the magic happens
  if (hasInvalidVersion) {
    throw new gutil.PluginError({
      plugin: taskName,
      message: field + " in " + key + " has non compliant versioning: " + packageData[key][field]
    });
  }
});
</code></pre>

<p>  });
});
```</p>

<h2>Throwing an error with gulp</h2>

<p>The easiset way to throw a gulp-y error is to use <code>gulp-util</code>, which has a PluginError that can be thrown. <a href="https://github.com/gulpjs/gulp-util#user-content-new-pluginerrorpluginname-message-options">Here is the documentation for PluginError</a>. <code>plugin</code> and <code>message</code> get outputted on separate lines; they are basically a title message and a message body.
There are also a couple of options that can be passed, do refer to the documentation.</p>

<h2>This is not using gulp the way it was meant to be</h2>

<p>There isn't always a benefit in turning simple problems into a stream problem. Hope this info was useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Alfred workflows for web development]]></title>
    <link href="http://gotofritz.net/blog/geekery/alfred-workflows-web-development/"/>
    <updated>2015-04-04T01:51:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/useful-alfred-color-tool-for-os-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.alfredapp.com/">Alfred App</a> has a couple of useful workflow for web developers.</p>

<!--more-->


<p>Alfred App is one of the things that make working on OS X a pleasure. There are lots of useful workflows out there, and using a folder inside Dropbox as the sync folder (Preferences &gt; Advanced &gt; Syncing.. ) allows me to share them among my work and home machines.</p>

<p>Here are a couple of workflows I find useful for web development.</p>

<h2><a href="http://www.packal.org/workflow/colors">Colors</a></h2>

<p>I can type a color directly into Alfred, say <code>#ff0000</code> or <code>rgb 1,45,87</code> and Alfred will show me a list of conversions in other formats, with a swatch in the color itself. Use <code>c name</code> for a CSS color name, say <code>c red</code>.</p>

<h2><a href="https://github.com/willfarrell/alfred-encode-decode-workflow">Encode/Decode</a></h2>

<p>Quickly convert from HTML or URL encoded text to plain by typing <code>decode &lt;TEXT&gt;</code>, or viceversa with  <code>encode &lt;TEXT&gt;</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Directory listings in Apache 2.4]]></title>
    <link href="http://gotofritz.net/blog/geekery/directory-listings-in-apache-2-4/"/>
    <updated>2015-03-07T23:14:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/directory-listings-in-apache-2-dot-4</id>
    <content type="html"><![CDATA[<p>Yosemite updates Apache to 2.4. A couple of things stopped working from my previous installation, including autogenerated directory listings. Here's how I got them back.</p>

<!--more-->


<h2>Yosemite updates Apache from 2.2 to 2.4</h2>

<p>It copies the old httpd.conf to <code>/etc/apache2/httpd.conf~previous</code> and replaces it with a vannilla one. Annoying, but not too painful to replace, and it doesn't touch the vhosts. <a href="https://httpd.apache.org/docs/trunk/new_features_2_4.html">The list of 2.4 changes</a> doesn't include anything I actually use. Sadly that doesn't mean nothing important has changed - rather, they didn't bother to list things that matter to me.</p>

<h2>Apache "directory listing forbidden"</h2>

<p>I used to rely on the automatic directory listings generated by mod_autoidex, but they has stopped working. The logs give the message <code>No matching DirectoryIndex (index.html) found, and server-generated directory index forbidden by Options directive</code>. "Impossible!" I cry, the settings are right, and they always worked.</p>

<p>This is the DocumentRoot fragment of httpd.conf. <code>+Indexes</code> is the bit which is supposed to turn on auto-indexing. I use /Library/... for not so important documents I need to put under a webserver for whatever reason.
``` bash
DocumentRoot "/Library/WebServer/Documents"
<Directory "/Library/WebServer/Documents"></p>

<pre><code>Options +Indexes +FollowSymLinks
# etc
</code></pre>

<p></Directory>
```</p>

<p>And this is one of the virtual hosts. For serious dev work, I put my vhosts somewhere other than /Library/...
``` bash
<VirtualHost *:80></p>

<pre><code>DocumentRoot "/pth/to/somewhere/completely/different"
ServerName my-virtual-host.dev
ErrorLog "/private/var/log/apache2/my-virtual-host.dev-error_log"
CustomLog "/private/var/log/apache2/my-virtual-host.dev-access_log" common
</code></pre>

<p></VirtualHost>
```</p>

<p>What has changed is that now the options for DocumentRoot don't automatically carry over to folders which are not subdirectories of DocumentRoot. This can be easily fixed by changing virtual hosts to
``` bash
<VirtualHost *:80></p>

<pre><code>DocumentRoot "/pth/to/somewhere/completely/different"
ServerName my-virtual-host.dev
ErrorLog "/private/var/log/apache2/my-virtual-host.dev-error_log"
CustomLog "/private/var/log/apache2/my-virtual-host.dev-access_log" common
&lt;Directory "/pth/to/somewhere/completely/different"&gt;
    Options +Indexes
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<p>That proves what the problem is, but it sucks having to do that for every virtual host. The solution is to add the directive for the common parent folder of all my virtual hosts in httpd.conf</p>

<p>``` bash
<Directory "/parent/of/somewhere/completely/different"></p>

<pre><code>Options +Indexes
</code></pre>

<p></Directory>
```</p>

<h2>Restart apache and all is well</h2>

<p>After a <code>sudo apachectl restart</code> everything works fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting local IP Address into a file with bash]]></title>
    <link href="http://gotofritz.net/blog/geekery/injecting-local-ip-address-into-a-file-with-bash/"/>
    <updated>2014-03-03T14:24:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/injecting-local-ip-address-into-a-file-with-bash</id>
    <content type="html"><![CDATA[<p>Sometimes there are some config file on which you have no control for which you need to change an IP address to that of your current dev machine. Here's how I fix that with a bash script.</p>

<!--more-->


<h2>A good place to put bash scripts</h2>

<p>I have a <code>bin</code> folder inside my user folder. It is in the <code>$PATH</code>, meaning every script file in there can be executed as a script from anywhere. In there I create a text file called <code>fix-config-PROJECT</code>. Yes, I make one per project, because I hard code the paths of the files to change. This could evolve into something more complex if the need arises, but the setup I have so far has served me well so far.</p>

<p><code>bash
nano ~/bin/fix-config-PROJECT
</code></p>

<h2>The script file</h2>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>IP=<code>ifconfig  | grep inet | grep -v inet6 | tail -n1 | awk '{print $2}'</code>
for file in "launchpad/src/main/tomcat/conf/context.xml" "path/to/etc.xml"
do
  svn revert $file
  sed -i "" "s/localhost/$IP/g" $file
done
```</p>

<h2>Script breakdown</h2>

<dl class="code-breakdown">
  <dt class="long-line">IP=`ifconfig  | grep inet | grep -v inet6 | tail -n1 | awk '{print $2}'`</dt>
  <dd class="long-line">This runs a series of commands one after the other, using <code>|</code> to pass the result of each command to the next. The ` at the beginning and end put the result into a variable <code>$IP</code></dd>

  <dt>ifconfig</dt>
  <dd>From the manpage: "The ifconfig utility is used to assign an address to a network interface and/or configure network interface parameters". Used without parameters, it returns a big chunk of text with current settings. The IP address is in there somewhere.</dd>

  <dt>grep inet</dt>
  <dt>grep -v inet6</dt>
  <dd>extracts the lines from that chunk of text which have "inet" in it, but not "inet6"</dd>

  <dt>tail -n1</dt>
  <dd>take the last of these lines</dd>

  <dt>awk '{print $2}'</dt>
  <dd>At this point we have a string like <code>inet 192.168.2.108 netmask 0xffffff00 broadcast 192.168.2.255</code>. Awk can be used to extract the 192... from it. Awk is a utilities that processes a line of text by splitting into fields where blank spaces are - it is used for handling database dumps etc. In this case, it is basically saying that after it's split the line into fields (which it does automatically), it should print out the second field and throw away the rest.</dd>

  <dt class="long-line">for file in "launchpad/src/main/tomcat/conf/context.xml" "path/to/etc.xml"</dt>
  <dd class="long-line">The files I need to process are listed out one after the other. This is good enough for my use case. Note that the paths are not absolute, so that I can use the same command in different svn branches. What this line does is looping through each file</dd>

  <dt class="long-line">svn revert $file</dt>
  <dt class="long-line">sed -i "" "s/localhost/$IP/g" $file</dt>
  <dd class="long-line">First I revert the latest changes, then I make new ones. This time using sed, a utility which processes text a line at the time, transforming it on the way. The <code>-i ""</code> means to process the file in place (as opposed to create a copy), without creating a backup. The substitution is simple, I simply change all occurrences of <code>locahost</code> with the IP address from earlier</dd>
</dl>


<h2>Running the script</h2>

<p>I can now run the script from anywhere on my machine, usually as
<code>bash
cd PROJECT/branch_x
fix-config-PROJECT
</code>
and then all the config files are changed as required, and I can access my local version site from tablets etc using the IP address.</p>
]]></content>
  </entry>
  
</feed>
