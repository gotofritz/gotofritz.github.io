<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geekery | Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/blog/cat/geekery/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2015-12-14T22:51:20+01:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Avoid sudo npm]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm/"/>
    <updated>2015-12-14T22:12:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm</id>
    <content type="html"><![CDATA[<p>You know the story. You try to do <code>npm install hipster-package</code> on OS X and you get a whole load of errors; the easy way out is to just use <code>sudo npm install</code>. Everyone, however, keep saying how that is bad idea. But how do you make npm work without sudo? It's quite simple actually.</p>

<!--more-->


<h2>On your dev machine</h2>

<p>If you are the typical js developer who works on OS X, all you need to do is just change the owner of the node binaries
``` bash</p>

<h1>this should solve the problem</h1>

<p>sudo chown -R $USER /usr/local</p>

<h1>this may also help</h1>

<p>sudo chmod -R 777 ~/.npm
<code>
If you are working on projects and someone has already checked in a package.json run with sudo, you need to make sure the whole team changes the permissions of at the same time
</code> bash</p>

<h1>is someone has checked in a version of package.json with the wrong permissions</h1>

<p>chmod -775 package.json
```</p>

<p>Unix purists will find this hacky; and rightly so. The <em>proper</em> way of doing is to create a group for everyone who should be allowed to run npm, even if it's just you. However for a simple dev machine that is good enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty printing XML]]></title>
    <link href="http://gotofritz.net/blog/geekery/pretty-printing-xml/"/>
    <updated>2015-10-21T00:38:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/pretty-printing-xml</id>
    <content type="html"><![CDATA[<p><a href="http://www.w3.org/People/Raggett/tidy/">tidy</a> is a command line tool to pretty print XML.</p>

<!--more-->


<h2>What is tidy?</h2>

<p>It's a very unslick util for tidying up HTML markup which gets the job done. It also has an XML mode, which is what is useful here. To install it on OS X, simply do
``` bash</p>

<blockquote><p>brew install tidy
```</p></blockquote>

<h2>Tidy usage</h2>

<p>To pretty print <code>input.xml</code>  and save the output to <code>pretty_printed.xml</code></p>

<p>``` bash</p>

<blockquote><p>tidy -xml -i input.xml > pretty_printed.xml
```</p></blockquote>

<p>There are several <a href="http://tidy.sourceforge.net/docs/quickref.html#break-before-br">command line options</a>. For example, to change the case of tabs to uppercase:</p>

<p>``` bash</p>

<blockquote><p>tidy -xml --uppercase-tags y  -i input.xml
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiline regular expressions in Javascript]]></title>
    <link href="http://gotofritz.net/blog/geekery/multiline-regular-expressions-javascript/"/>
    <updated>2015-09-19T23:39:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/multiline-regular-expressions-in-javascript</id>
    <content type="html"><![CDATA[<p>There are no flags to match multi-line text is in JS. But it can be done with a character class.</p>

<!--more-->


<h2>The problem</h2>

<p>In both cases below we expect <code>\d.line</code> to match <code>0\nline</code> but it doesn't work - because newlines are not matched by the <code>.</code> character class.
```js
"line 0\nline1".match(/\d.line/)
// null</p>

<p>// ES6
<code>line 0
line1</code>.match(/\d.line/)
// null
```</p>

<h2>The solution</h2>

<p>Use the <code>[^]</code> character class, which is equivalent to <code>.</code> but with the newline added in
```js
"line 0\nline1".match(/\d[<sup>]line/)</sup>
// ["0
// line"]</p>

<p>// ES6
<code>line 0
line1</code>.match(/\d[<sup>]line/)</sup>
// ["0
// line"]
```</p>

<p>For more info, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes">visit the relevant MDN page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Software Update from the Command Line]]></title>
    <link href="http://gotofritz.net/blog/geekery/os-x-software-update-from-command-line/"/>
    <updated>2015-08-25T00:41:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/os-x-software-update-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Software updates can be quite tedious - you have to click a lot of buttons, then get into the Apple Store etc. But you can avoid all that by running it from the command line.</p>

<!--more-->


<p>``` bash
$ sudo softwareupdate -i -r
Password:
Software Update Tool
Copyright 2002-2012 Apple Inc.</p>

<p>Finding available software</p>

<p>Downloaded OS X Update
Installing OS X Update
Done.
```</p>

<p>Which breaks down as</p>

<dl class="code-breakdown">
  <dt>sudo</dt>
  <dd>needs to run as admin (you will have to enter a password after you type return)</dd>

  <dt>softwareupdate</dt>
  <dd>this is the command line utility that does the job</dd>

  <dt>-i</dt>
  <dd>install - you can specify what to install, all, or just...</dd>

  <dt>-r</dt>
  <dd>...the recommended updates</dd>
</dl>


<p>This is all there is to it.</p>

<h2>Slightly more complex usage of softwareupdate</h2>

<p>You can ask for a list of available software before you install:
```  bash
$ softwareupdate -l
Software Update Tool
Copyright 2002-2012 Apple Inc.</p>

<p>Finding available software
Software Update found the following new or updated software:
  * MacBookAirEFIUpdate2.4-2.4</p>

<pre><code>   MacBook Air EFI Firmware Update (2.4), 3817K [recommended] [restart]
</code></pre>

<ul>
<li>ProAppsQTCodecs-1.0
   ProApps QuickTime codecs (1.0), 968K [recommended]</li>
<li>JavaForOSX-1.0
   Java for OS X 2012-005 (1.0), 65288K [recommended]
```</li>
</ul>


<p>You can then install individual packages by simply naming them
<code>bash
$ sudo softwareupdate -i JavaForOSX-1.0
</code></p>

<p>Or you can ignore some packages and then install everything else (<code>-a, all</code>)
<code>bash
$ softwareupdate --ignore JavaForOSX-1.0
$ sudo softwareupdate -i -a
</code></p>

<p>Note that the --ignore flag will persist until it is reset with <code>--reset-ignored</code> (which clears <em>all</em> flags)
<code>bash
$ softwareupdate --reset-ignored
</code></p>

<p>More options can be viewed with <code>softwareupdate -h</code> or <code>man softwareupdate</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A selection of akw scripts]]></title>
    <link href="http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts/"/>
    <updated>2015-07-25T00:16:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts</id>
    <content type="html"><![CDATA[<p>Some examples scripts to complement the previous <a href="/blog/geekery/back-to-the-classics-awk/">awk tutorial</a></p>

<!--more-->


<p>All the scripts here assume the fields in the data is space separated - i.e. <code>UK   London  10000</code> etc. There hasn't been a CSV standard until recently, but the one you get from MS Office doesn't work too well with awk, because CSV is basically a rubbish format and hard to handle. But if you have a "well behaved" CSV file, i.e. one which doesn't have commas, quotation marks, or new lines inside fields, e.g <code>UK,London,10000</code> then you can easily process it by passing -F"," to the awk call:
<code>bash
awk -F"," -f my_awk_script.awk some_input_data.txt
</code>
In practice unless you generate the data yourself there is always going to be the odd comma or quotation mark in your data somewhere, so I find it easier to convert the data to tab separated using a <a href="http://www.convertcsv.com/csv-to-csv.htm">free online CSV to TSV converter like this</a>. I then call awk with "\t" as the separator, because some field may have spaces inside them.</p>

<p>The command below is what I use - my awk program is in my_awk_script.awk, the data is in uk_electoral_data_converted.csv, and the results goes into awk_output.txt.
<code>
awk -F"\t" -f my_awk_script.awk uk_electoral_data_converted.csv &gt; awk_output.txt
</code></p>

<h3>Sample data: UK election results</h3>

<p>Some of the scripts will use <a href="http://is.gd/eUrbOZ">data from the 2015 UK election in CSV format</a> as data, converted to TSV. Here's what it looks like:
<code>bash
Forename  Surname Description on ballot paper Constituency Name PANO  Votes Share (%) Change  FIELD9  Incumbent?  FIELD11 Constituency ID Region ID County  Region  Country Constituency type Party name identifier Party abbreviation
Gerald  Howarth The Conservative Party Candidate  Aldershot 7 23369 50.6  3.9   MP    E14000530 E12000008 Hampshire South East  England Borough Conservative  Con
Gary  Puffett Labour Party  Aldershot 7 8468  18.3  6.2       E14000530 E12000008 Hampshire South East  England Borough Labour  Lab
Bill  Walker  UK Independence Party (UKIP)  Aldershot 7 8253  17.9  13.4        E14000530 E12000008 Hampshire South East  England Borough UK Independence Party UKIP
...
</code></p>

<p>And here are the field names in order
<code>bash
 1 Forename
 2 Surname
 3 Description on ballot paper
 4 Constituency Name
 5 PANO
 6 Votes
 7 Share (%)
 8 Change
 9 --
10 Incumbent?
11 --
12 Constituency ID
13 Region ID
14 County
15 Region
16 Country
17 Constituency type
18 Party name identifier
19 Party abbreviation
</code></p>

<h3>Skipping header row</h3>

<p>``` bash</p>

<h1>put NR > 1 in front of every action to skip the header row</h1>

<p>NR > 1 { print }</p>

<h1>result</h1>

<p>Gerald  Howarth The Conservative Party Candidate  Aldershot ...
...
```</p>

<h3>Skipping empty records</h3>

<p>``` bash</p>

<h1>check if the first field is empty</h1>

<p>NF { print }
```</p>

<h3>Rearranging fields, and skipping some</h3>

<p>``` bash
NR > 1 &amp;&amp; NF { print $4 ": " $2 " " $1 " (" $NF ") " $7 "% " }</p>

<h1>NR > 1    ignore header</h1>

<h1>NF  ignore empty record</h1>

<h1>print constituence name, name surname, party abbreviation, share of the vote</h1>

<h1>ignore otehr fields</h1>

<p>Aldershot: Howarth Gerald (Con) 50.6%
Aldershot: Puffett Gary (Lab) 18.3%
Aldershot: Walker Bill (UKIP) 17.9%
Aldershot: Hilliar Alan (LD) 8.8%
Aldershot: Hewitt Carl (Green) 4.4%
...
```</p>

<h3>Print sum of all fields</h3>

<p>Finds the national Conservative vote
``` bash
$NF == "Con" {total += $6}
END          {print total}</p>

<h1>$NF == "Con"  if a record concerns a tory vote</h1>

<h1>{total += $6} add it to a running total</h1>

<h1>END           when all records are processed</h1>

<h1>{print total} output total</h1>

<p>11299609
```</p>

<h3>Work out column averages</h3>

<p>Find the total vote of the 6 larger parties and their % of the national vote
``` bash</p>

<h1>keep a running total</h1>

<p>NR > 1 &amp;&amp; NF  {total += $6}</p>

<h1>keep a total for each party - don' do anything yet</h1>

<p>$NF == "Con"        {total_con += $6}
$NF == "Lab"        {total_lab += $6}
$NF == "UKIP"       {total_ukip += $6}
$NF == "LD"         {total_ld += $6}
$NF == "Green"      {total_green += $6}
$NF == "SNP"        {total_snp += $6}</p>

<h1>print a report at the end</h1>

<p>END {
  print "TOTAL: " total
  print "Con:   " (100 * total_con / total) "%"
  print "Lab:   " (100 * total_lab / total) "%"
  print "UKIP:  " (100 * total_ukip / total) "%"
  print "LD:    " (100 * total_ld / total) "%"
  print "SNP:   " (100 * total_snp / total) "%"
  print "Green: " (100 * total_green / total) "%"
}</p>

<h1>output:</h1>

<p>TOTAL: 30697255
Con:   36.8098%
Lab:   30.449%
UKIP:  12.6431%
LD:    7.87014%
SNP:   4.738%
Green: 3.77112%
```</p>

<h3>Using functions</h3>

<p>The same as above, but without copy and paste code
``` bash</p>

<h1>abstracting copy-and-paste code into a function</h1>

<p>function print_party_percentage(party_name, party_vote, total_vote) {
  print party_name "   " (100 * party_vote / total_vote) "%"
}</p>

<h1>same program as before</h1>

<p>NR > 1 &amp;&amp; NF   {total += $6}
$NF == "Con"   {total_con += $6}
$NF == "Lab"   {total_lab += $6}
$NF == "UKIP"  {total_ukip += $6}
$NF == "LD"    {total_ld += $6}
$NF == "Green" {total_green += $6}
$NF == "SNP"   {total_snp += $6}
END {
  print "TOTAL: " total
  print_party_percentage("Con", total_con, total)
  print_party_percentage("Lab", total_lab, total)
  print_party_percentage("UKIP", total_ukip, total)
  print_party_percentage("LD", total_ld, total)
  print_party_percentage("SNP", total_snp, total)
  print_party_percentage("Green", total_green, total)
}</p>

<h1>output - looks messier because previous program was manually formatted</h1>

<p>TOTAL: 30697255
Con   36.8098%
Lab   30.449%
UKIP   12.6431%
LD   7.87014%
SNP   4.738%
Green   3.77112%
```</p>

<h3>Formatting numerical precision and alignment with printf</h3>

<p>Same as above, but using printf for formatting
``` bash
function print_party_percentage(party_name, party_vote, total_vote) {
  printf "%5s: %4.1f%%\n", party_name, (100 * party_vote / total_vote)
  # %5s a string (s) of fixed width 5 or more (5) aligned right (if it was -5 it would be left)
  # %4.1f a number (f) with one decimal (.1) and total width 4 (4) aligned right (4)
  # %% an actual %
}</p>

<h1>same program as before</h1>

<p>NR > 1 &amp;&amp; NF   {total += $6}
$NF == "Con"   {total_con += $6}
$NF == "Lab"   {total_lab += $6}
$NF == "UKIP"  {total_ukip += $6}
$NF == "LD"    {total_ld += $6}
$NF == "Green" {total_green += $6}
$NF == "SNP"   {total_snp += $6}
END {
  print "TOTAL: " total
  print_party_percentage("Con", total_con, total)
  print_party_percentage("Lab", total_lab, total)
  print_party_percentage("UKIP", total_ukip, total)
  print_party_percentage("LD", total_ld, total)
  print_party_percentage("SNP", total_snp, total)
}</p>

<h1>output</h1>

<p>TOTAL: 30697255
  Con: 36.8%
  Lab: 30.4%
 UKIP: 12.6%
   LD:  7.9%
  SNP:  4.7%
```</p>

<h3>Using arrays to group data</h3>

<p>There is still some copy and past code because we are hardcoding the parties. We can use arrays to group whatever parties we find.</p>

<p>``` bash</p>

<h1>same formatting function as before</h1>

<p>function print_party_percentage(party_name, party_vote, total_vote) {
  printf "%5s: %4.1f%%\n", party_name, (100 * party_vote / total_vote)
}</p>

<h1>skip empty and header lines</h1>

<p>NR > 1 &amp;&amp; NF  {
  # runnint total
  total += $6
  # create or update running total for current party
  party_totals[$NF] += $6
}</p>

<h1>when all records are processed</h1>

<p>END {
  print "TOTAL: " total
  # print a line for each party
  for (party in party_totals)</p>

<pre><code>print_party_percentage(party, party_totals[party], total)
</code></pre>

<p>}</p>

<h1>output - there are a LOT of tiny local parties</h1>

<p>TOTAL: 30697255
  UUP:  0.4%
Left Unity - Trade Unionists and Socialists:  0.0%
  IZB:  0.0%
Respect:  0.0%
  SSP:  0.0%
  NSW:  0.0%
The 30-50 Coalition:  0.0%
.... and so on
```</p>

<p>Oh - turns out if you include all the novelty parties there are 132 of them across the UK. We need to sort the array and only print the top X items. Turns out it is quite complicated.</p>

<h3>Sorting array</h3>

<p>Standard awk's array are not sortable. This was a design choice - only associative arrays are supported, so there is no order, hence they can't be sorted in any meaningful way. <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Arrays">gawk, however, has two array sorting functions</a> - how do they do it? They actually create a new associative array, with all the values from the original but none of they keys; they keys are replaced by new ones, in order. Then you use a for loop (not the standard for in) to read all the array "in order". This is all well and good if you don't need the keys, but I do (they are the name of the party). Besides, I am using awk and not gawk.</p>

<p>The best approach is to create a new array with just the keys, sort that array, and then loop through it in order in order to find out which keys of the original array to read.
``` bash</p>

<h1>kickstarts the sort process</h1>

<h1>puts all the sorted keys into a separate array. if i</h1>

<p>function homebrew_asort(original, processed) {
  # before we use the array we must be sure it is empty
  empty_array(processed)
  original_length = copy_and_count_array(original, processed)
  qsort(original, processed, 0, original_length)
  return original_length
}</p>

<h1>removes al values</h1>

<p>function empty_array(A) {
  for (i in A)</p>

<pre><code>delete A[i]
</code></pre>

<p>}</p>

<h1>awk doesn't even have an array size function... you also have to roll out your own</h1>

<p>function copy_and_count_array(original, processed) {
  for (key in original) {</p>

<pre><code># awk doesn't seem to like array[0] -  so we start from 1
size++
processed[size] = key
</code></pre>

<p>  }
  return size
}</p>

<h1>Adapted from a script from awk.info</h1>

<h1>http://awk.info/?quicksort</h1>

<p>function qsort(original, keys, left, right,   i, last) {
  if (left >= right)  return
  swap(keys, left, left + int( (right - left + 1) * rand() ) )
  last = left
  for (i = left+1; i &lt;= right; i++)</p>

<pre><code>if (original[keys[i]] &lt; original[keys[left]])
  swap(keys, ++last, i)
</code></pre>

<p>  swap(keys, left, last)
  qsort(original, keys, left, last-1)
  qsort(original, keys, last+1, right)
}
function swap(A, i, j,   t) {
  t = A[i]; A[i] = A[j]; A[j] = t
}</p>

<h1>same formatting function as before</h1>

<p>function print_party_percentage(party_name, party_vote, total_vote) {
  printf "%5s: %4.1f%%\n", party_name, (100 * party_vote / total_vote)
}</p>

<h1>same main action as before</h1>

<p>NR > 1 &amp;&amp; NF  {
  total += $6
  party_totals[$NF] += $6
}</p>

<h1>when all records are processed</h1>

<p>END {
  parties_count = homebrew_asort(party_totals, keys)
  for  (i = parties_count; i >= parties_count - 5; i--)</p>

<pre><code>print_party_percentage(keys[i], party_totals[keys[i]], total)
</code></pre>

<p>}
```</p>

<p>And the output
<code>bash
  Con: 36.8%
  Lab: 30.4%
 UKIP: 12.6%
   LD:  7.9%
  SNP:  4.7%
Green:  3.8%
</code></p>

<h2>Print first or last x characters of a line</h2>

<p>You can easily mimick <code>head -c</code> or <code>tail -c</code> with awk - if you really want to.
``` bash</p>

<h1>equivalent</h1>

<p>$ awk '{print substr($0, 1, 32)}' xxx
$ head -c 32 xxx</p>

<h1>equivalent</h1>

<p>$ awk 'END {print substr($0, length($0) - 30, 32)}' xxx
$ tail -c 32 xxx
```</p>

<p>But with awk you can also skip a few characters into a file
``` bash</p>

<h1>no heard or tail equivalent - print characters 32 to 64</h1>

<p>$ awk '{print substr($0, 32, 32)}' xxx
```</p>

<h2>Other examples</h2>

<p>The <a href="http://awk.info/">awk.info</a> website has some <a href="http://awk.info/?OneLiners">one liners</a> with extensive <a href="http://www.catonmat.net/blog/awk-one-liners-explained-part-one/">explanations</a></p>

<p>The <a href="http://www.math.utah.edu/docs/info/gawk_4.html">gawk manual includes some one liners</a> which are compatible with standard awk.</p>

<p>The Unix School: <a href="http://www.theunixschool.com/2012/06/awk-10-examples-to-group-data-in-csv-or.html">10 examples to group data in a CSV or text file</a></p>
]]></content>
  </entry>
  
</feed>
