<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Geekery | Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/blog/cat/geekery/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2016-01-16T22:48:42+01:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backing up a hard disk to another in OS X]]></title>
    <link href="http://gotofritz.net/blog/geekery/backing-up-hard-disk-os-x/"/>
    <updated>2016-01-16T22:44:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/backing-up-a-hard-disk-to-another-in-os-x</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Time_Machine_(OS_X)">Time Machine</a> does its own backup magic, but sometimes you just simply want two identical copies of the same hard disk. For that <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a> is the way to go.</p>

<!--more-->


<p>Rsync is a utility you run by typing commands in Terminal, and it was designed exactly for doing that one job - it looks at one source folder and all its subfolders, finds all the files in there, then look at the destination folder and copies over only what needs to be copied, making it very fast. It's got a ton of options, but all you need is to find that one command that works for you and use it again and again as needed.</p>

<h2>Syncing two hard disks with rsync</h2>

<p>Let's say you have two hard disks, "ORIGINAL" and "BACKUP DISK". For the first transfer, you may as well copy manually all the files from ORIGINAL to BACKUP DISK by dragging them, rsync doesn't do it any better or faster. From then on, whenever you want to backup the disk (every day, every week, whatever) you can start with this command:</p>

<p><code>bash
$ rsync -aS --delete --progress  /Volumes/ORIGINAL/ /Volumes/BACKUP\ DISK/
</code></p>

<p>The command breaks down as follows:</p>

<dl class="code-breakdown">
  <dt>rsync</dt>
  <dd>calls the utility</dd>

  <dt>-a</dt>
  <dd>turns on archive mode, which basically ensures all subfolders, permissions and files parameters are copied </dd>

  <dt>S</dt>
  <dd>if there wasn't already a dash for -a, this would be -S. This compacts sparse files for efficiency </dd>

  <dt>--delete</dt>
  <dd>this ensures that any files in the destination that were not there in the source will be deleted</dd>

  <dt>/Volumes/ORIGINAL</dt>
  <dd>the original</dd>

  <dt>/Volumes/BACKUP\ DISK</dt>
  <dd>the destination. Note that I have typed a backslash before the space after BACKUP, BACKUP\ DISK - that tells Terminal that the word isn't finish yet, and the space is part of the word</dd>
</dl>


<p>If you want to skip some files or folders, you can add their paths to the command. Note that you have one <code>--exclude</code> options for every patter you want to exclude. Also note the <code>*</code> wildcards, which basically means "anything here"</p>

<p><code>bash
$ rsync -aS --delete --progress --exclude *.Trash* --exclude /that_file.txt
   --exclude /other_file.jpg /Volumes/ORIGINAL/ /Volumes/BACKUP\ DISK/
</code></p>

<p>If you have a lot of excludes it makes sense to put the list in a file, and then tell rsync to use that. It makes sense even if you only have a few files, because then you can easily add and remove things from there without having to change the command - as you start playing with rsync you soon find out there are a few system folders you don't want to backup, like Spotlight indices and so on.</p>

<p><code>bash
$ rsync -aS --delete --progress --exclude-from ~/.rsync_exclude_list
  /Volumes/ORIGINAL/ /Volumes/BACKUP\ DISK/
</code></p>

<p>and .rsync_exclude_list can have all the patterns in there, one per line. The file  can be named whatever you want - I have put it in the home folder (that's what ~/ at the beginning means) and used a name that starts with a dot because it works well with my <a href="/blog/geekery/storing-bash-profile-and-so-on-on-github/">dotfiles</a>.</p>

<p>``` bash</p>

<h1>list of files not to be included when running alias backupext</h1>

<p><em>.Trash</em>
.TemporaryItems<em>
.DocumentRevisions-</em>
.Spotlight-*
```</p>

<h2>Making things easier with an alias</h2>

<p>Instead of trying to remember that command every time you need to back up, you can create an alias, i.e. a shortcut to the command. Depending on your setup, you can just add it to your bash_profile file. If you use <a href="/blog/geekery/storing-bash-profile-and-so-on-on-github/">dotfiles</a>, just add it to the .alias file and then run bootstrap.sh again.</p>

<p>``` bash</p>

<h1>this will create it if it doesn't exist. Nano is a text editor that runs inside</h1>

<h1>Terminal. It's simple and it shows the shortcuts at the bottom (^ = control key)</h1>

<p>nano ~/.bash_profile</p>

<h1>or if you use the sublime text editor...</h1>

<p>subl ~/.bash_profile</p>

<h1>then type this anywhere in the file, in a line of its own</h1>

<p>alias backupext="rsync -aS --delete --progress --exclude-from ~/.rsync_exclude_list
  /Volumes/ORIGINAL/ /Volumes/BACKUP\ DISK/"</p>

<h1>to save and quit in nano press CTRL-X - it will ask you to save the file</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Avoid sudo npm]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm/"/>
    <updated>2015-12-14T22:12:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm</id>
    <content type="html"><![CDATA[<p>You know the story. You try to do <code>npm install hipster-package</code> on OS X and you get a whole load of errors; the easy way out is to just use <code>sudo npm install</code>. Everyone, however, keep saying how that is bad idea. But how do you make npm work without sudo? It's quite simple actually.</p>

<!--more-->


<h2>On your dev machine</h2>

<p>If you are the typical js developer who works on OS X, all you need to do is just change the owner of the node binaries
``` bash</p>

<h1>this should solve the problem</h1>

<p>sudo chown -R $USER /usr/local</p>

<h1>this may also help</h1>

<p>sudo chmod -R 777 ~/.npm
<code>
If you are working on projects and someone has already checked in a package.json run with sudo, you need to make sure the whole team changes the permissions of at the same time
</code> bash</p>

<h1>is someone has checked in a version of package.json with the wrong permissions</h1>

<p>chmod -775 package.json
```</p>

<p>Unix purists will find this hacky; and rightly so. The <em>proper</em> way of doing is to create a group for everyone who should be allowed to run npm, even if it's just you. However for a simple dev machine that is good enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty printing XML]]></title>
    <link href="http://gotofritz.net/blog/geekery/pretty-printing-xml/"/>
    <updated>2015-10-21T00:38:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/pretty-printing-xml</id>
    <content type="html"><![CDATA[<p><a href="http://www.w3.org/People/Raggett/tidy/">tidy</a> is a command line tool to pretty print XML.</p>

<!--more-->


<h2>What is tidy?</h2>

<p>It's a very unslick util for tidying up HTML markup which gets the job done. It also has an XML mode, which is what is useful here. To install it on OS X, simply do
``` bash</p>

<blockquote><p>brew install tidy
```</p></blockquote>

<h2>Tidy usage</h2>

<p>To pretty print <code>input.xml</code>  and save the output to <code>pretty_printed.xml</code></p>

<p>``` bash</p>

<blockquote><p>tidy -xml -i input.xml > pretty_printed.xml
```</p></blockquote>

<p>There are several <a href="http://tidy.sourceforge.net/docs/quickref.html#break-before-br">command line options</a>. For example, to change the case of tabs to uppercase:</p>

<p>``` bash</p>

<blockquote><p>tidy -xml --uppercase-tags y  -i input.xml
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiline regular expressions in Javascript]]></title>
    <link href="http://gotofritz.net/blog/geekery/multiline-regular-expressions-javascript/"/>
    <updated>2015-09-19T23:39:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/multiline-regular-expressions-in-javascript</id>
    <content type="html"><![CDATA[<p>There are no flags to match multi-line text is in JS. But it can be done with a character class.</p>

<!--more-->


<h2>The problem</h2>

<p>In both cases below we expect <code>\d.line</code> to match <code>0\nline</code> but it doesn't work - because newlines are not matched by the <code>.</code> character class.
```js
"line 0\nline1".match(/\d.line/)
// null</p>

<p>// ES6
<code>line 0
line1</code>.match(/\d.line/)
// null
```</p>

<h2>The solution</h2>

<p>Use the <code>[^]</code> character class, which is equivalent to <code>.</code> but with the newline added in
```js
"line 0\nline1".match(/\d[<sup>]line/)</sup>
// ["0
// line"]</p>

<p>// ES6
<code>line 0
line1</code>.match(/\d[<sup>]line/)</sup>
// ["0
// line"]
```</p>

<p>For more info, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes">visit the relevant MDN page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Software Update from the Command Line]]></title>
    <link href="http://gotofritz.net/blog/geekery/os-x-software-update-from-command-line/"/>
    <updated>2015-08-25T00:41:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/os-x-software-update-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Software updates can be quite tedious - you have to click a lot of buttons, then get into the Apple Store etc. But you can avoid all that by running it from the command line.</p>

<!--more-->


<p>``` bash
$ sudo softwareupdate -i -r
Password:
Software Update Tool
Copyright 2002-2012 Apple Inc.</p>

<p>Finding available software</p>

<p>Downloaded OS X Update
Installing OS X Update
Done.
```</p>

<p>Which breaks down as</p>

<dl class="code-breakdown">
  <dt>sudo</dt>
  <dd>needs to run as admin (you will have to enter a password after you type return)</dd>

  <dt>softwareupdate</dt>
  <dd>this is the command line utility that does the job</dd>

  <dt>-i</dt>
  <dd>install - you can specify what to install, all, or just...</dd>

  <dt>-r</dt>
  <dd>...the recommended updates</dd>
</dl>


<p>This is all there is to it.</p>

<h2>Slightly more complex usage of softwareupdate</h2>

<p>You can ask for a list of available software before you install:
```  bash
$ softwareupdate -l
Software Update Tool
Copyright 2002-2012 Apple Inc.</p>

<p>Finding available software
Software Update found the following new or updated software:
  * MacBookAirEFIUpdate2.4-2.4</p>

<pre><code>   MacBook Air EFI Firmware Update (2.4), 3817K [recommended] [restart]
</code></pre>

<ul>
<li>ProAppsQTCodecs-1.0
   ProApps QuickTime codecs (1.0), 968K [recommended]</li>
<li>JavaForOSX-1.0
   Java for OS X 2012-005 (1.0), 65288K [recommended]
```</li>
</ul>


<p>You can then install individual packages by simply naming them
<code>bash
$ sudo softwareupdate -i JavaForOSX-1.0
</code></p>

<p>Or you can ignore some packages and then install everything else (<code>-a, all</code>)
<code>bash
$ softwareupdate --ignore JavaForOSX-1.0
$ sudo softwareupdate -i -a
</code></p>

<p>Note that the --ignore flag will persist until it is reset with <code>--reset-ignored</code> (which clears <em>all</em> flags)
<code>bash
$ softwareupdate --reset-ignored
</code></p>

<p>More options can be viewed with <code>softwareupdate -h</code> or <code>man softwareupdate</code></p>
]]></content>
  </entry>
  
</feed>
