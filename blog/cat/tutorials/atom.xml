<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorials | Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/blog/cat/tutorials/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2015-01-10T02:08:25+01:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Copying sourcefiles without .svn folders with cpio]]></title>
    <link href="http://gotofritz.net/blog/tutorials/copying-files-matching-pattern-cpio"/>
    <updated>2013-03-23T10:23:14+01:00</updated>
    <id>http://gotofritz.net/blog/tutorials/copying-files-matching-pattern-cpio</id>
    <content type="html"><![CDATA[<p>Sometimes you need to copy your local version of a project under subversion to a new location, perhaps because you want to add it to a different repository. Here's a couple of ways of doing it.</p>

<!--more-->


<p><div><script src='https://gist.github.com/2589861.js?file=find-without-svn.sh'></script>
<noscript><pre><code>cd DIR_FROM
find .  \! \( -name . -or -name &quot;.svn&quot; -or -path &quot;*/.svn/*&quot; \) -print  | cpio -padv PTH_TO</code></pre></noscript></div>
</p>

<h2>Finding files matching a set of conditions</h2>

<p>The shell command to find files matching certain conditions is called, unsurprisingly, <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?find">find</a>, a powerful command. It includes 'actions' which can be performed on the found files. The command below finds all the files we want to copy and ignores the rest.</p>

<p><code>
find DIR_FROM \! \( -path "*/.svn/*" -or -name ".svn" \) -print
</code></p>

<p>It breaks down as</p>

<dl class="code-breakdown">
<dt>find DIR_FROM</dt>
<dd>run the find command, searching in DIR_FROM (in OS X, you can just drag DIR_FROM from the Finder to the Terminal window instead of typing it all out)</dd>

<dt>\!</dt>
<dd>since we are ignoring files, use ! (negative) to find files which do NOT match the pattern. The slash is needed, because esclamation marks mean something to Terminal, and we want Terminal to ignore that</dd>

<dt>\( </dt>
<dd>the parenthesis groups conditions together, since we have more than one. Again, the slash is needed because we want Terminal to ignore its special meaning</dd>

<dt>-path "*/.svn/*"</dt>
<dd>this is the condition "the path includes '/.svn' anywhere in it"</dd>

<dt>-or</dt>
<dd>adds conditions together, matching any of them</dd>

<dt>-name ".svn"</dt>
<dd>this is the condition "the name of the files is exactly '.svn'</dd>

<dt>\)</dt>
<dd>ends the group of condition. The negative ! applies to all of them.</dd>

<dt>-print</dt>
<dd>At this stage, just prints the names out on the terminal. Always safe to run this first, to double check the results are as expected.</dd>
</dl>


<h2>Delete all .svn directories from a project</h2>

<p>In an ideal world, I'd run the find command above with "-print", check it's ok, then I'd run it again with "-copy". Except that there is no "-copy" action, so it's back to <code>man find</code> to work out an action that will help.</p>

<p>It turns out the simplest way is to copy all files first, then find the .svn ones and use the '-delete' action to get rid of them.
<code>bash
cp -R DIR_FROM DIR_TO
find DIR_FROM \( -path "*/.svn/*" -or -name ".svn" \) -delete
</code></p>

<dl class="code-breakdown">
<dt>cp -R DIR_FROM DIR_TO</dt>
<dd>this is how you copy a directory in Terminal. cp is the command to copy files on the shell, but it won't do directories. cp -R is used to copy directories. R stands for "recursive", it is common to many other shell commands</dd>

<dt class="long-line">find DIR_TO \( -path "*/.svn/*" -or -name ".svn" \)</dt>
<dd class="long-line">almost as before - but note there is no \! this time. That's because we want to find the files we don't need, rather than ignore them.</dd>

<dt>-delete</dt>
<dd>deletes the files it finds. I suggest to try it with -print first, just to double check</dd>
</dl>


<p>The above works fine, but read on for another way of doing it.</p>

<h2>Finding files and passimg them to the cp command</h2>

<p>My initial approach when trying to move files across was to use find with the '-exec' action and the cp command, like this:</p>

<p><code>
find DIR_FROM \! \( -path "*/.svn/*" -or -name ".svn" \) -exec cp {} DIR_TO \;
</code>
This looks good at first, but there's a problem - it finds and copies the files, but it doesn't preserve the directory structure, and the files end up all in the same directory. Apparently on Linux you can tell cp to preserve the directory structure with the -b --parent option, but this doesn't work on OS X.
<code>
find DIR_FROM \! \( -path "*/.svn/*" -or -name ".svn" \) -exec cp -b --parent {} DIR_TO \;
</code></p>

<h2>Using cpio to copy files</h2>

<p><a href="http://en.wikipedia.org/wiki/Cpio">cpio</a> is an archiving utility similar to tar, but it has an important difference - it can copy files into and archive and then out again to a different location, without actually creating an archive in between. In other words, it copies directory structures. The only snag is that you have to cd to the directory where you are copying from.
<code>
cd DIR_FROM
find .  \! \( -name . -or -name ".svn" -or -path "*/.svn/*" \) -print  | cpio -padv PTH_TO
</code></p>

<dl class="code-breakdown">
<dt>cd DIR_FROM</dt>
<dd>move to the directory you are copying - this is where the directory structure will be calculated from</dd>

<dt class="long-line">find . \! \(  -name . -or -path "*/.svn/*" -or -name ".svn" \)</dt>
<dd class="long-line">similar to the previous find command, but note how DIR_FROM is replaced with '.', which means 'here'. Also, there is an extra condition, `-name .`, without which empty .svn directories would be created.</dd>

<dt>-print </dt>
<dd>prints out the filename</dd>

<dt>|</dt>
<dd>pass the results of the command on the left (find) to the one on the right (cpio)</dd>

<dt>cpio -padv PTH_TO</dt>
<dd>run the cpio command in 'move files across' mode (p) with options d (create directory structure) -a (reset access time on copied files) -v (verbose, i.e., show me what you are doing)</dd>
</dl>


<p>And that's that - exciting Unix fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Google Apps Script]]></title>
    <link href="http://gotofritz.net/blog/tutorials/getting-started-part-1"/>
    <updated>2010-09-30T17:36:57+02:00</updated>
    <id>http://gotofritz.net/blog/tutorials/getting-started-part-1</id>
    <content type="html"><![CDATA[<p>Google Apps Script (GAS) is an implementation of Javascript that runs on Google cloud servers and allows access to Google services. Support is still somewhat flaky, but if you are already familiar with Javascript it is an exciting technology to get into. In this simple Google Apps Script primer, we will use a Google Docs spreadsheet to learn the basics</p>

<!--more-->


<h2>A generic spreadsheet utils</h2>

<p>The easiest way to get started with GAS is by playing with spreadsheets, so let's create one in Google Docs. The aim is to create a generic collection of utilities to perform simple text manipulation tasks. Let's start from the very beginning.</p>

<h3>Signing up to Google Docs</h3>

<p>If you have never used Google Docs before, you'll need a Google Apps account - confusingly, this is not the same as a GMail account, although many people end up using the same login name. In fact you can register at <a href="http://docs.google.com/">docs.google.com</a> using any email address you want.</p>

<p>Either way, create a new spreadsheet, give it a name (for example GAS utils), and then you are ready to go.</p>

<h2>Hello world</h2>

<p>Let's start with the traditional 'Hello World' script. From the app menu underneath the Google Docs log, select Tools, then Scripts, and Script editor.</p>

<br><img src="/a/2010-09-30-getting-started-part-1/google-apps-script-menu.png"><br>


<p>A popup window will appear - that's where you are going to write your scripts. It has some useful features (code completion, parenthesis balancing) and some annoying ones (code formatting), but you have no choice in the matter.</p>

<p>In that editor you will create a list of Javascript functions - think of each function as an entry in a menu like "Convert to upper case", "Generate emails" or, indeed, "Hello World". Later on, all these function WILL, in fact, become entries in a menu. You can create all sort of complicated classes and inheritance chains, and so forth, but ultimately you will only be able to run one of these functions - if you are planning anything fancier you will have to wrap your code into a function in the global scope.</p>

<p>The script editor opens with an unsaved script, pre-populated with an empty function
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> change the function name to helloWorld, and enter this code: <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">helloWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/a/2010-09-30-getting-started-part-1/google-apps-script-menu.png"></p>

<p>Then click on the save icon - the first time you do so, the editor will ask you to give a name to the script (I used TEST). Once saved, the editor will populate the pulldown menu above the script with the name of all functions it can run - in this case there is only one, helloWorld. Incidentally, you can stop a function appearing in the menu by ending its name with an underscore, e.g. function test_ () { ...</p>

<p><img src="/a/2010-09-30-getting-started-part-1/google-apps-script-helloworld.png"><br></p>

<p>Click on the triangle next to the function name and there you have it - a simple alert window with a message in it.</p>

<h2>Google Apps Script reference</h2>

<p>That was a simple script with a single instruction in it. It told the global <a href="http://code.google.com/googleapps/appsscript/class_browser.html">Browser object</a> (a GAS object, not a  standard Javascript one) to run the msgBox method. The Browser object is one of a few global GAS objects and classes available to you. The other global object (or Service, in GAS talk) you will be using is <a href="http://code.google.com/googleapps/appsscript/service_spreadsheet.html">SpreadsheetApp</a>. Its methods return objects of class <a href="http://code.google.com/googleapps/appsscript/class_spreadsheet.html">Spreadsheet</a>, <a href="http://code.google.com/googleapps/appsscript/class_sheet.html">Sheet</a>, and <a href="http://code.google.com/googleapps/appsscript/class_range.html">Range</a>, so you may want to have a look around the GAS reference to see what their available methods are. You'll see a lot more objects in the reference - they deal with other apps like GMail or Google Finance, but that's a topic for other tutorials.</p>

<h2>How to run functions in GAS</h2>

<p>That's all well and good, but will you have to open the script editor and select a function name from the menu every time you want to run a function? Function names are often geeky, and having to open a popup window is not ideal. An alternative is "Manage...", under the Script menu - it shows a pop up list of all functions. But that comes right in the middle of the spreadsheet, covering most of it. That means that you can't select a cell for example. Another non-starter then. Luckily, there is another way - you can actually create menus and have them go in the menu bar, to the right of Help</p>

<p>The spreadsheet class has an <a href="http://code.google.com/googleapps/appsscript/class_spreadsheet.html#addMenu">addMenu</a> method - it takes a string as name, and an array for the entries. You can create a list of functions, put their name into an array, and feed that to  addMenu, and then use that to create the menu (note the 'null' to create a separator):
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">helloWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">ciaoWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Ciao World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">salutWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Salut World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">createMenu</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">menuEntries</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;Say it in English&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;hellowWorld&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;Dillo in Italiano&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;ciaoWorld&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;En Fran??ois aussi&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;salutWorld&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>   <span class="p">];</span>
</span><span class='line'>   <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSpreadsheet</span><span class="p">().</span><span class="nx">addMenu</span><span class="p">(</span> <span class="s2">&quot;TEST MENU&quot;</span><span class="p">,</span> <span class="nx">menuEntries</span> <span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> Save it, find createMenu in the Script editor, run it and there you have it - your very own custom menu.<br>
<img src="/a/2010-09-30-getting-started-part-1/google-apps-script-submenu.png"></p>

<h2>Using trigger to create menus in Google Docs spreadsheet</h2>

<p>So that's all well and good, but you still have to run createMenu manually from the Script editor or the Manage pop up. Spreadsheet have some built in event handler (or triggers) - at the time of writing they are document open, cell edit, and form submit.</p>

<h3>The onOpen trigger</h3>

<p>When a spreadsheet is opened, the GAS engine generates an open event, and will run functions you have associated with that event. You can do that in two ways.</p>

<p>The Script editor has a Triggers menu, which lets you associate functions to events (or call them at regularl intervals). In the case of the open event though, it is much simpler to rename createMenu to onOpen - the GAS engine will automatically run it when the document is opened. Try that, save the script, and close and re-open the spreadsheet - the menu should now appear automatically (it may take a few seconds for it to happen)
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">helloWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">ciaoWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Ciao World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">salutWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Browser</span><span class="p">.</span><span class="nx">msgBox</span><span class="p">(</span><span class="s2">&quot;Salut World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">onOpen</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">menuEntries</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;Say it in English&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;hellowWorld&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;Dillo in Italiano&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;ciaoWorld&quot;</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;En Fran??ois aussi&quot;</span><span class="p">,</span> <span class="nx">functionName</span> <span class="o">:</span> <span class="s2">&quot;salutWorld&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>   <span class="p">];</span>
</span><span class='line'>   <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSpreadsheet</span><span class="p">().</span><span class="nx">addMenu</span><span class="p">(</span> <span class="s2">&quot;TEST MENU&quot;</span><span class="p">,</span> <span class="nx">menuEntries</span> <span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Part 2</h2>

<p>I have abandoned the idea of a complete serious of tutorials, but I have created a <a href="/blog/weekly-challenge/google-apps-script-boilerplate/">a couple of GAS boilerplates</a> as one of my <a href="/blog/cat/weekly-challenge/">weekly challenges</a></p>

<h2>Further reading</h2>

<p>Google has some <a href="http://code.google.com/googleapps/appsscript/articles.html">GAS tutorials</a> which are well worth going through.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Unix side of OS X]]></title>
    <link href="http://gotofritz.net/blog/tutorials/unix-osx-folder-hierarchy"/>
    <updated>2010-07-20T16:01:24+02:00</updated>
    <id>http://gotofritz.net/blog/tutorials/unix-osx-folder-hierarchy</id>
    <content type="html"><![CDATA[<p>The great thing about OS X is that it has Unix under the bonnet. But, knowing where to put things can be confusing if you are new to it. Here's a quick guide to the Unix folders in OS X.</p>

<!--more-->


<h2>Using Apple Terminal</h2>

<p>I assume you know how to use the Terminal to look around OS X. If not, then find Terminal in Applications / Utilities, go in the preferences to change the window background colours to something geekier, and have a look at one of the many Unix primers out there, like this <a href="http://www.ee.surrey.ac.uk/Teaching/Unix/">UNIX Tutorial for Beginners</a> from the University of Surrey. Or even better, <a href="http://www.matisse.net/OSX/">Matisse Enzer</a> gives away the <a href="http://www.matisse.net/OSX/umox/chap.two.pdf">PDF of the chapter covering the Terminal from his Unix for Mac OS X 10.4 Tiger book</a>. The good thing about Unix - it doesn't change that much. Those guides are still relevant.</p>

<p>OS X uses a simple naming convention for folder names: if they start with an upper case letter (e.g., /Users) they are Apple ones, otherwise (e.g. /usr) they are Unix. More or less.</p>

<h2>OS X folder structure</h2>

<p>You should be already familiar with most of these.</p>

<dl class="code-breakdown">
<dt>/Applications</dt>
<dd>Cocoa and Carbon apps. OS X applications are in fact directories that looks like files. If you list them on Terminal you can see what's in these folders, for example:
        `ls /Applications/Chess.app/Contents/` (you can also get to that by ctrl-clicking on the app in Finder and choosing 'show package content')</dd>

<dt>/Library</dt>
<dd>Frameworks and components for third party applications. It also includes a /Library/Fonts folder, with all the fancy fonts installed for all users.</dd>

<dt>/System/Library</dt>
<dd>Frameworks and components used by OS X. It also includes a /System/Library/Fonts folder, with the minimum set of system fonts shared by all users. If you delete any fonts from here you are in trouble.</dd>

<dt>/Users</dt>
<dd>Users' folders, hidden from each other. And yes - they also have their own fonts folder ( /Users/username/Library/Fonts ) which are loaded up when you login as that user.</dd>

<dt>/.Spotlight-V100</dt>
<dd>A hidden folder that stores Spotlight's indexed metadata. Each OS X file and folder is associated with metadata - you can view it in the command line with the command mdls, e.g. `mdls ~/` You can query the metadata index created by spotlight directly on the command line with the command mdfind.</dd>

</dl>


<h2>FreeBSD folder structure</h2>

<p>Unix is an old system - when it was created every byte counted, which is why they called directories 'usr' and not 'user', to save just the one letter. It also made sense to keep what changed often and needed regular backing up separate from what changes rarely. After all, <a href="http://www.tallrite.com/weblog/blogimages/refs2007/5MbHardDrive1956.jpg">this was the equivalent of four floppy disk</a> in those days. Mind you, that makes sense even today, as disk storage may be cheap but backing up isn't.</p>

<dl class="code-breakdown">
<dt>/</dt>
<dd>This should contain the minimum needed to boot, restore and repair the filesystem. The idea is to be able to have all the core files on small portable storage device.</dd>

<dt>/bin</dt>
<dd>binaries used by admins and normal users. This is not the complete set of all the commands available on the system - just the minimum needed for booting and restoring (the rest are in separate places, see below). For example, in OS X 10.6 these are:

        [ bash cat chmod cp csh date dd df domainname echo ed expr hostname kill ksh launchctl link ln ls mkdir mv pax ps pwd rcp rm rmdir sh sleep stty sync tcsh test unlink unrar wait4path zsh</dd>

<dt>/dev</dt>
<dd>devices - i.e., drivers. In Unix they are setup to look and act as if they were files</dd>

<dt>/etc</dt>
<dd>system configurations, specific for a machine. These are static, i.e. only changeable by admins, and are not executable binaries. Classic examples /etc/hosts, /etc/group, /etc/passwd</dd>

<dt>/opt</dt>
<dd>Application packages added on. Used, for example, by MacPorts</dd>

<dt>/sbin</dt>
<dd>system binaries. These are only used by root or the system. This is the minimum set needed for booting / restoring the system. The other system binaries are in /usr/sbin and /usr/local/sbin

        Typical examples include mount, reboot, fsck</dd>

<dt>/tmp</dt>
<dd>temporary files. These are deleted when the system reboots. /var/tmp is an alternative that doesn't.</dd>

<dt>/usr</dt>
<dd>Non root hierarchy. Static, i.e. shouldn't need to change unless an admin installs something.</dd>

<dt>/usr/bin</dt>
<dd>This is where most commands available to all users are. There's loads and loads of them, from python to who to calendar to ssh...</dd>

<dt>/usr/include</dt>
<dd>These are include libraries used by C programs. Of no interest to most users. C libraries get special treatment because at the time Unix was created C was 'the' programming language - indeed, early implementation of Unix were written in C, as opposed to assembly as it was then the norm.</dd>

<dt>/usr/lib</dt>
<dd>These are dynamic libraries used by packages and programs. Normally created as a side effect of installations.</dd>

<dt>/usr/local</dt>
<dd>This is where software for a specific machine should go. For example mysql, php5, etc. Within this folder the same hierarchy as root holds:

        /usr/local/bin for binaries,<br>
        /usr/local/etc for config files,<br>
        /usr/local/include for C libraries,<br>
        /usr/local/lib for shared binaries that are not exectuded directly,<br>
        /usr/local/sbin for system libraries run locally<br>
        /usr/local/share for read only libraries</dd>

<dt>/usr/share</dt>
<dd>Read only files, like man pages. If you install a geo-location library like GeoIP, its data could go here</dd>

<dt>/usr/X11 and /usr/X11R6</dt>
<dd>This is used by the X11 - a full on Unix windows system available on your Mac. You may have come across it if using Gimp, the free Photoshop alternative. X11R6 is a symbolic link to X11</dd>

<dt>/var</dt>
<dd>Variable data. The opposite of static, i.e. users (or the system) change them all the time</dd>

<dt>/var/lib</dt>
<dd>This is non-shareable state information for apps. Users shouldn't need to touch this</dd>

<dt>/var/log</dt>
<dd>Log files, for example from your Apache web server</dd>

<dt>/var/run</dt>
<dd>These are files related to a currently running instance of a program or package. Typically process id (.pid) files and such.</dd>

<dt>/var/spool</dt>
<dd>This holds queues of data that need to be dealt with at some stage by an admin or a package. It will be typically deleted after processsing. /var/spool/mqueue holds the outgoing mail queue, for example</dd>

<dt>/var/tmp</dt>
<dd>This is temporary data, but unlike /tmp it is preserved between system reboots</dd>

</dl>


<h2>More information</h2>

<p>That should give you a fair idea of what goes where, and why the Apache webserver config files are, say, in /etc/apache2/</p>

<p>There's plenty information online about Unix  - for example you can start from the article <a href="http://www.pathname.com/fhs/pub/fhs-2.3.html">Filesystem Hierarchy Standard</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch unrar from the command line on Mac OS X]]></title>
    <link href="http://gotofritz.net/blog/tutorials/batch-unrar-command-line-os-x"/>
    <updated>2009-02-12T03:59:11+01:00</updated>
    <id>http://gotofritz.net/blog/tutorials/batch-unrar-command-line-os-x</id>
    <content type="html"><![CDATA[<p>Rar is a popular archive format on the web. When I need to unarchive several rar files at once, I use <a href="http://www.rarlab.com/download.htm">RarLab's command line tool</a>. Here's how.</p>

<!--more-->


<p>Unlike its cousins .zip or .tar, to handle .rar archives you still need a third party app such as <a href="http://www.unrarx.com/">UnRarX</a>, <a href="http://www.zipeg.com/">Zipeg</a>, or <a href="http://shop.smithmicro.com/">Stuffit</a>. Rarlab offers the two freeware command line tools.</p>

<h2>Downloading rar and unrar</h2>

<p>After you <a href="http://www.rarlab.com/download.htm">download rar from RarLab</a>'s download section, you should find a file called something like rarosx-3.8.0.tar.gz depending on the version you downloaded. If you double click on it, OS X will unarchive and create a folder called rar, which contains three "Unix executable files", and a bunch of text / html files. The executables are the command line rar and unrar, plus a support file used for installation. Rar is a demo that expires after 40 days, so don't bother installing it unless you are planning to buy the licence (instructions are in one of the html files in the folder). Luckily unrar is freeware and you can just use it.</p>

<h2>Installing unrar on OS X</h2>

<p>To install unrar, open the Terminal application (Applications/Utilties/Terminal) and  navigate to the rar folder. If you don't know how, the easiest way is to type 'cd ' with a space after it, then drag the rar folder onto the terminal window - Terminal will type out the path to the folder for you. Typicall on OS X Leopard it would be
<code>cd Downloads/rar</code></p>

<p>Once in that folder, type the following command
<code>
sudo install -c -o  SHORTNAME unrar /usr/local/bin
</code>
where SHORTNAME is the short version of your user name. If you are not sure what it is, just type
<code>whoami</code> and Terminal will tell you.</p>

<p>Breaking down the command:</p>

<dl class="code-breakdown">
<dt>sudo</dt>
<dd>runs this command in administrator mode, a security measure to prevent viruses installing software at will; you will be asked for your password when you type return</dd>

<dt>install</dt>
<dd>call the 'install' utility, which does just what it says on the tin</dd>

<dt>-c</dt>
<dd>tells the install utility to copy the unrar file to its destination</dd>

<dt>-o SHORTNAME</dt>
<dd>tells the install utility to make you the owner of the binary, so that you won't have to type a password every time you want to use it</dd>

<dt>unrar</dt>
<dd>the file to install - if you want to install rar instead, replace unrar with rar here</dd>

<dt>/usr/local/bin</dt>
<dd>the place where this will be installed - the /usr/local/bin folder is a common Unix location for binaries</dt>
</dl>


<p>After pressing ENTER and typing your password, you will be able to use unrar on the command line. To test it, type the following followed by ENTER:
<code>
cd
unrar
</code>
where</p>

<dl class="code-breakdown">
<dt>cd</dt>
<dd>takes you out of the rar folder and back to your home folder, because we want to test this will work from any location, and this is the fastest way to move out of the rar folder</dd>

<dt>unrar</dt>
<dd>this will run unrar, and since you haven't passed any parameters, it should just print out instructions on how to use it.</dd>
</dl>


<h2>Using unrar on the command line on Mac OS X</h2>

<p>Using unrar is very simple - in the Terminal window (Applicatons/Utilities/Terminal) you simply navigate to the folder where you want the archive to be <em>extracted to</em>. If you are not sure how to do that, the simplest way would be to type 'cd ', including the space at the end, then drag the folder you want to navigate to onto the window, and Terminal will type its path for you. Then you type the unrar command, for example:
<code>
cd ~/Documents/extracted_files
unrar x ~/Downloads/test-archive.rar
</code>
Here's what the example above does:</p>

<dl class="code-breakdown">
<dt>cd ~/Documents</dt>
<dd>navigate to the Documents folder</dd>

<dt>unrar</dt>
<dd>calls the unrar utility</dd>

<dt>x</dt>
<dd>runs command 'x' within the unrar utility; this will extract files maintaining the directory structure within the archive. If you type 'e', instead, all files will be extracted without enclosing folders</dd>

<dt>~/test-archive.rar</dt>
<dd>this is the location of the archive - again, the easiest way to do that is to drag the actual file onto the Terminal window</dd>
</dl>


<p>That was the simplest way to use the utilities. In fact, unrar offers several options, which you can discover by typing 'unrar' followed by return on the terminal, and reading the instructions. As an example, the following
<code>
unrar x -pSECRET -y archive.rar
</code>
can be broken down as</p>

<dl class="code-breakdown">
<dt>unrar x</dt>
<dd>tells unrar to run the 'x' command, which is 'extract files to current directory maintaining directory structure'</dd>

<dt>-pSECRET</dt>
<dd>use option -p, password, and passes the string SECRET as the password - yes, without a space in between</dd>

<dt>-y</dt>
<dd>uses option -y, 'assumes yes on all queries'</dd>

<dt>archive.rar</dt>
<dd>the name of the file to be extracted</dd>
</dl>


<h2>Using unrar on the command line to unarchive a batch of files</h2>

<p>This is where the command line version of unrar comes into its own - try and uncompress a bunch of password protected archives with any other utility, and see what I mean. To unarchive a batch of files, we'll use the 'find' command (which does exactly what it says), and pass its results to unrar.
<code>
cd ~/Documents/
find ~/Downloads/ -name "*.rar" -exec unrar -pSECRET -y -ad x {} \;
</code></p>

<dl class="code-breakdown">
<dt>cd ~/Documents/</dt>
<dd>navigate to the Documents folder</dd>

<dt>find</dt>
<dd>starts the find utility</dd>

<dt>~/Downloads/</dt>
<dd>tells the find utility to look for files in the Downloads directory within your home (that's what ~ stands for). If your rar files are somewhere else, just replace the folder name with the one you need. If the rar files are in the same directory, you can just type a dot, '.', which in Unix means 'the current directory'</dd>

<dt>-name "*.rar"</dt>
<dd>tells find to look for files which ends in .rar - the * before it means 'anything'. If you want, say, to look for all files which start with b and end in .rar, you'd type "b*.rar" instead</dd>

<dt>-exec unrar</dt>
<dd>tells find to pass the results to unrar. If you want to test before you start extracting, replace this with -print, and don't type the following commands. This will just print a list of files.</dd>

<dt>-pSECRET</dt>
<dd>passes password SECRET to unrar; ignore if you don't need it</dd>

<dt>-y</dt>
<dd>tells unrar to answer 'yes' to all queries, so it won't hang waiting for you to type it in manually</dd>

<dt>-ad</dt>
<dd>for each archive, this will create a folder of the same name as the archive, and save all files in it. This is very useful, otherwise if your archives do not have any folders inside them, all files would be mixed together</dd>

<dt>x</dt>
<dd>tells unrar which command to run</dd>

<dt>{} \;</dt>
<dd>this is used by find, {} menas the file you just found and \; ends it all</dd>
</dl>


<p>Now you can go make yourself a cup of tea, and all the archives will be magically extracted when you come back. Well not always <em>all</em> - occasionally there are quirks and unrar fails. I always check the Terminal window for errors (APPLE-F for find, and then look for word 'error') and if there were any errors, I will re-extract that particular archive again with a different utility. But errors don't happen too often, and using the command line tool saves a lot of time.</p>
]]></content>
  </entry>
  
</feed>
