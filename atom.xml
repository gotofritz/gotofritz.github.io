<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fabrizio (Fritz) Stelluto]]></title>
  <link href="http://gotofritz.net/atom.xml" rel="self"/>
  <link href="http://gotofritz.net/"/>
  <updated>2016-01-29T00:23:28+01:00</updated>
  <id>http://gotofritz.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backing up a hard disk to another in OS X]]></title>
    <link href="http://gotofritz.net/blog/geekery/backing-up-hard-disk-os-x/"/>
    <updated>2016-01-16T22:44:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/backing-up-a-hard-disk-to-another-in-os-x</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Time_Machine_(OS_X)">Time Machine</a> does its own backup magic, but sometimes you just simply want two identical copies of the same hard disk. For that <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a> is the way to go.</p>

<!--more-->


<p>Rsync is a utility you run by typing commands in Terminal, and it was designed exactly for doing that one job - it looks at one source folder and all its subfolders, finds all the files in there, then look at the destination folder and copies over only what needs to be copied, making it very fast. It&#8217;s got a ton of options, but all you need is to find that one command that works for you and use it again and again as needed.</p>

<h2>Syncing two hard disks with rsync</h2>

<p>Let&#8217;s say you have two hard disks, &#8220;ORIGINAL&#8221; and &#8220;BACKUP DISK&#8221;. For the first transfer, you may as well copy manually all the files from ORIGINAL to BACKUP DISK by dragging them, rsync doesn&#8217;t do it any better or faster. From then on, whenever you want to backup the disk (every day, every week, whatever) you can start with this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rsync -aS --delete --progress  /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="se">\ </span>DISK/
</span></code></pre></td></tr></table></div></figure>


<p>The command breaks down as follows:</p>

<dl class="code-breakdown">
  <dt>rsync</dt>
  <dd>calls the utility</dd>

  <dt>-a</dt>
  <dd>turns on archive mode, which basically ensures all subfolders, permissions and files parameters are copied </dd>

  <dt>S</dt>
  <dd>if there wasn&#8217;t already a dash for -a, this would be -S. This compacts sparse files for efficiency </dd>

  <dt>&#8211;delete</dt>
  <dd>this ensures that any files in the destination that were not there in the source will be deleted</dd>

  <dt>/Volumes/ORIGINAL</dt>
  <dd>the original</dd>

  <dt>/Volumes/BACKUP\ DISK</dt>
  <dd>the destination. Note that I have typed a backslash before the space after BACKUP, BACKUP\ DISK - that tells Terminal that the word isn&#8217;t finish yet, and the space is part of the word</dd>
</dl>


<p>If you want to skip some files or folders, you can add their paths to the command. Note that you have one <code>--exclude</code> options for every patter you want to exclude. Also note the <code>*</code> wildcards, which basically means &#8220;anything here&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rsync -aS --delete --progress --exclude *.Trash* --exclude /that_file.txt
</span><span class='line'>   --exclude /other_file.jpg /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="se">\ </span>DISK/
</span></code></pre></td></tr></table></div></figure>


<p>If you have a lot of excludes it makes sense to put the list in a file, and then tell rsync to use that. It makes sense even if you only have a few files, because then you can easily add and remove things from there without having to change the command - as you start playing with rsync you soon find out there are a few system folders you don&#8217;t want to backup, like Spotlight indices and so on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rsync -aS --delete --progress --exclude-from ~/.rsync_exclude_list
</span><span class='line'>  /Volumes/ORIGINAL/ /Volumes/BACKUP<span class="se">\ </span>DISK/
</span></code></pre></td></tr></table></div></figure>


<p>and .rsync_exclude_list can have all the patterns in there, one per line. The file  can be named whatever you want - I have put it in the home folder (that&#8217;s what ~/ at the beginning means) and used a name that starts with a dot because it works well with my <a href="http://gotofritz.net/blog/geekery/storing-bash-profile-and-so-on-on-github/">dotfiles</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># list of files not to be included when running alias backupext</span>
</span><span class='line'>*.Trash*
</span><span class='line'>.TemporaryItems*
</span><span class='line'>.DocumentRevisions-*
</span><span class='line'>.Spotlight-*
</span></code></pre></td></tr></table></div></figure>


<h2>Making things easier with an alias</h2>

<p>Instead of trying to remember that command every time you need to back up, you can create an alias, i.e. a shortcut to the command. Depending on your setup, you can just add it to your bash_profile file. If you use <a href="http://gotofritz.net/blog/geekery/storing-bash-profile-and-so-on-on-github/">dotfiles</a>, just add it to the .alias file and then run bootstrap.sh again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># this will create it if it doesn&#39;t exist. Nano is a text editor that runs inside</span>
</span><span class='line'><span class="c"># Terminal. It&#39;s simple and it shows the shortcuts at the bottom (^ = control key)</span>
</span><span class='line'>nano ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># or if you use the sublime text editor...</span>
</span><span class='line'>subl ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># then type this anywhere in the file, in a line of its own</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">backupext</span><span class="o">=</span><span class="s2">&quot;rsync -aS --delete --progress --exclude-from ~/.rsync_exclude_list</span>
</span><span class='line'><span class="s2">  /Volumes/ORIGINAL/ /Volumes/BACKUP\ DISK/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># to save and quit in nano press CTRL-X - it will ask you to save the file</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Chrome navigating back when swiping horizontally]]></title>
    <link href="http://gotofritz.net/blog/howto/stop-chrome-navigating-back-when-swiping-horizontally/"/>
    <updated>2016-01-09T02:07:00+01:00</updated>
    <id>http://gotofritz.net/blog/howto/stop-chrome-navigating-back-when-swiping-horizontally</id>
    <content type="html"><![CDATA[<p>If you try to use Google Chrome on a small window on a laptop, perhaps because you are comparing two web pages side by side, swiping left or right doesn&#8217;t move the page around, but it jumps to the previous or next page. Here&#8217;s how to prevent that on OS X.</p>

<!--more-->


<p>The following commands, typed in Terminal, will stop that most annoying behaviour.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults write com.google.Chrome.plist AppleEnableSwipeNavigateWithScrolls -bool FALSE
</span><span class='line'>defaults write com.google.Chromium.plist AppleEnableSwipeNavigateWithScrolls -bool FALSE
</span><span class='line'>defaults write com.google.ChromeCanary.plist AppleEnableSwipeNavigateWithScrolls -bool FALSE
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Avoid sudo npm]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm/"/>
    <updated>2015-12-14T22:12:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-avoid-sudo-npm</id>
    <content type="html"><![CDATA[<p>You know the story. You try to do <code>npm install hipster-package</code> on OS X and you get a whole load of errors; the easy way out is to just use <code>sudo npm install</code>. Everyone, however, keep saying how that is bad idea. But how do you make npm work without sudo? It&#8217;s quite simple actually.</p>

<!--more-->


<h2>On your dev machine</h2>

<p>If you are the typical js developer who works on OS X, all you need to do is just change the owner of the node binaries</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># this should solve the problem</span>
</span><span class='line'>sudo chown -R <span class="nv">$USER</span> /usr/local
</span><span class='line'>
</span><span class='line'><span class="c"># this may also help</span>
</span><span class='line'>sudo chmod -R 777 ~/.npm
</span></code></pre></td></tr></table></div></figure>


<p>If you are working on projects and someone has already checked in a package.json run with sudo, you need to make sure the whole team changes the permissions of at the same time</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># is someone has checked in a version of package.json with the wrong permissions</span>
</span><span class='line'>chmod -775 package.json
</span></code></pre></td></tr></table></div></figure>


<p>Unix purists will find this hacky; and rightly so. The <em>proper</em> way of doing is to create a group for everyone who should be allowed to run npm, even if it&#8217;s just you. However for a simple dev machine that is good enough.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want To Move To Berlin?]]></title>
    <link href="http://gotofritz.net/blog/living/so-you-want-to-move-to-berlin/"/>
    <updated>2015-11-21T23:54:00+01:00</updated>
    <id>http://gotofritz.net/blog/living/so-you-want-to-move-to-berlin</id>
    <content type="html"><![CDATA[<p>Moving to a new country can always be disorienting at first. Here are some of the things I have learned when I moved to Berlin from London, hopefully they&#8217;ll help you to get started more quickly.<!--more--></p>

<h2>Before you get to Germany: Start the flat hunt as soon as possible</h2>


<p>Finding somewhere permanent to live in Berlin is getting harder and harder - competition is fierce. Although cheaper than most European capitals, rents are going up steadily (much to the annoyance of the natives) and Berlin is now the 10th most expensive German city. I won&#8217;t lie, flat hunting in Berlin can be quite stressful, particularly if you are not a German speaker and have a deadline.</p>

<p>You can expect the process to take a couple of months, especially if you are working and trying to look for a flat at the same time. The good news is that you can do some of the ground work before you move over, saving you some time - preparing some of the paperwork, searching for flats over the internet, building a list of contacts.</p>

<h3>Flat hunting in Germany</h3>


<p>You can find a flat either via an estate agent (a &#8216;shark&#8217;, as the locals call them, although the official name is Makler) or directly from another tenant (if you are have connections). If you already have a job in Berlin waiting for you, you may also want to ask your employer for help - they may be able to post a message on the company intranet or just ask around. The good news is that agents no longer demand two months rent + tax as fee. Realistically you may have to bite the bullet and use them, as going direct is more time consuming. When flat hunting on the internet, I found Google Chrome very useful, as you can set it to automatically translate pages with rental ads into English for you. The translations are quite good for that kind of information.</p>

<h4>Where to live in Berlin</h4>


<p>Everyone has a different view on which parts of Berlin are nice and which aren&#8217;t - obviously it depends on your lifestyle and what you are after, whether you are a young person looking for kicks or a have a family with children, etc. <a href="http://needleberlin.com/moving-to-berlin-the-needle-guide-2012-edition/" title="[new window] Berlin areas guide" target="_blank">This is a good guide to various Berlin areas</a> - a couple of years old but it still holds true. What is missing is the new areas who have since became gentrified / acceptable like Pankow, Weißensee, Wedding, Moabit. Even Lichtenberg and Marzahn are not as dire as they used to be (although personally I wouldn&#8217;t move to Marzahn). Generally speaking you want to keep within the ring S-Bahn that circles the center of town, although as the city is getting full up and the outskirts gentrified this is less and less important.</p>

<h4>Finding a flat without an estate agent</h4>


<p>Generally people find flats on the internet or by word of mouth - &#8220;back in the day&#8221; people also advertised in local shops or lamp posts, but those days are over. Besides craigslist (used mostly by expats), you can try one of the following (do bear in mind estate agents also advertise there). Use the word &#8220;immobilien&#8221; for your searches:</p>

<ul>
<li>Expats magazine like <a href="http://www.exberliner.com/" title="[new window] Exberliner" target="_blank">Exberliner</a> or <a href="http://www.thelocal.de/" title="[new window] The Local" target="_blank">The Local</a> - English</li>
<li>local press like <a href="http://www.zitty.de/" title="[new window] Zitty" target="_blank">Zitty</a> or <a href="http://www.tip-berlin.de/" title="[new window] Tip" target="_blank">Tip</a> - German</li>
<li>newspapers like <a href="http://anzeigen.tagesspiegel.de/immoindex.php" title="[new window] Tagespiegel" target="_blank">Tagespiegel</a> - German</li>
<li><a href="http://Wohnungsboerse.net" title="[new window] wohnungsboerse.net" target="_blank">wohnungsboerse.net</a> where you pay a flat fee for an estate agent-free website</li>
<li><a href="http://www.null-provision.de/" title="[new window] Null-Provision.de" target="_blank">Null-Provision.de</a> also a site for flat exchange without estate agents</li>
<li><a href="http://Studenten-WG.com" title="[new window] Studenten-WG.com" target="_blank">Studenten-WG.com</a> the name says it all</li>
</ul>


<h4>Finding a flat via an estate agent in Berlin</h4>


<p>In general you can expect estate agents to be quite useless. As opposed to, say, the UK, where at least they dance for their dinner (in that smarmy estate agent way), here in Berlin there is so much demand they couldn&#8217;t care less. They organize group viewings with 20 or more people at once, hand out application forms, collect paperwork from applicants, then throw away most of it, except for a couple they will pass on to the landlord. The others are a waste of time for them, so don&#8217;t ask estate agents for advice or trust what they tell you. For example, a couple told me I didn&#8217;t need a credit check because I came from abroad. That&#8217;s nonsense, they just didn&#8217;t want to have to deal with the paperwork (and by &#8220;deal&#8221; I mean throw in the bin without even looking at it).</p>

<p>By far the most widely used website is <a href="http://www.immobilienscout24.de/" title="[new window] load this site" target="_blank">ImmobilienScout</a>, but there is also <a href="http://www.immowelt.de/" title="[new window] load this site" target="_blank">ImmoWelt</a>. One of the reason to start looking early is that estate agents often leave only the worst flats they can&#8217;t get rid of on those sites, or good ones that have already gone, whilst keeping the good ones for themselves. It&#8217;s worth building a list of contact details of agents, getting in touch with them, filtering out the ones who can&#8217;t be bothered with non-German speakers, asking for available flats and / or subscribing to their newsletter - many sends weekly mailouts. You can then arrange your viewings for when you get to Germany.</p>

<h3>Things to know about flat rental in Germany</h3>


<p>For a long let you need to pay a deposit (Kaution) which can be up to three months. For your protection the standard procedure is to put the money in a special joint bank account which needs both your and your landlord&#8217;s signature before moving funds.</p>

<p>Flats are generally unfurnished. And by unfurnished they really mean unfurnished - no kitchen, no lamps, nothing except bathtub, toilet, bathroom sink and light switches. So you&#8217;ll need to be prepared for that - we had a camping stove for a few weeks while waiting for the kitchen.</p>

<p>The flat will have white walls, and you are expected to repaint it white before you leave, as well as filling any holes in walls, etc. You should make a list (with photos) of all defects when you sign the rental agreement.</p>

<h3>Glossary - Abbreviations used in Rental ads</h3>


<dl class="plain-dl">
  <dt>Kaltmiete (KM)</dt>
  <dd>&#8220;cold&#8221; rent (the actual rent). Unusual</dd>

  <dt>Wohngeld or Nebenkosten (NK)</dt>
  <dd>various costs like the Hausmeister (looks after the building) and cleaner for the common area. They are paid by the tenant</dd>

  <dt>Warmmiete (WM)</dt>
  <dd>&#8220;warm&#8221; rent, i.e. actual rent + utilities + Wohngeld</dd>

  <dt>Makler</dt>
  <dd>Estate agent</dd>

  <dt>Wohngemeinschaft (WG)</dt>
  <dd>flat share</dd>

  <dt>Dachboden or Mansarde</dt>
  <dd>attic</dd>

  <dt>Dachgeschoss (DG)</dt>
  <dd>attic level (floor)</dd>

  <dt>Einbauküche (EBK)</dt>
  <dd>built in kitchen (not common)</dd>

  <dt>möbliert</dt>
  <dd>furnished (rare&#8230;)</dd>




  <dt>Parkett</dt>
  <dd>wood floor</dd>

  <dt>mit F.</dt>
  <dd>with window</dd>

  <dt>3. OG (Obergeschoss)</dt>
  <dd>third floor (UK) or fourth floor (US)</dd>

  <dt>Erdgeschoss (EG)</dt>
  <dd>ground floor</dd>

  <dt>Miete</dt>
  <dd>rent</dd>

  <dt>Kaution (KT)</dt>
  <dd>deposit</dd>

  <dt>Monat (MM)</dt>
  <dd>month</dd>

  <dt>Nachmieter</dt>
  <dd>a tenant who takes on another tenant&#8217;s contract because they want to move out earlier. Fairly common</dd>

  <dt>Postleitzahl (PLZ)</dt>
  <dd>Post code</dd>

  <dt>Vertrag, Mietsvertrag</dt>
  <dd>(rental) contract</dd>

  <dt>prov.-frei, provisionsfrei</dt>
  <dd>no commission</dd>

  <dt>1-Zi.</dt>
  <dd>one romm</dd>

  <dt>2 KZB</dt>
  <dd>2 Z(immer = rooms), K(üche = kitchen) B(ad = bath)</dd>

  <dt>Altbau, AB, Altb.</dt>
  <dd>Old building</dd>

  <dt>NB, Neubau</dt>
  <dd>New building</dd>

  <dt>HZ, Hzg</dt>
  <dd>heating</dd>

  <dt>mit Ki., kinderfreundl.</dt>
  <dd>with children, child friendly</dd>
</dl>




<h3>Getting ready: preparing the paperwork</h3>


<p>All estate agents ask for pretty much the same paperwork:</p>

<ul>
<li>photocopy / scan of passport(s)</li>
<li>payslips for the last three months</li>
<li>credit check</li>
<li>landlord references.</li>
</ul>


<p>You can either give it to them in paper form, or via email, although some will only accept email. You can start preparing a folder with scans of all those documents to email to estate agents, and possibly photocopies if you want to hand in your paperwork at the viewing - it won&#8217;t increase your chances of getting the flat, but at least you won&#8217;t have to send personal data around, and your scans won&#8217;t sit in some else&#8217;s unsecured hard disk.</p>

<p>The landlord reference is something you can prepare before arriving in Germany - you may want to get a German translation as well for good measure. If you already have a job contract, you can scan / photocopy that as well, in lieu of payslips for the last three months. The same for your passport. The rest you need to get once in Berlin.</p>

<h2>After getting to Germany</h2>


<p>Once you get to Germany you want to start sorting out your paperwork as quickly as you can.</p>

<h3>Step 1: the Aufenthaltsgenehmigungen (residence permit) and Steueridentifikationsnummer (tax number)</h3>


<p>The <i>Aufenthaltsgenehmigungen</i> is a document &#8216;proving&#8217; that you live at address X. This is the first port of call, as you will need to produce it for most of the following steps. You will also need to provide the Steueridentifikationsnummer to your employer. You can get them together, at the same time - the Aufenthaltsgenehmigungen is free, the Steueridentifikationsnummer costed five euros at the time of writing.</p>

<p>Getting it is a formality, at least for a EU citizen, but there is the issue of what address to declare. You must show a tenancy agreement or provide a landlord name. When I did it, I just said I was staying at a friend&#8217;s and they were OK with that, as long as their name appears in their register at the address you are declaring. Just make sure the address you are giving is one you can collect mail from for a few weeks. In Germany they are strict about mail delivery - if your name does not appear on the mailbox, the postman won&#8217;t deliver mail to it. Sadly you can&#8217;t give your employer&#8217;s address, they want a physical person.</p>

<p>The procedure is as follow:</p>

<ul>
  <li>download and fill an application form (you can leave the tax band blank) from <a href="https://www.bzst.de/DE/Steuern_National/Steuerliche_Identifikationsnummer/ID_Eingabeformular/ID_Node.html" title="[new window] Tax registration form" target="_blank">here</a></li>
  <li>bring the filled in form, your passport, and a dictionary if you need one to a Rathaus - luckily it doesn&#8217;t matter which Rathaus you go to, so pick any one that is convenient from <a href="https://service.berlin.de/standorte/buergeraemter/" title="[new window] List of Berlin Rathauses" target="_blank">this list</a>. I found the one in Mitte to be the one with the fastest queues.</li>
  <li>find the Burgeramt office, and tell the person in reception what you are there for, and get a number from them</li>
  <li>wait for your turn and then get it done</li>
</ul>


<p>Once you find a flat, you&#8217;ll need to go back to the Burgeramt and declare your new address.</p>

<h3>Step 2 (optional): get a pre-paid mobile phone</h3>


<p>Some banks require a German mobile number to enable internet banking, so it may be worth getting a mobile as soon as you can. Always useful to have, anyway. You can pick up a cheap prepaid one at Saturn in Alexander Platz (or any outlet of your choice). You&#8217;ll need a passport and your Aufenthaltsgenehmigungen to get it. You buy credit at the till, it&#8217;s just a receipt with a number you dial in.</p>

<h3>Step 3: bank account</h3>


<p>Getting a bank account is relatively easy, as long as you have an address all you need is your passport, Aufenthaltsgenehmigungen, and in some banks a mobile. Which bank to choose is a matter of debate, I picked the Berliner Sparkasse because they have branches at almost every street corner, useful as you pay to withdraw money from other banks&#8217; cash machines. On the other hand they charge a couple of euros a month. Some other banks are cheaper but have fewer branches. Your call really. If you can&#8217;t receive mail you can create the account with the address in your resident permit, then go back to the branch and change the address to c/o the address of your employer.</p>

<h3>Step 4: Schufa (credit check)</h3>


<p>Once you have a bank account you can get a credit check document for estate agents. I found the easiest way is to go to a place called Easy Credit (they have a branch in Alexander Platz train station) and get it done there and then. It costs 18 euros which they&#8217;ll deduct from your bank account, so make sure there are enough funds to cover it. Then you can scan / photocopy the letter and add it to your estate agents documents folders.</p>

<p>Now you have everything you need to get yourself a flat. Good luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty printing XML]]></title>
    <link href="http://gotofritz.net/blog/geekery/pretty-printing-xml/"/>
    <updated>2015-10-21T00:38:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/pretty-printing-xml</id>
    <content type="html"><![CDATA[<p><a href="http://www.w3.org/People/Raggett/tidy/">tidy</a> is a command line tool to pretty print XML.</p>

<!--more-->


<h2>What is tidy?</h2>

<p>It&#8217;s a very unslick util for tidying up HTML markup which gets the job done. It also has an XML mode, which is what is useful here. To install it on OS X, simply do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; brew install tidy
</span></code></pre></td></tr></table></div></figure>


<h2>Tidy usage</h2>

<p>To pretty print <code>input.xml</code>  and save the output to <code>pretty_printed.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; tidy -xml -i input.xml &gt; pretty_printed.xml
</span></code></pre></td></tr></table></div></figure>


<p>There are several <a href="http://tidy.sourceforge.net/docs/quickref.html#break-before-br">command line options</a>. For example, to change the case of tabs to uppercase:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; tidy -xml --uppercase-tags y  -i input.xml
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiline regular expressions in Javascript]]></title>
    <link href="http://gotofritz.net/blog/geekery/multiline-regular-expressions-javascript/"/>
    <updated>2015-09-19T23:39:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/multiline-regular-expressions-in-javascript</id>
    <content type="html"><![CDATA[<p>There are no flags to match multi-line text is in JS. But it can be done with a character class.</p>

<!--more-->


<h2>The problem</h2>

<p>In both cases below we expect <code>\d.line</code> to match <code>0\nline</code> but it doesn&#8217;t work - because newlines are not matched by the <code>.</code> character class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;line 0\nline1&quot;</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\d.line/</span><span class="p">)</span>
</span><span class='line'><span class="c1">// null</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ES6</span>
</span><span class='line'><span class="err">`</span><span class="nx">line</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">line1</span><span class="err">`</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\d.line/</span><span class="p">)</span>
</span><span class='line'><span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The solution</h2>

<p>Use the <code>[^]</code> character class, which is equivalent to <code>.</code> but with the newline added in</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;line 0\nline1&quot;</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\d[^]line/</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;0</span>
</span><span class='line'><span class="c1">// line&quot;]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// ES6</span>
</span><span class='line'><span class="err">`</span><span class="nx">line</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">line1</span><span class="err">`</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\d[^]line/</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [&quot;0</span>
</span><span class='line'><span class="c1">// line&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more info, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes">visit the relevant MDN page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Software Update from the Command Line]]></title>
    <link href="http://gotofritz.net/blog/geekery/os-x-software-update-from-command-line/"/>
    <updated>2015-08-25T00:41:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/os-x-software-update-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Software updates can be quite tedious - you have to click a lot of buttons, then get into the Apple Store etc. But you can avoid all that by running it from the command line.</p>

<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo softwareupdate -i -r
</span><span class='line'>Password:
</span><span class='line'>Software Update Tool
</span><span class='line'>Copyright 2002-2012 Apple Inc.
</span><span class='line'>
</span><span class='line'>Finding available software
</span><span class='line'>
</span><span class='line'>Downloaded OS X Update
</span><span class='line'>Installing OS X Update
</span><span class='line'>Done.
</span></code></pre></td></tr></table></div></figure>


<p>Which breaks down as</p>

<dl class="code-breakdown">
  <dt>sudo</dt>
  <dd>needs to run as admin (you will have to enter a password after you type return)</dd>

  <dt>softwareupdate</dt>
  <dd>this is the command line utility that does the job</dd>

  <dt>-i</dt>
  <dd>install - you can specify what to install, all, or just&#8230;</dd>

  <dt>-r</dt>
  <dd>&#8230;the recommended updates</dd>
</dl>


<p>This is all there is to it.</p>

<h2>Slightly more complex usage of softwareupdate</h2>

<p>You can ask for a list of available software before you install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>softwareupdate -l
</span><span class='line'>Software Update Tool
</span><span class='line'>Copyright 2002-2012 Apple Inc.
</span><span class='line'>
</span><span class='line'>Finding available software
</span><span class='line'>Software Update found the following new or updated software:
</span><span class='line'>  * MacBookAirEFIUpdate2.4-2.4
</span><span class='line'>       MacBook Air EFI Firmware Update <span class="o">(</span>2.4<span class="o">)</span>, 3817K <span class="o">[</span>recommended<span class="o">]</span> <span class="o">[</span>restart<span class="o">]</span>
</span><span class='line'>  * ProAppsQTCodecs-1.0
</span><span class='line'>       ProApps QuickTime codecs <span class="o">(</span>1.0<span class="o">)</span>, 968K <span class="o">[</span>recommended<span class="o">]</span>
</span><span class='line'>  * JavaForOSX-1.0
</span><span class='line'>       Java <span class="k">for </span>OS X 2012-005 <span class="o">(</span>1.0<span class="o">)</span>, 65288K <span class="o">[</span>recommended<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then install individual packages by simply naming them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo softwareupdate -i JavaForOSX-1.0
</span></code></pre></td></tr></table></div></figure>


<p>Or you can ignore some packages and then install everything else (<code>-a, all</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>softwareupdate --ignore JavaForOSX-1.0
</span><span class='line'><span class="nv">$ </span>sudo softwareupdate -i -a
</span></code></pre></td></tr></table></div></figure>


<p>Note that the &#8211;ignore flag will persist until it is reset with <code>--reset-ignored</code> (which clears <em>all</em> flags)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>softwareupdate --reset-ignored
</span></code></pre></td></tr></table></div></figure>


<p>More options can be viewed with <code>softwareupdate -h</code> or <code>man softwareupdate</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A selection of akw scripts]]></title>
    <link href="http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts/"/>
    <updated>2015-07-25T00:16:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts</id>
    <content type="html"><![CDATA[<p>Some examples scripts to complement the previous <a href="http://gotofritz.net/blog/geekery/back-to-the-classics-awk/">awk tutorial</a></p>

<!--more-->


<p>All the scripts here assume the fields in the data is space separated - i.e. <code>UK   London  10000</code> etc. There hasn&#8217;t been a CSV standard until recently, but the one you get from MS Office doesn&#8217;t work too well with awk, because CSV is basically a rubbish format and hard to handle. But if you have a &#8220;well behaved&#8221; CSV file, i.e. one which doesn&#8217;t have commas, quotation marks, or new lines inside fields, e.g <code>UK,London,10000</code> then you can easily process it by passing -F&#8221;,&#8221; to the awk call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="s2">&quot;,&quot;</span> -f my_awk_script.awk some_input_data.txt
</span></code></pre></td></tr></table></div></figure>


<p>In practice unless you generate the data yourself there is always going to be the odd comma or quotation mark in your data somewhere, so I find it easier to convert the data to tab separated using a <a href="http://www.convertcsv.com/csv-to-csv.htm">free online CSV to TSV converter like this</a>. I then call awk with &#8220;\t&#8221; as the separator, because some field may have spaces inside them.</p>

<p>The command below is what I use - my awk program is in my_awk_script.awk, the data is in uk_electoral_data_converted.csv, and the results goes into awk_output.txt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="s2">&quot;\t&quot;</span> -f my_awk_script.awk uk_electoral_data_converted.csv &gt; awk_output.txt
</span></code></pre></td></tr></table></div></figure>


<h3>Sample data: UK election results</h3>

<p>Some of the scripts will use <a href="http://is.gd/eUrbOZ">data from the 2015 UK election in CSV format</a> as data, converted to TSV. Here&#8217;s what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Forename  Surname Description on ballot paper Constituency Name PANO  Votes Share <span class="o">(</span>%<span class="o">)</span> Change  FIELD9  Incumbent?  FIELD11 Constituency ID Region ID County  Region  Country Constituency <span class="nb">type </span>Party name identifier Party abbreviation
</span><span class='line'>Gerald  Howarth The Conservative Party Candidate  Aldershot 7 23369 50.6  3.9   MP    E14000530 E12000008 Hampshire South East  England Borough Conservative  Con
</span><span class='line'>Gary  Puffett Labour Party  Aldershot 7 8468  18.3  6.2       E14000530 E12000008 Hampshire South East  England Borough Labour  Lab
</span><span class='line'>Bill  Walker  UK Independence Party <span class="o">(</span>UKIP<span class="o">)</span>  Aldershot 7 8253  17.9  13.4        E14000530 E12000008 Hampshire South East  England Borough UK Independence Party UKIP
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>And here are the field names in order</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 1 Forename
</span><span class='line'> 2 Surname
</span><span class='line'> 3 Description on ballot paper
</span><span class='line'> 4 Constituency Name
</span><span class='line'> 5 PANO
</span><span class='line'> 6 Votes
</span><span class='line'> 7 Share <span class="o">(</span>%<span class="o">)</span>
</span><span class='line'> 8 Change
</span><span class='line'> 9 --
</span><span class='line'>10 Incumbent?
</span><span class='line'>11 --
</span><span class='line'>12 Constituency ID
</span><span class='line'>13 Region ID
</span><span class='line'>14 County
</span><span class='line'>15 Region
</span><span class='line'>16 Country
</span><span class='line'>17 Constituency <span class="nb">type</span>
</span><span class='line'>18 Party name identifier
</span><span class='line'>19 Party abbreviation
</span></code></pre></td></tr></table></div></figure>


<h3>Skipping header row</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># put NR &gt; 1 in front of every action to skip the header row</span>
</span><span class='line'>NR &gt; 1 <span class="o">{</span> print <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># result</span>
</span><span class='line'>Gerald  Howarth The Conservative Party Candidate  Aldershot ...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h3>Skipping empty records</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># check if the first field is empty</span>
</span><span class='line'>NF <span class="o">{</span> print <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rearranging fields, and skipping some</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF <span class="o">{</span> print <span class="nv">$4</span> <span class="s2">&quot;: &quot;</span> <span class="nv">$2</span> <span class="s2">&quot; &quot;</span> <span class="nv">$1</span> <span class="s2">&quot; (&quot;</span> <span class="nv">$NF</span> <span class="s2">&quot;) &quot;</span> <span class="nv">$7</span> <span class="s2">&quot;% &quot;</span> <span class="o">}</span>
</span><span class='line'><span class="c"># NR &gt; 1    ignore header</span>
</span><span class='line'><span class="c"># NF  ignore empty record</span>
</span><span class='line'><span class="c"># print constituence name, name surname, party abbreviation, share of the vote</span>
</span><span class='line'><span class="c"># ignore otehr fields</span>
</span><span class='line'>
</span><span class='line'>Aldershot: Howarth Gerald <span class="o">(</span>Con<span class="o">)</span> 50.6%
</span><span class='line'>Aldershot: Puffett Gary <span class="o">(</span>Lab<span class="o">)</span> 18.3%
</span><span class='line'>Aldershot: Walker Bill <span class="o">(</span>UKIP<span class="o">)</span> 17.9%
</span><span class='line'>Aldershot: Hilliar Alan <span class="o">(</span>LD<span class="o">)</span> 8.8%
</span><span class='line'>Aldershot: Hewitt Carl <span class="o">(</span>Green<span class="o">)</span> 4.4%
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h3>Print sum of all fields</h3>

<p>Finds the national Conservative vote</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Con&quot;</span> <span class="o">{</span>total +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'>END          <span class="o">{</span>print total<span class="o">}</span>
</span><span class='line'><span class="c"># $NF == &quot;Con&quot;  if a record concerns a tory vote</span>
</span><span class='line'><span class="c"># {total += $6} add it to a running total</span>
</span><span class='line'><span class="c"># END           when all records are processed</span>
</span><span class='line'><span class="c"># {print total} output total</span>
</span><span class='line'>
</span><span class='line'>11299609
</span></code></pre></td></tr></table></div></figure>


<h3>Work out column averages</h3>

<p>Find the total vote of the 6 larger parties and their % of the national vote</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># keep a running total</span>
</span><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF  <span class="o">{</span>total +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="c"># keep a total for each party - don&#39; do anything yet</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Con&quot;</span>        <span class="o">{</span>total_con +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Lab&quot;</span>        <span class="o">{</span>total_lab +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;UKIP&quot;</span>       <span class="o">{</span>total_ukip +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;LD&quot;</span>         <span class="o">{</span>total_ld +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Green&quot;</span>      <span class="o">{</span>total_green +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;SNP&quot;</span>        <span class="o">{</span>total_snp +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="c"># print a report at the end</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;TOTAL: &quot;</span> total
</span><span class='line'>  print <span class="s2">&quot;Con:   &quot;</span> <span class="o">(</span>100 * total_con / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  print <span class="s2">&quot;Lab:   &quot;</span> <span class="o">(</span>100 * total_lab / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  print <span class="s2">&quot;UKIP:  &quot;</span> <span class="o">(</span>100 * total_ukip / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  print <span class="s2">&quot;LD:    &quot;</span> <span class="o">(</span>100 * total_ld / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  print <span class="s2">&quot;SNP:   &quot;</span> <span class="o">(</span>100 * total_snp / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  print <span class="s2">&quot;Green: &quot;</span> <span class="o">(</span>100 * total_green / total<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># output:</span>
</span><span class='line'>TOTAL: 30697255
</span><span class='line'>Con:   36.8098%
</span><span class='line'>Lab:   30.449%
</span><span class='line'>UKIP:  12.6431%
</span><span class='line'>LD:    7.87014%
</span><span class='line'>SNP:   4.738%
</span><span class='line'>Green: 3.77112%
</span></code></pre></td></tr></table></div></figure>


<h3>Using functions</h3>

<p>The same as above, but without copy and paste code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># abstracting copy-and-paste code into a function</span>
</span><span class='line'><span class="k">function </span>print_party_percentage<span class="o">(</span>party_name, party_vote, total_vote<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  print party_name <span class="s2">&quot;   &quot;</span> <span class="o">(</span>100 * party_vote / total_vote<span class="o">)</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c"># same program as before</span>
</span><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF   <span class="o">{</span>total +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Con&quot;</span>   <span class="o">{</span>total_con +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Lab&quot;</span>   <span class="o">{</span>total_lab +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;UKIP&quot;</span>  <span class="o">{</span>total_ukip +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;LD&quot;</span>    <span class="o">{</span>total_ld +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Green&quot;</span> <span class="o">{</span>total_green +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;SNP&quot;</span>   <span class="o">{</span>total_snp +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;TOTAL: &quot;</span> total
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;Con&quot;</span>, total_con, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;Lab&quot;</span>, total_lab, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;UKIP&quot;</span>, total_ukip, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;LD&quot;</span>, total_ld, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;SNP&quot;</span>, total_snp, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;Green&quot;</span>, total_green, total<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># output - looks messier because previous program was manually formatted</span>
</span><span class='line'>TOTAL: 30697255
</span><span class='line'>Con   36.8098%
</span><span class='line'>Lab   30.449%
</span><span class='line'>UKIP   12.6431%
</span><span class='line'>LD   7.87014%
</span><span class='line'>SNP   4.738%
</span><span class='line'>Green   3.77112%
</span></code></pre></td></tr></table></div></figure>


<h3>Formatting numerical precision and alignment with printf</h3>

<p>Same as above, but using printf for formatting</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>print_party_percentage<span class="o">(</span>party_name, party_vote, total_vote<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;%5s: %4.1f%%\n&quot;</span>, party_name, <span class="o">(</span>100 * party_vote / total_vote<span class="o">)</span>
</span><span class='line'>  <span class="c"># %5s a string (s) of fixed width 5 or more (5) aligned right (if it was -5 it would be left)</span>
</span><span class='line'>  <span class="c"># %4.1f a number (f) with one decimal (.1) and total width 4 (4) aligned right (4)</span>
</span><span class='line'>  <span class="c"># %% an actual %</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c"># same program as before</span>
</span><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF   <span class="o">{</span>total +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Con&quot;</span>   <span class="o">{</span>total_con +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Lab&quot;</span>   <span class="o">{</span>total_lab +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;UKIP&quot;</span>  <span class="o">{</span>total_ukip +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;LD&quot;</span>    <span class="o">{</span>total_ld +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;Green&quot;</span> <span class="o">{</span>total_green +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'><span class="nv">$NF</span> <span class="o">==</span> <span class="s2">&quot;SNP&quot;</span>   <span class="o">{</span>total_snp +<span class="o">=</span> <span class="nv">$6</span><span class="o">}</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;TOTAL: &quot;</span> total
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;Con&quot;</span>, total_con, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;Lab&quot;</span>, total_lab, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;UKIP&quot;</span>, total_ukip, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;LD&quot;</span>, total_ld, total<span class="o">)</span>
</span><span class='line'>  print_party_percentage<span class="o">(</span><span class="s2">&quot;SNP&quot;</span>, total_snp, total<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># output</span>
</span><span class='line'>TOTAL: 30697255
</span><span class='line'>  Con: 36.8%
</span><span class='line'>  Lab: 30.4%
</span><span class='line'> UKIP: 12.6%
</span><span class='line'>   LD:  7.9%
</span><span class='line'>  SNP:  4.7%
</span></code></pre></td></tr></table></div></figure>


<h3>Using arrays to group data</h3>

<p>There is still some copy and past code because we are hardcoding the parties. We can use arrays to group whatever parties we find.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># same formatting function as before</span>
</span><span class='line'><span class="k">function </span>print_party_percentage<span class="o">(</span>party_name, party_vote, total_vote<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;%5s: %4.1f%%\n&quot;</span>, party_name, <span class="o">(</span>100 * party_vote / total_vote<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># skip empty and header lines</span>
</span><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF  <span class="o">{</span>
</span><span class='line'>  <span class="c"># runnint total</span>
</span><span class='line'>  total +<span class="o">=</span> <span class="nv">$6</span>
</span><span class='line'>  <span class="c"># create or update running total for current party</span>
</span><span class='line'>  party_totals<span class="o">[</span><span class="nv">$NF</span><span class="o">]</span> +<span class="o">=</span> <span class="nv">$6</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c"># when all records are processed</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;TOTAL: &quot;</span> total
</span><span class='line'>  <span class="c"># print a line for each party</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span>party in party_totals<span class="o">)</span>
</span><span class='line'>    print_party_percentage<span class="o">(</span>party, party_totals<span class="o">[</span>party<span class="o">]</span>, total<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># output - there are a LOT of tiny local parties</span>
</span><span class='line'>TOTAL: 30697255
</span><span class='line'>  UUP:  0.4%
</span><span class='line'>Left Unity - Trade Unionists and Socialists:  0.0%
</span><span class='line'>  IZB:  0.0%
</span><span class='line'>Respect:  0.0%
</span><span class='line'>  SSP:  0.0%
</span><span class='line'>  NSW:  0.0%
</span><span class='line'>The 30-50 Coalition:  0.0%
</span><span class='line'>.... and so on
</span></code></pre></td></tr></table></div></figure>


<p>Oh - turns out if you include all the novelty parties there are 132 of them across the UK. We need to sort the array and only print the top X items. Turns out it is quite complicated.</p>

<h3>Sorting array</h3>

<p>Standard awk&#8217;s array are not sortable. This was a design choice - only associative arrays are supported, so there is no order, hence they can&#8217;t be sorted in any meaningful way. <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Arrays">gawk, however, has two array sorting functions</a> - how do they do it? They actually create a new associative array, with all the values from the original but none of they keys; they keys are replaced by new ones, in order. Then you use a for loop (not the standard for in) to read all the array &#8220;in order&#8221;. This is all well and good if you don&#8217;t need the keys, but I do (they are the name of the party). Besides, I am using awk and not gawk.</p>

<p>The best approach is to create a new array with just the keys, sort that array, and then loop through it in order in order to find out which keys of the original array to read.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># kickstarts the sort process</span>
</span><span class='line'><span class="c"># puts all the sorted keys into a separate array. if i</span>
</span><span class='line'><span class="k">function </span>homebrew_asort<span class="o">(</span>original, processed<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># before we use the array we must be sure it is empty</span>
</span><span class='line'>  empty_array<span class="o">(</span>processed<span class="o">)</span>
</span><span class='line'>  <span class="nv">original_length</span> <span class="o">=</span> copy_and_count_array<span class="o">(</span>original, processed<span class="o">)</span>
</span><span class='line'>  qsort<span class="o">(</span>original, processed, 0, original_length<span class="o">)</span>
</span><span class='line'>  <span class="k">return </span>original_length
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># removes al values</span>
</span><span class='line'><span class="k">function </span>empty_array<span class="o">(</span>A<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span>i in A<span class="o">)</span>
</span><span class='line'>    delete A<span class="o">[</span>i<span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># awk doesn&#39;t even have an array size function... you also have to roll out your own</span>
</span><span class='line'><span class="k">function </span>copy_and_count_array<span class="o">(</span>original, processed<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span>key in original<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c"># awk doesn&#39;t seem to like array[0] -  so we start from 1</span>
</span><span class='line'>    size++
</span><span class='line'>    processed<span class="o">[</span>size<span class="o">]</span> <span class="o">=</span> key
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return </span>size
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Adapted from a script from awk.info</span>
</span><span class='line'><span class="c"># http://awk.info/?quicksort</span>
</span><span class='line'><span class="k">function </span>qsort<span class="o">(</span>original, keys, left, right,   i, last<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>left &gt;<span class="o">=</span> right<span class="o">)</span>  <span class="k">return</span>
</span><span class='line'><span class="k">  </span>swap<span class="o">(</span>keys, left, left + int<span class="o">(</span> <span class="o">(</span>right - left + 1<span class="o">)</span> * rand<span class="o">()</span> <span class="o">)</span> <span class="o">)</span>
</span><span class='line'>  <span class="nv">last</span> <span class="o">=</span> left
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="nv">i</span> <span class="o">=</span> left+1; i &lt;<span class="o">=</span> right; i++<span class="o">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>original<span class="o">[</span>keys<span class="o">[</span>i<span class="o">]]</span> &lt; original<span class="o">[</span>keys<span class="o">[</span>left<span class="o">]])</span>
</span><span class='line'>      swap<span class="o">(</span>keys, ++last, i<span class="o">)</span>
</span><span class='line'>  swap<span class="o">(</span>keys, left, last<span class="o">)</span>
</span><span class='line'>  qsort<span class="o">(</span>original, keys, left, last-1<span class="o">)</span>
</span><span class='line'>  qsort<span class="o">(</span>original, keys, last+1, right<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">function </span>swap<span class="o">(</span>A, i, j,   t<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">t</span> <span class="o">=</span> A<span class="o">[</span>i<span class="o">]</span>; A<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> A<span class="o">[</span>j<span class="o">]</span>; A<span class="o">[</span>j<span class="o">]</span> <span class="o">=</span> t
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># same formatting function as before</span>
</span><span class='line'><span class="k">function </span>print_party_percentage<span class="o">(</span>party_name, party_vote, total_vote<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;%5s: %4.1f%%\n&quot;</span>, party_name, <span class="o">(</span>100 * party_vote / total_vote<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># same main action as before</span>
</span><span class='line'>NR &gt; 1 <span class="o">&amp;&amp;</span> NF  <span class="o">{</span>
</span><span class='line'>  total +<span class="o">=</span> <span class="nv">$6</span>
</span><span class='line'>  party_totals<span class="o">[</span><span class="nv">$NF</span><span class="o">]</span> +<span class="o">=</span> <span class="nv">$6</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># when all records are processed</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  <span class="nv">parties_count</span> <span class="o">=</span> homebrew_asort<span class="o">(</span>party_totals, keys<span class="o">)</span>
</span><span class='line'>  <span class="k">for</span>  <span class="o">(</span><span class="nv">i</span> <span class="o">=</span> parties_count; i &gt;<span class="o">=</span> parties_count - 5; i--<span class="o">)</span>
</span><span class='line'>    print_party_percentage<span class="o">(</span>keys<span class="o">[</span>i<span class="o">]</span>, party_totals<span class="o">[</span>keys<span class="o">[</span>i<span class="o">]]</span>, total<span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  Con: 36.8%
</span><span class='line'>  Lab: 30.4%
</span><span class='line'> UKIP: 12.6%
</span><span class='line'>   LD:  7.9%
</span><span class='line'>  SNP:  4.7%
</span><span class='line'>Green:  3.8%
</span></code></pre></td></tr></table></div></figure>


<h2>Print first or last x characters of a line</h2>

<p>You can easily mimick <code>head -c</code> or <code>tail -c</code> with awk - if you really want to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># equivalent</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print substr($0, 1, 32)}&#39;</span> xxx
</span><span class='line'><span class="nv">$ </span>head -c 32 xxx
</span><span class='line'>
</span><span class='line'><span class="c"># equivalent</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;END {print substr($0, length($0) - 30, 32)}&#39;</span> xxx
</span><span class='line'><span class="nv">$ </span>tail -c 32 xxx
</span></code></pre></td></tr></table></div></figure>


<p>But with awk you can also skip a few characters into a file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># no heard or tail equivalent - print characters 32 to 64</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print substr($0, 32, 32)}&#39;</span> xxx
</span></code></pre></td></tr></table></div></figure>


<h2>Other examples</h2>

<p>The <a href="http://awk.info/">awk.info</a> website has some <a href="http://awk.info/?OneLiners">one liners</a> with extensive <a href="http://www.catonmat.net/blog/awk-one-liners-explained-part-one/">explanations</a></p>

<p>The <a href="http://www.math.utah.edu/docs/info/gawk_4.html">gawk manual includes some one liners</a> which are compatible with standard awk.</p>

<p>The Unix School: <a href="http://www.theunixschool.com/2012/06/awk-10-examples-to-group-data-in-csv-or.html">10 examples to group data in a CSV or text file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the classics: awk]]></title>
    <link href="http://gotofritz.net/blog/geekery/back-to-the-classics-awk/"/>
    <updated>2015-07-15T23:19:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/back-to-the-classics-awk</id>
    <content type="html"><![CDATA[<p>In this age of npm and github and easily available modules in any language of your choice, it is easy to forget the old Unix workhorses. Here&#8217;s a look at awk, a shell utility that allows you to treat and manipulate text files as if they were databases. In <a href="http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts/">Part 2</a> there are a few sample scripts.</p>

<!--more-->


<h2>What is awk?</h2>

<p><code>Awk</code> is both the name of the command line utility, and the language used for it. It was invented at Bells Labs at the peak of punk rock, 1977, and its name is simply the initials of its three creators. Awk reads input (a file, or a stream) one line (one &#8220;record&#8221;) at the time, splits it into fields by blank space (these are all defaults that can be changed), and then uses the instructions in the awk language to manipulate these fields and generate some output. The ability to read files as streams is a big plus - it means the memory footprint is the same if you read a file of 1Kb or 200Tb; for a larger file it will just take longer.</p>

<p>Awk is standard with the version of bash that comes with OS X, and several others. There is another variant which is widespread - gawk, GNU awk. It is actually better than the original, because it offers array sort and length functions, the ability to include files, and more flexible rules for splitting input in fields. Here I will limit myself to the standard awk.</p>

<h3>Example awk in action</h3>

<p>Here&#8217;s what the simplest awk program looks like - this is basically <code>cat</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># awk loads the short program: {print} and wait for user to type stuff</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}&#39;</span>
</span><span class='line'><span class="c"># as you type, the shell prints out what you are typing. Awk is waiting</span>
</span><span class='line'><span class="c"># for a &lt;RETURN&gt; outside a &#39;&#39;</span>
</span><span class='line'>It was a bright cold day in April, and the clocks were striking thirteen.
</span><span class='line'><span class="c"># now awk kicks in and runs the program on the input</span>
</span><span class='line'><span class="c"># {print} simply prints the input line as it is, so here it is again</span>
</span><span class='line'>It was a bright cold day in April, and the clocks were striking thirteen.
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The strong point of <code>awk</code> is that it automatically splits lines of text as if they were &#8220;columns&#8221; in a spreadsheet and assigns each column to a variable (a &#8220;field&#8221;). Then you can manipulate them and spit them out</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># awk loads a slightly more complex program and waits</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print $3 &quot;: &quot; $1 + $2}&#39;</span>
</span><span class='line'><span class="c"># waiting for a &lt;RETURN&gt; outside a &#39;&#39;</span>
</span><span class='line'>10 20 Toronto
</span><span class='line'><span class="c"># this line is split into 3 &quot;columns&quot;, and</span>
</span><span class='line'><span class="c"># 10 is assigned to $1, 20 to $2, and Toronto to $3</span>
</span><span class='line'><span class="c"># then the program {print &quot;$3: &quot; $1 + $2} is run - it adds $1 + $2 and</span>
</span><span class='line'><span class="c"># prints the result out, with some extra text (the :)</span>
</span><span class='line'>Toronto: 30
</span><span class='line'><span class="c"># now it waits for the next line</span>
</span><span class='line'>20 30 Miami
</span><span class='line'><span class="c"># same program run on it</span>
</span><span class='line'>Miami: 50
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Despite its simplicity, you can take awk quite far - for example creating <a href="http://awk.info/?doc/story.html">a random sci-fi plot generator</a>.</p>

<h2>Running awk programs and redirecting input, output</h2>

<p>Running awk on STDIN is not very useful, but of course you can use Unix magic to redirect the input and / or output of the program</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># awk will treat the second argument as a path to a file to read from</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}&#39;</span> some_data.txt
</span><span class='line'>... <span class="c"># prints whatever was in some_data.txt</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># exactly the same thing but done differently - redirecting file to STDIN</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}&#39;</span> &lt; some_data.txt
</span><span class='line'>... <span class="c"># prints whatever was in some_data.txt</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># you can read several files, in order</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}&#39;</span> some_data.txt more_data.txt
</span><span class='line'>...
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># now the processed data goes to a separate file</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}&#39;</span> some_data.txt &gt; result.txt
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># the awk program itself can be loaded to a file - here this file is created</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{print}&#39;</span> &gt; awk.txt
</span><span class='line'><span class="c"># passing the command on to awk with the -f option</span>
</span><span class='line'><span class="nv">$ </span>awk -f awk.txt some_data.txt &gt; result.txt
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># mixing STDIN with files. The &quot;-&quot; is substituted by STDIN,  which is dealt with</span>
</span><span class='line'><span class="c"># after some_data.txt</span>
</span><span class='line'><span class="nv">$ </span>ls -l | awk <span class="s1">&#39;{print}&#39;</span> some_data.txt - more_data.txt
</span><span class='line'><span class="nv">$ </span>... <span class="c"># prints all lines from some_data.txt</span>
</span><span class='line'><span class="nv">$ </span>... <span class="c"># prints result of ls -l (this is the &quot;-&quot;)</span>
</span><span class='line'><span class="nv">$ </span>... <span class="c"># prints all lines from more_data.txt</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># pass some text into awk, then run an awk program on it</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;1 2 3&#39;</span> | awk <span class="s1">&#39;{print}&#39;</span>
</span><span class='line'><span class="nv">$ </span>1 2 3
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># using the curl util to download a csv file, piping it to awk, and running</span>
</span><span class='line'><span class="c"># the simple awk program on it</span>
</span><span class='line'><span class="nv">$ </span>curl http://is.gd/eUrbOZ | awk <span class="s1">&#39;{print}&#39;</span>
</span><span class='line'>Forename,Surname,Description on ballot paper,Constituency Name,PANo,Votes,Share
</span><span class='line'>... <span class="c"># etc</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Anatomy of an awk program</h2>

<p>So far the awk example consisted of simple one liners - but awk programs can consist of several instructions (&#8220;actions&#8221;). You can still write them out on the shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># note: the &quot;&gt;&quot; is added automatically when hitting return inside a &#39;&#39;,</span>
</span><span class='line'><span class="c"># and the space between &gt; and { was added manually to make it line up</span>
</span><span class='line'><span class="nv">$ </span>awk <span class="s1">&#39;{print}</span>
</span><span class='line'><span class="s1">&gt;      {print}</span>
</span><span class='line'><span class="s1">&gt;      {print}&#39;</span>
</span><span class='line'><span class="c"># now that the closing &#39; was typed, awk kicks in. this programs simply</span>
</span><span class='line'><span class="c"># prints out whatever you type three times</span>
</span><span class='line'>oh <span class="c"># typed by you</span>
</span><span class='line'>oh <span class="c"># printed by awk 3 times</span>
</span><span class='line'>oh
</span><span class='line'>oh
</span></code></pre></td></tr></table></div></figure>


<p>In this tutorial I will put the awk program in its own file and load it from the command line - just to make formatting easier and allow comments. The file loaded here has suffix &#8220;.awk&#8221; but that&#8217;s irrelevant, it could be any filename.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>awk -f example.awk some_input_text.txt
</span></code></pre></td></tr></table></div></figure>


<p>An awk program consists of a list of actions, one after the other, and typically one per line (they can be broken up though). There are two special types of actions - BEGIN actions are executed only once, before the text is scanned, and END only once, afterwards. All other actions are executed in order on every line of text. Assume your input file includes increasing integers, one per line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<p>Then the program below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>BEGIN <span class="o">{</span> print <span class="s2">&quot;START!&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span>print <span class="s2">&quot;--------------&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span><span class='line'>END <span class="o">{</span> print <span class="s2">&quot;END!&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would produce</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>START!
</span><span class='line'>--------------
</span><span class='line'>1
</span><span class='line'>1
</span><span class='line'>1
</span><span class='line'>--------------
</span><span class='line'>2
</span><span class='line'>2
</span><span class='line'>2
</span><span class='line'>--------------
</span><span class='line'>3
</span><span class='line'>3
</span><span class='line'>3
</span><span class='line'>END!
</span></code></pre></td></tr></table></div></figure>


<p>Note that actions can be in any order (they will be executed in the order they are written) and there can be multiple BEGIN and END, so the following is also a legal program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>print <span class="s2">&quot;--------------&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span><span class='line'>END <span class="o">{</span> print <span class="s2">&quot;END!&quot;</span> <span class="o">}</span>
</span><span class='line'>BEGIN <span class="o">{</span> print <span class="s2">&quot;START!&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span><span class='line'>END <span class="o">{</span> print <span class="s2">&quot;Copyright 2005&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span>print<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way the program is dealt with is:</p>

<ul>
<li>all the BEGIN actions are executed, in order</li>
<li>input is read one line at the time, and for each line

<ul>
<li>the line is split into fields</li>
<li>each action, in turn, is run on the fields</li>
</ul>
</li>
<li>all the END actions are run at the end</li>
</ul>


<p>Inside the actions awk offers what most programming languages offer - variable, loops, tests, etc.</p>

<h3>Actions formatting</h3>

<p>Awk follows Unix conventions on most things, so in case of doubt whatever works in Bash scripts tends to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># a &#39;normal&#39; one lne</span>
</span><span class='line'>BEGIN <span class="o">{</span> print <span class="s2">&quot;START&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="c"># you can add newlines for formatting - this is equivalent to the above</span>
</span><span class='line'>BEGIN <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;START&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>-&gt; START
</span><span class='line'>-&gt; START
</span><span class='line'>
</span><span class='line'><span class="c"># as in Bash scripts, you can use the semicolon to separate multiple statements</span>
</span><span class='line'><span class="c"># on the same line...</span>
</span><span class='line'>BEGIN <span class="o">{</span> print <span class="s2">&quot;STA&quot;</span>; print <span class="s2">&quot;RT&quot;</span>;<span class="o">}</span>
</span><span class='line'><span class="c"># or you can write them one per line, with or without semicolon</span>
</span><span class='line'>BEGIN <span class="o">{</span> print <span class="s2">&quot;STA&quot;</span>
</span><span class='line'>        print <span class="s2">&quot;RT&quot;</span> <span class="o">}</span>
</span><span class='line'>-&gt; STA
</span><span class='line'>   RT
</span><span class='line'>-&gt; STA
</span><span class='line'>   RT
</span></code></pre></td></tr></table></div></figure>


<h2>Variables</h2>

<p>Awk makes several variables available to the programs - some are loaded when the program is launched, some are updated with each line read, some are created by the program itself.</p>

<h3>Field Variables</h3>

<p>Whenever awk reads a line, it splits it into &#8220;fields&#8221; by white-space / tab (this is the default and can be overridden), Then each field is copied to a variable $1, $2, &#8230;. in order - there is no limit. Additionally, $0 contains the whole line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this file</span>
</span><span class='line'>1 2 3 4 5 6 7
</span><span class='line'>
</span><span class='line'><span class="c"># the following two lines are equivalent</span>
</span><span class='line'><span class="o">{</span> print <span class="o">}</span>
</span><span class='line'><span class="o">{</span> print <span class="nv">$0</span> <span class="o">}</span>
</span><span class='line'>-&gt; 1 2 3 4 5 6 7
</span><span class='line'>-&gt; 1 2 3 4 5 6 7
</span><span class='line'>
</span><span class='line'><span class="c"># only prints some fields we are interested in</span>
</span><span class='line'><span class="o">{</span> print <span class="nv">$1</span> <span class="s2">&quot; &quot;</span> <span class="nv">$3</span> <span class="o">}</span>
</span><span class='line'>-&gt; 1 3
</span></code></pre></td></tr></table></div></figure>


<p>The field number doesn&#8217;t have to be a constant - it can be an expression or a variable. For example, the global variable NF contains the number of the last field and is updated which every line read. So if there are 7 fields, NF would be 7, and $NF would be $7, i.e. the last field</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this file</span>
</span><span class='line'>1 2 3 4 5 6 7
</span><span class='line'>
</span><span class='line'><span class="c"># both mean first and last field - but the first version only works if there are</span>
</span><span class='line'><span class="c"># 7 fields, the second always works</span>
</span><span class='line'><span class="o">{</span>print <span class="nv">$1</span> <span class="s2">&quot; &quot;</span> <span class="nv">$7</span><span class="o">}</span>
</span><span class='line'><span class="o">{</span>print <span class="nv">$1</span> <span class="s2">&quot; &quot;</span> <span class="nv">$NF</span><span class="o">}</span>
</span><span class='line'>-&gt; 1 7
</span><span class='line'>-&gt; 1 7
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># print the last two fields</span>
</span><span class='line'><span class="o">{</span>print <span class="k">$(</span>NF-1<span class="k">)</span> <span class="s2">&quot; &quot;</span> <span class="nv">$NF</span><span class="o">}</span>
</span><span class='line'>-&gt; 6 7
</span></code></pre></td></tr></table></div></figure>


<p>Another useful global variable that gets updated for each record is NR - this is the record number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># feed a four line input into awk</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;a</span>
</span><span class='line'><span class="s1">&gt; b</span>
</span><span class='line'><span class="s1">&gt; c</span>
</span><span class='line'><span class="s1">&gt; d&#39;</span> | awk <span class="s1">&#39;{print NR &quot;) &quot; $1}&#39;</span>
</span><span class='line'><span class="c"># it prints the line number, ), and the first (and only) field</span>
</span><span class='line'>1<span class="o">)</span> a
</span><span class='line'>2<span class="o">)</span> b
</span><span class='line'>3<span class="o">)</span> c
</span><span class='line'>4<span class="o">)</span> d
</span></code></pre></td></tr></table></div></figure>


<p>You can assign to a field variable with the &#8216;=&#8217; operator, thereby changing the record content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># adding something to a field - will only works if it&#39;s a number</span>
</span><span class='line'><span class="o">{</span><span class="nv">$3</span> <span class="o">=</span> <span class="o">(</span><span class="nv">$3</span> + 100<span class="o">)</span>
</span><span class='line'><span class="c"># now print the updated line</span>
</span><span class='line'>print <span class="nv">$0</span><span class="o">}</span>
</span><span class='line'>-&gt; 1 2 103 4 5 6 7
</span></code></pre></td></tr></table></div></figure>


<p>If you assign to a field variable that doesn&#8217;t exist, it will be added to the record</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># the record only contains $1 and $2;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>1 2 | awk <span class="s1">&#39;{print $0}&#39;</span>
</span><span class='line'><span class="nv">$ </span>1 2
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># the program adds two new fields</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>1 2 | awk <span class="s1">&#39;{$3 = 3; $4 = 4; print $0}&#39;</span>
</span><span class='line'><span class="nv">$ </span>1 2 3 4
</span></code></pre></td></tr></table></div></figure>


<h3>Global variables</h3>

<p>A few variables are set when the program is launched. Here&#8217;s a very short list - if you need to play with these you probably want to get yourself a book on awk.</p>

<table>
<thead>
<tr>
<th></th>
<th align="right">Variable</th>
<th align="left"> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="right"> ARGV    </td>
<td align="left"> array of command line arguments</td>
</tr>
<tr>
<td></td>
<td align="right"> ARGC    </td>
<td align="left"> number of command line arguments</td>
</tr>
<tr>
<td></td>
<td align="right"> ENVIRON </td>
<td align="left"> associative array with environment. Depends on system</td>
</tr>
<tr>
<td></td>
<td align="right"> FILENAME</td>
<td align="left"> self explanatory</td>
</tr>
</tbody>
</table>


<h3>User defined variables</h3>

<p>To create your own variable, just start assigning to them with the &#8216;=&#8217; operator - awk will initialize them to an emptry string (which becomes a 0 if used in numeric context). The type of variable is dynamic and can vary during its lifetime.</p>

<p>In the example below, awk is used on the ls command to find the total size of a folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ls -la returns listings in the form:</span>
</span><span class='line'><span class="c"># -rw-rw-r--    1 gotofritz staff   1513 Dec 15  2013 .bash_profile</span>
</span><span class='line'><span class="c"># awk simply collects each filesize and adds it to a running total,</span>
</span><span class='line'><span class="c"># then prints it at the end</span>
</span><span class='line'><span class="nv">$ </span>ls -la | awk <span class="s1">&#39;    { total += $5 }</span>
</span><span class='line'><span class="s1">                END { print total }&#39;</span>
</span><span class='line'>-&gt; 158448
</span></code></pre></td></tr></table></div></figure>


<h3>Arrays</h3>

<p>Awk has associative arrays, similar to PHP&#8217;s or Javascript. You create an array by using it, no need to initialize it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this file</span>
</span><span class='line'>10 Life changes fast
</span><span class='line'>20 Life changes in the instant
</span><span class='line'>30 You sit down to dinner and life as you know it ends
</span><span class='line'>40 The question of self-pity
</span><span class='line'>
</span><span class='line'><span class="c"># creates my_array and inserts all lines into it</span>
</span><span class='line'><span class="o">{</span> my_array<span class="o">[</span><span class="nv">$1</span><span class="o">]</span> <span class="o">=</span> <span class="nv">$2</span> <span class="o">}</span>
</span><span class='line'><span class="c"># creates - note that array is sparse</span>
</span><span class='line'>my_array<span class="o">[</span>10<span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Life changes fast&quot;</span>
</span><span class='line'>my_array<span class="o">[</span>20<span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Life changes in the instant&quot;</span>
</span><span class='line'>my_array<span class="o">[</span>30<span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;You sit down to dinner and life as you know it ends&quot;</span>
</span><span class='line'>my_array<span class="o">[</span>40<span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;The question of self-pity&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># string keys are also possible</span>
</span><span class='line'><span class="o">{</span> my_array<span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Homer&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing that is different in awk is that multidimensional arrays use a single set of square brackets to wrap both indices</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this file</span>
</span><span class='line'>dad homer
</span><span class='line'>mum marge
</span><span class='line'>son bart
</span><span class='line'>
</span><span class='line'><span class="c"># creates a two dimensional array</span>
</span><span class='line'><span class="o">{</span> family<span class="o">[</span><span class="s2">&quot;simpsons&quot;</span>,<span class="nv">$1</span><span class="o">]</span> <span class="o">=</span> <span class="nv">$2</span> <span class="o">}</span>
</span><span class='line'>-&gt; creates
</span><span class='line'>family<span class="o">[</span><span class="s2">&quot;simpsons&quot;</span>,<span class="s2">&quot;dad&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;homer&quot;</span>
</span><span class='line'>family<span class="o">[</span><span class="s2">&quot;simpsons&quot;</span>,<span class="s2">&quot;mum&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;marge&quot;</span>
</span><span class='line'>family<span class="o">[</span><span class="s2">&quot;simpsons&quot;</span>,<span class="s2">&quot;son&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;bart&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that arrays in awk are pretty awkward. There are no built in functions to deal with them except for the for &#8230; in loop. If you need to sort, or even just find out the length, you&#8217;ll have to write your own functions. There are a couple in <a href="http://gotofritz.net/blog/geekery/a-selection-of-akw-scripts/">Part 2</a>. Alternatively, use gawk which has <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Arrays">better array handling</a>.</p>

<h3>Regular expressions</h3>

<p>A regular expression (regexp) is a mini programming language which is used to describe variable strings; it is embedded in most programming languages.
Regexps are enclosed in slashes and use a combination of literal characters and punctuation to describe strings. The operator ~ is used to match a regexp, and !~ to ensure it is not matched.</p>

<p>Regular expressions is a complicated topic of its own; here is just a quick introduction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># print all lines with &quot;gmail&quot; in the 1st field</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /gmail/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># prints all lines EXCEPT those with &quot;gmail&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> !~ /gmail/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ^ indicates start of string.</span>
</span><span class='line'><span class="c"># this matches &quot;tom&quot; &quot;tomato&quot; but not &quot;atom&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /^tom/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $ indicates end of string</span>
</span><span class='line'><span class="c"># this matches &quot;tom&quot;, &quot;atom&quot; but not &quot;tomato&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /tom<span class="nv">$/</span><span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this matches &quot;tom&quot;, not &quot;atom&quot; and not &quot;tomato&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /^tom<span class="nv">$/</span><span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># . matches any character.</span>
</span><span class='line'><span class="c"># this matches &quot;bear&quot; &quot;boar&quot; but not &quot;bar&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /b..r/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># [ABC] matches one character from the set &quot;A&quot;, &quot;B&quot;, &quot;C&quot;</span>
</span><span class='line'><span class="c"># this matches &quot;boar&quot; &quot;bear&quot; but not &quot;blar&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /b<span class="o">[</span>oe<span class="o">]</span>ar/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># [^ABC] matches one character which is anything except &quot;A&quot;, &quot;B&quot;, &quot;C&quot;</span>
</span><span class='line'><span class="c"># this matches &quot;blar&quot; but neither &quot;boar&quot; nor &quot;bear&quot;</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /b<span class="o">[</span>^oe<span class="o">]</span>ar/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># (abc) groups the expression abc as a unit.</span>
</span><span class='line'><span class="c"># | is an &quot;or&quot;</span>
</span><span class='line'><span class="c"># \ is used to scape special characters, i.e. treat them as normal characters</span>
</span><span class='line'><span class="c"># in this case we want to treat the &#39;.&#39; as a period and not &quot;any character&quot;</span>
</span><span class='line'><span class="c"># the following matches @gmail.com or @yahoo.com</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /@<span class="o">(</span>gmail<span class="o">)</span>|<span class="o">(</span>yahoo<span class="o">)</span><span class="se">\.</span>com/<span class="o">)</span> print<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># * means repeat zero or more. + is repeat once or more. ? is repeat 0 or 1</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> ~ /&lt;<span class="o">[</span>^&gt;<span class="o">]</span>+&gt;<span class="o">[</span>^&lt;<span class="o">]</span>*&lt;/<span class="o">[</span>^&gt;<span class="o">]</span>+&gt;<span class="se">\.</span>?/<span class="o">)</span> print <span class="o">}</span>
</span><span class='line'><span class="c"># the following matches &lt; followed by one or more (+) of anything except &gt;, then &gt;</span>
</span><span class='line'><span class="c"># then zero or more (*) of anything except &lt;</span>
</span><span class='line'><span class="c"># then &lt;/ followed by one or more (+) of anything except &gt;, then &gt;</span>
</span><span class='line'><span class="c"># then an optional .</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Statements, operators, and function</h2>

<h3>Control statements</h3>

<p>Awk has the usual loops and conditionals familiar from C. Braces are optional for single nested statements</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># braces are optional for single statements</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span>name in list_of_names<span class="o">)</span>
</span><span class='line'>  print name
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span>capital_city in country<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  print capital_city
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># but needed for multiple statements</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span>NR % <span class="nv">2</span> <span class="o">==</span> 0<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">$2</span> <span class="o">=</span> <span class="nv">$1</span> * 2
</span><span class='line'>  print <span class="nv">$0</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>if-else</h4>

<p>Awk doesn&#8217;t have booleans. Instead it treats the number 0 or the empty string &#8220;&#8221; as false, and any other value (including the string &#8220;0&#8221;) as true. The comparison operators are the familiar ones, with double equal sign for equality, plus the tilde ~ and !~ for regular expression matching, and &#8220;in&#8221; for array existence</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> <span class="o">==</span> <span class="s2">&quot;full&quot;</span><span class="o">)</span> ... <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$2</span> &lt; 0.5<span class="o">)</span> ... <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$0</span> ~ /Republican/<span class="o">)</span> print <span class="nv">$0</span> <span class="o">}</span> ... <span class="c"># matches regexp</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$1</span> !~ /Completed/<span class="o">)</span> print <span class="nv">$0</span> <span class="o">}</span> ... <span class="c"># rejects regexp</span>
</span><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span>capital_city in country<span class="o">)</span> print country<span class="o">[</span><span class="s2">&quot;capital_city&quot;</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>loops</h4>

<p>Awk has both for and while loops (including do-while). Additionally, there is the for-in loop for sparse arrays</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume file</span>
</span><span class='line'>1 10 100
</span><span class='line'>2 20 200
</span><span class='line'>
</span><span class='line'><span class="c"># both these programs will print each line with fields back-to-front</span>
</span><span class='line'><span class="c"># while loop version...</span>
</span><span class='line'><span class="o">{</span> <span class="nv">i</span> <span class="o">=</span> NF
</span><span class='line'>  <span class="nv">line</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span>i<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">line</span> <span class="o">=</span>  line <span class="s2">&quot; &quot;</span> <span class="nv">$i</span>
</span><span class='line'>    i--
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  print line
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c"># for loop version</span>
</span><span class='line'><span class="o">{</span> <span class="nv">line</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="nv">i</span><span class="o">=</span>NF; i&gt;0; i--<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">line</span> <span class="o">=</span>  line <span class="s2">&quot; &quot;</span> <span class="nv">$i</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  print line
</span><span class='line'><span class="o">}</span>
</span><span class='line'>-&gt; 100 10 1
</span><span class='line'>   200 20 2
</span><span class='line'>
</span><span class='line'><span class="c"># puts each line of input into the array</span>
</span><span class='line'><span class="o">{</span> lines<span class="o">[</span><span class="nv">$NR</span><span class="o">]</span> <span class="o">=</span> <span class="nv">$0</span> <span class="o">}</span>
</span><span class='line'><span class="c"># at end prints all the lines</span>
</span><span class='line'>END <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span>line in lines<span class="o">)</span>
</span><span class='line'>    print line
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>break</code> and <code>continue</code> statements are available to exit a loop prematurely or skipping an iteration respectively.</p>

<h4>next</h4>

<p><code>next</code> is used to stop precessing a record and moving on to the next</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$5</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span><span class="o">)</span> next <span class="o">}</span>
</span><span class='line'><span class="o">{</span> print <span class="nv">$5</span> <span class="nv">$4</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Awk numeric operators</h3>

<p>The usual maths operators can be used: +, -, /, * , ++, &#8211; plus % for modulus, ^ for exponentiation. Unary + converts to a number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;1</span>
</span><span class='line'><span class="s2">&gt; 2</span>
</span><span class='line'><span class="s2">&gt; 3</span>
</span><span class='line'><span class="s2">&gt; 4&quot;</span> | awk <span class="s1">&#39;{print $1 ^ 2}&#39;</span>
</span><span class='line'>1
</span><span class='line'>4
</span><span class='line'>9
</span><span class='line'>16
</span></code></pre></td></tr></table></div></figure>


<h3>String concatenation</h3>

<p>Concatenating string in awk is slightly weird. There is no string concatenation operator; just put the strings next to each other. Because of that it is recommended to use parenthesis except for trivial cases. Alternatively, <code>print</code> can take multiple comma separated arguments - and they will be printed with a space separating them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this file</span>
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>
</span><span class='line'><span class="c"># the strings ($1..) and &quot;a&quot; are concatenated (no space between them) and</span>
</span><span class='line'><span class="c"># the resulting string is passed to print</span>
</span><span class='line'><span class="o">{</span>print <span class="o">(</span><span class="nv">$1</span>+2<span class="o">)</span> <span class="s2">&quot;a&quot;</span><span class="o">}</span>
</span><span class='line'>3a
</span><span class='line'>4a
</span><span class='line'>5a
</span><span class='line'>6a
</span><span class='line'>
</span><span class='line'><span class="c"># two separate strings are passed to print -  a space is put between them</span>
</span><span class='line'><span class="o">{</span>print <span class="o">(</span><span class="nv">$1</span>+2<span class="o">)</span>, <span class="s2">&quot;a&quot;</span><span class="o">}</span>
</span><span class='line'>3 a
</span><span class='line'>4 a
</span><span class='line'>5 a
</span><span class='line'>6 a
</span><span class='line'>
</span><span class='line'><span class="c"># string concatenation works for variables too</span>
</span><span class='line'><span class="o">{</span> <span class="nv">something</span> <span class="o">=</span> <span class="nv">$1</span> <span class="s2">&quot;--&quot;</span>
</span><span class='line'>  print something <span class="o">}</span>
</span><span class='line'>1--
</span><span class='line'>2--
</span><span class='line'>3--
</span><span class='line'>4--
</span></code></pre></td></tr></table></div></figure>


<h3>Built in functions</h3>

<p>There are a number of built in functions: numeric ones like cosine, square root, random; string functions like print or string length; time functions and bitwise functions. You can easily find out what they are by looking at the output of <code>man awk</code>.</p>

<p>Worth nothing that besides <code>print</code> awk also offers <code>printf</code>, i.e. &#8220;print formatted&#8221;. Printf is common to many Unix tools and languages. You give a string with some placeholders and rules, and then you pass variables to &#8220;plug in&#8221; those placeholders. The important thing is the rules, which control things like right alignment, decimal precision, zero padding for numbers, etc. A statement looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span> <span class="nb">printf</span> <span class="s2">&quot;%-10s %04.3f%% \n&quot;</span>, <span class="nv">$1</span>, <span class="nv">$2</span> <span class="o">}</span>
</span><span class='line'><span class="c"># placeholders start with %</span>
</span><span class='line'><span class="c"># %-10s is a string (s), and is left aligned (-) within a field 10 spaces wide (10)</span>
</span><span class='line'><span class="c"># %07.3f is a decimal number or float (f), the toal length has to be at least 7</span>
</span><span class='line'><span class="c">#        characters (7) and is padded with zeroes if too small (0) and has</span>
</span><span class='line'><span class="c">#        3 decimals (3) and minimum 3 in the integer part (7 - 3 decimals - the point)</span>
</span><span class='line'><span class="c"># %% if you want to print an actual %, you need to type it twice %%</span>
</span><span class='line'><span class="c"># \n you need to supply the new line manually</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.math.utah.edu/docs/info/gawk_7.html#SEC61">More information on printf</a>.</p>

<h3>User defined functions</h3>

<p>You can define functions anywhere in your code, outside actions. They are pretty similar to Javascript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># define funtion outside rules - could be at the bottom of file</span>
</span><span class='line'><span class="k">function </span>my_func<span class="o">(</span>field_content<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  print <span class="s2">&quot;FIELD: &quot;</span> field_content
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now use in rules</span>
</span><span class='line'><span class="o">{</span>my_func<span class="o">(</span><span class="nv">$1</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Patterns</h2>

<p>Previously I described an awk program as a series of actions, with the special case of BEGIN and END. That&#8217;s not entirely correct. An awk program consists of a sequence of actions and optional <em>patterns</em>; BEGIN and END are two special patterns. Incidentally, there is also a BEGINFILE and ENDFILE, for when processing more than one file at the time.</p>

<p>BEGIN and END are special because they identify actions which are not executed for every line of input, but before or after the whole program is run. The other patterns are used on every line to determine whether the action should be run for that particular line or not. Patterns are espressions that return false (i.e., 0 or &#8220;&#8221;) or true (anything else). When the pattern returns true, the rules is executed.</p>

<h3>Regular expression patterns</h3>

<p>Regular expressions can be used as pattern; they match the entire line. An exclamation mark reverses the match. Boolean operators can be used to combine patterns</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># print lines with an email address</span>
</span><span class='line'><span class="c"># (very lazy match - will only work if all email addresses are well formed)</span>
</span><span class='line'>/@/ <span class="o">{</span> print <span class="nv">$3</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># prints all lines except those with a gmail address</span>
</span><span class='line'>! /@gmail<span class="se">\.</span>/ <span class="o">{</span> print <span class="nv">$0</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># prints lines with an @ and the sequence 0160</span>
</span><span class='line'>/@/ <span class="o">&amp;&amp;</span> /0160/ <span class="o">{</span> print <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The regular expressions above are a shortcut for <code>$0 ~ /pattern/</code>, i.e. &#8220;apply the regexp to whole line&#8221;. Similar rules can be made for individual fields&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># matches only the regx on one field</span>
</span><span class='line'><span class="nv">$1</span> ~ /Anthony/ <span class="o">{</span> print <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>..and all expressions seen so far</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># print even lines</span>
</span><span class='line'>NR % <span class="nv">2</span> <span class="o">==</span> 0 <span class="o">{</span> print <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># print only if length of 1st field is greater than 3</span>
</span><span class='line'><span class="c"># length is a string function mentioned above</span>
</span><span class='line'>length<span class="o">(</span><span class="nv">$1</span><span class="o">)</span> &gt; 3 <span class="o">{</span> print <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason we have been able to run program without patterns is because there is a special pattern, the empty pattern, which matches every line. In fact we could have a program which is just a pattern; the default action <code>{print}</code> would be executed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># prints whole line, default action</span>
</span><span class='line'><span class="nv">$1</span> <span class="o">==</span> <span class="s2">&quot;complete&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Splitting records and fields differently from default</h2>

<p>By default awk treats each line as a record. In reality what it does is to split the input by a record separator, stored in the variable RS, which happens to be the new line character. You can change that in an awk program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># separate records by semicolon</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;1 2 3;4 5 6;7 8 9&quot;</span> | awk <span class="s1">&#39;BEGIN {RS = &quot;;&quot; }</span>
</span><span class='line'><span class="s1">&gt;                                 {print}&#39;</span>
</span><span class='line'>1 2 3
</span><span class='line'>4 5 6
</span><span class='line'>7 8 9
</span></code></pre></td></tr></table></div></figure>


<p>Something similar is possible with the field separator, which is stored in the variable FS. By default it is equal to the regexp <code>[ \t\n]+</code>, i.e. any number of consectuve spaces of any type. Note that in reality awk cheats - leaving FS default doesn&#8217;t just mean setting it to <code>[ \t\n]+</code>, but also trimming $0 of leading and trailing empty space before processing it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># separate fields by comma</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;1,2,3</span>
</span><span class='line'><span class="s2">4,5,6</span>
</span><span class='line'><span class="s2">7,8,9&quot;</span> | awk <span class="s1">&#39;BEGIN {FS = &quot;,&quot; }</span>
</span><span class='line'><span class="s1">&gt;             {print}&#39;</span>
</span><span class='line'>1,2,3
</span><span class='line'>4,5,6
</span><span class='line'>7,8,9
</span></code></pre></td></tr></table></div></figure>


<p>You can combine the two together if, for example, your data has one field per line and records are separated by multiple lines - an empty RS means &#8220;any number of consecutive \n &#8220;&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># assume this data</span>
</span><span class='line'>homer simpson
</span><span class='line'>dad
</span><span class='line'>
</span><span class='line'>marge simpson
</span><span class='line'>mum
</span><span class='line'>
</span><span class='line'><span class="c"># separate records by any number of newlines, and have one field per line</span>
</span><span class='line'>BEGIN <span class="o">{</span><span class="nv">RS</span><span class="o">=</span><span class="s2">&quot;&quot;</span>; <span class="nv">FS</span><span class="o">=</span><span class="s2">&quot;\n&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">{</span> print <span class="nv">$1</span> <span class="s2">&quot; (&quot;</span> <span class="nv">$2</span> <span class="s2">&quot;)&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>-&gt; homer simpson <span class="o">(</span>dad<span class="o">)</span>
</span><span class='line'>   marge simpson <span class="o">(</span>mum<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Passing option to awk</h2>

<p>A field separator (but not a record separator) can be also passed to an awk program in two ways. First of all, awk has a special option for it, -F (note that there is no space between it and the separator). And awk allow passing of variables with the -v syntax, so you could just pass FS that way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># change separator from within program</span>
</span><span class='line'>BEGIN <span class="o">{</span><span class="nv">FS</span> <span class="o">=</span> <span class="s2">&quot;,&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pass separator with special option -F - note that you don&#39;t need quotes</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;1,2,3</span>
</span><span class='line'><span class="s2">&gt; 4,5,6&quot;</span> | awk -F, <span class="s1">&#39;{print}&#39;</span>
</span><span class='line'>1,2,3
</span><span class='line'>4,5,6
</span><span class='line'>
</span><span class='line'><span class="c"># pass separator as external var with -v</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;1,2,3</span>
</span><span class='line'><span class="s2">&gt; 4,5,6&quot;</span> | awk -v <span class="nv">FS</span><span class="o">=</span><span class="s2">&quot;,&quot;</span> <span class="s1">&#39;{print}&#39;</span>
</span><span class='line'>1,2,3
</span><span class='line'>4,5,6i
</span><span class='line'>
</span><span class='line'><span class="c"># in fact you can pass any variable of your choice with -v</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;&quot;</span> | awk -v <span class="nv">WHAT</span><span class="o">=</span><span class="s2">&quot;grow up&quot;</span> <span class="s1">&#39;{print &quot;All children, except one, &quot; WHAT}&#39;</span>
</span><span class='line'>All children, except one, grow up
</span></code></pre></td></tr></table></div></figure>


<h2>Reading CSV files in awk</h2>

<p>The naive approach would be to simply set FS=&#8221;,&#8221; - but that doesn&#8217;t cover the fact that some fields are surrounded by quotation marks and others aren&#8217;t, and sometimes you have newlines and / or commas inside a field. <a href="http://www.linuxquestions.org/questions/programming-9/awk-with-csv-files-881103/">Here are some examples scripts</a> people have put together to solve the issues. They are also good examples of fairly complex awk scripts.</p>

<p>Personally I think that&#8217;s taking things too far - if you have to force awk to create arrays to store  manipulated record fragments you may as well use a fully fledged scripting language.</p>

<p>Another approach is to use gawk, and <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Splitting-By-Content">its FPAT variable</a></p>

<h2>Learning more about awk</h2>

<p>With that all the main awk topics were touched on. If you want to go deeper I recomend <a href="http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_toc.html">The AWK Manual</a>, or <a href="http://shop.oreilly.com/product/9780596000707.do">one of the O&#8217;Reilly books</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to prevent Less errors stopping gulp watch]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-prevent-less-errors-stopping-gulp-watch/"/>
    <updated>2015-06-19T00:56:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-prevent-less-errors-stopping-gulp-watch</id>
    <content type="html"><![CDATA[<p>A <code>gulp watch</code> task will stop as soon as you have a Less error. Here&#8217;s I how prevented that.</p>

<!--more-->


<h2>A simple gulp less task</h2>

<p>Here is a simple gulp less task that runs manually by typing <code>gulp css:less</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">less</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-less&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="err">“</span><span class="nx">css</span><span class="o">:</span><span class="nx">less</span><span class="s2">&quot;, function (cb) {</span>
</span><span class='line'><span class="s2">   var lessArgs = {</span>
</span><span class='line'><span class="s2">          // fill in as appropriate</span>
</span><span class='line'><span class="s2">        };</span>
</span><span class='line'>
</span><span class='line'><span class="s2">   return gulp</span>
</span><span class='line'><span class="s2">  .src(“./less/**/*.less&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">less</span><span class="p">(</span><span class="nx">lessArgs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&quot;dist/&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A simple &#8220;gulp watch&#8221; task</h2>

<p>Here is a simple watch version of the task - it will watch less files, and rerun the task whenever a file is changed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">less</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-less&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">watch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-watch&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&quot;css:watch&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">lessArgs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// fill in as appropriate</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="err">“</span><span class="p">.</span><span class="o">/</span><span class="nx">less</span><span class="cm">/**/</span><span class="o">*</span><span class="p">.</span><span class="nx">less</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">  .pipe(watch(“./less/**/*.less&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">less</span><span class="p">(</span><span class="nx">lessArgs</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&quot;dist/&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The gulp-less plugin documentation doesn’t help</h2>

<p>The <a href="https://www.npmjs.com/package/gulp-less">gulp-less plugin documentation</a> states</p>

<blockquote><p>By default, a gulp task will fail and all streams will halt when an error happens.To change this behavior check out the error handling documentation <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md">here</a></p></blockquote>

<p>But don’t waste your time installing the <code>stream-combiner2</code> plugin - it doesn’t work.</p>

<p><code>Plumber</code>, which  I came across when googling for the issue (you’ll probably end up <a href="https://github.com/gulpjs/gulp/issues/259">in this github issue</a>  sooner or later if you google for this) didn&#8217;t help either.</p>

<h2>How to stop &#8220;gulp watch&#8221; dying when on a Less or Sass error</h2>

<p>The solution that worked for me was to create a function which handles the error and make the function emit the error. Then attach directly to the less task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-util&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">less</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-less&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">taskName</span> <span class="o">=</span> <span class="err">“</span><span class="nx">css</span><span class="o">:</span><span class="nx">less</span><span class="s2">&quot;;</span>
</span><span class='line'><span class="s2">var onError = function (err) {</span>
</span><span class='line'><span class="s2">    gutil.log(gutil.colors.red(&quot;</span><span class="nx">ERROR</span><span class="s2">&quot;, taskName), err);</span>
</span><span class='line'><span class="s2">    this.emit(&quot;</span><span class="nx">end</span><span class="s2">&quot;, new gutil.PluginError(taskName, err, { showStack: true }));</span>
</span><span class='line'><span class="s2">  };</span>
</span><span class='line'>
</span><span class='line'><span class="s2">gulp.task(taskName, function jsLint() {</span>
</span><span class='line'><span class="s2">  var lessArgs = {</span>
</span><span class='line'><span class="s2">      // fill in as appropriate</span>
</span><span class='line'><span class="s2">    };</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  return gulp</span>
</span><span class='line'><span class="s2">  .src(“./less/**/*.less&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">watch</span><span class="p">(</span><span class="err">“</span><span class="p">.</span><span class="o">/</span><span class="nx">less</span><span class="cm">/**/</span><span class="o">*</span><span class="p">.</span><span class="nx">less</span><span class="s2">&quot;))</span>
</span><span class='line'><span class="s2">  .pipe(less(lessArgs).on(&#39;error&#39;, onError))</span>
</span><span class='line'><span class="s2">  .pipe(gulp.dest(&quot;</span><span class="nx">dist</span><span class="o">/</span><span class="err">&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above, the function is <code>onError</code> - is the “this.emit” that does the magic. <code>gutil.log</code> is only eye candy. The onError function is connected to less with <code>.on(“error”, onError)</code>. And that’s all there is to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why doesn't ls | echo work?]]></title>
    <link href="http://gotofritz.net/blog/geekery/why-pipe-echo-doesnt-work/"/>
    <updated>2015-05-28T22:58:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/why-pipe-echo-doesnt-work</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls | <span class="nb">echo</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those new to bash often wonder why piping a command to <code>echo</code> doesn&#8217;t do anything. Here&#8217;s a quick explanation.</p>

<!--more-->


<h2>Streams vs. Arguments</h2>

<h3>Bash commands are just programs</h3>

<p>Bash commands are small (mostly..) independent programs which in theory <a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well]">&#8220;do one  thing and do it well&#8221;</a>. To prove this, you can find out where they are in the filesystem with <code>which</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which ls
</span><span class='line'>/usr/local/opt/coreutils/libexec/gnubin/ls
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Standard Unix streams</h3>

<p>Each of these programs can access <i>streams</i>. Streams are open ended communication channels between the program and the unix core - they used to be the keyboard and the terminal, but they are abstracted so that writing to or reading from a stream is exactly the same as doing it to a file. The &#8220;(text) terminal&#8221; was <em>the</em> way to connect to a computer remotely - it was basically one of those <a href="https://upload.wikimedia.org/wikipedia/commons/8/87/Televideo925Terminal.jpg">fat screens</a> you see in old movies. In modern computers the same functionality is carried out by a small dedicated program, which is referred as either &#8220;the shell&#8221;, &#8220;the command line&#8221;, &#8220;the CLI (command line interface)&#8221; or, on OS X, &#8220;Terminal&#8221;.</p>

<p>The three default streams are STDIN to read from (the keyboard), STDOUT to write to (the shell), and STDERR to write errors to (also the shell). Standard behaviour can be easily changed, so that an app can be made to write to a file instead of the STDOUT stream, for example.</p>

<p>By default your shell app connects the keyboard as STDIN and the shell window as both STDOUT and STDERR. When you type something (STDIN) it&#8217;s passed on immediately to the app which does two things - it pushes it as it is to window (STDOUT) so that you see what you&#8217;ve typed; and it keeps it around waiting for you to hit return. At the point it will parse what you have typed and run it as a command if it can, and print the output to the window (STDOUT); if it doesn&#8217;t understand it, it will print an error message to the window (STDERR)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Terminal taking your STDIN and copying it to STDOUT</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="c"># &lt;RETURN&gt; detected - command run and result printed to STDOUT</span>
</span><span class='line'>hello
</span><span class='line'><span class="c"># this command wasn&#39;t understood - error message printed to STDERR (which</span>
</span><span class='line'><span class="c"># in Terminal is exactly the same window as STDOUT)</span>
</span><span class='line'><span class="nv">$ </span>gibberish
</span><span class='line'>-bash: gibberish: <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>A shell program will also get the same STDOUT, STDIN and STDERR as Terminal - depending on the program, you may get the same output twice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># program &quot;cat&quot; recognized and started</span>
</span><span class='line'><span class="nv">$ </span>cat
</span><span class='line'><span class="c"># it just sits there and collects everything you type in STDIN until</span>
</span><span class='line'><span class="c"># you type &lt;RETURN&gt; then it prints it to STDOUT</span>
</span><span class='line'><span class="c"># meanwhile your shell window is also pushing everything it gets to STDOUT,</span>
</span><span class='line'><span class="c"># therefore you get it twice</span>
</span><span class='line'>line1 <span class="c"># printed to STDOUT by shell window as you type</span>
</span><span class='line'>line1 <span class="c"># printed to STDOUT by cat when you typed &lt;RETURN&gt;</span>
</span><span class='line'>line2 <span class="c"># printed to STDOUT by shell window as you type</span>
</span><span class='line'>line2 <span class="c"># etc</span>
</span><span class='line'><span class="c"># to quit the shell program normally you use &lt;CTRL-C&gt;</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Streams redirection</h3>

<p>You can easily redirect one of the three standard streams to something else - typically a file. To redirect STDOUT, use &gt;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># program cat recognized; STDOUT redirected to a file</span>
</span><span class='line'><span class="nv">$ </span>cat &gt; test.txt
</span><span class='line'><span class="c"># your shell window is still printing to STDOUT as you type; but cat</span>
</span><span class='line'><span class="c"># itself is not, it is printing to the text file.</span>
</span><span class='line'><span class="c"># So this time you only get each line once</span>
</span><span class='line'>line1 <span class="c"># printed to STDOUT by shell window as you type</span>
</span><span class='line'>line2 <span class="c"># printed to STDOUT by shell window as you type</span>
</span><span class='line'><span class="c"># to quit the shell program normally you use &lt;CTRL-C&gt;</span>
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># if you open your text file, it will have the text you have just typed inside</span>
</span><span class='line'><span class="nv">$ </span>open test.txt
</span></code></pre></td></tr></table></div></figure>


<p>STDIN is redirected with &lt;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># program cat recognized; instead of taking STDIN from keyboard, use a file</span>
</span><span class='line'><span class="nv">$ </span>cat &lt; test.txt
</span><span class='line'><span class="c"># all the text in the file is printed out in one go</span>
</span><span class='line'>line1
</span><span class='line'>line2
</span><span class='line'>line3
</span></code></pre></td></tr></table></div></figure>


<p>STDERR is redirected with 2&gt;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># error printed to STDERR</span>
</span><span class='line'><span class="nv">$ </span>cat gibberish
</span><span class='line'>cat: gibberish: No such file or directory
</span><span class='line'><span class="c"># STDERR redirected to &quot;the null device&quot;, i.e. an address on Unix systems</span>
</span><span class='line'><span class="c"># that absorbs all error messages and suppresses them</span>
</span><span class='line'><span class="nv">$ </span>cat gibberish 2&gt; /dev/null
</span><span class='line'><span class="c"># no output - it&#39;s disappeared into /dev/null</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Program arguments</h3>

<p>Programs can also have <i>arguments</i> - these are values that are typically typed in and passed to the program by Bash as an array. Arguments are space separated (you can use quotation marks to include a space as part of the argument).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># program &quot;echo&quot; called, and 3 arguments passed to it - a, b, and c</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo  </span>a b c
</span><span class='line'><span class="c"># echo does its thing - which is simply to print out arguments</span>
</span><span class='line'>a b c
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="c"># this time echo is called with one argument - the complete sentence</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;What’s it going to be then, eh?&quot;</span>
</span><span class='line'><span class="c"># in the case of echo, the result looks exactly the same. It may not do for other programs</span>
</span><span class='line'>What’s it going to be <span class="k">then</span>, eh?
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of programs support both arguments and STDIN / STDOUT; but they don&#8217;t have to. Take grep for example - a program that prints out the input if it matches a pattern. When you run it, it looks at how many arguments it was passed to decide what to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep called with two arguments: export and ~/.bash_profile</span>
</span><span class='line'><span class="nv">$ </span>grep <span class="s2">&quot;export&quot;</span> ~/.bash_profile
</span><span class='line'><span class="c"># it runs on the file .bash_profile in your home folder (~/) and prints out each</span>
</span><span class='line'><span class="c"># line that matches the pattern</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/bin:$PATH&quot;</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it detects two arguments, it treats the first  as a pattern, and the second as the path of a file to open and read line by line. It then prints any line in the file that include the pattern</p>

<p>But grep also supports STDIN:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># grep called with only one argument: export. Instead of connecting to a file,</span>
</span><span class='line'><span class="c"># it waits for input on STDIN</span>
</span><span class='line'><span class="nv">$ </span>grep <span class="s2">&quot;export&quot;</span>
</span><span class='line'><span class="c"># Terminal prints what you type to STDOUT, as usual</span>
</span><span class='line'>I am now typing something
</span><span class='line'><span class="c"># still Terminal...</span>
</span><span class='line'>grep is looking <span class="k">for </span>the string <span class="nb">export</span> - will it find it?
</span><span class='line'><span class="c"># grep has detected &quot;export&quot; in its STDIN - so it prints it to STDOUT</span>
</span><span class='line'>grep is looking <span class="k">for </span>the string <span class="nb">export</span> - will it find it?
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>With only one argument, the programmers who created <code>grep</code> decided to treat the first argument as a pattern as before, and to wait for input from STDIN. It makes sense since with only one argument it wouldn&#8217;t know which file to open. In the example above I start typing some random stuff and press return, and when grep finds the string matching the patter in my text it will spit out the string again.</p>

<h3>Streams piping</h3>

<p>What makes Unix so useful is that you can connect small programs together by joining the STDOUT of a program with the STDIN of another - using the pipe character, <code>|</code>, and because streams are treated like files, it will just work. But you already knew that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># the STDOUT of the ps program is connected to the STDIN of grep</span>
</span><span class='line'><span class="nv">$ </span>ps -ef | grep httpd
</span><span class='line'>....
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why can&#8217;t you pipe a command to echo?</h2>

<p>With all that out of the way, the explanation is quite simple - piping commands to <code>echo</code> does not work, because echo was not programmed to care about STDIN. All it&#8217;s wired up to do is to take the <i>arguments</i> and copy them to STDOUT.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ls puts the output on STDOUT, which is connected to echo&#39;s STDIN</span>
</span><span class='line'><span class="c"># but echo ignores STDIN, all it cares about is command line arguments</span>
</span><span class='line'><span class="nv">$ </span>ls | <span class="nb">echo</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if your command ignores STDIN, what you have to do is to find a different one which does the same thing, but also reads from STDIN. In the case of echo, that substitute is <code>cat</code>, which as we saw above, does what echo does, but using STDIN as input:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls ~/ | cat
</span><span class='line'>Applications
</span><span class='line'>Desktop
</span><span class='line'>...
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that&#8217;s not the whole story.</p>

<h2>Using xargs to transform STDIN to arguments</h2>

<p>Turns out you <i>can</i> pipe to echo, if you use <code>xargs</code>. Xargs is a command that takes STDIN and turns it into arguments for a <i>command</i> (if it finds no command it will use echo). So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># xargs is basically creating the command: echo Applications Desktop Documents ...</span>
</span><span class='line'><span class="nv">$ </span>ls ~/ | xargs <span class="nb">echo</span>
</span><span class='line'>Applications Desktop Documents ...
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the difference between <code>cat</code> and <code>xargs</code>. cat adds newlines - it treats each space separated word as a different input. xargs instead removes newlines - part of its purpose is to normalize blank spaces, tabs and newlines into a consistent format.</p>

<p>You can see that better by passing the argument -1 to ls, which prints the arguments one per line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -1 ~/
</span><span class='line'>Applications
</span><span class='line'>Desktop
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span> ls -1 ~/ | xargs <span class="nb">echo</span>
</span><span class='line'>Applications Desktop Documents ...
</span></code></pre></td></tr></table></div></figure>


<h2>Further reading</h2>

<p>There is lots of info around the web, here are a couple of simple links:</p>

<ul>
<li><a href="https://gigaom.com/2009/07/01/dig-into-unix-standard-streams/">Dig Into Unix: Standard Streams</a></li>
<li><a href="http://www.westwind.com/reference/OS-X/commandline/pipes.html">Pipes and Redirects</a> and</li>
<li><a href="http://www.december.com/unix/tutor/pipesfilters.html">Intro to Unix: Pipes and Filters</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to generate an error in a Gulp task]]></title>
    <link href="http://gotofritz.net/blog/geekery/how-to-generate-error-in-gulp-task/"/>
    <updated>2015-04-27T12:29:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/how-to-generate-an-error-in-a-gulp-task</id>
    <content type="html"><![CDATA[<p>When writing a Gulp task that doesn&#8217;t involve streams, how do you throw an error?</p>

<!--more-->


<h2>Motivation</h2>

<p><a href="http://gulpjs.com/">Gulp</a>, is a popular javscript build tool for web development. Gulp tasks are based around <a href="https://github.com/substack/stream-handbook">streams</a>; but sometimes streams are too clumsy when you want to do a simple task. Say you want to check a JSON file conforms to certain rule. It&#8217;s much easier to require the file, check what you need to check, and then throw an error if you need to than it is opening the file as a stream and validating it.</p>

<p>But how do you throw an error in Gulp &#8220;the proper way&#8221;, i.e. not just by throwing a standard JS error?</p>

<h2>Validating a package.json file</h2>

<p>I had to validate a package json file to make sure all packages were installed with the <code>--save-dev</code> flag. In other words, all dependencies should be in exact semantic format, <code>1.2.3</code> instead of the default <code>^1.2.3</code> or <code>~1.2.3</code>. It is simply enough in plain node, without the extra complication of streams - you require package.json, then test each dependency.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="nx">taskName</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-util&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">packageData</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./package.json&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// we test all three types of dependencies</span>
</span><span class='line'>  <span class="p">[</span><span class="s2">&quot;devDependencies&quot;</span><span class="p">,</span> <span class="s2">&quot;dependencies&quot;</span><span class="p">,</span> <span class="s2">&quot;optionalDependencies&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="nx">validateAnObj</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// load each dependency</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">packageData</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="nx">validateAField</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// check the version complies</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">hasInvalidVersion</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/[^0-9.]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">packageData</span><span class="p">[</span><span class="nx">key</span><span class="p">][</span><span class="nx">field</span><span class="p">]));</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// this is where the magic happens</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">hasInvalidVersion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">gutil</span><span class="p">.</span><span class="nx">PluginError</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">plugin</span><span class="o">:</span> <span class="nx">taskName</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">message</span><span class="o">:</span> <span class="nx">field</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot; has non compliant versioning: &quot;</span> <span class="o">+</span> <span class="nx">packageData</span><span class="p">[</span><span class="nx">key</span><span class="p">][</span><span class="nx">field</span><span class="p">]</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Throwing an error with gulp</h2>

<p>The easiset way to throw a gulp-y error is to use <code>gulp-util</code>, which has a PluginError that can be thrown. <a href="https://github.com/gulpjs/gulp-util#user-content-new-pluginerrorpluginname-message-options">Here is the documentation for PluginError</a>. <code>plugin</code> and <code>message</code> get outputted on separate lines; they are basically a title message and a message body.
There are also a couple of options that can be passed, do refer to the documentation.</p>

<h2>This is not using gulp the way it was meant to be</h2>

<p>There isn&#8217;t always a benefit in turning simple problems into a stream problem. Hope this info was useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X DNS lookups too slow for local hosts]]></title>
    <link href="http://gotofritz.net/blog/geekery/os-x-dns-lookups-too-slow-for-local-hosts/"/>
    <updated>2015-04-24T13:03:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/os-x-dns-lookups-too-slow-for-local-hosts</id>
    <content type="html"><![CDATA[<p>I have several local hosts set up on my dev OS X machine. The browser hangs for several seconds while trying to load them. Which doesn&#8217;t make any sense, since they are local.</p>

<!--more-->


<p>The solution is to change the <code>/etc/hosts</code> file so that all hosts are on one line, the very first line where localhost is defined.</p>

<p>In other words, change from this&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1       localhost
</span><span class='line'>255.255.255.255 broadcasthost
</span><span class='line'>::1             localhost
</span><span class='line'>fe80::1%lo0     localhost
</span><span class='line'>127.0.0.1       my-host.dev
</span><span class='line'>127.0.0.1       another-host.dev
</span><span class='line'>127.0.0.1       oh-that-host.dev
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;to this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1       localhost  my-host.dev another-host.dev oh-that-host.dev
</span><span class='line'>255.255.255.255 broadcasthost
</span><span class='line'>::1             localhost
</span><span class='line'>fe80::1%lo0     localhost
</span></code></pre></td></tr></table></div></figure>


<p>It <em>still</em> doesn&#8217;t make sense, but it works and that&#8217;s all that matters.</p>

<p><small>Answer from <a href="http://stackoverflow.com/questions/10064581/how-can-i-eliminate-slow-resolving-loading-of-localhost-virtualhost-a-2-3-secon">Stack Overflow</a></small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Alfred workflows for web development]]></title>
    <link href="http://gotofritz.net/blog/geekery/alfred-workflows-web-development/"/>
    <updated>2015-04-04T01:51:00+02:00</updated>
    <id>http://gotofritz.net/blog/geekery/useful-alfred-color-tool-for-os-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.alfredapp.com/">Alfred App</a> has a couple of useful workflow for web developers.</p>

<!--more-->


<p>Alfred App is one of the things that make working on OS X a pleasure. There are lots of useful workflows out there, and using a folder inside Dropbox as the sync folder (Preferences &gt; Advanced &gt; Syncing.. ) allows me to share them among my work and home machines.</p>

<p>Here are a couple of workflows I find useful for web development.</p>

<h2><a href="http://www.packal.org/workflow/colors">Colors</a></h2>

<p>I can type a color directly into Alfred, say <code>#ff0000</code> or <code>rgb 1,45,87</code> and Alfred will show me a list of conversions in other formats, with a swatch in the color itself. Use <code>c name</code> for a CSS color name, say <code>c red</code>.</p>

<h2><a href="https://github.com/willfarrell/alfred-encode-decode-workflow">Encode/Decode</a></h2>

<p>Quickly convert from HTML or URL encoded text to plain by typing <code>decode &lt;TEXT&gt;</code>, or viceversa with  <code>encode &lt;TEXT&gt;</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Directory listings in Apache 2.4]]></title>
    <link href="http://gotofritz.net/blog/geekery/directory-listings-in-apache-2-4/"/>
    <updated>2015-03-07T23:14:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/directory-listings-in-apache-2-dot-4</id>
    <content type="html"><![CDATA[<p>Yosemite updates Apache to 2.4. A couple of things stopped working from my previous installation, including autogenerated directory listings. Here&#8217;s how I got them back.</p>

<!--more-->


<h2>Yosemite updates Apache from 2.2 to 2.4</h2>

<p>It copies the old httpd.conf to <code>/etc/apache2/httpd.conf~previous</code> and replaces it with a vannilla one. Annoying, but not too painful to replace, and it doesn&#8217;t touch the vhosts. <a href="https://httpd.apache.org/docs/trunk/new_features_2_4.html">The list of 2.4 changes</a> doesn&#8217;t include anything I actually use. Sadly that doesn&#8217;t mean nothing important has changed - rather, they didn&#8217;t bother to list things that matter to me.</p>

<h2>Apache &#8220;directory listing forbidden&#8221;</h2>

<p>I used to rely on the automatic directory listings generated by mod_autoidex, but they has stopped working. The logs give the message <code>No matching DirectoryIndex (index.html) found, and server-generated directory index forbidden by Options directive</code>. &#8220;Impossible!&#8221; I cry, the settings are right, and they always worked.</p>

<p>This is the DocumentRoot fragment of httpd.conf. <code>+Indexes</code> is the bit which is supposed to turn on auto-indexing. I use /Library/&#8230; for not so important documents I need to put under a webserver for whatever reason.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>DocumentRoot <span class="s2">&quot;/Library/WebServer/Documents&quot;</span>
</span><span class='line'>&lt;Directory <span class="s2">&quot;/Library/WebServer/Documents&quot;</span>&gt;
</span><span class='line'>    Options +Indexes +FollowSymLinks
</span><span class='line'>    <span class="c"># etc</span>
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>And this is one of the virtual hosts. For serious dev work, I put my vhosts somewhere other than /Library/&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    DocumentRoot <span class="s2">&quot;/pth/to/somewhere/completely/different&quot;</span>
</span><span class='line'>    ServerName my-virtual-host.dev
</span><span class='line'>    ErrorLog <span class="s2">&quot;/private/var/log/apache2/my-virtual-host.dev-error_log&quot;</span>
</span><span class='line'>    CustomLog <span class="s2">&quot;/private/var/log/apache2/my-virtual-host.dev-access_log&quot;</span> common
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>What has changed is that now the options for DocumentRoot don&#8217;t automatically carry over to folders which are not subdirectories of DocumentRoot. This can be easily fixed by changing virtual hosts to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>    DocumentRoot <span class="s2">&quot;/pth/to/somewhere/completely/different&quot;</span>
</span><span class='line'>    ServerName my-virtual-host.dev
</span><span class='line'>    ErrorLog <span class="s2">&quot;/private/var/log/apache2/my-virtual-host.dev-error_log&quot;</span>
</span><span class='line'>    CustomLog <span class="s2">&quot;/private/var/log/apache2/my-virtual-host.dev-access_log&quot;</span> common
</span><span class='line'>    &lt;Directory <span class="s2">&quot;/pth/to/somewhere/completely/different&quot;</span>&gt;
</span><span class='line'>        Options +Indexes
</span><span class='line'>    &lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>That proves what the problem is, but it sucks having to do that for every virtual host. The solution is to add the directive for the common parent folder of all my virtual hosts in httpd.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;Directory <span class="s2">&quot;/parent/of/somewhere/completely/different&quot;</span>&gt;
</span><span class='line'>    Options +Indexes
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Restart apache and all is well</h2>

<p>After a <code>sudo apachectl restart</code> everything works fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting local IP Address into a file with bash]]></title>
    <link href="http://gotofritz.net/blog/geekery/injecting-local-ip-address-into-a-file-with-bash/"/>
    <updated>2014-03-03T14:24:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/injecting-local-ip-address-into-a-file-with-bash</id>
    <content type="html"><![CDATA[<p>Sometimes there are some config file on which you have no control for which you need to change an IP address to that of your current dev machine. Here&#8217;s how I fix that with a bash script.</p>

<!--more-->


<h2>A good place to put bash scripts</h2>

<p>I have a <code>bin</code> folder inside my user folder. It is in the <code>$PATH</code>, meaning every script file in there can be executed as a script from anywhere. In there I create a text file called <code>fix-config-PROJECT</code>. Yes, I make one per project, because I hard code the paths of the files to change. This could evolve into something more complex if the need arises, but the setup I have so far has served me well so far.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano ~/bin/fix-config-PROJECT
</span></code></pre></td></tr></table></div></figure>


<h2>The script file</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">IP</span><span class="o">=</span><span class="sb">`</span>ifconfig  | grep inet | grep -v inet6 | tail -n1 | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">for </span>file in <span class="s2">&quot;launchpad/src/main/tomcat/conf/context.xml&quot;</span> <span class="s2">&quot;path/to/etc.xml&quot;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span>svn revert <span class="nv">$file</span>
</span><span class='line'>  sed -i <span class="s2">&quot;&quot;</span> <span class="s2">&quot;s/localhost/$IP/g&quot;</span> <span class="nv">$file</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Script breakdown</h2>

<dl class="code-breakdown">
  <dt class="long-line">IP=`ifconfig  | grep inet | grep -v inet6 | tail -n1 | awk &#8216;{print $2}&#8217;`</dt>
  <dd class="long-line">This runs a series of commands one after the other, using <code>|</code> to pass the result of each command to the next. The ` at the beginning and end put the result into a variable <code>$IP</code></dd>

  <dt>ifconfig</dt>
  <dd>From the manpage: &#8220;The ifconfig utility is used to assign an address to a network interface and/or configure network interface parameters&#8221;. Used without parameters, it returns a big chunk of text with current settings. The IP address is in there somewhere.</dd>

  <dt>grep inet</dt>
  <dt>grep -v inet6</dt>
  <dd>extracts the lines from that chunk of text which have &#8220;inet&#8221; in it, but not &#8220;inet6&#8221;</dd>

  <dt>tail -n1</dt>
  <dd>take the last of these lines</dd>

  <dt>awk &#8216;{print $2}&#8217;</dt>
  <dd>At this point we have a string like <code>inet 192.168.2.108 netmask 0xffffff00 broadcast 192.168.2.255</code>. Awk can be used to extract the 192&#8230; from it. Awk is a utilities that processes a line of text by splitting into fields where blank spaces are - it is used for handling database dumps etc. In this case, it is basically saying that after it&#8217;s split the line into fields (which it does automatically), it should print out the second field and throw away the rest.</dd>

  <dt class="long-line">for file in &#8220;launchpad/src/main/tomcat/conf/context.xml&#8221; &#8220;path/to/etc.xml&#8221;</dt>
  <dd class="long-line">The files I need to process are listed out one after the other. This is good enough for my use case. Note that the paths are not absolute, so that I can use the same command in different svn branches. What this line does is looping through each file</dd>

  <dt class="long-line">svn revert $file</dt>
  <dt class="long-line">sed -i &#8220;&#8221; &#8220;s/localhost/$IP/g&#8221; $file</dt>
  <dd class="long-line">First I revert the latest changes, then I make new ones. This time using sed, a utility which processes text a line at the time, transforming it on the way. The <code>-i ""</code> means to process the file in place (as opposed to create a copy), without creating a backup. The substitution is simple, I simply change all occurrences of <code>locahost</code> with the IP address from earlier</dd>
</dl>


<h2>Running the script</h2>

<p>I can now run the script from anywhere on my machine, usually as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>PROJECT/branch_x
</span><span class='line'>fix-config-PROJECT
</span></code></pre></td></tr></table></div></figure>


<p>and then all the config files are changed as required, and I can access my local version site from tablets etc using the IP address.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ensure an explicit number of expectations within a spec in Jasmine]]></title>
    <link href="http://gotofritz.net/blog/geekery/ensure-explicit-number-expectations-within-spec-jasmine/"/>
    <updated>2014-02-22T23:36:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/ensure-an-explicit-number-of-expectations-within-a-spec-in-jasmine</id>
    <content type="html"><![CDATA[<p>QUnit and js-test-driver have ways of specifying how many assertions will be executed in a test case (<a href="http://api.qunitjs.com/expect/" title="[new window] expect() | QUnit API Documentation" target="_blank">expect</a> and <a href="https://code.google.com/p/js-test-driver/wiki/TestCase#expectAsserts(count)" title="[new window] TestCase - js-test-driver - Everything you need to know about writing tests. - Remote javascript console - Google Project Hosting" target="_blank">expectAsserts</a> respectively) but Jasmine doesn&#8217;t. But it can still be done - here&#8217;s how.</p>

<!--more-->


<h2>Why would anyone want to count the number of expectations in a test</h2>

<p>Normally Jasmine specs are pretty straightforward (assuming <code>systemUnderTest</code> is defined somewhere else):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;does something really simple&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">actual</span> <span class="o">=</span> <span class="nx">systemUnderTest</span><span class="p">.</span><span class="nx">methodToTest</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">actual</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are no branches, and you know Jasmine is going to run through all the expectations, one after the other. But it gets more complicated when loops, or async specs are involved. For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;throws exceptions for all wrong arguments&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">methodWrapper</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span> <span class="nx">systemUnderTest</span><span class="p">.</span><span class="nx">methodToTest</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">wrongArgs</span> <span class="o">=</span> <span class="p">[</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>                   <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(),</span>
</span><span class='line'>                   <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                   <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>                   <span class="s2">&quot;a string&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                   <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                   <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">123</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>                   <span class="p">]</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wrongArgs</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">methodWrapper</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)).</span><span class="nx">toThrow</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here there is an array of arguments, each of which should cause the method <code>systemUnderTest.methodToTest</code> to throw an exception. So we loop through the array of arguments, and run an expectation for each of them.
We have to wrap the call to <code>methodToTest</code> in a function, because it&#8217;s going to throw an exception - the function <code>methodWrapper</code> is a partial used by <code>.bind</code> to generate such a function. So each iteration of the loop will have a new version of <code>methodWrapper</code>, with <code>arg</code> already plugged in. Then <code>expect</code> can run it, catch the exception, and pass the test.</p>

<p>This is still simple enough, there is only one loop with one statement in it. But you can see how this could easily get out of hand. What if the code was a little more complex, and for some reason the expectations in the loop are not executed? It will look like the test has passed, and you will never know the difference.</p>

<p>The js-test-driver page gives another example, using workers (adapted to Jasmine)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;shows what could go wrong&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">listener</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">work</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">work</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">doSomething</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">perform</span><span class="p">(</span><span class="nx">doSomething</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the worker doesn&#8217;t call the callback function, then the expectation will not be run, and once again, it will look like the test has passed when it hasn&#8217;t.</p>

<h2>Defining the number of expected assertions in Jasmine</h2>

<p>Jasmine doesn&#8217;t have a simple way to tell how many assertions have run, but digging into the code I found where to get the information - in version 1.3 at least: <code>this.env.currentSpec.results_.passedCount</code></p>

<p>Therefore the examples above can be rewritten as</p>

<figure class='code'><figcaption><span>mark:20</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;throws exceptions for all wrong arguments&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">methodWrapper</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span> <span class="nx">systemUnderTest</span><span class="p">.</span><span class="nx">methodToTest</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">wrongArgs</span> <span class="o">=</span> <span class="p">[</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>                   <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">(),</span>
</span><span class='line'>                   <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                   <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>                   <span class="s2">&quot;a string&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                   <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>                   <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">123</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>                   <span class="p">]</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wrongArgs</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">methodWrapper</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)).</span><span class="nx">toThrow</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">currentSpec</span><span class="p">.</span><span class="nx">results_</span><span class="p">.</span><span class="nx">passedCount</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">wrongArgs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span>mark:10</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s2">&quot;shows what could go wrong&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">listener</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">work</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">work</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">doSomething</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">worker</span><span class="p">.</span><span class="nx">perform</span><span class="p">(</span><span class="nx">doSomething</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">currentSpec</span><span class="p">.</span><span class="nx">results_</span><span class="p">.</span><span class="nx">passedCount</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A note on compatibility</h2>

<p>This will work, but only in version 1.3 - with the new 2.0 version <a href="https://groups.google.com/forum/#!topic/jasmine-js/IyZt7cPmBWo" title="[new window] Removing .currentSpec from env breaks tests in jasmine 2.0 (since rc5) - Google Groups" target="_blank"><code>currentSpec</code> remains private</a>.
There was a plugin, <a href="https://github.com/dfkaye/jasmine-intercept" title="[new window] dfkaye/jasmine-intercept" target="_blank">jasmine-intercept</a>,  that used to take care of that, but apparently it has now been superseded by <a href="https://github.com/dfkaye/where.js" title="[new window] dfkaye/where.js" target="_blank">where.js</a>. I haven&#8217;t had a chance to look into that yet, for now I&#8217;ll stick to my quick and dirty workaround.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inserting CDATA into a Sublime Text snippet]]></title>
    <link href="http://gotofritz.net/blog/geekery/inserting-cdata-into-sublime-text-snippet/"/>
    <updated>2014-01-05T18:20:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/inserting-cdata-into-a-sublime-text-snippet</id>
    <content type="html"><![CDATA[<p><a href="https://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/snippets.html" title="[new window] Snippets — Sublime Text Unofficial Documentation" target="_blank">Sublime Text Snippets</a> are XML documents, with the body of the snippet is inside a CDATA node. So what happens if you need the body of the snippet to have a CDATA of its own?</p>

<!--more-->


<p>XML documents cannot have nested CDATA blocks, so any CDATA you put in there is illegal. The problem is not the opening tag itself, the <code>&lt;![CDATA[</code>, which is just treated as part of the data, i.e. ignored. The problem is the closing tag, the <code>]]&gt;</code> - it will close the CDATA before you need to, so any XML after that will likely be invalid.</p>

<h2>Sublime insertion points</h2>

<p>Snippets can have insertion points: <code>${1}</code> is where the cursor will be when you create the snippet, <code>${2}</code> is where it will go to when you tab, and so on. Incidentally, <code>${1:DEFAULT}</code> will select the word &#8220;DEFAULT&#8221; and leave the cursor there, so you can just tab away or type something to overwrite it. Anyway.</p>

<p>It turns out you can use the insertion point <code>${-1}</code> too. It does absolutely nothing at all, which is just what we need - something that can be used to break up the <code>]]&gt;</code> without doing anything at all.</p>

<p>Let&#8217;s say we want to create a snippet with this body, and we want &#8220;TITLE&#8221; to be selectable, with one insertion point in each CDATA</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span><span class="cp">&lt;![CDATA[TITLE]]&gt;</span><span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;description&gt;</span><span class="cp">&lt;![CDATA[]]&gt;</span><span class="nt">&lt;/description&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source&gt;</span><span class="cp">&lt;![CDATA[]]&gt;</span><span class="nt">&lt;/source&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how to use the <code>${-1}</code> trick to break up the CDATA blocks - note how it goes in between the <code>]]</code> and the closing <code>&gt;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;snippet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span>
</span><span class='line'><span class="cp">  &lt;title&gt;&lt;![CDATA[${1:TITLE}]]${-1}&gt;&lt;/title&gt;</span>
</span><span class='line'><span class="cp">  &lt;description&gt;&lt;![CDATA[$2]]${-1}&gt;&lt;/description&gt;</span>
</span><span class='line'><span class="cp">  &lt;source&gt;&lt;![CDATA[$3]]${-1}&gt;&lt;/source&gt;</span>
</span><span class='line'><span class="cp">]]&gt;</span><span class="nt">&lt;/content&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span>
</span><span class='line'><span class="nt">&lt;/snippet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s rather simple once you know how.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a DVD with a Play All button in iDVD]]></title>
    <link href="http://gotofritz.net/blog/geekery/creating-dvd-play-all-button-idvd/"/>
    <updated>2013-12-29T01:46:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/creating-a-dvd-with-a-play-all-button-in-idvd</id>
    <content type="html"><![CDATA[<p>iDVD? Yeah, so passè, it doesn&#8217;t even ship with Mountain Lion anymore. Still, if you are lucky enough to have an older version of OS X, here&#8217;s how to add a &#8220;Play All&#8221; button to a DVD created with iDVD.</p>

<!--more-->


<h2>Use iMovie, not iDVD to create your movie</h2>

<p>The simple truth is that iDVD does not have the ability to add a &#8220;Play all&#8221; button to a DVD. Strange but true. And don&#8217;t expect that to change any time soon - Apple is phasing out iDVD altogether (DVD are soooo 2000s, aren&#8217;t they?) in fact Mountain Lion doesn&#8217;t ship with it.</p>

<p>Luckily, iDVD can read iMovie&#8217;s chapter markers, and when it sees them it will automagically create a &#8220;Play all&#8221; and a &#8220;Select scene&#8221; buttons. Therefore, you need to work with iMovie.</p>

<h2>Use MPEG Streamclip to get your videos into iMovie</h2>

<p>If you have problems importing videos into iMovie, for example the movies are greyed out in the file dialog that comes up when you try <code>Import &gt; Movies...</code>, it&#8217;s probably because of the wrong codec. Even if the clip is a .mov file, it may still use a codec that is not supported (.mov is a container for all sort of movie formats, rather than a format of its own).</p>

<p>The best thing to do in those cases is to use a video converter such as <a href="http://www.squared5.com/svideo/mpeg-streamclip-mac.html" title="[new window] Squared 5 - MPEG Streamclip video converter for Mac OS X" target="_blank">MPEG Streamclip</a> to convert the videos first. I like using MPEG streamclip to do some initial clean up of clips as well, as you can use the arrow keys to move one frame at the time.</p>

<h2>Setup iMovie to use the Chapter Markers</h2>

<p>Chapter markers are not enabled by default in iMovie, you need to go into the Preferences and tick &#8220;Show Advanced Tools&#8221; for some reason. Then you&#8217;ll see two tiny orange boxes in the top right corner of the timeline panel. The rightmost one is the markers button. Note that it is not a button as such, it is more like a constant supply of markers that you need to drag to wherever you need it on the timeline. Normally that would be at the beginning of each of the clip.</p>

<p>Experienced users suggests you don&#8217;t use a marker for the very beginning of the movie (one will be generated for you, and if you do it will confuse iDVD), nor inside a fade between clips.</p>

<h2>Export the movie for iDVD</h2>

<p>After you are done with editing the video and adding markers wherever you need them, select <code>Share &gt; Media Browser...</code> and tick on &#8220;large&#8221;. This is supposed to give better results than just sharing to iDVD directly.</p>

<h2>Import the movie into iDVD</h2>

<p>iMovie is an odd program, it doesn&#8217;t have a &#8220;Save&#8221; menu entry, and when you share a movie it doesn&#8217;t even allow you to name it or decide where to put it. So, where does iMovie store the media browser files? They go inside the project file itself, which you&#8217;ll find in your Movies folder inside <code>iMovie Projects</code>. The project file in there (of type .rcproject, if you have Show File Suffix enabled in OS X) is actually a folder in disguise. To open it as a folder, right click on it, select <code>Show Package Contents</code>, and a Finder window will open there. The movie you are looking for is inside the <code>Movies</code> folder, called <code>large.m4v</code>.</p>

<p>Now you can open iDVD, set up your project (make sure the aspect ration, 4:3 or 16:9, is the same as you have set in iMovie!), and choose <code>Import &gt; Movies</code>. When the file dialog is open, go to Finder, and drag the large.m4v file onto the iDVD file dialog.</p>

<p>Now you have your DVD setup with all the buttons you need, which you can rename and move about as required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding useful text shortcuts to the clipboard with Alfred]]></title>
    <link href="http://gotofritz.net/blog/geekery/adding-text-shortcuts-clipboard-alfred/"/>
    <updated>2013-12-15T17:30:00+01:00</updated>
    <id>http://gotofritz.net/blog/geekery/adding-useful-test-shortcuts-to-the-clipboard-with-alfred</id>
    <content type="html"><![CDATA[<p><a href="http://support.alfredapp.com/workflows" title="[new window] Workflows - Alfred v2 Support" target="_blank">Alfred Worflows</a> can be useful in creating strings and pushing them immediately to the clipboard, so that they are available without moving the hands from the keyboard.</p>

<!--more-->


<h2>Pushing formatted date into the clipboard</h2>

<p>For example, I often use dates in the format <code>[yyyy-mm-dd]</code> in various documents and homemade apps. Since it is something I do quite regularly, an Alfred workflow may be a good idea. Something simple, something that works out a date and puts it in the clipboard, and pastes it in the frontmost app if it can.</p>

<h2>Creating the a workflow</h2>

<p>In Alfred, in the workflows tab, I clicked on the <code>+</code> button at the bottom of the <abbr title="Left Hand Side">LHS</a> panel (1), and selected <code>blank workflow</code>. I filled in some details and clicked <code>save</code></p>

<p>Then I clicked on the plus button at the top of the <abbr title="Right Hand Side">RHS</a> panel (2), and selected from &#8216;inputs&#8217; a &#8216;keyword&#8217;, from &#8216;actions&#8217; a &#8216;run script&#8217;, and from &#8216;outputs&#8217; a &#8216;copy to clipboard&#8217;. I dragged from the kink in &#8216;keyword&#8217; to &#8216;run script&#8217; to connect them, then did the same to connect &#8216;copy to clipboard&#8217;. Then I double clicked on each in turn to edit.</p>

<p><img src="http://gotofritz.net/images/adding-text-shortcuts-clipboard-alfred.png" width="800" height="522" title="[screenshot of the alfred workflow]" ></p>

<h2>The Keyword object</h2>

<p>The <code>keyword</code> argument is the actual keyword that you type in Alfred to run the command, I used &#8220;today&#8221;. I also ticked &#8220;with space&#8221; and selected &#8220;argument optional&#8221; from the dropdown next to it. This means that I can call the argument as &#8220;today +2&#8221; or &#8220;today y&#8221; for example, to get the date two days from now or yesterday. &#8220;With space&#8221; ensures the space between &#8220;today&#8221; and the next work is considered part of the keyword and not the argument. The argument itself can be used in the script as the special string &#8220;{query}&#8221;.</p>

<p>The <code>title</code> and <code>subtext</code> appear in the Alfred dropdown when you are typing the keyword.</p>

<h2>The Run Script object</h2>

<p>I selected PHP as the language, left all the checkboxes as they were, and entered the following script. Not the most sophisticated script, but before I invest time to make it slick I want to make sure I actually need it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">switch (&quot;{query}&quot;) {</span>
</span><span class='line'><span class="x">  case &quot;tomorrow&quot;:</span>
</span><span class='line'><span class="x">  case &quot;1&quot;:</span>
</span><span class='line'><span class="x">  case &quot;+1&quot;:</span>
</span><span class='line'><span class="x">  case &quot;t&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+1, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;2&quot;:</span>
</span><span class='line'><span class="x">  case &quot;+2&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+2, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;3&quot;:</span>
</span><span class='line'><span class="x">  case &quot;+3&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+3, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;-2&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+2, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;-3&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+3, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;yesterday&quot;:</span>
</span><span class='line'><span class="x">  case &quot;-1&quot;:</span>
</span><span class='line'><span class="x">  case &quot;y&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)-1, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;next\\ week&quot;:</span>
</span><span class='line'><span class="x">  case &quot;7&quot;:</span>
</span><span class='line'><span class="x">  case &quot;+7&quot;:</span>
</span><span class='line'><span class="x">  case &quot;n&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)+7, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  case &quot;last\\ week&quot;:</span>
</span><span class='line'><span class="x">  case &quot;l&quot;:</span>
</span><span class='line'><span class="x">  case &quot;-7&quot;:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;)-7, date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  default:</span>
</span><span class='line'><span class="x">    $when = mktime(0, 0, 0, date(&quot;m&quot;)  , date(&quot;d&quot;), date(&quot;Y&quot;));</span>
</span><span class='line'><span class="x">    break;</span>
</span><span class='line'>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">print date(&quot;[Y-m-d]&quot;, $when);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Copy To Clipboard object</h2>

<p>For this I only ticked the &#8216;Automatically paste to front most app&#8217; tickbox.</p>

<h2>Job done</h2>

<p>Creating the workflow was quite quick, and since I store the Alfred preferences in my Dropbox folder, I can easily share them with my work computer. So now I can easily type &#8220;ALT-Space today RETURN&#8221; to insert a date in the document I am writing, or any of the more complicated ones like &#8220;today -3&#8221; or &#8220;today n&#8221; (although I probably won&#8217;t need those).</p>
]]></content>
  </entry>
  
</feed>
